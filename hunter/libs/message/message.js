var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var aone;
(function (aone) {
    /**
     *
     * @author guoshanhe@ibrat.io
     *
     */
    var AoneReqHeader = (function () {
        function AoneReqHeader(id) {
            this.id = id;
            this.sequence = 0;
            this.reserve = 0;
            this.srcid = 0;
            this.session = 0;
        }
        AoneReqHeader.prototype.parse_bytes = function (decoder) {
            var decoder_ = decoder;
            // id
            this.id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sequence
            this.sequence = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // reserve
            this.reserve = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // srcid
            this.srcid = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // session
            this.session = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneReqHeader.prototype.to_bytes = function (encoder) {
            // id
            encoder.write_fixuint32(this.id);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // reserve
            encoder.write_fixuint32(this.reserve);
            // srcid
            encoder.write_fixuint32(this.srcid);
            // session
            encoder.write_fixuint32(this.session);
            return true;
        };
        return AoneReqHeader;
    }());
    aone.AoneReqHeader = AoneReqHeader;
    __reflect(AoneReqHeader.prototype, "aone.AoneReqHeader", ["aone.AoneHeader"]);
    var AoneRespHeader = (function () {
        function AoneRespHeader(id) {
            this.id = id;
            this.sequence = 0;
            this.reserve = 0;
            this.result = 0;
        }
        AoneRespHeader.prototype.parse_bytes = function (decoder) {
            var decoder_ = decoder;
            // id
            this.id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sequence
            this.sequence = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // reserve
            this.reserve = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // result
            this.result = decoder_.read_int32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneRespHeader.prototype.to_bytes = function (encoder) {
            // id
            encoder.write_fixuint32(this.id);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // reserve
            encoder.write_fixuint32(this.reserve);
            // result
            encoder.write_int32(this.result);
            return true;
        };
        return AoneRespHeader;
    }());
    aone.AoneRespHeader = AoneRespHeader;
    __reflect(AoneRespHeader.prototype, "aone.AoneRespHeader", ["aone.AoneHeader"]);
    var MessageFactory = (function () {
        function MessageFactory() {
            this.map = {};
        }
        MessageFactory.getInstance = function () {
            if (MessageFactory.instance_ == null) {
                MessageFactory.instance_ = new MessageFactory();
            }
            return MessageFactory.instance_;
        };
        MessageFactory.prototype.register = function (id, creator) {
            if (this.map.hasOwnProperty(id.toString())) {
                console.error("repeated register message id ", id);
                return;
            }
            this.map[id] = creator;
        };
        MessageFactory.prototype.create = function (id) {
            if (this.map.hasOwnProperty(id.toString())) {
                return this.map[id].call();
            }
            else {
                return null;
            }
        };
        return MessageFactory;
    }());
    aone.MessageFactory = MessageFactory;
    __reflect(MessageFactory.prototype, "aone.MessageFactory");
})(aone || (aone = {}));
//Date: 2019-1
//File: msg_cg_mall.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 商城列表请求
    // request MallList
    ////////////////////////////////////////////////////////////////////////////////
    var MallListReqBody = (function () {
        function MallListReqBody() {
            this.type = 0; // 商城类型
        }
        MallListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MallListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MallListReqBody;
    }());
    message.MallListReqBody = MallListReqBody;
    __reflect(MallListReqBody.prototype, "message.MallListReqBody", ["aone.AoneBody"]);
    var MallListRequest = (function () {
        function MallListRequest() {
            this.header = new aone.AoneReqHeader(MallListRequest.ID);
            this.body = new MallListReqBody();
        }
        MallListRequest.prototype.parse_bytes = function (decoder) { return false; };
        MallListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MallListRequest.ID = 34000;
        return MallListRequest;
    }());
    message.MallListRequest = MallListRequest;
    __reflect(MallListRequest.prototype, "message.MallListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 商城列表回复
    // response MallList
    ////////////////////////////////////////////////////////////////////////////////
    var MallListRespBody = (function () {
        function MallListRespBody() {
            this.items = []; // 商品列表
            this.gameInfo = new message.GameInfo();
        }
        MallListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.MallItem());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MallListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MallListRespBody;
    }());
    message.MallListRespBody = MallListRespBody;
    __reflect(MallListRespBody.prototype, "message.MallListRespBody", ["aone.AoneBody"]);
    var MallListResponse = (function () {
        function MallListResponse() {
            this.header = new aone.AoneRespHeader(MallListResponse.ID);
            this.body = new MallListRespBody();
        }
        MallListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MallListResponse.prototype.to_bytes = function (encoder) { return false; };
        MallListResponse.ID = 34001;
        return MallListResponse;
    }());
    message.MallListResponse = MallListResponse;
    __reflect(MallListResponse.prototype, "message.MallListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买商品请求
    // request MallBuy
    ////////////////////////////////////////////////////////////////////////////////
    var MallBuyReqBody = (function () {
        function MallBuyReqBody() {
            this.type = 0; // 商城类型
            this.mallId = 0; // 商品id
            this.count = 0; // 购买数量
        }
        MallBuyReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MallBuyReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // mallId
            encoder.write_fixuint32(this.mallId);
            // count
            encoder.write_fixuint32(this.count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MallBuyReqBody;
    }());
    message.MallBuyReqBody = MallBuyReqBody;
    __reflect(MallBuyReqBody.prototype, "message.MallBuyReqBody", ["aone.AoneBody"]);
    var MallBuyRequest = (function () {
        function MallBuyRequest() {
            this.header = new aone.AoneReqHeader(MallBuyRequest.ID);
            this.body = new MallBuyReqBody();
        }
        MallBuyRequest.prototype.parse_bytes = function (decoder) { return false; };
        MallBuyRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MallBuyRequest.ID = 34002;
        return MallBuyRequest;
    }());
    message.MallBuyRequest = MallBuyRequest;
    __reflect(MallBuyRequest.prototype, "message.MallBuyRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买商品回复
    // response MallBuy
    ////////////////////////////////////////////////////////////////////////////////
    var MallBuyRespBody = (function () {
        function MallBuyRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        MallBuyRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MallBuyRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MallBuyRespBody;
    }());
    message.MallBuyRespBody = MallBuyRespBody;
    __reflect(MallBuyRespBody.prototype, "message.MallBuyRespBody", ["aone.AoneBody"]);
    var MallBuyResponse = (function () {
        function MallBuyResponse() {
            this.header = new aone.AoneRespHeader(MallBuyResponse.ID);
            this.body = new MallBuyRespBody();
        }
        MallBuyResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MallBuyResponse.prototype.to_bytes = function (encoder) { return false; };
        MallBuyResponse.ID = 34003;
        return MallBuyResponse;
    }());
    message.MallBuyResponse = MallBuyResponse;
    __reflect(MallBuyResponse.prototype, "message.MallBuyResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 商城列表刷新请求
    // request MallListRefresh
    ////////////////////////////////////////////////////////////////////////////////
    var MallListRefreshReqBody = (function () {
        function MallListRefreshReqBody() {
            this.type = 0; // 商城类型
        }
        MallListRefreshReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MallListRefreshReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MallListRefreshReqBody;
    }());
    message.MallListRefreshReqBody = MallListRefreshReqBody;
    __reflect(MallListRefreshReqBody.prototype, "message.MallListRefreshReqBody", ["aone.AoneBody"]);
    var MallListRefreshRequest = (function () {
        function MallListRefreshRequest() {
            this.header = new aone.AoneReqHeader(MallListRefreshRequest.ID);
            this.body = new MallListRefreshReqBody();
        }
        MallListRefreshRequest.prototype.parse_bytes = function (decoder) { return false; };
        MallListRefreshRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MallListRefreshRequest.ID = 34004;
        return MallListRefreshRequest;
    }());
    message.MallListRefreshRequest = MallListRefreshRequest;
    __reflect(MallListRefreshRequest.prototype, "message.MallListRefreshRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 商城列表刷新回复
    // response MallListRefresh
    ////////////////////////////////////////////////////////////////////////////////
    var MallListRefreshRespBody = (function () {
        function MallListRefreshRespBody() {
            this.gameInfo = new message.GameInfo();
            this.items = []; // 商品列表
        }
        MallListRefreshRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.MallItem());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MallListRefreshRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MallListRefreshRespBody;
    }());
    message.MallListRefreshRespBody = MallListRefreshRespBody;
    __reflect(MallListRefreshRespBody.prototype, "message.MallListRefreshRespBody", ["aone.AoneBody"]);
    var MallListRefreshResponse = (function () {
        function MallListRefreshResponse() {
            this.header = new aone.AoneRespHeader(MallListRefreshResponse.ID);
            this.body = new MallListRefreshRespBody();
        }
        MallListRefreshResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MallListRefreshResponse.prototype.to_bytes = function (encoder) { return false; };
        MallListRefreshResponse.ID = 34005;
        return MallListRefreshResponse;
    }());
    message.MallListRefreshResponse = MallListRefreshResponse;
    __reflect(MallListRefreshResponse.prototype, "message.MallListRefreshResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(MallListRequest.ID, function () { return new MallListRequest(); });
    aone.MessageFactory.getInstance().register(MallListResponse.ID, function () { return new MallListResponse(); });
    aone.MessageFactory.getInstance().register(MallBuyRequest.ID, function () { return new MallBuyRequest(); });
    aone.MessageFactory.getInstance().register(MallBuyResponse.ID, function () { return new MallBuyResponse(); });
    aone.MessageFactory.getInstance().register(MallListRefreshRequest.ID, function () { return new MallListRefreshRequest(); });
    aone.MessageFactory.getInstance().register(MallListRefreshResponse.ID, function () { return new MallListRefreshResponse(); });
})(message || (message = {}));
// TypeScript file
var aone;
(function (aone) {
    // aone协议二进制解码器
    var BinaryDecoder = (function () {
        function BinaryDecoder(bytes) {
            this.bytes_ = new Uint8Array(1); // 缓存数据
            this.cursor_ = 0; // 当前读取到的位置
            this.is_error_ = false; // 是否发生了错误
            if (bytes != null && bytes != undefined) {
                this.bytes_ = bytes;
                this.cursor_ = 0;
                this.is_error_ = false;
            }
        }
        Object.defineProperty(BinaryDecoder.prototype, "length", {
            get: function () {
                return this.bytes_.byteLength;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryDecoder.prototype, "position", {
            get: function () {
                return this.cursor_;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryDecoder.prototype, "remain", {
            get: function () {
                return this.bytes_.byteLength - this.cursor_;
            },
            enumerable: true,
            configurable: true
        });
        BinaryDecoder.prototype.eof = function () {
            return this.cursor_ >= this.bytes_.byteLength;
        };
        BinaryDecoder.prototype.set_position = function (pos) {
            if (pos > this.bytes_.byteLength)
                return false;
            this.cursor_ = pos;
            return true;
        };
        BinaryDecoder.prototype.has_error = function () {
            return this.is_error_;
        };
        BinaryDecoder.prototype.subdecoder = function (begin, length) {
            var bytes = this.bytes_.subarray(begin, begin + length);
            return new BinaryDecoder(bytes);
        };
        BinaryDecoder.prototype.read_fixuint32 = function () {
            if (this.is_error_ || (this.cursor_ + 4 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var a = this.bytes_[this.cursor_ + 0];
            var b = this.bytes_[this.cursor_ + 1];
            var c = this.bytes_[this.cursor_ + 2];
            var d = this.bytes_[this.cursor_ + 3];
            this.cursor_ += 4;
            return ((a << 0) | (b << 8) | (c << 16) | (d << 24)) >>> 0;
        };
        BinaryDecoder.prototype.read_bool = function () {
            if (this.is_error_ || (this.cursor_ + 1 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return false;
            }
            return !!this.bytes_[this.cursor_++];
        };
        BinaryDecoder.prototype.read_byte = function () {
            return this.read_uint8();
        };
        BinaryDecoder.prototype.read_int8 = function () {
            if (this.is_error_ || (this.cursor_ + 1 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var a = this.bytes_[this.cursor_ + 0];
            this.cursor_ += 1;
            return (a << 24) >> 24;
        };
        BinaryDecoder.prototype.read_uint8 = function () {
            if (this.is_error_ || (this.cursor_ + 1 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var a = this.bytes_[this.cursor_ + 0];
            this.cursor_ += 1;
            return a;
        };
        BinaryDecoder.prototype.read_int16 = function () {
            if (this.is_error_ || (this.cursor_ + 2 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var a = this.bytes_[this.cursor_ + 0];
            var b = this.bytes_[this.cursor_ + 1];
            this.cursor_ += 2;
            return (((a << 0) | (b << 8)) << 16) >> 16;
        };
        BinaryDecoder.prototype.read_uint16 = function () {
            if (this.is_error_ || (this.cursor_ + 2 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var a = this.bytes_[this.cursor_ + 0];
            var b = this.bytes_[this.cursor_ + 1];
            this.cursor_ += 2;
            return (a << 0) | (b << 8);
        };
        BinaryDecoder.prototype.read_int32 = function () {
            if (this.is_error_ || (this.cursor_ + 4 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var a = this.bytes_[this.cursor_ + 0];
            var b = this.bytes_[this.cursor_ + 1];
            var c = this.bytes_[this.cursor_ + 2];
            var d = this.bytes_[this.cursor_ + 3];
            this.cursor_ += 4;
            return ((a << 0) | (b << 8) | (c << 16) | (d << 24));
        };
        BinaryDecoder.prototype.read_uint32 = function () {
            if (this.is_error_ || (this.cursor_ + 4 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var a = this.bytes_[this.cursor_ + 0];
            var b = this.bytes_[this.cursor_ + 1];
            var c = this.bytes_[this.cursor_ + 2];
            var d = this.bytes_[this.cursor_ + 3];
            this.cursor_ += 4;
            return ((a << 0) | (b << 8) | (c << 16) | (d << 24));
        };
        BinaryDecoder.prototype.read_int64 = function () {
            if (this.is_error_ || (this.cursor_ + 8 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var a = this.bytes_[this.cursor_ + 0];
            var b = this.bytes_[this.cursor_ + 1];
            var c = this.bytes_[this.cursor_ + 2];
            var d = this.bytes_[this.cursor_ + 3];
            this.cursor_ += 8;
            return ((a << 0) | (b << 8) | (c << 16) | (d << 24));
        };
        BinaryDecoder.prototype.read_uint64 = function () {
            if (this.is_error_ || (this.cursor_ + 8 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var a = this.bytes_[this.cursor_ + 0];
            var b = this.bytes_[this.cursor_ + 1];
            var c = this.bytes_[this.cursor_ + 2];
            var d = this.bytes_[this.cursor_ + 3];
            this.cursor_ += 8;
            return ((a << 0) | (b << 8) | (c << 16) | (d << 24)) >>> 0;
        };
        BinaryDecoder.prototype.read_float32 = function () {
            if (this.is_error_ || (this.cursor_ + 4 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var tmp = new Uint32Array(1);
            tmp[0] = this.read_fixuint32();
            var result = new Float32Array(tmp.buffer)[0];
            return result;
        };
        BinaryDecoder.prototype.read_float64 = function () {
            if (this.is_error_ || (this.cursor_ + 8 > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return 0;
            }
            var tmp = new Uint32Array(2);
            tmp[0] = this.read_fixuint32();
            tmp[1] = this.read_fixuint32();
            var result = new Float64Array(tmp.buffer)[0];
            return result;
        };
        BinaryDecoder.prototype.read_enum = function () {
            return this.read_int32();
        };
        BinaryDecoder.prototype.read_string = function () {
            // 先读长度
            var length = this.read_fixuint32();
            if (this.is_error_ || (this.cursor_ + length > this.bytes_.byteLength)) {
                this.is_error_ = true;
                return "";
            }
            var end = this.cursor_ + length;
            var codeUnits = [];
            while (this.cursor_ < end) {
                var c = this.bytes_[this.cursor_++];
                if (c < 128) {
                    codeUnits.push(c);
                }
                else if (c < 192) {
                    // UTF-8 continuation mark. We are out of sync. This
                    // might happen if we attempted to read a character
                    // with more than four bytes.
                    continue;
                }
                else if (c < 224) {
                    var c2 = this.bytes_[this.cursor_++];
                    codeUnits.push(((c & 31) << 6) | (c2 & 63));
                }
                else if (c < 240) {
                    var c2 = this.bytes_[this.cursor_++];
                    var c3 = this.bytes_[this.cursor_++];
                    codeUnits.push(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                }
                else if (c < 248) {
                    var c2 = this.bytes_[this.cursor_++];
                    var c3 = this.bytes_[this.cursor_++];
                    var c4 = this.bytes_[this.cursor_++];
                    // Characters written on 4 bytes have 21 bits for a codepoint. 
                    // We can't fit that on 16bit characters, so we use surrogates.
                    var codepoint = ((c & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63);
                    // Surrogates formula from wikipedia.
                    // 1. Subtract 0x10000 from codepoint
                    codepoint -= 0x10000;
                    // 2. Split this into the high 10-bit value and the low 10-bit value
                    // 3. Add 0xD800 to the high value to form the high surrogate
                    // 4. Add 0xDC00 to the low value to form the low surrogate:
                    var low = (codepoint & 1023) + 0xDC00;
                    var high = ((codepoint >> 10) & 1023) + 0xD800;
                    codeUnits.push(high, low);
                }
            }
            // String.fromCharCode.apply is faster than manually appending characters on
            // Chrome 25+, and generates no additional cons string garbage.
            var result = String.fromCharCode.apply(null, codeUnits);
            return result;
        };
        BinaryDecoder.prototype.read_bool_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_bool());
            }
            return result;
        };
        BinaryDecoder.prototype.read_byte_array = function (len) {
            return this.read_uint8_array(len);
        };
        BinaryDecoder.prototype.read_int8_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_int8());
            }
            return result;
        };
        BinaryDecoder.prototype.read_uint8_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_uint8());
            }
            return result;
        };
        BinaryDecoder.prototype.read_int16_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_int16());
            }
            return result;
        };
        BinaryDecoder.prototype.read_uint16_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_uint16());
            }
            return result;
        };
        BinaryDecoder.prototype.read_int32_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_int32());
            }
            return result;
        };
        BinaryDecoder.prototype.read_uint32_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_fixuint32());
            }
            return result;
        };
        BinaryDecoder.prototype.read_int64_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_int64());
            }
            return result;
        };
        BinaryDecoder.prototype.read_uint64_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_uint64());
            }
            return result;
        };
        BinaryDecoder.prototype.read_float32_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_float32());
            }
            return result;
        };
        BinaryDecoder.prototype.read_float64_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_float64());
            }
            return result;
        };
        BinaryDecoder.prototype.read_enum_array = function (len) {
            return this.read_int32_array(len);
        };
        BinaryDecoder.prototype.read_string_array = function (len) {
            var result = new Array();
            for (var i = 0; i < len; i++) {
                result.push(this.read_string());
            }
            return result;
        };
        BinaryDecoder.prototype.read_bool_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_bool());
            }
            return result;
        };
        BinaryDecoder.prototype.read_byte_vector = function () {
            return this.read_uint8_vector();
        };
        BinaryDecoder.prototype.read_int8_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_int8());
            }
            return result;
        };
        BinaryDecoder.prototype.read_uint8_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_uint8());
            }
            return result;
        };
        BinaryDecoder.prototype.read_int16_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_int16());
            }
            return result;
        };
        BinaryDecoder.prototype.read_uint16_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_uint16());
            }
            return result;
        };
        BinaryDecoder.prototype.read_int32_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_int32());
            }
            return result;
        };
        BinaryDecoder.prototype.read_uint32_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_fixuint32());
            }
            return result;
        };
        BinaryDecoder.prototype.read_int64_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_int64());
            }
            return result;
        };
        BinaryDecoder.prototype.read_uint64_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_uint64());
            }
            return result;
        };
        BinaryDecoder.prototype.read_float32_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_float32());
            }
            return result;
        };
        BinaryDecoder.prototype.read_float64_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_float64());
            }
            return result;
        };
        BinaryDecoder.prototype.read_enum_vector = function () {
            return this.read_int32_vector();
        };
        BinaryDecoder.prototype.read_string_vector = function () {
            var result = new Array();
            var len = this.read_fixuint32();
            if (this.is_error_)
                return result;
            for (var i = 0; i < len; i++) {
                result.push(this.read_string());
            }
            return result;
        };
        return BinaryDecoder;
    }());
    aone.BinaryDecoder = BinaryDecoder;
    __reflect(BinaryDecoder.prototype, "aone.BinaryDecoder");
})(aone || (aone = {}));
//Date: 2020-1
//File: msg_cg_activity.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了运营活动功能
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取所有活动请求
    // request QueryActivitys
    ////////////////////////////////////////////////////////////////////////////////
    var QueryActivitysReqBody = (function () {
        function QueryActivitysReqBody() {
            this.type = 0; // ACT_TYPE_NONO表示拉取所有
        }
        QueryActivitysReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryActivitysReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryActivitysReqBody;
    }());
    message.QueryActivitysReqBody = QueryActivitysReqBody;
    __reflect(QueryActivitysReqBody.prototype, "message.QueryActivitysReqBody", ["aone.AoneBody"]);
    var QueryActivitysRequest = (function () {
        function QueryActivitysRequest() {
            this.header = new aone.AoneReqHeader(QueryActivitysRequest.ID);
            this.body = new QueryActivitysReqBody();
        }
        QueryActivitysRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryActivitysRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryActivitysRequest.ID = 10000;
        return QueryActivitysRequest;
    }());
    message.QueryActivitysRequest = QueryActivitysRequest;
    __reflect(QueryActivitysRequest.prototype, "message.QueryActivitysRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct ActivityInfoZip
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityInfoZip = (function () {
        function ActivityInfoZip() {
            this.activities = []; // 所有活动信息
        }
        ActivityInfoZip.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // activities
            if (decoder_.eof())
                return true;
            var activities_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < activities_count; i++) {
                this.activities.push(new message.ActivityInfo());
                if (!this.activities[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityInfoZip.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // activities
            encoder.write_fixuint32(Object.keys(this.activities).length);
            for (var k in this.activities) {
                if (!this.activities[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityInfoZip;
    }());
    message.ActivityInfoZip = ActivityInfoZip;
    __reflect(ActivityInfoZip.prototype, "message.ActivityInfoZip", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取所有活动回复
    // response QueryActivitys
    ////////////////////////////////////////////////////////////////////////////////
    var QueryActivitysRespBody = (function () {
        function QueryActivitysRespBody() {
            this.activities = []; // 所有活动信息 ActivityInfoZip
        }
        QueryActivitysRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // activities
            if (decoder_.eof())
                return true;
            this.activities = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryActivitysRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryActivitysRespBody;
    }());
    message.QueryActivitysRespBody = QueryActivitysRespBody;
    __reflect(QueryActivitysRespBody.prototype, "message.QueryActivitysRespBody", ["aone.AoneBody"]);
    var QueryActivitysResponse = (function () {
        function QueryActivitysResponse() {
            this.header = new aone.AoneRespHeader(QueryActivitysResponse.ID);
            this.body = new QueryActivitysRespBody();
        }
        QueryActivitysResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryActivitysResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryActivitysResponse.ID = 10001;
        return QueryActivitysResponse;
    }());
    message.QueryActivitysResponse = QueryActivitysResponse;
    __reflect(QueryActivitysResponse.prototype, "message.QueryActivitysResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取连续登陆奖励请求
    // 领取每日充值奖励请求
    // 领取累积充值奖励请求
    // 领取累计消耗奖励请求
    // 领取兑换活动奖励请求
    // 购买vip商城物品请求
    // 购买折扣商城物品请求
    // 真情回馈领取或购买物品请求
    // 领取许愿树奖励请求
    // 领取活动酒馆奖励
    // request ActivityReward
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityRewardReqBody = (function () {
        function ActivityRewardReqBody() {
            this.type = 0; // 活动类型
            this.index = 0; // 活动索引
            this.rewardIndex = 0; // 奖励索引(15传任务类型)(23传奖励阶段)
            this.is_gift = false; // 是否是礼包(13)
        }
        ActivityRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ActivityRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // index
            encoder.write_fixuint32(this.index);
            // rewardIndex
            encoder.write_fixuint32(this.rewardIndex);
            // is_gift
            encoder.write_bool(this.is_gift);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityRewardReqBody;
    }());
    message.ActivityRewardReqBody = ActivityRewardReqBody;
    __reflect(ActivityRewardReqBody.prototype, "message.ActivityRewardReqBody", ["aone.AoneBody"]);
    var ActivityRewardRequest = (function () {
        function ActivityRewardRequest() {
            this.header = new aone.AoneReqHeader(ActivityRewardRequest.ID);
            this.body = new ActivityRewardReqBody();
        }
        ActivityRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        ActivityRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ActivityRewardRequest.ID = 10010;
        return ActivityRewardRequest;
    }());
    message.ActivityRewardRequest = ActivityRewardRequest;
    __reflect(ActivityRewardRequest.prototype, "message.ActivityRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 统一回复
    // response ActivityReward
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityRewardRespBody = (function () {
        function ActivityRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ActivityRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ActivityRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ActivityRewardRespBody;
    }());
    message.ActivityRewardRespBody = ActivityRewardRespBody;
    __reflect(ActivityRewardRespBody.prototype, "message.ActivityRewardRespBody", ["aone.AoneBody"]);
    var ActivityRewardResponse = (function () {
        function ActivityRewardResponse() {
            this.header = new aone.AoneRespHeader(ActivityRewardResponse.ID);
            this.body = new ActivityRewardRespBody();
        }
        ActivityRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        ActivityRewardResponse.ID = 10011;
        return ActivityRewardResponse;
    }());
    message.ActivityRewardResponse = ActivityRewardResponse;
    __reflect(ActivityRewardResponse.prototype, "message.ActivityRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取冲级活动排名信息请求
    // request UpLevelRank
    ////////////////////////////////////////////////////////////////////////////////
    var UpLevelRankReqBody = (function () {
        function UpLevelRankReqBody() {
            this.index = 0; // 活动索引
        }
        UpLevelRankReqBody.prototype.parse_bytes = function (decoder) { return false; };
        UpLevelRankReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return UpLevelRankReqBody;
    }());
    message.UpLevelRankReqBody = UpLevelRankReqBody;
    __reflect(UpLevelRankReqBody.prototype, "message.UpLevelRankReqBody", ["aone.AoneBody"]);
    var UpLevelRankRequest = (function () {
        function UpLevelRankRequest() {
            this.header = new aone.AoneReqHeader(UpLevelRankRequest.ID);
            this.body = new UpLevelRankReqBody();
        }
        UpLevelRankRequest.prototype.parse_bytes = function (decoder) { return false; };
        UpLevelRankRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        UpLevelRankRequest.ID = 10020;
        return UpLevelRankRequest;
    }());
    message.UpLevelRankRequest = UpLevelRankRequest;
    __reflect(UpLevelRankRequest.prototype, "message.UpLevelRankRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取冲级活动排名信息回复
    // response UpLevelRank
    ////////////////////////////////////////////////////////////////////////////////
    var UpLevelRankRespBody = (function () {
        function UpLevelRankRespBody() {
            this.rankItem = []; // 角色信息
        }
        UpLevelRankRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // rankItem
            if (decoder_.eof())
                return true;
            var rankItem_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rankItem_count; i++) {
                this.rankItem.push(new message.ActivityUpLevelRankItem());
                if (!this.rankItem[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UpLevelRankRespBody.prototype.to_bytes = function (encoder) { return false; };
        return UpLevelRankRespBody;
    }());
    message.UpLevelRankRespBody = UpLevelRankRespBody;
    __reflect(UpLevelRankRespBody.prototype, "message.UpLevelRankRespBody", ["aone.AoneBody"]);
    var UpLevelRankResponse = (function () {
        function UpLevelRankResponse() {
            this.header = new aone.AoneRespHeader(UpLevelRankResponse.ID);
            this.body = new UpLevelRankRespBody();
        }
        UpLevelRankResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UpLevelRankResponse.prototype.to_bytes = function (encoder) { return false; };
        UpLevelRankResponse.ID = 10021;
        return UpLevelRankResponse;
    }());
    message.UpLevelRankResponse = UpLevelRankResponse;
    __reflect(UpLevelRankResponse.prototype, "message.UpLevelRankResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 刷新许愿树奖励请求
    // request RefreshWishTree
    ////////////////////////////////////////////////////////////////////////////////
    var RefreshWishTreeReqBody = (function () {
        function RefreshWishTreeReqBody() {
            this.index = 0; // 活动索引
        }
        RefreshWishTreeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RefreshWishTreeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RefreshWishTreeReqBody;
    }());
    message.RefreshWishTreeReqBody = RefreshWishTreeReqBody;
    __reflect(RefreshWishTreeReqBody.prototype, "message.RefreshWishTreeReqBody", ["aone.AoneBody"]);
    var RefreshWishTreeRequest = (function () {
        function RefreshWishTreeRequest() {
            this.header = new aone.AoneReqHeader(RefreshWishTreeRequest.ID);
            this.body = new RefreshWishTreeReqBody();
        }
        RefreshWishTreeRequest.prototype.parse_bytes = function (decoder) { return false; };
        RefreshWishTreeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RefreshWishTreeRequest.ID = 10022;
        return RefreshWishTreeRequest;
    }());
    message.RefreshWishTreeRequest = RefreshWishTreeRequest;
    __reflect(RefreshWishTreeRequest.prototype, "message.RefreshWishTreeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 刷新许愿树奖励回复
    // response RefreshWishTree
    ////////////////////////////////////////////////////////////////////////////////
    var RefreshWishTreeRespBody = (function () {
        function RefreshWishTreeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RefreshWishTreeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RefreshWishTreeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RefreshWishTreeRespBody;
    }());
    message.RefreshWishTreeRespBody = RefreshWishTreeRespBody;
    __reflect(RefreshWishTreeRespBody.prototype, "message.RefreshWishTreeRespBody", ["aone.AoneBody"]);
    var RefreshWishTreeResponse = (function () {
        function RefreshWishTreeResponse() {
            this.header = new aone.AoneRespHeader(RefreshWishTreeResponse.ID);
            this.body = new RefreshWishTreeRespBody();
        }
        RefreshWishTreeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RefreshWishTreeResponse.prototype.to_bytes = function (encoder) { return false; };
        RefreshWishTreeResponse.ID = 10023;
        return RefreshWishTreeResponse;
    }());
    message.RefreshWishTreeResponse = RefreshWishTreeResponse;
    __reflect(RefreshWishTreeResponse.prototype, "message.RefreshWishTreeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置许愿树下次奖励请求
    // request SetWishTreeReward
    ////////////////////////////////////////////////////////////////////////////////
    var SetWishTreeRewardReqBody = (function () {
        function SetWishTreeRewardReqBody() {
            this.index = 0; // 活动索引
            this.rewardIndex = 0; // 奖励索引(从1开始)
        }
        SetWishTreeRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SetWishTreeRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // rewardIndex
            encoder.write_fixuint32(this.rewardIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SetWishTreeRewardReqBody;
    }());
    message.SetWishTreeRewardReqBody = SetWishTreeRewardReqBody;
    __reflect(SetWishTreeRewardReqBody.prototype, "message.SetWishTreeRewardReqBody", ["aone.AoneBody"]);
    var SetWishTreeRewardRequest = (function () {
        function SetWishTreeRewardRequest() {
            this.header = new aone.AoneReqHeader(SetWishTreeRewardRequest.ID);
            this.body = new SetWishTreeRewardReqBody();
        }
        SetWishTreeRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        SetWishTreeRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SetWishTreeRewardRequest.ID = 10024;
        return SetWishTreeRewardRequest;
    }());
    message.SetWishTreeRewardRequest = SetWishTreeRewardRequest;
    __reflect(SetWishTreeRewardRequest.prototype, "message.SetWishTreeRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置许愿树下次奖励回复
    // response SetWishTreeReward
    ////////////////////////////////////////////////////////////////////////////////
    var SetWishTreeRewardRespBody = (function () {
        function SetWishTreeRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SetWishTreeRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SetWishTreeRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SetWishTreeRewardRespBody;
    }());
    message.SetWishTreeRewardRespBody = SetWishTreeRewardRespBody;
    __reflect(SetWishTreeRewardRespBody.prototype, "message.SetWishTreeRewardRespBody", ["aone.AoneBody"]);
    var SetWishTreeRewardResponse = (function () {
        function SetWishTreeRewardResponse() {
            this.header = new aone.AoneRespHeader(SetWishTreeRewardResponse.ID);
            this.body = new SetWishTreeRewardRespBody();
        }
        SetWishTreeRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SetWishTreeRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        SetWishTreeRewardResponse.ID = 10025;
        return SetWishTreeRewardResponse;
    }());
    message.SetWishTreeRewardResponse = SetWishTreeRewardResponse;
    __reflect(SetWishTreeRewardResponse.prototype, "message.SetWishTreeRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 充值排行请求
    // request ChargeRank
    ////////////////////////////////////////////////////////////////////////////////
    var ChargeRankReqBody = (function () {
        function ChargeRankReqBody() {
            this.index = 0; // 活动索引
        }
        ChargeRankReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ChargeRankReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChargeRankReqBody;
    }());
    message.ChargeRankReqBody = ChargeRankReqBody;
    __reflect(ChargeRankReqBody.prototype, "message.ChargeRankReqBody", ["aone.AoneBody"]);
    var ChargeRankRequest = (function () {
        function ChargeRankRequest() {
            this.header = new aone.AoneReqHeader(ChargeRankRequest.ID);
            this.body = new ChargeRankReqBody();
        }
        ChargeRankRequest.prototype.parse_bytes = function (decoder) { return false; };
        ChargeRankRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChargeRankRequest.ID = 10026;
        return ChargeRankRequest;
    }());
    message.ChargeRankRequest = ChargeRankRequest;
    __reflect(ChargeRankRequest.prototype, "message.ChargeRankRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 充值排行回复
    // response ChargeRank
    ////////////////////////////////////////////////////////////////////////////////
    var ChargeRankRespBody = (function () {
        function ChargeRankRespBody() {
            this.items = [];
        }
        ChargeRankRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.RankBaseItemInfo());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChargeRankRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ChargeRankRespBody;
    }());
    message.ChargeRankRespBody = ChargeRankRespBody;
    __reflect(ChargeRankRespBody.prototype, "message.ChargeRankRespBody", ["aone.AoneBody"]);
    var ChargeRankResponse = (function () {
        function ChargeRankResponse() {
            this.header = new aone.AoneRespHeader(ChargeRankResponse.ID);
            this.body = new ChargeRankRespBody();
        }
        ChargeRankResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChargeRankResponse.prototype.to_bytes = function (encoder) { return false; };
        ChargeRankResponse.ID = 10027;
        return ChargeRankResponse;
    }());
    message.ChargeRankResponse = ChargeRankResponse;
    __reflect(ChargeRankResponse.prototype, "message.ChargeRankResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神秘商店金币购买请求
    // request SecretMallBuy
    ////////////////////////////////////////////////////////////////////////////////
    var SecretMallBuyReqBody = (function () {
        function SecretMallBuyReqBody() {
            this.index = 0; // 活动索引
            this.mall_id = 0;
            this.item_id = 0;
        }
        SecretMallBuyReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SecretMallBuyReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // mall_id
            encoder.write_fixuint32(this.mall_id);
            // item_id
            encoder.write_fixuint32(this.item_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SecretMallBuyReqBody;
    }());
    message.SecretMallBuyReqBody = SecretMallBuyReqBody;
    __reflect(SecretMallBuyReqBody.prototype, "message.SecretMallBuyReqBody", ["aone.AoneBody"]);
    var SecretMallBuyRequest = (function () {
        function SecretMallBuyRequest() {
            this.header = new aone.AoneReqHeader(SecretMallBuyRequest.ID);
            this.body = new SecretMallBuyReqBody();
        }
        SecretMallBuyRequest.prototype.parse_bytes = function (decoder) { return false; };
        SecretMallBuyRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SecretMallBuyRequest.ID = 10028;
        return SecretMallBuyRequest;
    }());
    message.SecretMallBuyRequest = SecretMallBuyRequest;
    __reflect(SecretMallBuyRequest.prototype, "message.SecretMallBuyRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神秘商店金币购买回复
    // response SecretMallBuy
    ////////////////////////////////////////////////////////////////////////////////
    var SecretMallBuyRespBody = (function () {
        function SecretMallBuyRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SecretMallBuyRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SecretMallBuyRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SecretMallBuyRespBody;
    }());
    message.SecretMallBuyRespBody = SecretMallBuyRespBody;
    __reflect(SecretMallBuyRespBody.prototype, "message.SecretMallBuyRespBody", ["aone.AoneBody"]);
    var SecretMallBuyResponse = (function () {
        function SecretMallBuyResponse() {
            this.header = new aone.AoneRespHeader(SecretMallBuyResponse.ID);
            this.body = new SecretMallBuyRespBody();
        }
        SecretMallBuyResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SecretMallBuyResponse.prototype.to_bytes = function (encoder) { return false; };
        SecretMallBuyResponse.ID = 10029;
        return SecretMallBuyResponse;
    }());
    message.SecretMallBuyResponse = SecretMallBuyResponse;
    __reflect(SecretMallBuyResponse.prototype, "message.SecretMallBuyResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动副本挑战怪物请求
    // request ActivityInstanceResult
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityInstanceResultReqBody = (function () {
        function ActivityInstanceResultReqBody() {
            this.sequence = 0; // 战斗序号
            this.instanceId = 0; // 副本Id
            this.activityIndex = 0; // 活动索引
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
        }
        ActivityInstanceResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ActivityInstanceResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // activityIndex
            encoder.write_fixuint32(this.activityIndex);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityInstanceResultReqBody;
    }());
    message.ActivityInstanceResultReqBody = ActivityInstanceResultReqBody;
    __reflect(ActivityInstanceResultReqBody.prototype, "message.ActivityInstanceResultReqBody", ["aone.AoneBody"]);
    var ActivityInstanceResultRequest = (function () {
        function ActivityInstanceResultRequest() {
            this.header = new aone.AoneReqHeader(ActivityInstanceResultRequest.ID);
            this.body = new ActivityInstanceResultReqBody();
        }
        ActivityInstanceResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        ActivityInstanceResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ActivityInstanceResultRequest.ID = 10030;
        return ActivityInstanceResultRequest;
    }());
    message.ActivityInstanceResultRequest = ActivityInstanceResultRequest;
    __reflect(ActivityInstanceResultRequest.prototype, "message.ActivityInstanceResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动副本挑战怪物响应
    // response ActivityInstanceResult
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityInstanceResultRespBody = (function () {
        function ActivityInstanceResultRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
            this.battle_star = 0; // 星级
        }
        ActivityInstanceResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // battle_star
            if (decoder_.eof())
                return true;
            this.battle_star = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActivityInstanceResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ActivityInstanceResultRespBody;
    }());
    message.ActivityInstanceResultRespBody = ActivityInstanceResultRespBody;
    __reflect(ActivityInstanceResultRespBody.prototype, "message.ActivityInstanceResultRespBody", ["aone.AoneBody"]);
    var ActivityInstanceResultResponse = (function () {
        function ActivityInstanceResultResponse() {
            this.header = new aone.AoneRespHeader(ActivityInstanceResultResponse.ID);
            this.body = new ActivityInstanceResultRespBody();
        }
        ActivityInstanceResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityInstanceResultResponse.prototype.to_bytes = function (encoder) { return false; };
        ActivityInstanceResultResponse.ID = 10031;
        return ActivityInstanceResultResponse;
    }());
    message.ActivityInstanceResultResponse = ActivityInstanceResultResponse;
    __reflect(ActivityInstanceResultResponse.prototype, "message.ActivityInstanceResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动副本购买次数请求
    // request ActivityInstanceBuyTime
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityInstanceBuyTimeReqBody = (function () {
        function ActivityInstanceBuyTimeReqBody() {
        }
        ActivityInstanceBuyTimeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ActivityInstanceBuyTimeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityInstanceBuyTimeReqBody;
    }());
    message.ActivityInstanceBuyTimeReqBody = ActivityInstanceBuyTimeReqBody;
    __reflect(ActivityInstanceBuyTimeReqBody.prototype, "message.ActivityInstanceBuyTimeReqBody", ["aone.AoneBody"]);
    var ActivityInstanceBuyTimeRequest = (function () {
        function ActivityInstanceBuyTimeRequest() {
            this.header = new aone.AoneReqHeader(ActivityInstanceBuyTimeRequest.ID);
            this.body = new ActivityInstanceBuyTimeReqBody();
        }
        ActivityInstanceBuyTimeRequest.prototype.parse_bytes = function (decoder) { return false; };
        ActivityInstanceBuyTimeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ActivityInstanceBuyTimeRequest.ID = 10032;
        return ActivityInstanceBuyTimeRequest;
    }());
    message.ActivityInstanceBuyTimeRequest = ActivityInstanceBuyTimeRequest;
    __reflect(ActivityInstanceBuyTimeRequest.prototype, "message.ActivityInstanceBuyTimeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动副本购买次数回复
    // response ActivityInstanceBuyTime
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityInstanceBuyTimeRespBody = (function () {
        function ActivityInstanceBuyTimeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ActivityInstanceBuyTimeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ActivityInstanceBuyTimeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ActivityInstanceBuyTimeRespBody;
    }());
    message.ActivityInstanceBuyTimeRespBody = ActivityInstanceBuyTimeRespBody;
    __reflect(ActivityInstanceBuyTimeRespBody.prototype, "message.ActivityInstanceBuyTimeRespBody", ["aone.AoneBody"]);
    var ActivityInstanceBuyTimeResponse = (function () {
        function ActivityInstanceBuyTimeResponse() {
            this.header = new aone.AoneRespHeader(ActivityInstanceBuyTimeResponse.ID);
            this.body = new ActivityInstanceBuyTimeRespBody();
        }
        ActivityInstanceBuyTimeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityInstanceBuyTimeResponse.prototype.to_bytes = function (encoder) { return false; };
        ActivityInstanceBuyTimeResponse.ID = 10033;
        return ActivityInstanceBuyTimeResponse;
    }());
    message.ActivityInstanceBuyTimeResponse = ActivityInstanceBuyTimeResponse;
    __reflect(ActivityInstanceBuyTimeResponse.prototype, "message.ActivityInstanceBuyTimeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动副本兑换物品请求
    // request ActivityInstanceExchange
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityInstanceExchangeReqBody = (function () {
        function ActivityInstanceExchangeReqBody() {
            this.activityIndex = 0; // 活动索引
            this.zone = 0; // 兑换下标
            this.num = 0; // 兑换次数
        }
        ActivityInstanceExchangeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ActivityInstanceExchangeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // activityIndex
            encoder.write_fixuint32(this.activityIndex);
            // zone
            encoder.write_fixuint32(this.zone);
            // num
            encoder.write_fixuint32(this.num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityInstanceExchangeReqBody;
    }());
    message.ActivityInstanceExchangeReqBody = ActivityInstanceExchangeReqBody;
    __reflect(ActivityInstanceExchangeReqBody.prototype, "message.ActivityInstanceExchangeReqBody", ["aone.AoneBody"]);
    var ActivityInstanceExchangeRequest = (function () {
        function ActivityInstanceExchangeRequest() {
            this.header = new aone.AoneReqHeader(ActivityInstanceExchangeRequest.ID);
            this.body = new ActivityInstanceExchangeReqBody();
        }
        ActivityInstanceExchangeRequest.prototype.parse_bytes = function (decoder) { return false; };
        ActivityInstanceExchangeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ActivityInstanceExchangeRequest.ID = 10034;
        return ActivityInstanceExchangeRequest;
    }());
    message.ActivityInstanceExchangeRequest = ActivityInstanceExchangeRequest;
    __reflect(ActivityInstanceExchangeRequest.prototype, "message.ActivityInstanceExchangeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动副本兑换物品回复
    // response ActivityInstanceExchange
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityInstanceExchangeRespBody = (function () {
        function ActivityInstanceExchangeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ActivityInstanceExchangeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ActivityInstanceExchangeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ActivityInstanceExchangeRespBody;
    }());
    message.ActivityInstanceExchangeRespBody = ActivityInstanceExchangeRespBody;
    __reflect(ActivityInstanceExchangeRespBody.prototype, "message.ActivityInstanceExchangeRespBody", ["aone.AoneBody"]);
    var ActivityInstanceExchangeResponse = (function () {
        function ActivityInstanceExchangeResponse() {
            this.header = new aone.AoneRespHeader(ActivityInstanceExchangeResponse.ID);
            this.body = new ActivityInstanceExchangeRespBody();
        }
        ActivityInstanceExchangeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityInstanceExchangeResponse.prototype.to_bytes = function (encoder) { return false; };
        ActivityInstanceExchangeResponse.ID = 10035;
        return ActivityInstanceExchangeResponse;
    }());
    message.ActivityInstanceExchangeResponse = ActivityInstanceExchangeResponse;
    __reflect(ActivityInstanceExchangeResponse.prototype, "message.ActivityInstanceExchangeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动酒馆卡池抽卡请求
    // request ActivityLotterPond
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityLotterPondReqBody = (function () {
        function ActivityLotterPondReqBody() {
            this.activityIndex = 0; // 活动索引
            this.soda_num = 0; // 抽奖次数
        }
        ActivityLotterPondReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ActivityLotterPondReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // activityIndex
            encoder.write_fixuint32(this.activityIndex);
            // soda_num
            encoder.write_fixuint32(this.soda_num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityLotterPondReqBody;
    }());
    message.ActivityLotterPondReqBody = ActivityLotterPondReqBody;
    __reflect(ActivityLotterPondReqBody.prototype, "message.ActivityLotterPondReqBody", ["aone.AoneBody"]);
    var ActivityLotterPondRequest = (function () {
        function ActivityLotterPondRequest() {
            this.header = new aone.AoneReqHeader(ActivityLotterPondRequest.ID);
            this.body = new ActivityLotterPondReqBody();
        }
        ActivityLotterPondRequest.prototype.parse_bytes = function (decoder) { return false; };
        ActivityLotterPondRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ActivityLotterPondRequest.ID = 10036;
        return ActivityLotterPondRequest;
    }());
    message.ActivityLotterPondRequest = ActivityLotterPondRequest;
    __reflect(ActivityLotterPondRequest.prototype, "message.ActivityLotterPondRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动酒馆卡池抽卡回复
    // response ActivityLotterPond
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityLotterPondRespBody = (function () {
        function ActivityLotterPondRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ActivityLotterPondRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ActivityLotterPondRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ActivityLotterPondRespBody;
    }());
    message.ActivityLotterPondRespBody = ActivityLotterPondRespBody;
    __reflect(ActivityLotterPondRespBody.prototype, "message.ActivityLotterPondRespBody", ["aone.AoneBody"]);
    var ActivityLotterPondResponse = (function () {
        function ActivityLotterPondResponse() {
            this.header = new aone.AoneRespHeader(ActivityLotterPondResponse.ID);
            this.body = new ActivityLotterPondRespBody();
        }
        ActivityLotterPondResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityLotterPondResponse.prototype.to_bytes = function (encoder) { return false; };
        ActivityLotterPondResponse.ID = 10037;
        return ActivityLotterPondResponse;
    }());
    message.ActivityLotterPondResponse = ActivityLotterPondResponse;
    __reflect(ActivityLotterPondResponse.prototype, "message.ActivityLotterPondResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取排行活动排行请求
    // request QueryActivityRank
    ////////////////////////////////////////////////////////////////////////////////
    var QueryActivityRankReqBody = (function () {
        function QueryActivityRankReqBody() {
            this.index = 0; // 活动索引
        }
        QueryActivityRankReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryActivityRankReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryActivityRankReqBody;
    }());
    message.QueryActivityRankReqBody = QueryActivityRankReqBody;
    __reflect(QueryActivityRankReqBody.prototype, "message.QueryActivityRankReqBody", ["aone.AoneBody"]);
    var QueryActivityRankRequest = (function () {
        function QueryActivityRankRequest() {
            this.header = new aone.AoneReqHeader(QueryActivityRankRequest.ID);
            this.body = new QueryActivityRankReqBody();
        }
        QueryActivityRankRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryActivityRankRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryActivityRankRequest.ID = 10038;
        return QueryActivityRankRequest;
    }());
    message.QueryActivityRankRequest = QueryActivityRankRequest;
    __reflect(QueryActivityRankRequest.prototype, "message.QueryActivityRankRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取排行活动排行回复
    // response QueryActivityRank
    ////////////////////////////////////////////////////////////////////////////////
    var QueryActivityRankRespBody = (function () {
        function QueryActivityRankRespBody() {
            this.items = [];
        }
        QueryActivityRankRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.RankBaseItemInfo());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryActivityRankRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryActivityRankRespBody;
    }());
    message.QueryActivityRankRespBody = QueryActivityRankRespBody;
    __reflect(QueryActivityRankRespBody.prototype, "message.QueryActivityRankRespBody", ["aone.AoneBody"]);
    var QueryActivityRankResponse = (function () {
        function QueryActivityRankResponse() {
            this.header = new aone.AoneRespHeader(QueryActivityRankResponse.ID);
            this.body = new QueryActivityRankRespBody();
        }
        QueryActivityRankResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryActivityRankResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryActivityRankResponse.ID = 10039;
        return QueryActivityRankResponse;
    }());
    message.QueryActivityRankResponse = QueryActivityRankResponse;
    __reflect(QueryActivityRankResponse.prototype, "message.QueryActivityRankResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 累计充值抽奖请求
    // request ChargeAddLotter
    ////////////////////////////////////////////////////////////////////////////////
    var ChargeAddLotterReqBody = (function () {
        function ChargeAddLotterReqBody() {
            this.activityIndex = 0; // 活动索引
        }
        ChargeAddLotterReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ChargeAddLotterReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // activityIndex
            encoder.write_fixuint32(this.activityIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChargeAddLotterReqBody;
    }());
    message.ChargeAddLotterReqBody = ChargeAddLotterReqBody;
    __reflect(ChargeAddLotterReqBody.prototype, "message.ChargeAddLotterReqBody", ["aone.AoneBody"]);
    var ChargeAddLotterRequest = (function () {
        function ChargeAddLotterRequest() {
            this.header = new aone.AoneReqHeader(ChargeAddLotterRequest.ID);
            this.body = new ChargeAddLotterReqBody();
        }
        ChargeAddLotterRequest.prototype.parse_bytes = function (decoder) { return false; };
        ChargeAddLotterRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChargeAddLotterRequest.ID = 10040;
        return ChargeAddLotterRequest;
    }());
    message.ChargeAddLotterRequest = ChargeAddLotterRequest;
    __reflect(ChargeAddLotterRequest.prototype, "message.ChargeAddLotterRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 累计充值抽奖回复
    // response ChargeAddLotter
    ////////////////////////////////////////////////////////////////////////////////
    var ChargeAddLotterRespBody = (function () {
        function ChargeAddLotterRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ChargeAddLotterRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ChargeAddLotterRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ChargeAddLotterRespBody;
    }());
    message.ChargeAddLotterRespBody = ChargeAddLotterRespBody;
    __reflect(ChargeAddLotterRespBody.prototype, "message.ChargeAddLotterRespBody", ["aone.AoneBody"]);
    var ChargeAddLotterResponse = (function () {
        function ChargeAddLotterResponse() {
            this.header = new aone.AoneRespHeader(ChargeAddLotterResponse.ID);
            this.body = new ChargeAddLotterRespBody();
        }
        ChargeAddLotterResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChargeAddLotterResponse.prototype.to_bytes = function (encoder) { return false; };
        ChargeAddLotterResponse.ID = 10041;
        return ChargeAddLotterResponse;
    }());
    message.ChargeAddLotterResponse = ChargeAddLotterResponse;
    __reflect(ChargeAddLotterResponse.prototype, "message.ChargeAddLotterResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动随机副本挑战怪物请求
    // request ActivityRandInstanceResult
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityRandInstanceResultReqBody = (function () {
        function ActivityRandInstanceResultReqBody() {
            this.sequence = 0; // 战斗序号
            this.instanceId = 0; // 副本Id
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
        }
        ActivityRandInstanceResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ActivityRandInstanceResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityRandInstanceResultReqBody;
    }());
    message.ActivityRandInstanceResultReqBody = ActivityRandInstanceResultReqBody;
    __reflect(ActivityRandInstanceResultReqBody.prototype, "message.ActivityRandInstanceResultReqBody", ["aone.AoneBody"]);
    var ActivityRandInstanceResultRequest = (function () {
        function ActivityRandInstanceResultRequest() {
            this.header = new aone.AoneReqHeader(ActivityRandInstanceResultRequest.ID);
            this.body = new ActivityRandInstanceResultReqBody();
        }
        ActivityRandInstanceResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        ActivityRandInstanceResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ActivityRandInstanceResultRequest.ID = 10042;
        return ActivityRandInstanceResultRequest;
    }());
    message.ActivityRandInstanceResultRequest = ActivityRandInstanceResultRequest;
    __reflect(ActivityRandInstanceResultRequest.prototype, "message.ActivityRandInstanceResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动随机副本挑战怪物响应
    // response ActivityRandInstanceResult
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityRandInstanceResultRespBody = (function () {
        function ActivityRandInstanceResultRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        ActivityRandInstanceResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ActivityRandInstanceResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ActivityRandInstanceResultRespBody;
    }());
    message.ActivityRandInstanceResultRespBody = ActivityRandInstanceResultRespBody;
    __reflect(ActivityRandInstanceResultRespBody.prototype, "message.ActivityRandInstanceResultRespBody", ["aone.AoneBody"]);
    var ActivityRandInstanceResultResponse = (function () {
        function ActivityRandInstanceResultResponse() {
            this.header = new aone.AoneRespHeader(ActivityRandInstanceResultResponse.ID);
            this.body = new ActivityRandInstanceResultRespBody();
        }
        ActivityRandInstanceResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityRandInstanceResultResponse.prototype.to_bytes = function (encoder) { return false; };
        ActivityRandInstanceResultResponse.ID = 10043;
        return ActivityRandInstanceResultResponse;
    }());
    message.ActivityRandInstanceResultResponse = ActivityRandInstanceResultResponse;
    __reflect(ActivityRandInstanceResultResponse.prototype, "message.ActivityRandInstanceResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 红包抢夺请求
    // request ActivityRedPacketGrab
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityRedPacketGrabReqBody = (function () {
        function ActivityRedPacketGrabReqBody() {
        }
        ActivityRedPacketGrabReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ActivityRedPacketGrabReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityRedPacketGrabReqBody;
    }());
    message.ActivityRedPacketGrabReqBody = ActivityRedPacketGrabReqBody;
    __reflect(ActivityRedPacketGrabReqBody.prototype, "message.ActivityRedPacketGrabReqBody", ["aone.AoneBody"]);
    var ActivityRedPacketGrabRequest = (function () {
        function ActivityRedPacketGrabRequest() {
            this.header = new aone.AoneReqHeader(ActivityRedPacketGrabRequest.ID);
            this.body = new ActivityRedPacketGrabReqBody();
        }
        ActivityRedPacketGrabRequest.prototype.parse_bytes = function (decoder) { return false; };
        ActivityRedPacketGrabRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ActivityRedPacketGrabRequest.ID = 10044;
        return ActivityRedPacketGrabRequest;
    }());
    message.ActivityRedPacketGrabRequest = ActivityRedPacketGrabRequest;
    __reflect(ActivityRedPacketGrabRequest.prototype, "message.ActivityRedPacketGrabRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 红包抢夺回复
    // response ActivityRedPacketGrab
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityRedPacketGrabRespBody = (function () {
        function ActivityRedPacketGrabRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ActivityRedPacketGrabRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ActivityRedPacketGrabRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ActivityRedPacketGrabRespBody;
    }());
    message.ActivityRedPacketGrabRespBody = ActivityRedPacketGrabRespBody;
    __reflect(ActivityRedPacketGrabRespBody.prototype, "message.ActivityRedPacketGrabRespBody", ["aone.AoneBody"]);
    var ActivityRedPacketGrabResponse = (function () {
        function ActivityRedPacketGrabResponse() {
            this.header = new aone.AoneRespHeader(ActivityRedPacketGrabResponse.ID);
            this.body = new ActivityRedPacketGrabRespBody();
        }
        ActivityRedPacketGrabResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityRedPacketGrabResponse.prototype.to_bytes = function (encoder) { return false; };
        ActivityRedPacketGrabResponse.ID = 10045;
        return ActivityRedPacketGrabResponse;
    }());
    message.ActivityRedPacketGrabResponse = ActivityRedPacketGrabResponse;
    __reflect(ActivityRedPacketGrabResponse.prototype, "message.ActivityRedPacketGrabResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(QueryActivitysRequest.ID, function () { return new QueryActivitysRequest(); });
    aone.MessageFactory.getInstance().register(QueryActivitysResponse.ID, function () { return new QueryActivitysResponse(); });
    aone.MessageFactory.getInstance().register(ActivityRewardRequest.ID, function () { return new ActivityRewardRequest(); });
    aone.MessageFactory.getInstance().register(ActivityRewardResponse.ID, function () { return new ActivityRewardResponse(); });
    aone.MessageFactory.getInstance().register(UpLevelRankRequest.ID, function () { return new UpLevelRankRequest(); });
    aone.MessageFactory.getInstance().register(UpLevelRankResponse.ID, function () { return new UpLevelRankResponse(); });
    aone.MessageFactory.getInstance().register(RefreshWishTreeRequest.ID, function () { return new RefreshWishTreeRequest(); });
    aone.MessageFactory.getInstance().register(RefreshWishTreeResponse.ID, function () { return new RefreshWishTreeResponse(); });
    aone.MessageFactory.getInstance().register(SetWishTreeRewardRequest.ID, function () { return new SetWishTreeRewardRequest(); });
    aone.MessageFactory.getInstance().register(SetWishTreeRewardResponse.ID, function () { return new SetWishTreeRewardResponse(); });
    aone.MessageFactory.getInstance().register(ChargeRankRequest.ID, function () { return new ChargeRankRequest(); });
    aone.MessageFactory.getInstance().register(ChargeRankResponse.ID, function () { return new ChargeRankResponse(); });
    aone.MessageFactory.getInstance().register(SecretMallBuyRequest.ID, function () { return new SecretMallBuyRequest(); });
    aone.MessageFactory.getInstance().register(SecretMallBuyResponse.ID, function () { return new SecretMallBuyResponse(); });
    aone.MessageFactory.getInstance().register(ActivityInstanceResultRequest.ID, function () { return new ActivityInstanceResultRequest(); });
    aone.MessageFactory.getInstance().register(ActivityInstanceResultResponse.ID, function () { return new ActivityInstanceResultResponse(); });
    aone.MessageFactory.getInstance().register(ActivityInstanceBuyTimeRequest.ID, function () { return new ActivityInstanceBuyTimeRequest(); });
    aone.MessageFactory.getInstance().register(ActivityInstanceBuyTimeResponse.ID, function () { return new ActivityInstanceBuyTimeResponse(); });
    aone.MessageFactory.getInstance().register(ActivityInstanceExchangeRequest.ID, function () { return new ActivityInstanceExchangeRequest(); });
    aone.MessageFactory.getInstance().register(ActivityInstanceExchangeResponse.ID, function () { return new ActivityInstanceExchangeResponse(); });
    aone.MessageFactory.getInstance().register(ActivityLotterPondRequest.ID, function () { return new ActivityLotterPondRequest(); });
    aone.MessageFactory.getInstance().register(ActivityLotterPondResponse.ID, function () { return new ActivityLotterPondResponse(); });
    aone.MessageFactory.getInstance().register(QueryActivityRankRequest.ID, function () { return new QueryActivityRankRequest(); });
    aone.MessageFactory.getInstance().register(QueryActivityRankResponse.ID, function () { return new QueryActivityRankResponse(); });
    aone.MessageFactory.getInstance().register(ChargeAddLotterRequest.ID, function () { return new ChargeAddLotterRequest(); });
    aone.MessageFactory.getInstance().register(ChargeAddLotterResponse.ID, function () { return new ChargeAddLotterResponse(); });
    aone.MessageFactory.getInstance().register(ActivityRandInstanceResultRequest.ID, function () { return new ActivityRandInstanceResultRequest(); });
    aone.MessageFactory.getInstance().register(ActivityRandInstanceResultResponse.ID, function () { return new ActivityRandInstanceResultResponse(); });
    aone.MessageFactory.getInstance().register(ActivityRedPacketGrabRequest.ID, function () { return new ActivityRedPacketGrabRequest(); });
    aone.MessageFactory.getInstance().register(ActivityRedPacketGrabResponse.ID, function () { return new ActivityRedPacketGrabResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_adviser.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 念兽升级请求
    // request AdviserUpLevel
    ////////////////////////////////////////////////////////////////////////////////
    var AdviserUpLevelReqBody = (function () {
        function AdviserUpLevelReqBody() {
            this.adviserId = 0;
        }
        AdviserUpLevelReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AdviserUpLevelReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // adviserId
            encoder.write_fixuint32(this.adviserId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AdviserUpLevelReqBody;
    }());
    message.AdviserUpLevelReqBody = AdviserUpLevelReqBody;
    __reflect(AdviserUpLevelReqBody.prototype, "message.AdviserUpLevelReqBody", ["aone.AoneBody"]);
    var AdviserUpLevelRequest = (function () {
        function AdviserUpLevelRequest() {
            this.header = new aone.AoneReqHeader(AdviserUpLevelRequest.ID);
            this.body = new AdviserUpLevelReqBody();
        }
        AdviserUpLevelRequest.prototype.parse_bytes = function (decoder) { return false; };
        AdviserUpLevelRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AdviserUpLevelRequest.ID = 24000;
        return AdviserUpLevelRequest;
    }());
    message.AdviserUpLevelRequest = AdviserUpLevelRequest;
    __reflect(AdviserUpLevelRequest.prototype, "message.AdviserUpLevelRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 念兽升级回复
    // response AdviserUpLevel
    ////////////////////////////////////////////////////////////////////////////////
    var AdviserUpLevelRespBody = (function () {
        function AdviserUpLevelRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        AdviserUpLevelRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        AdviserUpLevelRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AdviserUpLevelRespBody;
    }());
    message.AdviserUpLevelRespBody = AdviserUpLevelRespBody;
    __reflect(AdviserUpLevelRespBody.prototype, "message.AdviserUpLevelRespBody", ["aone.AoneBody"]);
    var AdviserUpLevelResponse = (function () {
        function AdviserUpLevelResponse() {
            this.header = new aone.AoneRespHeader(AdviserUpLevelResponse.ID);
            this.body = new AdviserUpLevelRespBody();
        }
        AdviserUpLevelResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AdviserUpLevelResponse.prototype.to_bytes = function (encoder) { return false; };
        AdviserUpLevelResponse.ID = 24001;
        return AdviserUpLevelResponse;
    }());
    message.AdviserUpLevelResponse = AdviserUpLevelResponse;
    __reflect(AdviserUpLevelResponse.prototype, "message.AdviserUpLevelResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 念兽合成请求
    // request AdviserCompose
    ////////////////////////////////////////////////////////////////////////////////
    var AdviserComposeReqBody = (function () {
        function AdviserComposeReqBody() {
            this.adviserId = 0;
        }
        AdviserComposeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AdviserComposeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // adviserId
            encoder.write_fixuint32(this.adviserId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AdviserComposeReqBody;
    }());
    message.AdviserComposeReqBody = AdviserComposeReqBody;
    __reflect(AdviserComposeReqBody.prototype, "message.AdviserComposeReqBody", ["aone.AoneBody"]);
    var AdviserComposeRequest = (function () {
        function AdviserComposeRequest() {
            this.header = new aone.AoneReqHeader(AdviserComposeRequest.ID);
            this.body = new AdviserComposeReqBody();
        }
        AdviserComposeRequest.prototype.parse_bytes = function (decoder) { return false; };
        AdviserComposeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AdviserComposeRequest.ID = 24002;
        return AdviserComposeRequest;
    }());
    message.AdviserComposeRequest = AdviserComposeRequest;
    __reflect(AdviserComposeRequest.prototype, "message.AdviserComposeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 念兽合成回复
    // response AdviserCompose
    ////////////////////////////////////////////////////////////////////////////////
    var AdviserComposeRespBody = (function () {
        function AdviserComposeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        AdviserComposeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        AdviserComposeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AdviserComposeRespBody;
    }());
    message.AdviserComposeRespBody = AdviserComposeRespBody;
    __reflect(AdviserComposeRespBody.prototype, "message.AdviserComposeRespBody", ["aone.AoneBody"]);
    var AdviserComposeResponse = (function () {
        function AdviserComposeResponse() {
            this.header = new aone.AoneRespHeader(AdviserComposeResponse.ID);
            this.body = new AdviserComposeRespBody();
        }
        AdviserComposeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AdviserComposeResponse.prototype.to_bytes = function (encoder) { return false; };
        AdviserComposeResponse.ID = 24003;
        return AdviserComposeResponse;
    }());
    message.AdviserComposeResponse = AdviserComposeResponse;
    __reflect(AdviserComposeResponse.prototype, "message.AdviserComposeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 念兽信息请求
    // request AdviserInfo
    ////////////////////////////////////////////////////////////////////////////////
    var AdviserInfoReqBody = (function () {
        function AdviserInfoReqBody() {
            this.adviserId = 0;
        }
        AdviserInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AdviserInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // adviserId
            encoder.write_fixuint32(this.adviserId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AdviserInfoReqBody;
    }());
    message.AdviserInfoReqBody = AdviserInfoReqBody;
    __reflect(AdviserInfoReqBody.prototype, "message.AdviserInfoReqBody", ["aone.AoneBody"]);
    var AdviserInfoRequest = (function () {
        function AdviserInfoRequest() {
            this.header = new aone.AoneReqHeader(AdviserInfoRequest.ID);
            this.body = new AdviserInfoReqBody();
        }
        AdviserInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        AdviserInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AdviserInfoRequest.ID = 24004;
        return AdviserInfoRequest;
    }());
    message.AdviserInfoRequest = AdviserInfoRequest;
    __reflect(AdviserInfoRequest.prototype, "message.AdviserInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 念兽信息回复
    // response AdviserInfo
    ////////////////////////////////////////////////////////////////////////////////
    var AdviserInfoRespBody = (function () {
        function AdviserInfoRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        AdviserInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        AdviserInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AdviserInfoRespBody;
    }());
    message.AdviserInfoRespBody = AdviserInfoRespBody;
    __reflect(AdviserInfoRespBody.prototype, "message.AdviserInfoRespBody", ["aone.AoneBody"]);
    var AdviserInfoResponse = (function () {
        function AdviserInfoResponse() {
            this.header = new aone.AoneRespHeader(AdviserInfoResponse.ID);
            this.body = new AdviserInfoRespBody();
        }
        AdviserInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AdviserInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        AdviserInfoResponse.ID = 24005;
        return AdviserInfoResponse;
    }());
    message.AdviserInfoResponse = AdviserInfoResponse;
    __reflect(AdviserInfoResponse.prototype, "message.AdviserInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 念兽领取技能请求
    // request AdviserSkillReward
    ////////////////////////////////////////////////////////////////////////////////
    var AdviserSkillRewardReqBody = (function () {
        function AdviserSkillRewardReqBody() {
            this.adviserId = 0;
        }
        AdviserSkillRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AdviserSkillRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // adviserId
            encoder.write_fixuint32(this.adviserId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AdviserSkillRewardReqBody;
    }());
    message.AdviserSkillRewardReqBody = AdviserSkillRewardReqBody;
    __reflect(AdviserSkillRewardReqBody.prototype, "message.AdviserSkillRewardReqBody", ["aone.AoneBody"]);
    var AdviserSkillRewardRequest = (function () {
        function AdviserSkillRewardRequest() {
            this.header = new aone.AoneReqHeader(AdviserSkillRewardRequest.ID);
            this.body = new AdviserSkillRewardReqBody();
        }
        AdviserSkillRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        AdviserSkillRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AdviserSkillRewardRequest.ID = 24006;
        return AdviserSkillRewardRequest;
    }());
    message.AdviserSkillRewardRequest = AdviserSkillRewardRequest;
    __reflect(AdviserSkillRewardRequest.prototype, "message.AdviserSkillRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 念兽领取技能回复
    // response AdviserSkillReward
    ////////////////////////////////////////////////////////////////////////////////
    var AdviserSkillRewardRespBody = (function () {
        function AdviserSkillRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        AdviserSkillRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        AdviserSkillRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AdviserSkillRewardRespBody;
    }());
    message.AdviserSkillRewardRespBody = AdviserSkillRewardRespBody;
    __reflect(AdviserSkillRewardRespBody.prototype, "message.AdviserSkillRewardRespBody", ["aone.AoneBody"]);
    var AdviserSkillRewardResponse = (function () {
        function AdviserSkillRewardResponse() {
            this.header = new aone.AoneRespHeader(AdviserSkillRewardResponse.ID);
            this.body = new AdviserSkillRewardRespBody();
        }
        AdviserSkillRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AdviserSkillRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        AdviserSkillRewardResponse.ID = 24007;
        return AdviserSkillRewardResponse;
    }());
    message.AdviserSkillRewardResponse = AdviserSkillRewardResponse;
    __reflect(AdviserSkillRewardResponse.prototype, "message.AdviserSkillRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(AdviserUpLevelRequest.ID, function () { return new AdviserUpLevelRequest(); });
    aone.MessageFactory.getInstance().register(AdviserUpLevelResponse.ID, function () { return new AdviserUpLevelResponse(); });
    aone.MessageFactory.getInstance().register(AdviserComposeRequest.ID, function () { return new AdviserComposeRequest(); });
    aone.MessageFactory.getInstance().register(AdviserComposeResponse.ID, function () { return new AdviserComposeResponse(); });
    aone.MessageFactory.getInstance().register(AdviserInfoRequest.ID, function () { return new AdviserInfoRequest(); });
    aone.MessageFactory.getInstance().register(AdviserInfoResponse.ID, function () { return new AdviserInfoResponse(); });
    aone.MessageFactory.getInstance().register(AdviserSkillRewardRequest.ID, function () { return new AdviserSkillRewardRequest(); });
    aone.MessageFactory.getInstance().register(AdviserSkillRewardResponse.ID, function () { return new AdviserSkillRewardResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_artifact.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 合成神兵请求
    // request ArtifactCompose
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactComposeReqBody = (function () {
        function ArtifactComposeReqBody() {
            this.artifactId = 0;
        }
        ArtifactComposeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactComposeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArtifactComposeReqBody;
    }());
    message.ArtifactComposeReqBody = ArtifactComposeReqBody;
    __reflect(ArtifactComposeReqBody.prototype, "message.ArtifactComposeReqBody", ["aone.AoneBody"]);
    var ArtifactComposeRequest = (function () {
        function ArtifactComposeRequest() {
            this.header = new aone.AoneReqHeader(ArtifactComposeRequest.ID);
            this.body = new ArtifactComposeReqBody();
        }
        ArtifactComposeRequest.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactComposeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ArtifactComposeRequest.ID = 14000;
        return ArtifactComposeRequest;
    }());
    message.ArtifactComposeRequest = ArtifactComposeRequest;
    __reflect(ArtifactComposeRequest.prototype, "message.ArtifactComposeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 合成神兵回复
    // response ArtifactCompose
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactComposeRespBody = (function () {
        function ArtifactComposeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ArtifactComposeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ArtifactComposeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ArtifactComposeRespBody;
    }());
    message.ArtifactComposeRespBody = ArtifactComposeRespBody;
    __reflect(ArtifactComposeRespBody.prototype, "message.ArtifactComposeRespBody", ["aone.AoneBody"]);
    var ArtifactComposeResponse = (function () {
        function ArtifactComposeResponse() {
            this.header = new aone.AoneRespHeader(ArtifactComposeResponse.ID);
            this.body = new ArtifactComposeRespBody();
        }
        ArtifactComposeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ArtifactComposeResponse.prototype.to_bytes = function (encoder) { return false; };
        ArtifactComposeResponse.ID = 14001;
        return ArtifactComposeResponse;
    }());
    message.ArtifactComposeResponse = ArtifactComposeResponse;
    __reflect(ArtifactComposeResponse.prototype, "message.ArtifactComposeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 装备神兵请求
    // request ArtifactWear
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactWearReqBody = (function () {
        function ArtifactWearReqBody() {
            this.artifactId = 0;
            this.generalId = 0;
        }
        ArtifactWearReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactWearReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            // generalId
            encoder.write_fixuint32(this.generalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArtifactWearReqBody;
    }());
    message.ArtifactWearReqBody = ArtifactWearReqBody;
    __reflect(ArtifactWearReqBody.prototype, "message.ArtifactWearReqBody", ["aone.AoneBody"]);
    var ArtifactWearRequest = (function () {
        function ArtifactWearRequest() {
            this.header = new aone.AoneReqHeader(ArtifactWearRequest.ID);
            this.body = new ArtifactWearReqBody();
        }
        ArtifactWearRequest.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactWearRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ArtifactWearRequest.ID = 14002;
        return ArtifactWearRequest;
    }());
    message.ArtifactWearRequest = ArtifactWearRequest;
    __reflect(ArtifactWearRequest.prototype, "message.ArtifactWearRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 装备神兵回复
    // response ArtifactWear
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactWearRespBody = (function () {
        function ArtifactWearRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ArtifactWearRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ArtifactWearRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ArtifactWearRespBody;
    }());
    message.ArtifactWearRespBody = ArtifactWearRespBody;
    __reflect(ArtifactWearRespBody.prototype, "message.ArtifactWearRespBody", ["aone.AoneBody"]);
    var ArtifactWearResponse = (function () {
        function ArtifactWearResponse() {
            this.header = new aone.AoneRespHeader(ArtifactWearResponse.ID);
            this.body = new ArtifactWearRespBody();
        }
        ArtifactWearResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ArtifactWearResponse.prototype.to_bytes = function (encoder) { return false; };
        ArtifactWearResponse.ID = 14003;
        return ArtifactWearResponse;
    }());
    message.ArtifactWearResponse = ArtifactWearResponse;
    __reflect(ArtifactWearResponse.prototype, "message.ArtifactWearResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神兵洗练请求
    // request ArtifactWash
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactWashReqBody = (function () {
        function ArtifactWashReqBody() {
            this.artifactId = 0;
            this.type = 0; // 1普通洗练,2高级洗练
            this.wash_times = 0; // 0单次洗练,1洗练五次,2洗练十次
            this.lockIds = []; // 锁定属性
        }
        ArtifactWashReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactWashReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            // type
            encoder.write_fixuint32(this.type);
            // wash_times
            encoder.write_fixuint32(this.wash_times);
            // lockIds
            encoder.write_uint32_vector(this.lockIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArtifactWashReqBody;
    }());
    message.ArtifactWashReqBody = ArtifactWashReqBody;
    __reflect(ArtifactWashReqBody.prototype, "message.ArtifactWashReqBody", ["aone.AoneBody"]);
    var ArtifactWashRequest = (function () {
        function ArtifactWashRequest() {
            this.header = new aone.AoneReqHeader(ArtifactWashRequest.ID);
            this.body = new ArtifactWashReqBody();
        }
        ArtifactWashRequest.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactWashRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ArtifactWashRequest.ID = 14004;
        return ArtifactWashRequest;
    }());
    message.ArtifactWashRequest = ArtifactWashRequest;
    __reflect(ArtifactWashRequest.prototype, "message.ArtifactWashRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神兵洗练回复
    // response ArtifactWash
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactWashRespBody = (function () {
        function ArtifactWashRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ArtifactWashRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ArtifactWashRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ArtifactWashRespBody;
    }());
    message.ArtifactWashRespBody = ArtifactWashRespBody;
    __reflect(ArtifactWashRespBody.prototype, "message.ArtifactWashRespBody", ["aone.AoneBody"]);
    var ArtifactWashResponse = (function () {
        function ArtifactWashResponse() {
            this.header = new aone.AoneRespHeader(ArtifactWashResponse.ID);
            this.body = new ArtifactWashRespBody();
        }
        ArtifactWashResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ArtifactWashResponse.prototype.to_bytes = function (encoder) { return false; };
        ArtifactWashResponse.ID = 14005;
        return ArtifactWashResponse;
    }());
    message.ArtifactWashResponse = ArtifactWashResponse;
    __reflect(ArtifactWashResponse.prototype, "message.ArtifactWashResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神兵洗练替换请求
    // request ArtifactWashReplace
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactWashReplaceReqBody = (function () {
        function ArtifactWashReplaceReqBody() {
            this.artifactId = 0;
            this.is_save = false;
        }
        ArtifactWashReplaceReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactWashReplaceReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            // is_save
            encoder.write_bool(this.is_save);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArtifactWashReplaceReqBody;
    }());
    message.ArtifactWashReplaceReqBody = ArtifactWashReplaceReqBody;
    __reflect(ArtifactWashReplaceReqBody.prototype, "message.ArtifactWashReplaceReqBody", ["aone.AoneBody"]);
    var ArtifactWashReplaceRequest = (function () {
        function ArtifactWashReplaceRequest() {
            this.header = new aone.AoneReqHeader(ArtifactWashReplaceRequest.ID);
            this.body = new ArtifactWashReplaceReqBody();
        }
        ArtifactWashReplaceRequest.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactWashReplaceRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ArtifactWashReplaceRequest.ID = 14006;
        return ArtifactWashReplaceRequest;
    }());
    message.ArtifactWashReplaceRequest = ArtifactWashReplaceRequest;
    __reflect(ArtifactWashReplaceRequest.prototype, "message.ArtifactWashReplaceRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神兵洗练替换回复
    // response ArtifactWashReplace
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactWashReplaceRespBody = (function () {
        function ArtifactWashReplaceRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ArtifactWashReplaceRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ArtifactWashReplaceRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ArtifactWashReplaceRespBody;
    }());
    message.ArtifactWashReplaceRespBody = ArtifactWashReplaceRespBody;
    __reflect(ArtifactWashReplaceRespBody.prototype, "message.ArtifactWashReplaceRespBody", ["aone.AoneBody"]);
    var ArtifactWashReplaceResponse = (function () {
        function ArtifactWashReplaceResponse() {
            this.header = new aone.AoneRespHeader(ArtifactWashReplaceResponse.ID);
            this.body = new ArtifactWashReplaceRespBody();
        }
        ArtifactWashReplaceResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ArtifactWashReplaceResponse.prototype.to_bytes = function (encoder) { return false; };
        ArtifactWashReplaceResponse.ID = 14007;
        return ArtifactWashReplaceResponse;
    }());
    message.ArtifactWashReplaceResponse = ArtifactWashReplaceResponse;
    __reflect(ArtifactWashReplaceResponse.prototype, "message.ArtifactWashReplaceResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神兵突破请求
    // request ArtifactBreak
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactBreakReqBody = (function () {
        function ArtifactBreakReqBody() {
            this.artifactId = 0;
        }
        ArtifactBreakReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactBreakReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArtifactBreakReqBody;
    }());
    message.ArtifactBreakReqBody = ArtifactBreakReqBody;
    __reflect(ArtifactBreakReqBody.prototype, "message.ArtifactBreakReqBody", ["aone.AoneBody"]);
    var ArtifactBreakRequest = (function () {
        function ArtifactBreakRequest() {
            this.header = new aone.AoneReqHeader(ArtifactBreakRequest.ID);
            this.body = new ArtifactBreakReqBody();
        }
        ArtifactBreakRequest.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactBreakRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ArtifactBreakRequest.ID = 14008;
        return ArtifactBreakRequest;
    }());
    message.ArtifactBreakRequest = ArtifactBreakRequest;
    __reflect(ArtifactBreakRequest.prototype, "message.ArtifactBreakRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神兵突破回复
    // response ArtifactBreak
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactBreakRespBody = (function () {
        function ArtifactBreakRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ArtifactBreakRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ArtifactBreakRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ArtifactBreakRespBody;
    }());
    message.ArtifactBreakRespBody = ArtifactBreakRespBody;
    __reflect(ArtifactBreakRespBody.prototype, "message.ArtifactBreakRespBody", ["aone.AoneBody"]);
    var ArtifactBreakResponse = (function () {
        function ArtifactBreakResponse() {
            this.header = new aone.AoneRespHeader(ArtifactBreakResponse.ID);
            this.body = new ArtifactBreakRespBody();
        }
        ArtifactBreakResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ArtifactBreakResponse.prototype.to_bytes = function (encoder) { return false; };
        ArtifactBreakResponse.ID = 14009;
        return ArtifactBreakResponse;
    }());
    message.ArtifactBreakResponse = ArtifactBreakResponse;
    __reflect(ArtifactBreakResponse.prototype, "message.ArtifactBreakResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神兵碎片转化请求
    // request ArtifactSplitTransfer
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactSplitTransferReqBody = (function () {
        function ArtifactSplitTransferReqBody() {
            this.count = 0; // 使用太极玉数量
            this.propId = 0; // 目的神兵碎片
        }
        ArtifactSplitTransferReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactSplitTransferReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // count
            encoder.write_fixuint32(this.count);
            // propId
            encoder.write_fixuint32(this.propId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArtifactSplitTransferReqBody;
    }());
    message.ArtifactSplitTransferReqBody = ArtifactSplitTransferReqBody;
    __reflect(ArtifactSplitTransferReqBody.prototype, "message.ArtifactSplitTransferReqBody", ["aone.AoneBody"]);
    var ArtifactSplitTransferRequest = (function () {
        function ArtifactSplitTransferRequest() {
            this.header = new aone.AoneReqHeader(ArtifactSplitTransferRequest.ID);
            this.body = new ArtifactSplitTransferReqBody();
        }
        ArtifactSplitTransferRequest.prototype.parse_bytes = function (decoder) { return false; };
        ArtifactSplitTransferRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ArtifactSplitTransferRequest.ID = 14010;
        return ArtifactSplitTransferRequest;
    }());
    message.ArtifactSplitTransferRequest = ArtifactSplitTransferRequest;
    __reflect(ArtifactSplitTransferRequest.prototype, "message.ArtifactSplitTransferRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神兵碎片转化回复
    // response ArtifactSplitTransfer
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactSplitTransferRespBody = (function () {
        function ArtifactSplitTransferRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ArtifactSplitTransferRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ArtifactSplitTransferRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ArtifactSplitTransferRespBody;
    }());
    message.ArtifactSplitTransferRespBody = ArtifactSplitTransferRespBody;
    __reflect(ArtifactSplitTransferRespBody.prototype, "message.ArtifactSplitTransferRespBody", ["aone.AoneBody"]);
    var ArtifactSplitTransferResponse = (function () {
        function ArtifactSplitTransferResponse() {
            this.header = new aone.AoneRespHeader(ArtifactSplitTransferResponse.ID);
            this.body = new ArtifactSplitTransferRespBody();
        }
        ArtifactSplitTransferResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ArtifactSplitTransferResponse.prototype.to_bytes = function (encoder) { return false; };
        ArtifactSplitTransferResponse.ID = 14011;
        return ArtifactSplitTransferResponse;
    }());
    message.ArtifactSplitTransferResponse = ArtifactSplitTransferResponse;
    __reflect(ArtifactSplitTransferResponse.prototype, "message.ArtifactSplitTransferResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 赌石请求
    // request GambleJade
    ////////////////////////////////////////////////////////////////////////////////
    var GambleJadeReqBody = (function () {
        function GambleJadeReqBody() {
            this.type = 0; // 赌石类型(1普通2普通十连2精细4精细十连)
        }
        GambleJadeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GambleJadeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GambleJadeReqBody;
    }());
    message.GambleJadeReqBody = GambleJadeReqBody;
    __reflect(GambleJadeReqBody.prototype, "message.GambleJadeReqBody", ["aone.AoneBody"]);
    var GambleJadeRequest = (function () {
        function GambleJadeRequest() {
            this.header = new aone.AoneReqHeader(GambleJadeRequest.ID);
            this.body = new GambleJadeReqBody();
        }
        GambleJadeRequest.prototype.parse_bytes = function (decoder) { return false; };
        GambleJadeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GambleJadeRequest.ID = 14020;
        return GambleJadeRequest;
    }());
    message.GambleJadeRequest = GambleJadeRequest;
    __reflect(GambleJadeRequest.prototype, "message.GambleJadeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 赌石回复
    // response GambleJade
    ////////////////////////////////////////////////////////////////////////////////
    var GambleJadeRespBody = (function () {
        function GambleJadeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GambleJadeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GambleJadeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GambleJadeRespBody;
    }());
    message.GambleJadeRespBody = GambleJadeRespBody;
    __reflect(GambleJadeRespBody.prototype, "message.GambleJadeRespBody", ["aone.AoneBody"]);
    var GambleJadeResponse = (function () {
        function GambleJadeResponse() {
            this.header = new aone.AoneRespHeader(GambleJadeResponse.ID);
            this.body = new GambleJadeRespBody();
        }
        GambleJadeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GambleJadeResponse.prototype.to_bytes = function (encoder) { return false; };
        GambleJadeResponse.ID = 14021;
        return GambleJadeResponse;
    }());
    message.GambleJadeResponse = GambleJadeResponse;
    __reflect(GambleJadeResponse.prototype, "message.GambleJadeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝石合成请求
    // request JadeCompose
    ////////////////////////////////////////////////////////////////////////////////
    var JadeComposeReqBody = (function () {
        function JadeComposeReqBody() {
            this.jadeId = 0;
            this.is_all = false; // 是否全部合成
        }
        JadeComposeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        JadeComposeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // jadeId
            encoder.write_fixuint32(this.jadeId);
            // is_all
            encoder.write_bool(this.is_all);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return JadeComposeReqBody;
    }());
    message.JadeComposeReqBody = JadeComposeReqBody;
    __reflect(JadeComposeReqBody.prototype, "message.JadeComposeReqBody", ["aone.AoneBody"]);
    var JadeComposeRequest = (function () {
        function JadeComposeRequest() {
            this.header = new aone.AoneReqHeader(JadeComposeRequest.ID);
            this.body = new JadeComposeReqBody();
        }
        JadeComposeRequest.prototype.parse_bytes = function (decoder) { return false; };
        JadeComposeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        JadeComposeRequest.ID = 14022;
        return JadeComposeRequest;
    }());
    message.JadeComposeRequest = JadeComposeRequest;
    __reflect(JadeComposeRequest.prototype, "message.JadeComposeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝石合成回复
    // response JadeCompose
    ////////////////////////////////////////////////////////////////////////////////
    var JadeComposeRespBody = (function () {
        function JadeComposeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        JadeComposeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        JadeComposeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return JadeComposeRespBody;
    }());
    message.JadeComposeRespBody = JadeComposeRespBody;
    __reflect(JadeComposeRespBody.prototype, "message.JadeComposeRespBody", ["aone.AoneBody"]);
    var JadeComposeResponse = (function () {
        function JadeComposeResponse() {
            this.header = new aone.AoneRespHeader(JadeComposeResponse.ID);
            this.body = new JadeComposeRespBody();
        }
        JadeComposeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        JadeComposeResponse.prototype.to_bytes = function (encoder) { return false; };
        JadeComposeResponse.ID = 14023;
        return JadeComposeResponse;
    }());
    message.JadeComposeResponse = JadeComposeResponse;
    __reflect(JadeComposeResponse.prototype, "message.JadeComposeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝石合成请求
    // request JadeComposeQuick
    ////////////////////////////////////////////////////////////////////////////////
    var JadeComposeQuickReqBody = (function () {
        function JadeComposeQuickReqBody() {
            this.jadeIds = [];
        }
        JadeComposeQuickReqBody.prototype.parse_bytes = function (decoder) { return false; };
        JadeComposeQuickReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // jadeIds
            encoder.write_uint32_vector(this.jadeIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return JadeComposeQuickReqBody;
    }());
    message.JadeComposeQuickReqBody = JadeComposeQuickReqBody;
    __reflect(JadeComposeQuickReqBody.prototype, "message.JadeComposeQuickReqBody", ["aone.AoneBody"]);
    var JadeComposeQuickRequest = (function () {
        function JadeComposeQuickRequest() {
            this.header = new aone.AoneReqHeader(JadeComposeQuickRequest.ID);
            this.body = new JadeComposeQuickReqBody();
        }
        JadeComposeQuickRequest.prototype.parse_bytes = function (decoder) { return false; };
        JadeComposeQuickRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        JadeComposeQuickRequest.ID = 14024;
        return JadeComposeQuickRequest;
    }());
    message.JadeComposeQuickRequest = JadeComposeQuickRequest;
    __reflect(JadeComposeQuickRequest.prototype, "message.JadeComposeQuickRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝石合成回复
    // response JadeComposeQuick
    ////////////////////////////////////////////////////////////////////////////////
    var JadeComposeQuickRespBody = (function () {
        function JadeComposeQuickRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        JadeComposeQuickRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        JadeComposeQuickRespBody.prototype.to_bytes = function (encoder) { return false; };
        return JadeComposeQuickRespBody;
    }());
    message.JadeComposeQuickRespBody = JadeComposeQuickRespBody;
    __reflect(JadeComposeQuickRespBody.prototype, "message.JadeComposeQuickRespBody", ["aone.AoneBody"]);
    var JadeComposeQuickResponse = (function () {
        function JadeComposeQuickResponse() {
            this.header = new aone.AoneRespHeader(JadeComposeQuickResponse.ID);
            this.body = new JadeComposeQuickRespBody();
        }
        JadeComposeQuickResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        JadeComposeQuickResponse.prototype.to_bytes = function (encoder) { return false; };
        JadeComposeQuickResponse.ID = 14025;
        return JadeComposeQuickResponse;
    }());
    message.JadeComposeQuickResponse = JadeComposeQuickResponse;
    __reflect(JadeComposeQuickResponse.prototype, "message.JadeComposeQuickResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 玉石磨洗请求
    // request JadeRefresh
    ////////////////////////////////////////////////////////////////////////////////
    var JadeRefreshReqBody = (function () {
        function JadeRefreshReqBody() {
            this.jadeId = 0;
        }
        JadeRefreshReqBody.prototype.parse_bytes = function (decoder) { return false; };
        JadeRefreshReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // jadeId
            encoder.write_fixuint32(this.jadeId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return JadeRefreshReqBody;
    }());
    message.JadeRefreshReqBody = JadeRefreshReqBody;
    __reflect(JadeRefreshReqBody.prototype, "message.JadeRefreshReqBody", ["aone.AoneBody"]);
    var JadeRefreshRequest = (function () {
        function JadeRefreshRequest() {
            this.header = new aone.AoneReqHeader(JadeRefreshRequest.ID);
            this.body = new JadeRefreshReqBody();
        }
        JadeRefreshRequest.prototype.parse_bytes = function (decoder) { return false; };
        JadeRefreshRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        JadeRefreshRequest.ID = 14030;
        return JadeRefreshRequest;
    }());
    message.JadeRefreshRequest = JadeRefreshRequest;
    __reflect(JadeRefreshRequest.prototype, "message.JadeRefreshRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 玉石磨洗回复
    // response JadeRefresh
    ////////////////////////////////////////////////////////////////////////////////
    var JadeRefreshRespBody = (function () {
        function JadeRefreshRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        JadeRefreshRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        JadeRefreshRespBody.prototype.to_bytes = function (encoder) { return false; };
        return JadeRefreshRespBody;
    }());
    message.JadeRefreshRespBody = JadeRefreshRespBody;
    __reflect(JadeRefreshRespBody.prototype, "message.JadeRefreshRespBody", ["aone.AoneBody"]);
    var JadeRefreshResponse = (function () {
        function JadeRefreshResponse() {
            this.header = new aone.AoneRespHeader(JadeRefreshResponse.ID);
            this.body = new JadeRefreshRespBody();
        }
        JadeRefreshResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        JadeRefreshResponse.prototype.to_bytes = function (encoder) { return false; };
        JadeRefreshResponse.ID = 14031;
        return JadeRefreshResponse;
    }());
    message.JadeRefreshResponse = JadeRefreshResponse;
    __reflect(JadeRefreshResponse.prototype, "message.JadeRefreshResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 玉石快速磨洗请求
    // request JadeRefreshQuick
    ////////////////////////////////////////////////////////////////////////////////
    var JadeRefreshQuickReqBody = (function () {
        function JadeRefreshQuickReqBody() {
            this.jadeIds = []; // 选中宝石
            this.types = []; // 目标类型
            this.token = 0; // 消耗元宝
        }
        JadeRefreshQuickReqBody.prototype.parse_bytes = function (decoder) { return false; };
        JadeRefreshQuickReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // jadeIds
            encoder.write_fixuint32(Object.keys(this.jadeIds).length);
            for (var k in this.jadeIds) {
                if (!this.jadeIds[k].to_bytes(encoder))
                    return false;
            }
            // types
            encoder.write_uint32_vector(this.types);
            // token
            encoder.write_fixuint32(this.token);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return JadeRefreshQuickReqBody;
    }());
    message.JadeRefreshQuickReqBody = JadeRefreshQuickReqBody;
    __reflect(JadeRefreshQuickReqBody.prototype, "message.JadeRefreshQuickReqBody", ["aone.AoneBody"]);
    var JadeRefreshQuickRequest = (function () {
        function JadeRefreshQuickRequest() {
            this.header = new aone.AoneReqHeader(JadeRefreshQuickRequest.ID);
            this.body = new JadeRefreshQuickReqBody();
        }
        JadeRefreshQuickRequest.prototype.parse_bytes = function (decoder) { return false; };
        JadeRefreshQuickRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        JadeRefreshQuickRequest.ID = 14032;
        return JadeRefreshQuickRequest;
    }());
    message.JadeRefreshQuickRequest = JadeRefreshQuickRequest;
    __reflect(JadeRefreshQuickRequest.prototype, "message.JadeRefreshQuickRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 玉石快速磨洗回复
    // response JadeRefreshQuick
    ////////////////////////////////////////////////////////////////////////////////
    var JadeRefreshQuickRespBody = (function () {
        function JadeRefreshQuickRespBody() {
            this.refreshTimes = 0; // 磨洗次数
            this.uplevelTimes = 0; // 升级次数
            this.gameInfo = new message.GameInfo();
        }
        JadeRefreshQuickRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // refreshTimes
            if (decoder_.eof())
                return true;
            this.refreshTimes = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // uplevelTimes
            if (decoder_.eof())
                return true;
            this.uplevelTimes = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        JadeRefreshQuickRespBody.prototype.to_bytes = function (encoder) { return false; };
        return JadeRefreshQuickRespBody;
    }());
    message.JadeRefreshQuickRespBody = JadeRefreshQuickRespBody;
    __reflect(JadeRefreshQuickRespBody.prototype, "message.JadeRefreshQuickRespBody", ["aone.AoneBody"]);
    var JadeRefreshQuickResponse = (function () {
        function JadeRefreshQuickResponse() {
            this.header = new aone.AoneRespHeader(JadeRefreshQuickResponse.ID);
            this.body = new JadeRefreshQuickRespBody();
        }
        JadeRefreshQuickResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        JadeRefreshQuickResponse.prototype.to_bytes = function (encoder) { return false; };
        JadeRefreshQuickResponse.ID = 14033;
        return JadeRefreshQuickResponse;
    }());
    message.JadeRefreshQuickResponse = JadeRefreshQuickResponse;
    __reflect(JadeRefreshQuickResponse.prototype, "message.JadeRefreshQuickResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝石镶嵌请求
    // request JadeMount
    ////////////////////////////////////////////////////////////////////////////////
    var JadeMountReqBody = (function () {
        function JadeMountReqBody() {
            this.artifactId = 0;
            this.pos = 0;
            this.jadeId = 0; // jadeId为0表示卸下
        }
        JadeMountReqBody.prototype.parse_bytes = function (decoder) { return false; };
        JadeMountReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            // pos
            encoder.write_fixuint32(this.pos);
            // jadeId
            encoder.write_fixuint32(this.jadeId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return JadeMountReqBody;
    }());
    message.JadeMountReqBody = JadeMountReqBody;
    __reflect(JadeMountReqBody.prototype, "message.JadeMountReqBody", ["aone.AoneBody"]);
    var JadeMountRequest = (function () {
        function JadeMountRequest() {
            this.header = new aone.AoneReqHeader(JadeMountRequest.ID);
            this.body = new JadeMountReqBody();
        }
        JadeMountRequest.prototype.parse_bytes = function (decoder) { return false; };
        JadeMountRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        JadeMountRequest.ID = 14040;
        return JadeMountRequest;
    }());
    message.JadeMountRequest = JadeMountRequest;
    __reflect(JadeMountRequest.prototype, "message.JadeMountRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝石镶嵌回复
    // response JadeMount
    ////////////////////////////////////////////////////////////////////////////////
    var JadeMountRespBody = (function () {
        function JadeMountRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        JadeMountRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        JadeMountRespBody.prototype.to_bytes = function (encoder) { return false; };
        return JadeMountRespBody;
    }());
    message.JadeMountRespBody = JadeMountRespBody;
    __reflect(JadeMountRespBody.prototype, "message.JadeMountRespBody", ["aone.AoneBody"]);
    var JadeMountResponse = (function () {
        function JadeMountResponse() {
            this.header = new aone.AoneRespHeader(JadeMountResponse.ID);
            this.body = new JadeMountRespBody();
        }
        JadeMountResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        JadeMountResponse.prototype.to_bytes = function (encoder) { return false; };
        JadeMountResponse.ID = 14041;
        return JadeMountResponse;
    }());
    message.JadeMountResponse = JadeMountResponse;
    __reflect(JadeMountResponse.prototype, "message.JadeMountResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 一键镶嵌请求
    // request JadeMountQuick
    ////////////////////////////////////////////////////////////////////////////////
    var JadeMountQuickReqBody = (function () {
        function JadeMountQuickReqBody() {
            this.artifactId = 0;
        }
        JadeMountQuickReqBody.prototype.parse_bytes = function (decoder) { return false; };
        JadeMountQuickReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return JadeMountQuickReqBody;
    }());
    message.JadeMountQuickReqBody = JadeMountQuickReqBody;
    __reflect(JadeMountQuickReqBody.prototype, "message.JadeMountQuickReqBody", ["aone.AoneBody"]);
    var JadeMountQuickRequest = (function () {
        function JadeMountQuickRequest() {
            this.header = new aone.AoneReqHeader(JadeMountQuickRequest.ID);
            this.body = new JadeMountQuickReqBody();
        }
        JadeMountQuickRequest.prototype.parse_bytes = function (decoder) { return false; };
        JadeMountQuickRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        JadeMountQuickRequest.ID = 14042;
        return JadeMountQuickRequest;
    }());
    message.JadeMountQuickRequest = JadeMountQuickRequest;
    __reflect(JadeMountQuickRequest.prototype, "message.JadeMountQuickRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 一键镶嵌回复
    // response JadeMountQuick
    ////////////////////////////////////////////////////////////////////////////////
    var JadeMountQuickRespBody = (function () {
        function JadeMountQuickRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        JadeMountQuickRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        JadeMountQuickRespBody.prototype.to_bytes = function (encoder) { return false; };
        return JadeMountQuickRespBody;
    }());
    message.JadeMountQuickRespBody = JadeMountQuickRespBody;
    __reflect(JadeMountQuickRespBody.prototype, "message.JadeMountQuickRespBody", ["aone.AoneBody"]);
    var JadeMountQuickResponse = (function () {
        function JadeMountQuickResponse() {
            this.header = new aone.AoneRespHeader(JadeMountQuickResponse.ID);
            this.body = new JadeMountQuickRespBody();
        }
        JadeMountQuickResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        JadeMountQuickResponse.prototype.to_bytes = function (encoder) { return false; };
        JadeMountQuickResponse.ID = 14043;
        return JadeMountQuickResponse;
    }());
    message.JadeMountQuickResponse = JadeMountQuickResponse;
    __reflect(JadeMountQuickResponse.prototype, "message.JadeMountQuickResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(ArtifactComposeRequest.ID, function () { return new ArtifactComposeRequest(); });
    aone.MessageFactory.getInstance().register(ArtifactComposeResponse.ID, function () { return new ArtifactComposeResponse(); });
    aone.MessageFactory.getInstance().register(ArtifactWearRequest.ID, function () { return new ArtifactWearRequest(); });
    aone.MessageFactory.getInstance().register(ArtifactWearResponse.ID, function () { return new ArtifactWearResponse(); });
    aone.MessageFactory.getInstance().register(ArtifactWashRequest.ID, function () { return new ArtifactWashRequest(); });
    aone.MessageFactory.getInstance().register(ArtifactWashResponse.ID, function () { return new ArtifactWashResponse(); });
    aone.MessageFactory.getInstance().register(ArtifactWashReplaceRequest.ID, function () { return new ArtifactWashReplaceRequest(); });
    aone.MessageFactory.getInstance().register(ArtifactWashReplaceResponse.ID, function () { return new ArtifactWashReplaceResponse(); });
    aone.MessageFactory.getInstance().register(ArtifactBreakRequest.ID, function () { return new ArtifactBreakRequest(); });
    aone.MessageFactory.getInstance().register(ArtifactBreakResponse.ID, function () { return new ArtifactBreakResponse(); });
    aone.MessageFactory.getInstance().register(ArtifactSplitTransferRequest.ID, function () { return new ArtifactSplitTransferRequest(); });
    aone.MessageFactory.getInstance().register(ArtifactSplitTransferResponse.ID, function () { return new ArtifactSplitTransferResponse(); });
    aone.MessageFactory.getInstance().register(GambleJadeRequest.ID, function () { return new GambleJadeRequest(); });
    aone.MessageFactory.getInstance().register(GambleJadeResponse.ID, function () { return new GambleJadeResponse(); });
    aone.MessageFactory.getInstance().register(JadeComposeRequest.ID, function () { return new JadeComposeRequest(); });
    aone.MessageFactory.getInstance().register(JadeComposeResponse.ID, function () { return new JadeComposeResponse(); });
    aone.MessageFactory.getInstance().register(JadeComposeQuickRequest.ID, function () { return new JadeComposeQuickRequest(); });
    aone.MessageFactory.getInstance().register(JadeComposeQuickResponse.ID, function () { return new JadeComposeQuickResponse(); });
    aone.MessageFactory.getInstance().register(JadeRefreshRequest.ID, function () { return new JadeRefreshRequest(); });
    aone.MessageFactory.getInstance().register(JadeRefreshResponse.ID, function () { return new JadeRefreshResponse(); });
    aone.MessageFactory.getInstance().register(JadeRefreshQuickRequest.ID, function () { return new JadeRefreshQuickRequest(); });
    aone.MessageFactory.getInstance().register(JadeRefreshQuickResponse.ID, function () { return new JadeRefreshQuickResponse(); });
    aone.MessageFactory.getInstance().register(JadeMountRequest.ID, function () { return new JadeMountRequest(); });
    aone.MessageFactory.getInstance().register(JadeMountResponse.ID, function () { return new JadeMountResponse(); });
    aone.MessageFactory.getInstance().register(JadeMountQuickRequest.ID, function () { return new JadeMountQuickRequest(); });
    aone.MessageFactory.getInstance().register(JadeMountQuickResponse.ID, function () { return new JadeMountQuickResponse(); });
})(message || (message = {}));
//Date: 2019-7
//File: msg_cg_battle.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 设置阵型请求
    // request SetFormation
    ////////////////////////////////////////////////////////////////////////////////
    var SetFormationReqBody = (function () {
        function SetFormationReqBody() {
            this.formations = []; // 阵型设置(军师信息不需要设置)
        }
        SetFormationReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SetFormationReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // formations
            encoder.write_fixuint32(Object.keys(this.formations).length);
            for (var k in this.formations) {
                if (!this.formations[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SetFormationReqBody;
    }());
    message.SetFormationReqBody = SetFormationReqBody;
    __reflect(SetFormationReqBody.prototype, "message.SetFormationReqBody", ["aone.AoneBody"]);
    var SetFormationRequest = (function () {
        function SetFormationRequest() {
            this.header = new aone.AoneReqHeader(SetFormationRequest.ID);
            this.body = new SetFormationReqBody();
        }
        SetFormationRequest.prototype.parse_bytes = function (decoder) { return false; };
        SetFormationRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SetFormationRequest.ID = 28000;
        return SetFormationRequest;
    }());
    message.SetFormationRequest = SetFormationRequest;
    __reflect(SetFormationRequest.prototype, "message.SetFormationRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置阵型回复
    // response SetFormation
    ////////////////////////////////////////////////////////////////////////////////
    var SetFormationRespBody = (function () {
        function SetFormationRespBody() {
        }
        SetFormationRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SetFormationRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SetFormationRespBody;
    }());
    message.SetFormationRespBody = SetFormationRespBody;
    __reflect(SetFormationRespBody.prototype, "message.SetFormationRespBody", ["aone.AoneBody"]);
    var SetFormationResponse = (function () {
        function SetFormationResponse() {
            this.header = new aone.AoneRespHeader(SetFormationResponse.ID);
            this.body = new SetFormationRespBody();
        }
        SetFormationResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SetFormationResponse.prototype.to_bytes = function (encoder) { return false; };
        SetFormationResponse.ID = 28001;
        return SetFormationResponse;
    }());
    message.SetFormationResponse = SetFormationResponse;
    __reflect(SetFormationResponse.prototype, "message.SetFormationResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取怪物信息请求
    // request MobsInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MobsInfoReqBody = (function () {
        function MobsInfoReqBody() {
            this.battleType = 0; // 类型
            this.mobsId = 0; // 怪物Id
        }
        MobsInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MobsInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // battleType
            encoder.write_fixuint32(this.battleType);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MobsInfoReqBody;
    }());
    message.MobsInfoReqBody = MobsInfoReqBody;
    __reflect(MobsInfoReqBody.prototype, "message.MobsInfoReqBody", ["aone.AoneBody"]);
    var MobsInfoRequest = (function () {
        function MobsInfoRequest() {
            this.header = new aone.AoneReqHeader(MobsInfoRequest.ID);
            this.body = new MobsInfoReqBody();
        }
        MobsInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        MobsInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MobsInfoRequest.ID = 28002;
        return MobsInfoRequest;
    }());
    message.MobsInfoRequest = MobsInfoRequest;
    __reflect(MobsInfoRequest.prototype, "message.MobsInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct ArmyStageZip
    ////////////////////////////////////////////////////////////////////////////////
    var ArmyStageZip = (function () {
        function ArmyStageZip() {
            this.stageInfo = [];
        }
        ArmyStageZip.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // stageInfo
            if (decoder_.eof())
                return true;
            var stageInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < stageInfo_count; i++) {
                this.stageInfo.push(new message.ArmyStage());
                if (!this.stageInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ArmyStageZip.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // stageInfo
            encoder.write_fixuint32(Object.keys(this.stageInfo).length);
            for (var k in this.stageInfo) {
                if (!this.stageInfo[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArmyStageZip;
    }());
    message.ArmyStageZip = ArmyStageZip;
    __reflect(ArmyStageZip.prototype, "message.ArmyStageZip", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取怪物信息回复
    // response MobsInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MobsInfoRespBody = (function () {
        function MobsInfoRespBody() {
            this.stageInfo = []; // ArmyStageZip数据压缩
        }
        MobsInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // stageInfo
            if (decoder_.eof())
                return true;
            this.stageInfo = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MobsInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MobsInfoRespBody;
    }());
    message.MobsInfoRespBody = MobsInfoRespBody;
    __reflect(MobsInfoRespBody.prototype, "message.MobsInfoRespBody", ["aone.AoneBody"]);
    var MobsInfoResponse = (function () {
        function MobsInfoResponse() {
            this.header = new aone.AoneRespHeader(MobsInfoResponse.ID);
            this.body = new MobsInfoRespBody();
        }
        MobsInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MobsInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        MobsInfoResponse.ID = 28003;
        return MobsInfoResponse;
    }());
    message.MobsInfoResponse = MobsInfoResponse;
    __reflect(MobsInfoResponse.prototype, "message.MobsInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 战斗发起请求
    // request BattleStart
    ////////////////////////////////////////////////////////////////////////////////
    var BattleStartReqBody = (function () {
        function BattleStartReqBody() {
            this.type = 0; // 战斗类型
            this.id = 0; // 角色Id或者是0
            this.ext = 0;
        }
        BattleStartReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BattleStartReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // id
            encoder.write_fixuint32(this.id);
            // ext
            encoder.write_fixuint32(this.ext);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BattleStartReqBody;
    }());
    message.BattleStartReqBody = BattleStartReqBody;
    __reflect(BattleStartReqBody.prototype, "message.BattleStartReqBody", ["aone.AoneBody"]);
    var BattleStartRequest = (function () {
        function BattleStartRequest() {
            this.header = new aone.AoneReqHeader(BattleStartRequest.ID);
            this.body = new BattleStartReqBody();
        }
        BattleStartRequest.prototype.parse_bytes = function (decoder) { return false; };
        BattleStartRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BattleStartRequest.ID = 28102;
        return BattleStartRequest;
    }());
    message.BattleStartRequest = BattleStartRequest;
    __reflect(BattleStartRequest.prototype, "message.BattleStartRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 战斗发起回复
    // response BattleStart
    ////////////////////////////////////////////////////////////////////////////////
    var BattleStartRespBody = (function () {
        function BattleStartRespBody() {
            this.sequence = 0; // 战斗序号
            this.detailFormation = []; // 详细阵型 DetailFormationInfo
            this.stageInfos = []; // 副本信息 LeagueInstanceStageInfo
            this.gameInfo = new message.GameInfo();
        }
        BattleStartRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sequence
            if (decoder_.eof())
                return true;
            this.sequence = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // detailFormation
            if (decoder_.eof())
                return true;
            this.detailFormation = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // stageInfos
            if (decoder_.eof())
                return true;
            this.stageInfos = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BattleStartRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BattleStartRespBody;
    }());
    message.BattleStartRespBody = BattleStartRespBody;
    __reflect(BattleStartRespBody.prototype, "message.BattleStartRespBody", ["aone.AoneBody"]);
    var BattleStartResponse = (function () {
        function BattleStartResponse() {
            this.header = new aone.AoneRespHeader(BattleStartResponse.ID);
            this.body = new BattleStartRespBody();
        }
        BattleStartResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BattleStartResponse.prototype.to_bytes = function (encoder) { return false; };
        BattleStartResponse.ID = 28103;
        return BattleStartResponse;
    }());
    message.BattleStartResponse = BattleStartResponse;
    __reflect(BattleStartResponse.prototype, "message.BattleStartResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查看战报请求
    // request QueryBattle
    ////////////////////////////////////////////////////////////////////////////////
    var QueryBattleReqBody = (function () {
        function QueryBattleReqBody() {
            this.battle_id = "";
        }
        QueryBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // battle_id
            encoder.write_string(this.battle_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryBattleReqBody;
    }());
    message.QueryBattleReqBody = QueryBattleReqBody;
    __reflect(QueryBattleReqBody.prototype, "message.QueryBattleReqBody", ["aone.AoneBody"]);
    var QueryBattleRequest = (function () {
        function QueryBattleRequest() {
            this.header = new aone.AoneReqHeader(QueryBattleRequest.ID);
            this.body = new QueryBattleReqBody();
        }
        QueryBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryBattleRequest.ID = 28200;
        return QueryBattleRequest;
    }());
    message.QueryBattleRequest = QueryBattleRequest;
    __reflect(QueryBattleRequest.prototype, "message.QueryBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查看战报回复
    // response QueryBattle
    ////////////////////////////////////////////////////////////////////////////////
    var QueryBattleRespBody = (function () {
        function QueryBattleRespBody() {
            this.battleData = new message.BattleResultInfo(); // 战斗数据
        }
        QueryBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battleData
            if (decoder_.eof())
                return true;
            if (!this.battleData.parse_bytes(decoder_))
                return false;
            return true;
        };
        QueryBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryBattleRespBody;
    }());
    message.QueryBattleRespBody = QueryBattleRespBody;
    __reflect(QueryBattleRespBody.prototype, "message.QueryBattleRespBody", ["aone.AoneBody"]);
    var QueryBattleResponse = (function () {
        function QueryBattleResponse() {
            this.header = new aone.AoneRespHeader(QueryBattleResponse.ID);
            this.body = new QueryBattleRespBody();
        }
        QueryBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryBattleResponse.ID = 28201;
        return QueryBattleResponse;
    }());
    message.QueryBattleResponse = QueryBattleResponse;
    __reflect(QueryBattleResponse.prototype, "message.QueryBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct SimpleRoleFormationZip
    ////////////////////////////////////////////////////////////////////////////////
    var SimpleRoleFormationZip = (function () {
        function SimpleRoleFormationZip() {
            this.formations = []; // 粗略阵型
        }
        SimpleRoleFormationZip.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            var formations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formations_count; i++) {
                this.formations.push(new message.SimpleRoleFormationInfo());
                if (!this.formations[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimpleRoleFormationZip.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // formations
            encoder.write_fixuint32(Object.keys(this.formations).length);
            for (var k in this.formations) {
                if (!this.formations[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimpleRoleFormationZip;
    }());
    message.SimpleRoleFormationZip = SimpleRoleFormationZip;
    __reflect(SimpleRoleFormationZip.prototype, "message.SimpleRoleFormationZip", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取助战粗略阵型请求
    // request GroupBattleQuery
    ////////////////////////////////////////////////////////////////////////////////
    var GroupBattleQueryReqBody = (function () {
        function GroupBattleQueryReqBody() {
            this.get_type = 0; // 1.好友2.帮会
        }
        GroupBattleQueryReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GroupBattleQueryReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // get_type
            encoder.write_fixuint32(this.get_type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GroupBattleQueryReqBody;
    }());
    message.GroupBattleQueryReqBody = GroupBattleQueryReqBody;
    __reflect(GroupBattleQueryReqBody.prototype, "message.GroupBattleQueryReqBody", ["aone.AoneBody"]);
    var GroupBattleQueryRequest = (function () {
        function GroupBattleQueryRequest() {
            this.header = new aone.AoneReqHeader(GroupBattleQueryRequest.ID);
            this.body = new GroupBattleQueryReqBody();
        }
        GroupBattleQueryRequest.prototype.parse_bytes = function (decoder) { return false; };
        GroupBattleQueryRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GroupBattleQueryRequest.ID = 28210;
        return GroupBattleQueryRequest;
    }());
    message.GroupBattleQueryRequest = GroupBattleQueryRequest;
    __reflect(GroupBattleQueryRequest.prototype, "message.GroupBattleQueryRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取助战粗略阵型回复
    // response GroupBattleQuery
    ////////////////////////////////////////////////////////////////////////////////
    var GroupBattleQueryRespBody = (function () {
        function GroupBattleQueryRespBody() {
            this.formations = []; // SimpleRoleFormationZip
        }
        GroupBattleQueryRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            this.formations = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GroupBattleQueryRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GroupBattleQueryRespBody;
    }());
    message.GroupBattleQueryRespBody = GroupBattleQueryRespBody;
    __reflect(GroupBattleQueryRespBody.prototype, "message.GroupBattleQueryRespBody", ["aone.AoneBody"]);
    var GroupBattleQueryResponse = (function () {
        function GroupBattleQueryResponse() {
            this.header = new aone.AoneRespHeader(GroupBattleQueryResponse.ID);
            this.body = new GroupBattleQueryRespBody();
        }
        GroupBattleQueryResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GroupBattleQueryResponse.prototype.to_bytes = function (encoder) { return false; };
        GroupBattleQueryResponse.ID = 28211;
        return GroupBattleQueryResponse;
    }());
    message.GroupBattleQueryResponse = GroupBattleQueryResponse;
    __reflect(GroupBattleQueryResponse.prototype, "message.GroupBattleQueryResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////
    // 切磋结果请求
    // struct MoreSimpleFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MoreSimpleFormationInfo = (function () {
        function MoreSimpleFormationInfo() {
            this.battle_result = [];
            this.simpleFormation = []; // 上阵武将信息
        }
        MoreSimpleFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_result
            if (decoder_.eof())
                return true;
            this.battle_result = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // simpleFormation
            if (decoder_.eof())
                return true;
            var simpleFormation_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < simpleFormation_count; i++) {
                this.simpleFormation.push(new message.SimpleFormationInfo());
                if (!this.simpleFormation[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MoreSimpleFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // battle_result
            encoder.write_uint32_vector(this.battle_result);
            // simpleFormation
            encoder.write_fixuint32(Object.keys(this.simpleFormation).length);
            for (var k in this.simpleFormation) {
                if (!this.simpleFormation[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MoreSimpleFormationInfo;
    }());
    message.MoreSimpleFormationInfo = MoreSimpleFormationInfo;
    __reflect(MoreSimpleFormationInfo.prototype, "message.MoreSimpleFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // request PVPBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var PVPBattleResultReqBody = (function () {
        function PVPBattleResultReqBody() {
            this.roleId = 0;
            this.group_id = 0;
            this.result = 0;
            this.battle_type = 0;
            this.battle_date = []; // MoreSimpleFormationInfo
        }
        PVPBattleResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PVPBattleResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // result
            encoder.write_fixuint32(this.result);
            // battle_type
            encoder.write_fixuint32(this.battle_type);
            // battle_date
            encoder.write_byte_vector(this.battle_date);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PVPBattleResultReqBody;
    }());
    message.PVPBattleResultReqBody = PVPBattleResultReqBody;
    __reflect(PVPBattleResultReqBody.prototype, "message.PVPBattleResultReqBody", ["aone.AoneBody"]);
    var PVPBattleResultRequest = (function () {
        function PVPBattleResultRequest() {
            this.header = new aone.AoneReqHeader(PVPBattleResultRequest.ID);
            this.body = new PVPBattleResultReqBody();
        }
        PVPBattleResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        PVPBattleResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PVPBattleResultRequest.ID = 28252;
        return PVPBattleResultRequest;
    }());
    message.PVPBattleResultRequest = PVPBattleResultRequest;
    __reflect(PVPBattleResultRequest.prototype, "message.PVPBattleResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 切磋结果回复
    // response PVPBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var PVPBattleResultRespBody = (function () {
        function PVPBattleResultRespBody() {
        }
        PVPBattleResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        PVPBattleResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PVPBattleResultRespBody;
    }());
    message.PVPBattleResultRespBody = PVPBattleResultRespBody;
    __reflect(PVPBattleResultRespBody.prototype, "message.PVPBattleResultRespBody", ["aone.AoneBody"]);
    var PVPBattleResultResponse = (function () {
        function PVPBattleResultResponse() {
            this.header = new aone.AoneRespHeader(PVPBattleResultResponse.ID);
            this.body = new PVPBattleResultRespBody();
        }
        PVPBattleResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PVPBattleResultResponse.prototype.to_bytes = function (encoder) { return false; };
        PVPBattleResultResponse.ID = 28253;
        return PVPBattleResultResponse;
    }());
    message.PVPBattleResultResponse = PVPBattleResultResponse;
    __reflect(PVPBattleResultResponse.prototype, "message.PVPBattleResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(SetFormationRequest.ID, function () { return new SetFormationRequest(); });
    aone.MessageFactory.getInstance().register(SetFormationResponse.ID, function () { return new SetFormationResponse(); });
    aone.MessageFactory.getInstance().register(MobsInfoRequest.ID, function () { return new MobsInfoRequest(); });
    aone.MessageFactory.getInstance().register(MobsInfoResponse.ID, function () { return new MobsInfoResponse(); });
    aone.MessageFactory.getInstance().register(BattleStartRequest.ID, function () { return new BattleStartRequest(); });
    aone.MessageFactory.getInstance().register(BattleStartResponse.ID, function () { return new BattleStartResponse(); });
    aone.MessageFactory.getInstance().register(QueryBattleRequest.ID, function () { return new QueryBattleRequest(); });
    aone.MessageFactory.getInstance().register(QueryBattleResponse.ID, function () { return new QueryBattleResponse(); });
    aone.MessageFactory.getInstance().register(GroupBattleQueryRequest.ID, function () { return new GroupBattleQueryRequest(); });
    aone.MessageFactory.getInstance().register(GroupBattleQueryResponse.ID, function () { return new GroupBattleQueryResponse(); });
    aone.MessageFactory.getInstance().register(PVPBattleResultRequest.ID, function () { return new PVPBattleResultRequest(); });
    aone.MessageFactory.getInstance().register(PVPBattleResultResponse.ID, function () { return new PVPBattleResultResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_boss.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 进入boss界面请求
    // request BossEntry
    ////////////////////////////////////////////////////////////////////////////////
    var BossEntryReqBody = (function () {
        function BossEntryReqBody() {
            this.scene_x = 0; // 场景坐标(用于区分断线重连)
            this.scene_y = 0; // 场景坐标
        }
        BossEntryReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BossEntryReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // scene_x
            encoder.write_fixuint32(this.scene_x);
            // scene_y
            encoder.write_fixuint32(this.scene_y);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossEntryReqBody;
    }());
    message.BossEntryReqBody = BossEntryReqBody;
    __reflect(BossEntryReqBody.prototype, "message.BossEntryReqBody", ["aone.AoneBody"]);
    var BossEntryRequest = (function () {
        function BossEntryRequest() {
            this.header = new aone.AoneReqHeader(BossEntryRequest.ID);
            this.body = new BossEntryReqBody();
        }
        BossEntryRequest.prototype.parse_bytes = function (decoder) { return false; };
        BossEntryRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossEntryRequest.ID = 10100;
        return BossEntryRequest;
    }());
    message.BossEntryRequest = BossEntryRequest;
    __reflect(BossEntryRequest.prototype, "message.BossEntryRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 进入boss界面回复
    // response BossEntry
    ////////////////////////////////////////////////////////////////////////////////
    var BossEntryRespBody = (function () {
        function BossEntryRespBody() {
            this.roleInfo = new message.BossRoleInfo(); // 角色基本信息
            this.posInfos = [];
            this.sceneId = 0;
        }
        BossEntryRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // posInfos
            if (decoder_.eof())
                return true;
            var posInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < posInfos_count; i++) {
                this.posInfos.push(new message.ScenePosInfo());
                if (!this.posInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // sceneId
            if (decoder_.eof())
                return true;
            this.sceneId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BossEntryRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BossEntryRespBody;
    }());
    message.BossEntryRespBody = BossEntryRespBody;
    __reflect(BossEntryRespBody.prototype, "message.BossEntryRespBody", ["aone.AoneBody"]);
    var BossEntryResponse = (function () {
        function BossEntryResponse() {
            this.header = new aone.AoneRespHeader(BossEntryResponse.ID);
            this.body = new BossEntryRespBody();
        }
        BossEntryResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossEntryResponse.prototype.to_bytes = function (encoder) { return false; };
        BossEntryResponse.ID = 10101;
        return BossEntryResponse;
    }());
    message.BossEntryResponse = BossEntryResponse;
    __reflect(BossEntryResponse.prototype, "message.BossEntryResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 退出boss界面请求
    // request BossExit
    ////////////////////////////////////////////////////////////////////////////////
    var BossExitReqBody = (function () {
        function BossExitReqBody() {
        }
        BossExitReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BossExitReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossExitReqBody;
    }());
    message.BossExitReqBody = BossExitReqBody;
    __reflect(BossExitReqBody.prototype, "message.BossExitReqBody", ["aone.AoneBody"]);
    var BossExitRequest = (function () {
        function BossExitRequest() {
            this.header = new aone.AoneReqHeader(BossExitRequest.ID);
            this.body = new BossExitReqBody();
        }
        BossExitRequest.prototype.parse_bytes = function (decoder) { return false; };
        BossExitRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossExitRequest.ID = 10102;
        return BossExitRequest;
    }());
    message.BossExitRequest = BossExitRequest;
    __reflect(BossExitRequest.prototype, "message.BossExitRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 退出boss界面回复
    // response BossExit
    ////////////////////////////////////////////////////////////////////////////////
    var BossExitRespBody = (function () {
        function BossExitRespBody() {
        }
        BossExitRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        BossExitRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BossExitRespBody;
    }());
    message.BossExitRespBody = BossExitRespBody;
    __reflect(BossExitRespBody.prototype, "message.BossExitRespBody", ["aone.AoneBody"]);
    var BossExitResponse = (function () {
        function BossExitResponse() {
            this.header = new aone.AoneRespHeader(BossExitResponse.ID);
            this.body = new BossExitRespBody();
        }
        BossExitResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossExitResponse.prototype.to_bytes = function (encoder) { return false; };
        BossExitResponse.ID = 10103;
        return BossExitResponse;
    }());
    message.BossExitResponse = BossExitResponse;
    __reflect(BossExitResponse.prototype, "message.BossExitResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景中移动请求
    // request BossMove
    ////////////////////////////////////////////////////////////////////////////////
    var BossMoveReqBody = (function () {
        function BossMoveReqBody() {
            this.scene_x = 0; // 场景坐标
            this.scene_y = 0; // 场景坐标
        }
        BossMoveReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BossMoveReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // scene_x
            encoder.write_fixuint32(this.scene_x);
            // scene_y
            encoder.write_fixuint32(this.scene_y);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossMoveReqBody;
    }());
    message.BossMoveReqBody = BossMoveReqBody;
    __reflect(BossMoveReqBody.prototype, "message.BossMoveReqBody", ["aone.AoneBody"]);
    var BossMoveRequest = (function () {
        function BossMoveRequest() {
            this.header = new aone.AoneReqHeader(BossMoveRequest.ID);
            this.body = new BossMoveReqBody();
        }
        BossMoveRequest.prototype.parse_bytes = function (decoder) { return false; };
        BossMoveRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossMoveRequest.ID = 10104;
        return BossMoveRequest;
    }());
    message.BossMoveRequest = BossMoveRequest;
    __reflect(BossMoveRequest.prototype, "message.BossMoveRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景中移动回复
    // response BossMove
    ////////////////////////////////////////////////////////////////////////////////
    var BossMoveRespBody = (function () {
        function BossMoveRespBody() {
            this.roleInfo = []; // 角色基本信息
        }
        BossMoveRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            var roleInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roleInfo_count; i++) {
                this.roleInfo.push(new message.BossRoleInfo());
                if (!this.roleInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossMoveRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BossMoveRespBody;
    }());
    message.BossMoveRespBody = BossMoveRespBody;
    __reflect(BossMoveRespBody.prototype, "message.BossMoveRespBody", ["aone.AoneBody"]);
    var BossMoveResponse = (function () {
        function BossMoveResponse() {
            this.header = new aone.AoneRespHeader(BossMoveResponse.ID);
            this.body = new BossMoveRespBody();
        }
        BossMoveResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossMoveResponse.prototype.to_bytes = function (encoder) { return false; };
        BossMoveResponse.ID = 10105;
        return BossMoveResponse;
    }());
    message.BossMoveResponse = BossMoveResponse;
    __reflect(BossMoveResponse.prototype, "message.BossMoveResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 清空死亡冷却请求
    // request BossDeadCooling
    ////////////////////////////////////////////////////////////////////////////////
    var BossDeadCoolingReqBody = (function () {
        function BossDeadCoolingReqBody() {
        }
        BossDeadCoolingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BossDeadCoolingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossDeadCoolingReqBody;
    }());
    message.BossDeadCoolingReqBody = BossDeadCoolingReqBody;
    __reflect(BossDeadCoolingReqBody.prototype, "message.BossDeadCoolingReqBody", ["aone.AoneBody"]);
    var BossDeadCoolingRequest = (function () {
        function BossDeadCoolingRequest() {
            this.header = new aone.AoneReqHeader(BossDeadCoolingRequest.ID);
            this.body = new BossDeadCoolingReqBody();
        }
        BossDeadCoolingRequest.prototype.parse_bytes = function (decoder) { return false; };
        BossDeadCoolingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossDeadCoolingRequest.ID = 10106;
        return BossDeadCoolingRequest;
    }());
    message.BossDeadCoolingRequest = BossDeadCoolingRequest;
    __reflect(BossDeadCoolingRequest.prototype, "message.BossDeadCoolingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 清空死亡冷却回复
    // response BossDeadCooling
    ////////////////////////////////////////////////////////////////////////////////
    var BossDeadCoolingRespBody = (function () {
        function BossDeadCoolingRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.BossRoleInfo(); // 角色基本信息
        }
        BossDeadCoolingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BossDeadCoolingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BossDeadCoolingRespBody;
    }());
    message.BossDeadCoolingRespBody = BossDeadCoolingRespBody;
    __reflect(BossDeadCoolingRespBody.prototype, "message.BossDeadCoolingRespBody", ["aone.AoneBody"]);
    var BossDeadCoolingResponse = (function () {
        function BossDeadCoolingResponse() {
            this.header = new aone.AoneRespHeader(BossDeadCoolingResponse.ID);
            this.body = new BossDeadCoolingRespBody();
        }
        BossDeadCoolingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossDeadCoolingResponse.prototype.to_bytes = function (encoder) { return false; };
        BossDeadCoolingResponse.ID = 10107;
        return BossDeadCoolingResponse;
    }());
    message.BossDeadCoolingResponse = BossDeadCoolingResponse;
    __reflect(BossDeadCoolingResponse.prototype, "message.BossDeadCoolingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 实时同步伤害请求
    // request BossSynchronousHurt
    ////////////////////////////////////////////////////////////////////////////////
    var BossSynchronousHurtReqBody = (function () {
        function BossSynchronousHurtReqBody() {
            this.sequence = 0; // 战斗序号
            this.hurtValue = 0; // 伤害
        }
        BossSynchronousHurtReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BossSynchronousHurtReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // hurtValue
            encoder.write_float64(this.hurtValue);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossSynchronousHurtReqBody;
    }());
    message.BossSynchronousHurtReqBody = BossSynchronousHurtReqBody;
    __reflect(BossSynchronousHurtReqBody.prototype, "message.BossSynchronousHurtReqBody", ["aone.AoneBody"]);
    var BossSynchronousHurtRequest = (function () {
        function BossSynchronousHurtRequest() {
            this.header = new aone.AoneReqHeader(BossSynchronousHurtRequest.ID);
            this.body = new BossSynchronousHurtReqBody();
        }
        BossSynchronousHurtRequest.prototype.parse_bytes = function (decoder) { return false; };
        BossSynchronousHurtRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossSynchronousHurtRequest.ID = 10108;
        return BossSynchronousHurtRequest;
    }());
    message.BossSynchronousHurtRequest = BossSynchronousHurtRequest;
    __reflect(BossSynchronousHurtRequest.prototype, "message.BossSynchronousHurtRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 实时同步伤害回复
    // response BossSynchronousHurt
    ////////////////////////////////////////////////////////////////////////////////
    var BossSynchronousHurtRespBody = (function () {
        function BossSynchronousHurtRespBody() {
            this.value = 0;
        }
        BossSynchronousHurtRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BossSynchronousHurtRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BossSynchronousHurtRespBody;
    }());
    message.BossSynchronousHurtRespBody = BossSynchronousHurtRespBody;
    __reflect(BossSynchronousHurtRespBody.prototype, "message.BossSynchronousHurtRespBody", ["aone.AoneBody"]);
    var BossSynchronousHurtResponse = (function () {
        function BossSynchronousHurtResponse() {
            this.header = new aone.AoneRespHeader(BossSynchronousHurtResponse.ID);
            this.body = new BossSynchronousHurtRespBody();
        }
        BossSynchronousHurtResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossSynchronousHurtResponse.prototype.to_bytes = function (encoder) { return false; };
        BossSynchronousHurtResponse.ID = 10109;
        return BossSynchronousHurtResponse;
    }());
    message.BossSynchronousHurtResponse = BossSynchronousHurtResponse;
    __reflect(BossSynchronousHurtResponse.prototype, "message.BossSynchronousHurtResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战boss请求
    // request BossBattle
    ////////////////////////////////////////////////////////////////////////////////
    var BossBattleReqBody = (function () {
        function BossBattleReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
            this.totalDamage = 0; // 此次战斗总伤害
        }
        BossBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BossBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            // totalDamage
            encoder.write_float64(this.totalDamage);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossBattleReqBody;
    }());
    message.BossBattleReqBody = BossBattleReqBody;
    __reflect(BossBattleReqBody.prototype, "message.BossBattleReqBody", ["aone.AoneBody"]);
    var BossBattleRequest = (function () {
        function BossBattleRequest() {
            this.header = new aone.AoneReqHeader(BossBattleRequest.ID);
            this.body = new BossBattleReqBody();
        }
        BossBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        BossBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossBattleRequest.ID = 10110;
        return BossBattleRequest;
    }());
    message.BossBattleRequest = BossBattleRequest;
    __reflect(BossBattleRequest.prototype, "message.BossBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战boss回复
    // response BossBattle
    ////////////////////////////////////////////////////////////////////////////////
    var BossBattleRespBody = (function () {
        function BossBattleRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.BossRoleInfo(); // 角色基本信息
            this.is_kill = false; // 是否击杀
        }
        BossBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // is_kill
            if (decoder_.eof())
                return true;
            this.is_kill = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BossBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BossBattleRespBody;
    }());
    message.BossBattleRespBody = BossBattleRespBody;
    __reflect(BossBattleRespBody.prototype, "message.BossBattleRespBody", ["aone.AoneBody"]);
    var BossBattleResponse = (function () {
        function BossBattleResponse() {
            this.header = new aone.AoneRespHeader(BossBattleResponse.ID);
            this.body = new BossBattleRespBody();
        }
        BossBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        BossBattleResponse.ID = 10111;
        return BossBattleResponse;
    }());
    message.BossBattleResponse = BossBattleResponse;
    __reflect(BossBattleResponse.prototype, "message.BossBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 伤害排行请求
    // request BossRank
    ////////////////////////////////////////////////////////////////////////////////
    var BossRankReqBody = (function () {
        function BossRankReqBody() {
        }
        BossRankReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BossRankReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossRankReqBody;
    }());
    message.BossRankReqBody = BossRankReqBody;
    __reflect(BossRankReqBody.prototype, "message.BossRankReqBody", ["aone.AoneBody"]);
    var BossRankRequest = (function () {
        function BossRankRequest() {
            this.header = new aone.AoneReqHeader(BossRankRequest.ID);
            this.body = new BossRankReqBody();
        }
        BossRankRequest.prototype.parse_bytes = function (decoder) { return false; };
        BossRankRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossRankRequest.ID = 10112;
        return BossRankRequest;
    }());
    message.BossRankRequest = BossRankRequest;
    __reflect(BossRankRequest.prototype, "message.BossRankRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 伤害排行回复
    // response BossRank
    ////////////////////////////////////////////////////////////////////////////////
    var BossRankRespBody = (function () {
        function BossRankRespBody() {
            this.items = [];
            this.rank = 0; // 自己的排名
        }
        BossRankRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.RankBaseItemInfo());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BossRankRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BossRankRespBody;
    }());
    message.BossRankRespBody = BossRankRespBody;
    __reflect(BossRankRespBody.prototype, "message.BossRankRespBody", ["aone.AoneBody"]);
    var BossRankResponse = (function () {
        function BossRankResponse() {
            this.header = new aone.AoneRespHeader(BossRankResponse.ID);
            this.body = new BossRankRespBody();
        }
        BossRankResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossRankResponse.prototype.to_bytes = function (encoder) { return false; };
        BossRankResponse.ID = 10113;
        return BossRankResponse;
    }());
    message.BossRankResponse = BossRankResponse;
    __reflect(BossRankResponse.prototype, "message.BossRankResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取boss信息请求
    // request BossInfo
    ////////////////////////////////////////////////////////////////////////////////
    var BossInfoReqBody = (function () {
        function BossInfoReqBody() {
        }
        BossInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BossInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossInfoReqBody;
    }());
    message.BossInfoReqBody = BossInfoReqBody;
    __reflect(BossInfoReqBody.prototype, "message.BossInfoReqBody", ["aone.AoneBody"]);
    var BossInfoRequest = (function () {
        function BossInfoRequest() {
            this.header = new aone.AoneReqHeader(BossInfoRequest.ID);
            this.body = new BossInfoReqBody();
        }
        BossInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        BossInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossInfoRequest.ID = 10114;
        return BossInfoRequest;
    }());
    message.BossInfoRequest = BossInfoRequest;
    __reflect(BossInfoRequest.prototype, "message.BossInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取boss信息回复
    // response BossInfo
    ////////////////////////////////////////////////////////////////////////////////
    var BossInfoRespBody = (function () {
        function BossInfoRespBody() {
            this.bossInfo = new message.BossInfo(); // boss信息
            this.items = []; // 排行信息
            this.progresses = []; // 进程变化
        }
        BossInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // bossInfo
            if (decoder_.eof())
                return true;
            if (!this.bossInfo.parse_bytes(decoder_))
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.RankBaseItemInfo());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            // progresses
            if (decoder_.eof())
                return true;
            var progresses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < progresses_count; i++) {
                this.progresses.push(new message.ProgressInfo());
                if (!this.progresses[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BossInfoRespBody;
    }());
    message.BossInfoRespBody = BossInfoRespBody;
    __reflect(BossInfoRespBody.prototype, "message.BossInfoRespBody", ["aone.AoneBody"]);
    var BossInfoResponse = (function () {
        function BossInfoResponse() {
            this.header = new aone.AoneRespHeader(BossInfoResponse.ID);
            this.body = new BossInfoRespBody();
        }
        BossInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BossInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        BossInfoResponse.ID = 10115;
        return BossInfoResponse;
    }());
    message.BossInfoResponse = BossInfoResponse;
    __reflect(BossInfoResponse.prototype, "message.BossInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(BossEntryRequest.ID, function () { return new BossEntryRequest(); });
    aone.MessageFactory.getInstance().register(BossEntryResponse.ID, function () { return new BossEntryResponse(); });
    aone.MessageFactory.getInstance().register(BossExitRequest.ID, function () { return new BossExitRequest(); });
    aone.MessageFactory.getInstance().register(BossExitResponse.ID, function () { return new BossExitResponse(); });
    aone.MessageFactory.getInstance().register(BossMoveRequest.ID, function () { return new BossMoveRequest(); });
    aone.MessageFactory.getInstance().register(BossMoveResponse.ID, function () { return new BossMoveResponse(); });
    aone.MessageFactory.getInstance().register(BossDeadCoolingRequest.ID, function () { return new BossDeadCoolingRequest(); });
    aone.MessageFactory.getInstance().register(BossDeadCoolingResponse.ID, function () { return new BossDeadCoolingResponse(); });
    aone.MessageFactory.getInstance().register(BossSynchronousHurtRequest.ID, function () { return new BossSynchronousHurtRequest(); });
    aone.MessageFactory.getInstance().register(BossSynchronousHurtResponse.ID, function () { return new BossSynchronousHurtResponse(); });
    aone.MessageFactory.getInstance().register(BossBattleRequest.ID, function () { return new BossBattleRequest(); });
    aone.MessageFactory.getInstance().register(BossBattleResponse.ID, function () { return new BossBattleResponse(); });
    aone.MessageFactory.getInstance().register(BossRankRequest.ID, function () { return new BossRankRequest(); });
    aone.MessageFactory.getInstance().register(BossRankResponse.ID, function () { return new BossRankResponse(); });
    aone.MessageFactory.getInstance().register(BossInfoRequest.ID, function () { return new BossInfoRequest(); });
    aone.MessageFactory.getInstance().register(BossInfoResponse.ID, function () { return new BossInfoResponse(); });
})(message || (message = {}));
//Date: 2019-2
//File: msg_cg_chat.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 进入聊天频道请求
    // request EnterChat
    ////////////////////////////////////////////////////////////////////////////////
    var EnterChatReqBody = (function () {
        function EnterChatReqBody() {
            this.channel_id = 0;
        }
        EnterChatReqBody.prototype.parse_bytes = function (decoder) { return false; };
        EnterChatReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // channel_id
            encoder.write_fixuint32(this.channel_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return EnterChatReqBody;
    }());
    message.EnterChatReqBody = EnterChatReqBody;
    __reflect(EnterChatReqBody.prototype, "message.EnterChatReqBody", ["aone.AoneBody"]);
    var EnterChatRequest = (function () {
        function EnterChatRequest() {
            this.header = new aone.AoneReqHeader(EnterChatRequest.ID);
            this.body = new EnterChatReqBody();
        }
        EnterChatRequest.prototype.parse_bytes = function (decoder) { return false; };
        EnterChatRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        EnterChatRequest.ID = 39800;
        return EnterChatRequest;
    }());
    message.EnterChatRequest = EnterChatRequest;
    __reflect(EnterChatRequest.prototype, "message.EnterChatRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 进入聊天频道回复
    // response EnterChat
    ////////////////////////////////////////////////////////////////////////////////
    var EnterChatRespBody = (function () {
        function EnterChatRespBody() {
            this.channel_id = 0;
            this.channel_count = 0;
        }
        EnterChatRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // channel_id
            if (decoder_.eof())
                return true;
            this.channel_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // channel_count
            if (decoder_.eof())
                return true;
            this.channel_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        EnterChatRespBody.prototype.to_bytes = function (encoder) { return false; };
        return EnterChatRespBody;
    }());
    message.EnterChatRespBody = EnterChatRespBody;
    __reflect(EnterChatRespBody.prototype, "message.EnterChatRespBody", ["aone.AoneBody"]);
    var EnterChatResponse = (function () {
        function EnterChatResponse() {
            this.header = new aone.AoneRespHeader(EnterChatResponse.ID);
            this.body = new EnterChatRespBody();
        }
        EnterChatResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        EnterChatResponse.prototype.to_bytes = function (encoder) { return false; };
        EnterChatResponse.ID = 39801;
        return EnterChatResponse;
    }());
    message.EnterChatResponse = EnterChatResponse;
    __reflect(EnterChatResponse.prototype, "message.EnterChatResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 发送聊天请求
    // request SendChat
    ////////////////////////////////////////////////////////////////////////////////
    var SendChatReqBody = (function () {
        function SendChatReqBody() {
            this.type = 0; // 聊天频道类型
            this.receiverId = 0; // 接收者id
            this.content = ""; // 发送内容/战报展示(A vs B)(战斗类型)
            this.show_type = 0; // 展示类型
            this.show_id = 0; // 可能是武将，物品
            this.battle_id = ""; // 战报
            this.receiver_groupId = 0; // 接收者所在分区id
        }
        SendChatReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SendChatReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // receiverId
            encoder.write_fixuint32(this.receiverId);
            // content
            encoder.write_string(this.content);
            // show_type
            encoder.write_fixuint32(this.show_type);
            // show_id
            encoder.write_fixuint32(this.show_id);
            // battle_id
            encoder.write_string(this.battle_id);
            // receiver_groupId
            encoder.write_fixuint32(this.receiver_groupId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SendChatReqBody;
    }());
    message.SendChatReqBody = SendChatReqBody;
    __reflect(SendChatReqBody.prototype, "message.SendChatReqBody", ["aone.AoneBody"]);
    var SendChatRequest = (function () {
        function SendChatRequest() {
            this.header = new aone.AoneReqHeader(SendChatRequest.ID);
            this.body = new SendChatReqBody();
        }
        SendChatRequest.prototype.parse_bytes = function (decoder) { return false; };
        SendChatRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SendChatRequest.ID = 39802;
        return SendChatRequest;
    }());
    message.SendChatRequest = SendChatRequest;
    __reflect(SendChatRequest.prototype, "message.SendChatRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 发送聊天信息回复
    // response SendChat
    ////////////////////////////////////////////////////////////////////////////////
    var SendChatRespBody = (function () {
        function SendChatRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SendChatRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SendChatRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SendChatRespBody;
    }());
    message.SendChatRespBody = SendChatRespBody;
    __reflect(SendChatRespBody.prototype, "message.SendChatRespBody", ["aone.AoneBody"]);
    var SendChatResponse = (function () {
        function SendChatResponse() {
            this.header = new aone.AoneRespHeader(SendChatResponse.ID);
            this.body = new SendChatRespBody();
        }
        SendChatResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SendChatResponse.prototype.to_bytes = function (encoder) { return false; };
        SendChatResponse.ID = 39803;
        return SendChatResponse;
    }());
    message.SendChatResponse = SendChatResponse;
    __reflect(SendChatResponse.prototype, "message.SendChatResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取聊天历史记录请求
    // request ChatHistroy
    ////////////////////////////////////////////////////////////////////////////////
    var ChatHistroyReqBody = (function () {
        function ChatHistroyReqBody() {
            this.type = 0; // 频道(0表示综合频道)
            this.chat_id = 0;
        }
        ChatHistroyReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ChatHistroyReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // chat_id
            encoder.write_fixuint32(this.chat_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChatHistroyReqBody;
    }());
    message.ChatHistroyReqBody = ChatHistroyReqBody;
    __reflect(ChatHistroyReqBody.prototype, "message.ChatHistroyReqBody", ["aone.AoneBody"]);
    var ChatHistroyRequest = (function () {
        function ChatHistroyRequest() {
            this.header = new aone.AoneReqHeader(ChatHistroyRequest.ID);
            this.body = new ChatHistroyReqBody();
        }
        ChatHistroyRequest.prototype.parse_bytes = function (decoder) { return false; };
        ChatHistroyRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChatHistroyRequest.ID = 39804;
        return ChatHistroyRequest;
    }());
    message.ChatHistroyRequest = ChatHistroyRequest;
    __reflect(ChatHistroyRequest.prototype, "message.ChatHistroyRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct ChatMessageChunk
    ////////////////////////////////////////////////////////////////////////////////
    var ChatMessageChunk = (function () {
        function ChatMessageChunk() {
            this.chats = [];
        }
        ChatMessageChunk.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // chats
            if (decoder_.eof())
                return true;
            var chats_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < chats_count; i++) {
                this.chats.push(new message.ChatMessage());
                if (!this.chats[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChatMessageChunk.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // chats
            encoder.write_fixuint32(Object.keys(this.chats).length);
            for (var k in this.chats) {
                if (!this.chats[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChatMessageChunk;
    }());
    message.ChatMessageChunk = ChatMessageChunk;
    __reflect(ChatMessageChunk.prototype, "message.ChatMessageChunk", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取聊天历史记录回复
    // response ChatHistroy
    ////////////////////////////////////////////////////////////////////////////////
    var ChatHistroyRespBody = (function () {
        function ChatHistroyRespBody() {
            this.chats = []; // ChatMessageChunk
        }
        ChatHistroyRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // chats
            if (decoder_.eof())
                return true;
            this.chats = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ChatHistroyRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ChatHistroyRespBody;
    }());
    message.ChatHistroyRespBody = ChatHistroyRespBody;
    __reflect(ChatHistroyRespBody.prototype, "message.ChatHistroyRespBody", ["aone.AoneBody"]);
    var ChatHistroyResponse = (function () {
        function ChatHistroyResponse() {
            this.header = new aone.AoneRespHeader(ChatHistroyResponse.ID);
            this.body = new ChatHistroyRespBody();
        }
        ChatHistroyResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChatHistroyResponse.prototype.to_bytes = function (encoder) { return false; };
        ChatHistroyResponse.ID = 39805;
        return ChatHistroyResponse;
    }());
    message.ChatHistroyResponse = ChatHistroyResponse;
    __reflect(ChatHistroyResponse.prototype, "message.ChatHistroyResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(EnterChatRequest.ID, function () { return new EnterChatRequest(); });
    aone.MessageFactory.getInstance().register(EnterChatResponse.ID, function () { return new EnterChatResponse(); });
    aone.MessageFactory.getInstance().register(SendChatRequest.ID, function () { return new SendChatRequest(); });
    aone.MessageFactory.getInstance().register(SendChatResponse.ID, function () { return new SendChatResponse(); });
    aone.MessageFactory.getInstance().register(ChatHistroyRequest.ID, function () { return new ChatHistroyRequest(); });
    aone.MessageFactory.getInstance().register(ChatHistroyResponse.ID, function () { return new ChatHistroyResponse(); });
})(message || (message = {}));
//Date: 2019-2
//File: msg_cg_comment.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // struct PostInfosChunk
    ////////////////////////////////////////////////////////////////////////////////
    var PostInfosChunk = (function () {
        function PostInfosChunk() {
            this.infos = [];
        }
        PostInfosChunk.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // infos
            if (decoder_.eof())
                return true;
            var infos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < infos_count; i++) {
                this.infos.push(new message.PostInfo());
                if (!this.infos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PostInfosChunk.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // infos
            encoder.write_fixuint32(Object.keys(this.infos).length);
            for (var k in this.infos) {
                if (!this.infos[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PostInfosChunk;
    }());
    message.PostInfosChunk = PostInfosChunk;
    __reflect(PostInfosChunk.prototype, "message.PostInfosChunk", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 发表帖子请求
    // request PostPublish
    ////////////////////////////////////////////////////////////////////////////////
    var PostPublishReqBody = (function () {
        function PostPublishReqBody() {
            this.type = 0; // 版面类型
            this.type_id = 0; // 类型Id
            this.content = ""; // 评论内容
            this.formationInfo = []; // 阵容信息
        }
        PostPublishReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PostPublishReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // type_id
            encoder.write_fixuint32(this.type_id);
            // content
            encoder.write_string(this.content);
            // formationInfo
            encoder.write_fixuint32(Object.keys(this.formationInfo).length);
            for (var k in this.formationInfo) {
                if (!this.formationInfo[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PostPublishReqBody;
    }());
    message.PostPublishReqBody = PostPublishReqBody;
    __reflect(PostPublishReqBody.prototype, "message.PostPublishReqBody", ["aone.AoneBody"]);
    var PostPublishRequest = (function () {
        function PostPublishRequest() {
            this.header = new aone.AoneReqHeader(PostPublishRequest.ID);
            this.body = new PostPublishReqBody();
        }
        PostPublishRequest.prototype.parse_bytes = function (decoder) { return false; };
        PostPublishRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PostPublishRequest.ID = 39300;
        return PostPublishRequest;
    }());
    message.PostPublishRequest = PostPublishRequest;
    __reflect(PostPublishRequest.prototype, "message.PostPublishRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 发表帖子回复
    // response PostPublish
    ////////////////////////////////////////////////////////////////////////////////
    var PostPublishRespBody = (function () {
        function PostPublishRespBody() {
            this.postInfo = new message.PostInfo();
            this.gameInfo = new message.GameInfo();
        }
        PostPublishRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // postInfo
            if (decoder_.eof())
                return true;
            if (!this.postInfo.parse_bytes(decoder_))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PostPublishRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PostPublishRespBody;
    }());
    message.PostPublishRespBody = PostPublishRespBody;
    __reflect(PostPublishRespBody.prototype, "message.PostPublishRespBody", ["aone.AoneBody"]);
    var PostPublishResponse = (function () {
        function PostPublishResponse() {
            this.header = new aone.AoneRespHeader(PostPublishResponse.ID);
            this.body = new PostPublishRespBody();
        }
        PostPublishResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PostPublishResponse.prototype.to_bytes = function (encoder) { return false; };
        PostPublishResponse.ID = 39301;
        return PostPublishResponse;
    }());
    message.PostPublishResponse = PostPublishResponse;
    __reflect(PostPublishResponse.prototype, "message.PostPublishResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除帖子请求
    // request PostDelete
    ////////////////////////////////////////////////////////////////////////////////
    var PostDeleteReqBody = (function () {
        function PostDeleteReqBody() {
            this.post_id = 0; // 帖子id
        }
        PostDeleteReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PostDeleteReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // post_id
            encoder.write_fixuint32(this.post_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PostDeleteReqBody;
    }());
    message.PostDeleteReqBody = PostDeleteReqBody;
    __reflect(PostDeleteReqBody.prototype, "message.PostDeleteReqBody", ["aone.AoneBody"]);
    var PostDeleteRequest = (function () {
        function PostDeleteRequest() {
            this.header = new aone.AoneReqHeader(PostDeleteRequest.ID);
            this.body = new PostDeleteReqBody();
        }
        PostDeleteRequest.prototype.parse_bytes = function (decoder) { return false; };
        PostDeleteRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PostDeleteRequest.ID = 39302;
        return PostDeleteRequest;
    }());
    message.PostDeleteRequest = PostDeleteRequest;
    __reflect(PostDeleteRequest.prototype, "message.PostDeleteRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除帖子回复
    // response PostDelete
    ////////////////////////////////////////////////////////////////////////////////
    var PostDeleteRespBody = (function () {
        function PostDeleteRespBody() {
        }
        PostDeleteRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        PostDeleteRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PostDeleteRespBody;
    }());
    message.PostDeleteRespBody = PostDeleteRespBody;
    __reflect(PostDeleteRespBody.prototype, "message.PostDeleteRespBody", ["aone.AoneBody"]);
    var PostDeleteResponse = (function () {
        function PostDeleteResponse() {
            this.header = new aone.AoneRespHeader(PostDeleteResponse.ID);
            this.body = new PostDeleteRespBody();
        }
        PostDeleteResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PostDeleteResponse.prototype.to_bytes = function (encoder) { return false; };
        PostDeleteResponse.ID = 39303;
        return PostDeleteResponse;
    }());
    message.PostDeleteResponse = PostDeleteResponse;
    __reflect(PostDeleteResponse.prototype, "message.PostDeleteResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 点赞请求
    // request PraiseClick
    ////////////////////////////////////////////////////////////////////////////////
    var PraiseClickReqBody = (function () {
        function PraiseClickReqBody() {
            this.post_id = 0; // 帖子id
            this.is_praise = false; // 是赞还是踩
        }
        PraiseClickReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PraiseClickReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // post_id
            encoder.write_fixuint32(this.post_id);
            // is_praise
            encoder.write_bool(this.is_praise);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PraiseClickReqBody;
    }());
    message.PraiseClickReqBody = PraiseClickReqBody;
    __reflect(PraiseClickReqBody.prototype, "message.PraiseClickReqBody", ["aone.AoneBody"]);
    var PraiseClickRequest = (function () {
        function PraiseClickRequest() {
            this.header = new aone.AoneReqHeader(PraiseClickRequest.ID);
            this.body = new PraiseClickReqBody();
        }
        PraiseClickRequest.prototype.parse_bytes = function (decoder) { return false; };
        PraiseClickRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PraiseClickRequest.ID = 39304;
        return PraiseClickRequest;
    }());
    message.PraiseClickRequest = PraiseClickRequest;
    __reflect(PraiseClickRequest.prototype, "message.PraiseClickRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 点赞回复
    // response PraiseClick
    ////////////////////////////////////////////////////////////////////////////////
    var PraiseClickRespBody = (function () {
        function PraiseClickRespBody() {
            this.praises = 0;
        }
        PraiseClickRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // praises
            if (decoder_.eof())
                return true;
            this.praises = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PraiseClickRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PraiseClickRespBody;
    }());
    message.PraiseClickRespBody = PraiseClickRespBody;
    __reflect(PraiseClickRespBody.prototype, "message.PraiseClickRespBody", ["aone.AoneBody"]);
    var PraiseClickResponse = (function () {
        function PraiseClickResponse() {
            this.header = new aone.AoneRespHeader(PraiseClickResponse.ID);
            this.body = new PraiseClickRespBody();
        }
        PraiseClickResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PraiseClickResponse.prototype.to_bytes = function (encoder) { return false; };
        PraiseClickResponse.ID = 39305;
        return PraiseClickResponse;
    }());
    message.PraiseClickResponse = PraiseClickResponse;
    __reflect(PraiseClickResponse.prototype, "message.PraiseClickResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 发表评论请求
    // request CommentPublish
    ////////////////////////////////////////////////////////////////////////////////
    var CommentPublishReqBody = (function () {
        function CommentPublishReqBody() {
            this.type = 0; // 版面类型
            this.post_id = 0;
            this.content = "";
        }
        CommentPublishReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CommentPublishReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // post_id
            encoder.write_fixuint32(this.post_id);
            // content
            encoder.write_string(this.content);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CommentPublishReqBody;
    }());
    message.CommentPublishReqBody = CommentPublishReqBody;
    __reflect(CommentPublishReqBody.prototype, "message.CommentPublishReqBody", ["aone.AoneBody"]);
    var CommentPublishRequest = (function () {
        function CommentPublishRequest() {
            this.header = new aone.AoneReqHeader(CommentPublishRequest.ID);
            this.body = new CommentPublishReqBody();
        }
        CommentPublishRequest.prototype.parse_bytes = function (decoder) { return false; };
        CommentPublishRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CommentPublishRequest.ID = 39306;
        return CommentPublishRequest;
    }());
    message.CommentPublishRequest = CommentPublishRequest;
    __reflect(CommentPublishRequest.prototype, "message.CommentPublishRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 发表评论回复
    // response CommentPublish
    ////////////////////////////////////////////////////////////////////////////////
    var CommentPublishRespBody = (function () {
        function CommentPublishRespBody() {
            this.commentInfo = new message.CommentInfo();
            this.gameInfo = new message.GameInfo();
        }
        CommentPublishRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // commentInfo
            if (decoder_.eof())
                return true;
            if (!this.commentInfo.parse_bytes(decoder_))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        CommentPublishRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CommentPublishRespBody;
    }());
    message.CommentPublishRespBody = CommentPublishRespBody;
    __reflect(CommentPublishRespBody.prototype, "message.CommentPublishRespBody", ["aone.AoneBody"]);
    var CommentPublishResponse = (function () {
        function CommentPublishResponse() {
            this.header = new aone.AoneRespHeader(CommentPublishResponse.ID);
            this.body = new CommentPublishRespBody();
        }
        CommentPublishResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CommentPublishResponse.prototype.to_bytes = function (encoder) { return false; };
        CommentPublishResponse.ID = 39307;
        return CommentPublishResponse;
    }());
    message.CommentPublishResponse = CommentPublishResponse;
    __reflect(CommentPublishResponse.prototype, "message.CommentPublishResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除评论请求
    // request CommentDelete
    ////////////////////////////////////////////////////////////////////////////////
    var CommentDeleteReqBody = (function () {
        function CommentDeleteReqBody() {
            this.post_id = 0;
        }
        CommentDeleteReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CommentDeleteReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // post_id
            encoder.write_fixuint32(this.post_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CommentDeleteReqBody;
    }());
    message.CommentDeleteReqBody = CommentDeleteReqBody;
    __reflect(CommentDeleteReqBody.prototype, "message.CommentDeleteReqBody", ["aone.AoneBody"]);
    var CommentDeleteRequest = (function () {
        function CommentDeleteRequest() {
            this.header = new aone.AoneReqHeader(CommentDeleteRequest.ID);
            this.body = new CommentDeleteReqBody();
        }
        CommentDeleteRequest.prototype.parse_bytes = function (decoder) { return false; };
        CommentDeleteRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CommentDeleteRequest.ID = 39308;
        return CommentDeleteRequest;
    }());
    message.CommentDeleteRequest = CommentDeleteRequest;
    __reflect(CommentDeleteRequest.prototype, "message.CommentDeleteRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除评论回复
    // response CommentDelete
    ////////////////////////////////////////////////////////////////////////////////
    var CommentDeleteRespBody = (function () {
        function CommentDeleteRespBody() {
        }
        CommentDeleteRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        CommentDeleteRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CommentDeleteRespBody;
    }());
    message.CommentDeleteRespBody = CommentDeleteRespBody;
    __reflect(CommentDeleteRespBody.prototype, "message.CommentDeleteRespBody", ["aone.AoneBody"]);
    var CommentDeleteResponse = (function () {
        function CommentDeleteResponse() {
            this.header = new aone.AoneRespHeader(CommentDeleteResponse.ID);
            this.body = new CommentDeleteRespBody();
        }
        CommentDeleteResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CommentDeleteResponse.prototype.to_bytes = function (encoder) { return false; };
        CommentDeleteResponse.ID = 39309;
        return CommentDeleteResponse;
    }());
    message.CommentDeleteResponse = CommentDeleteResponse;
    __reflect(CommentDeleteResponse.prototype, "message.CommentDeleteResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询帖子列表请求
    // request PostList
    ////////////////////////////////////////////////////////////////////////////////
    var PostListReqBody = (function () {
        function PostListReqBody() {
            this.type = 0; // 版面类型
            this.type_id = 0; // 类型Id
            this.is_self = false; // 是否只看自己
            this.start_id = 0; // 起始Id每次拉取20个直到回复数量为零
        }
        PostListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PostListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // type_id
            encoder.write_fixuint32(this.type_id);
            // is_self
            encoder.write_bool(this.is_self);
            // start_id
            encoder.write_fixuint32(this.start_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PostListReqBody;
    }());
    message.PostListReqBody = PostListReqBody;
    __reflect(PostListReqBody.prototype, "message.PostListReqBody", ["aone.AoneBody"]);
    var PostListRequest = (function () {
        function PostListRequest() {
            this.header = new aone.AoneReqHeader(PostListRequest.ID);
            this.body = new PostListReqBody();
        }
        PostListRequest.prototype.parse_bytes = function (decoder) { return false; };
        PostListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PostListRequest.ID = 39310;
        return PostListRequest;
    }());
    message.PostListRequest = PostListRequest;
    __reflect(PostListRequest.prototype, "message.PostListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询帖子列表回复
    // response PostList
    ////////////////////////////////////////////////////////////////////////////////
    var PostListRespBody = (function () {
        function PostListRespBody() {
            this.posts = []; // PostInfosChunk
        }
        PostListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // posts
            if (decoder_.eof())
                return true;
            this.posts = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PostListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PostListRespBody;
    }());
    message.PostListRespBody = PostListRespBody;
    __reflect(PostListRespBody.prototype, "message.PostListRespBody", ["aone.AoneBody"]);
    var PostListResponse = (function () {
        function PostListResponse() {
            this.header = new aone.AoneRespHeader(PostListResponse.ID);
            this.body = new PostListRespBody();
        }
        PostListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PostListResponse.prototype.to_bytes = function (encoder) { return false; };
        PostListResponse.ID = 39311;
        return PostListResponse;
    }());
    message.PostListResponse = PostListResponse;
    __reflect(PostListResponse.prototype, "message.PostListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询帖子评论请求
    // request PostComment
    ////////////////////////////////////////////////////////////////////////////////
    var PostCommentReqBody = (function () {
        function PostCommentReqBody() {
            this.post_id = 0;
            this.start_id = 0;
        }
        PostCommentReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PostCommentReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // post_id
            encoder.write_fixuint32(this.post_id);
            // start_id
            encoder.write_fixuint32(this.start_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PostCommentReqBody;
    }());
    message.PostCommentReqBody = PostCommentReqBody;
    __reflect(PostCommentReqBody.prototype, "message.PostCommentReqBody", ["aone.AoneBody"]);
    var PostCommentRequest = (function () {
        function PostCommentRequest() {
            this.header = new aone.AoneReqHeader(PostCommentRequest.ID);
            this.body = new PostCommentReqBody();
        }
        PostCommentRequest.prototype.parse_bytes = function (decoder) { return false; };
        PostCommentRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PostCommentRequest.ID = 39312;
        return PostCommentRequest;
    }());
    message.PostCommentRequest = PostCommentRequest;
    __reflect(PostCommentRequest.prototype, "message.PostCommentRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询帖子评论回复
    // response PostComment
    ////////////////////////////////////////////////////////////////////////////////
    var PostCommentRespBody = (function () {
        function PostCommentRespBody() {
            this.infos = [];
        }
        PostCommentRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // infos
            if (decoder_.eof())
                return true;
            var infos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < infos_count; i++) {
                this.infos.push(new message.CommentInfo());
                if (!this.infos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PostCommentRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PostCommentRespBody;
    }());
    message.PostCommentRespBody = PostCommentRespBody;
    __reflect(PostCommentRespBody.prototype, "message.PostCommentRespBody", ["aone.AoneBody"]);
    var PostCommentResponse = (function () {
        function PostCommentResponse() {
            this.header = new aone.AoneRespHeader(PostCommentResponse.ID);
            this.body = new PostCommentRespBody();
        }
        PostCommentResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PostCommentResponse.prototype.to_bytes = function (encoder) { return false; };
        PostCommentResponse.ID = 39313;
        return PostCommentResponse;
    }());
    message.PostCommentResponse = PostCommentResponse;
    __reflect(PostCommentResponse.prototype, "message.PostCommentResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(PostPublishRequest.ID, function () { return new PostPublishRequest(); });
    aone.MessageFactory.getInstance().register(PostPublishResponse.ID, function () { return new PostPublishResponse(); });
    aone.MessageFactory.getInstance().register(PostDeleteRequest.ID, function () { return new PostDeleteRequest(); });
    aone.MessageFactory.getInstance().register(PostDeleteResponse.ID, function () { return new PostDeleteResponse(); });
    aone.MessageFactory.getInstance().register(PraiseClickRequest.ID, function () { return new PraiseClickRequest(); });
    aone.MessageFactory.getInstance().register(PraiseClickResponse.ID, function () { return new PraiseClickResponse(); });
    aone.MessageFactory.getInstance().register(CommentPublishRequest.ID, function () { return new CommentPublishRequest(); });
    aone.MessageFactory.getInstance().register(CommentPublishResponse.ID, function () { return new CommentPublishResponse(); });
    aone.MessageFactory.getInstance().register(CommentDeleteRequest.ID, function () { return new CommentDeleteRequest(); });
    aone.MessageFactory.getInstance().register(CommentDeleteResponse.ID, function () { return new CommentDeleteResponse(); });
    aone.MessageFactory.getInstance().register(PostListRequest.ID, function () { return new PostListRequest(); });
    aone.MessageFactory.getInstance().register(PostListResponse.ID, function () { return new PostListResponse(); });
    aone.MessageFactory.getInstance().register(PostCommentRequest.ID, function () { return new PostCommentRequest(); });
    aone.MessageFactory.getInstance().register(PostCommentResponse.ID, function () { return new PostCommentResponse(); });
})(message || (message = {}));
//Date: 2020-1
//File: msg_cg_common.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了系统协议，包括请求服务器，心跳等。
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 场景Id描述：1、仙境id从1开始；2、仙境分支id从100开始；3、场景boss从20000开始：
    // 物品基础信息
    // struct GoodsInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GoodsInfo = (function () {
        function GoodsInfo() {
            this.goodsId = 0; // 物品Id
            this.count = 0; // 表示叠加数量
            this.index = 0; // 物品唯一标识
            this.showType = 0; // 展示状态
            this.overdue_time = 0; // 道具到期时间
        }
        GoodsInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // goodsId
            if (decoder_.eof())
                return true;
            this.goodsId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // count
            if (decoder_.eof())
                return true;
            this.count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // showType
            if (decoder_.eof())
                return true;
            this.showType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // overdue_time
            if (decoder_.eof())
                return true;
            this.overdue_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GoodsInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // goodsId
            encoder.write_fixuint32(this.goodsId);
            // count
            encoder.write_fixuint32(this.count);
            // index
            encoder.write_fixuint32(this.index);
            // showType
            encoder.write_fixuint32(this.showType);
            // overdue_time
            encoder.write_fixuint32(this.overdue_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GoodsInfo;
    }());
    message.GoodsInfo = GoodsInfo;
    __reflect(GoodsInfo.prototype, "message.GoodsInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 一组物品
    // struct GoodsGroupInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GoodsGroupInfo = (function () {
        function GoodsGroupInfo() {
            this.goodsInfo = []; // 一组物品
        }
        GoodsGroupInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // goodsInfo
            if (decoder_.eof())
                return true;
            var goodsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodsInfo_count; i++) {
                this.goodsInfo.push(new GoodsInfo());
                if (!this.goodsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GoodsGroupInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // goodsInfo
            encoder.write_fixuint32(Object.keys(this.goodsInfo).length);
            for (var k in this.goodsInfo) {
                if (!this.goodsInfo[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GoodsGroupInfo;
    }());
    message.GoodsGroupInfo = GoodsGroupInfo;
    __reflect(GoodsGroupInfo.prototype, "message.GoodsGroupInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 贡品信息
    // struct TributeInfo
    ////////////////////////////////////////////////////////////////////////////////
    var TributeInfo = (function () {
        function TributeInfo() {
            this.tribute_id = 0; // 贡品id
            this.tribute_name = ""; // 贡品名称
            this.buy_type = 0; // 购买类型(1rmb、2token)
            this.pay_index = 0; // 购买档位
            this.discount = 0; // 折扣
            this.goodses = []; // 贡品内容(id|count|show)
            this.sort_power = 0; // 排序
        }
        TributeInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // tribute_id
            if (decoder_.eof())
                return true;
            this.tribute_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // tribute_name
            if (decoder_.eof())
                return true;
            this.tribute_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // buy_type
            if (decoder_.eof())
                return true;
            this.buy_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pay_index
            if (decoder_.eof())
                return true;
            this.pay_index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // discount
            if (decoder_.eof())
                return true;
            this.discount = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // goodses
            if (decoder_.eof())
                return true;
            var goodses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodses_count; i++) {
                this.goodses.push(new GoodsInfo());
                if (!this.goodses[i].parse_bytes(decoder_))
                    return false;
            }
            // sort_power
            if (decoder_.eof())
                return true;
            this.sort_power = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        TributeInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // tribute_id
            encoder.write_fixuint32(this.tribute_id);
            // tribute_name
            encoder.write_string(this.tribute_name);
            // buy_type
            encoder.write_fixuint32(this.buy_type);
            // pay_index
            encoder.write_fixuint32(this.pay_index);
            // discount
            encoder.write_float64(this.discount);
            // goodses
            encoder.write_fixuint32(Object.keys(this.goodses).length);
            for (var k in this.goodses) {
                if (!this.goodses[k].to_bytes(encoder))
                    return false;
            }
            // sort_power
            encoder.write_fixuint32(this.sort_power);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return TributeInfo;
    }());
    message.TributeInfo = TributeInfo;
    __reflect(TributeInfo.prototype, "message.TributeInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 一组贡品
    // struct TributeGroupInfo
    ////////////////////////////////////////////////////////////////////////////////
    var TributeGroupInfo = (function () {
        function TributeGroupInfo() {
            this.tributeInfo = []; // 一组贡品
        }
        TributeGroupInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // tributeInfo
            if (decoder_.eof())
                return true;
            var tributeInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < tributeInfo_count; i++) {
                this.tributeInfo.push(new TributeInfo());
                if (!this.tributeInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        TributeGroupInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // tributeInfo
            encoder.write_fixuint32(Object.keys(this.tributeInfo).length);
            for (var k in this.tributeInfo) {
                if (!this.tributeInfo[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return TributeGroupInfo;
    }());
    message.TributeGroupInfo = TributeGroupInfo;
    __reflect(TributeGroupInfo.prototype, "message.TributeGroupInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 进程队列
    // struct ProgressInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ProgressInfo = (function () {
        function ProgressInfo() {
            this.type = 0; // 进程type
            this.info = 0; // 进程信息
            this.leftTime = 0; // 剩余时间
        }
        ProgressInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // info
            if (decoder_.eof())
                return true;
            this.info = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leftTime
            if (decoder_.eof())
                return true;
            this.leftTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ProgressInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // info
            encoder.write_fixuint32(this.info);
            // leftTime
            encoder.write_fixuint32(this.leftTime);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ProgressInfo;
    }());
    message.ProgressInfo = ProgressInfo;
    __reflect(ProgressInfo.prototype, "message.ProgressInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宠物信息
    // struct PetInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PetInfo = (function () {
        function PetInfo() {
            this.pet_id = 0; // 宠物id
            this.step = 0; // 宠物阶数
            this.star = 0; // 宠物星级
            this.situtation = 0; // 状态(出战/休息)
            this.hat_expireTime = 0; // 宠物帽到期时间
            this.is_hidden = false; // 是否隐藏
        }
        PetInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pet_id
            if (decoder_.eof())
                return true;
            this.pet_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // step
            if (decoder_.eof())
                return true;
            this.step = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // star
            if (decoder_.eof())
                return true;
            this.star = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // situtation
            if (decoder_.eof())
                return true;
            this.situtation = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // hat_expireTime
            if (decoder_.eof())
                return true;
            this.hat_expireTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_hidden
            if (decoder_.eof())
                return true;
            this.is_hidden = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PetInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pet_id
            encoder.write_fixuint32(this.pet_id);
            // step
            encoder.write_fixuint32(this.step);
            // star
            encoder.write_fixuint32(this.star);
            // situtation
            encoder.write_fixuint32(this.situtation);
            // hat_expireTime
            encoder.write_fixuint32(this.hat_expireTime);
            // is_hidden
            encoder.write_bool(this.is_hidden);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PetInfo;
    }());
    message.PetInfo = PetInfo;
    __reflect(PetInfo.prototype, "message.PetInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 君主简略信息
    // struct RoleBriefInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RoleBriefInfo = (function () {
        function RoleBriefInfo() {
            this.id = 0; // 君主ID
            this.name_type = 0; // 名称类型
            this.name = ""; // 君主名称
            this.level = 0; // 君主等级
            this.picId = 0; // 头像Id(在RoleShortInfo的features里字段名为"pic_id")
            this.picFrameId = 0; // 头像框Id(在RoleShortInfo的features里字段名为"pic_frame")
            this.fashionId = 0; // 形象Id与picId相关
            this.haloId = 0; // 光环Id
            this.titleId = 0; // 称号
            this.ladderRank = 0; // 天梯排名
            this.ladderMax = 0; // 天梯最高排名
            this.leagueId = 0; // 联盟Id
            this.leagueName = ""; // 所处联盟名称
            this.matchScore = 0; // 联赛积分
            this.is_online = false; // 是否在线
            this.logoutTime = 0; // 离线时长
            this.battleValue = 0; // 玩家战力值
            this.licenceLevel = 0; // 执照等级
            this.vipLevel = 0; // vip等级
            this.maxInstance = 0; // 通关最大普通副本
            this.petInfo = []; // 宠物信息
            this.agree_detail = false; // 是否允许查看详情(false允许,true不允许)
            this.agree_enter = false; // 同意进入主城
            this.group_id = 0; // 发送者分区Id
            this.server_id = 0; // 发送者所在服务id
            this.group_name = ""; // 发送者分区名称
        }
        RoleBriefInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // name_type
            if (decoder_.eof())
                return true;
            this.name_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // picId
            if (decoder_.eof())
                return true;
            this.picId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // picFrameId
            if (decoder_.eof())
                return true;
            this.picFrameId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // fashionId
            if (decoder_.eof())
                return true;
            this.fashionId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // haloId
            if (decoder_.eof())
                return true;
            this.haloId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // titleId
            if (decoder_.eof())
                return true;
            this.titleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // ladderRank
            if (decoder_.eof())
                return true;
            this.ladderRank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // ladderMax
            if (decoder_.eof())
                return true;
            this.ladderMax = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueId
            if (decoder_.eof())
                return true;
            this.leagueId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueName
            if (decoder_.eof())
                return true;
            this.leagueName = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // matchScore
            if (decoder_.eof())
                return true;
            this.matchScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_online
            if (decoder_.eof())
                return true;
            this.is_online = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // logoutTime
            if (decoder_.eof())
                return true;
            this.logoutTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // licenceLevel
            if (decoder_.eof())
                return true;
            this.licenceLevel = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // vipLevel
            if (decoder_.eof())
                return true;
            this.vipLevel = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // maxInstance
            if (decoder_.eof())
                return true;
            this.maxInstance = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // petInfo
            if (decoder_.eof())
                return true;
            var petInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < petInfo_count; i++) {
                this.petInfo.push(new PetInfo());
                if (!this.petInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // agree_detail
            if (decoder_.eof())
                return true;
            this.agree_detail = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // agree_enter
            if (decoder_.eof())
                return true;
            this.agree_enter = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // group_id
            if (decoder_.eof())
                return true;
            this.group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // server_id
            if (decoder_.eof())
                return true;
            this.server_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RoleBriefInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            // name_type
            encoder.write_fixuint32(this.name_type);
            // name
            encoder.write_string(this.name);
            // level
            encoder.write_uint16(this.level);
            // picId
            encoder.write_fixuint32(this.picId);
            // picFrameId
            encoder.write_fixuint32(this.picFrameId);
            // fashionId
            encoder.write_fixuint32(this.fashionId);
            // haloId
            encoder.write_fixuint32(this.haloId);
            // titleId
            encoder.write_fixuint32(this.titleId);
            // ladderRank
            encoder.write_fixuint32(this.ladderRank);
            // ladderMax
            encoder.write_fixuint32(this.ladderMax);
            // leagueId
            encoder.write_fixuint32(this.leagueId);
            // leagueName
            encoder.write_string(this.leagueName);
            // matchScore
            encoder.write_fixuint32(this.matchScore);
            // is_online
            encoder.write_bool(this.is_online);
            // logoutTime
            encoder.write_fixuint32(this.logoutTime);
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            // licenceLevel
            encoder.write_fixuint32(this.licenceLevel);
            // vipLevel
            encoder.write_fixuint32(this.vipLevel);
            // maxInstance
            encoder.write_fixuint32(this.maxInstance);
            // petInfo
            encoder.write_fixuint32(Object.keys(this.petInfo).length);
            for (var k in this.petInfo) {
                if (!this.petInfo[k].to_bytes(encoder))
                    return false;
            }
            // agree_detail
            encoder.write_bool(this.agree_detail);
            // agree_enter
            encoder.write_bool(this.agree_enter);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // server_id
            encoder.write_fixuint32(this.server_id);
            // group_name
            encoder.write_string(this.group_name);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RoleBriefInfo;
    }());
    message.RoleBriefInfo = RoleBriefInfo;
    __reflect(RoleBriefInfo.prototype, "message.RoleBriefInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 君主基础信息
    // struct RoleBaseInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RoleBaseInfo = (function () {
        function RoleBaseInfo() {
            this.id = 0; // 君主ID
            this.name = ""; // 君主名称
            this.identification_type = 0; // 认证类型
            this.bind_phone = 0; // 手机号绑定
            this.level = 0; // 君主等级
            this.cur_exp = 0; // 君主当前经验
            this.picId = 0; // 头像Id(在RoleShortInfo的features里字段名为"pic_id")
            this.picFrameId = 0; // 头像框Id(在RoleShortInfo的features里字段名为"pic_frame")
            this.fashionId = 0; // 形象Id与picId相关
            this.haloId = 0; // 光环Id
            this.titleId = 0; // 称号
            this.viceTitleId = 0; // 副称号
            this.chargeToken = 0; // 充值累积
            this.chargeCount = 0; // 充值次数
            this.is_chargeToday = false; // 今日是否充值
            this.ladderRank = 0; // 天梯排名
            this.ladderMax = 0; // 天梯最高排名
            this.ladderScore = 0; // 天梯积分
            this.leagueId = 0; // 联盟Id
            this.leagueName = ""; // 联盟名称
            this.matchScore = 0; // 联赛积分
            this.is_online = false; // 是否在线
            this.logoutTime = 0; // 离线时长
            this.battleValue = 0; // 玩家战力值
            this.battleValueThree = 0; // 最高三人战力
            this.battleValueSix = 0; // 最高六人战力
            this.licenceLevel = 0; // 执照等级
            this.vipLevel = 0; // vip等级
            this.vipExp = 0; // vip经验
            this.permitLevel = 0; // 通行证等级
            this.permitExp = 0; // 通行证经验
            this.permitPay = 0; // 通行证高级
            this.pay_day = 0; // 充值天数
            this.createTime = 0; // 角色创建时间
            this.lastLoginTime = 0; // 上次登录时间
            this.token = 0; // 代币
            this.money = 0; // 铜钱
            this.leagueCoin = 0; // 联盟币
            this.wantedCoin = 0; // 悬赏令
            this.arrestCoin = 0; // 海捕令
            this.huntCoin = 0; // 缉拿令
            this.power = 0; // 体力
            this.beer = 0; // 啤酒
            this.redWine = 0; // 红酒
            this.champagne = 0; // 香槟
            this.soda = 0; // 苏打水
            this.rum = 0; // 朗姆酒
            this.psychicFruit = 0; // 念力果
            this.lotteryScore = 0; // 酒馆积分
            this.lierenCoin = 0; // 猎人币
            this.goldPlate = 0; // 金仙玉露盘
            this.honorCoin = 0; // 荣誉值
            this.leagueScore = 0; // 联盟战功
            this.relicCoin = 0; // 遗迹币
            this.promiseCoin = 0; // 许愿币
            this.dollCoin = 0; // 娃娃币
            this.modify_name = 0; // 免费修改次数
            this.agree_detail = false; // 是否同意查看详情
            this.agree_enter = false; // 同意进入主城
            this.potato_buy_count = 0; // 卡包格子购买数量
        }
        RoleBaseInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // identification_type
            if (decoder_.eof())
                return true;
            this.identification_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // bind_phone
            if (decoder_.eof())
                return true;
            this.bind_phone = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // cur_exp
            if (decoder_.eof())
                return true;
            this.cur_exp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // picId
            if (decoder_.eof())
                return true;
            this.picId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // picFrameId
            if (decoder_.eof())
                return true;
            this.picFrameId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // fashionId
            if (decoder_.eof())
                return true;
            this.fashionId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // haloId
            if (decoder_.eof())
                return true;
            this.haloId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // titleId
            if (decoder_.eof())
                return true;
            this.titleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // viceTitleId
            if (decoder_.eof())
                return true;
            this.viceTitleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // chargeToken
            if (decoder_.eof())
                return true;
            this.chargeToken = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // chargeCount
            if (decoder_.eof())
                return true;
            this.chargeCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_chargeToday
            if (decoder_.eof())
                return true;
            this.is_chargeToday = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // ladderRank
            if (decoder_.eof())
                return true;
            this.ladderRank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // ladderMax
            if (decoder_.eof())
                return true;
            this.ladderMax = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // ladderScore
            if (decoder_.eof())
                return true;
            this.ladderScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueId
            if (decoder_.eof())
                return true;
            this.leagueId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueName
            if (decoder_.eof())
                return true;
            this.leagueName = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // matchScore
            if (decoder_.eof())
                return true;
            this.matchScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_online
            if (decoder_.eof())
                return true;
            this.is_online = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // logoutTime
            if (decoder_.eof())
                return true;
            this.logoutTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleValueThree
            if (decoder_.eof())
                return true;
            this.battleValueThree = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleValueSix
            if (decoder_.eof())
                return true;
            this.battleValueSix = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // licenceLevel
            if (decoder_.eof())
                return true;
            this.licenceLevel = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // vipLevel
            if (decoder_.eof())
                return true;
            this.vipLevel = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // vipExp
            if (decoder_.eof())
                return true;
            this.vipExp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // permitLevel
            if (decoder_.eof())
                return true;
            this.permitLevel = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // permitExp
            if (decoder_.eof())
                return true;
            this.permitExp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // permitPay
            if (decoder_.eof())
                return true;
            this.permitPay = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pay_day
            if (decoder_.eof())
                return true;
            this.pay_day = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // createTime
            if (decoder_.eof())
                return true;
            this.createTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lastLoginTime
            if (decoder_.eof())
                return true;
            this.lastLoginTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // money
            if (decoder_.eof())
                return true;
            this.money = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueCoin
            if (decoder_.eof())
                return true;
            this.leagueCoin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // wantedCoin
            if (decoder_.eof())
                return true;
            this.wantedCoin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // arrestCoin
            if (decoder_.eof())
                return true;
            this.arrestCoin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // huntCoin
            if (decoder_.eof())
                return true;
            this.huntCoin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // power
            if (decoder_.eof())
                return true;
            this.power = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // beer
            if (decoder_.eof())
                return true;
            this.beer = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // redWine
            if (decoder_.eof())
                return true;
            this.redWine = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // champagne
            if (decoder_.eof())
                return true;
            this.champagne = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // soda
            if (decoder_.eof())
                return true;
            this.soda = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rum
            if (decoder_.eof())
                return true;
            this.rum = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // psychicFruit
            if (decoder_.eof())
                return true;
            this.psychicFruit = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lotteryScore
            if (decoder_.eof())
                return true;
            this.lotteryScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lierenCoin
            if (decoder_.eof())
                return true;
            this.lierenCoin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // goldPlate
            if (decoder_.eof())
                return true;
            this.goldPlate = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // honorCoin
            if (decoder_.eof())
                return true;
            this.honorCoin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueScore
            if (decoder_.eof())
                return true;
            this.leagueScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // relicCoin
            if (decoder_.eof())
                return true;
            this.relicCoin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // promiseCoin
            if (decoder_.eof())
                return true;
            this.promiseCoin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // dollCoin
            if (decoder_.eof())
                return true;
            this.dollCoin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // modify_name
            if (decoder_.eof())
                return true;
            this.modify_name = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // agree_detail
            if (decoder_.eof())
                return true;
            this.agree_detail = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // agree_enter
            if (decoder_.eof())
                return true;
            this.agree_enter = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // potato_buy_count
            if (decoder_.eof())
                return true;
            this.potato_buy_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RoleBaseInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            // name
            encoder.write_string(this.name);
            // identification_type
            encoder.write_fixuint32(this.identification_type);
            // bind_phone
            encoder.write_fixuint32(this.bind_phone);
            // level
            encoder.write_uint16(this.level);
            // cur_exp
            encoder.write_fixuint32(this.cur_exp);
            // picId
            encoder.write_fixuint32(this.picId);
            // picFrameId
            encoder.write_fixuint32(this.picFrameId);
            // fashionId
            encoder.write_fixuint32(this.fashionId);
            // haloId
            encoder.write_fixuint32(this.haloId);
            // titleId
            encoder.write_fixuint32(this.titleId);
            // viceTitleId
            encoder.write_fixuint32(this.viceTitleId);
            // chargeToken
            encoder.write_fixuint32(this.chargeToken);
            // chargeCount
            encoder.write_fixuint32(this.chargeCount);
            // is_chargeToday
            encoder.write_bool(this.is_chargeToday);
            // ladderRank
            encoder.write_fixuint32(this.ladderRank);
            // ladderMax
            encoder.write_fixuint32(this.ladderMax);
            // ladderScore
            encoder.write_fixuint32(this.ladderScore);
            // leagueId
            encoder.write_fixuint32(this.leagueId);
            // leagueName
            encoder.write_string(this.leagueName);
            // matchScore
            encoder.write_fixuint32(this.matchScore);
            // is_online
            encoder.write_bool(this.is_online);
            // logoutTime
            encoder.write_fixuint32(this.logoutTime);
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            // battleValueThree
            encoder.write_fixuint32(this.battleValueThree);
            // battleValueSix
            encoder.write_fixuint32(this.battleValueSix);
            // licenceLevel
            encoder.write_fixuint32(this.licenceLevel);
            // vipLevel
            encoder.write_fixuint32(this.vipLevel);
            // vipExp
            encoder.write_fixuint32(this.vipExp);
            // permitLevel
            encoder.write_fixuint32(this.permitLevel);
            // permitExp
            encoder.write_fixuint32(this.permitExp);
            // permitPay
            encoder.write_fixuint32(this.permitPay);
            // pay_day
            encoder.write_fixuint32(this.pay_day);
            // createTime
            encoder.write_fixuint32(this.createTime);
            // lastLoginTime
            encoder.write_fixuint32(this.lastLoginTime);
            // token
            encoder.write_fixuint32(this.token);
            // money
            encoder.write_fixuint32(this.money);
            // leagueCoin
            encoder.write_fixuint32(this.leagueCoin);
            // wantedCoin
            encoder.write_fixuint32(this.wantedCoin);
            // arrestCoin
            encoder.write_fixuint32(this.arrestCoin);
            // huntCoin
            encoder.write_fixuint32(this.huntCoin);
            // power
            encoder.write_fixuint32(this.power);
            // beer
            encoder.write_fixuint32(this.beer);
            // redWine
            encoder.write_fixuint32(this.redWine);
            // champagne
            encoder.write_fixuint32(this.champagne);
            // soda
            encoder.write_fixuint32(this.soda);
            // rum
            encoder.write_fixuint32(this.rum);
            // psychicFruit
            encoder.write_fixuint32(this.psychicFruit);
            // lotteryScore
            encoder.write_fixuint32(this.lotteryScore);
            // lierenCoin
            encoder.write_fixuint32(this.lierenCoin);
            // goldPlate
            encoder.write_fixuint32(this.goldPlate);
            // honorCoin
            encoder.write_fixuint32(this.honorCoin);
            // leagueScore
            encoder.write_fixuint32(this.leagueScore);
            // relicCoin
            encoder.write_fixuint32(this.relicCoin);
            // promiseCoin
            encoder.write_fixuint32(this.promiseCoin);
            // dollCoin
            encoder.write_fixuint32(this.dollCoin);
            // modify_name
            encoder.write_fixuint32(this.modify_name);
            // agree_detail
            encoder.write_bool(this.agree_detail);
            // agree_enter
            encoder.write_bool(this.agree_enter);
            // potato_buy_count
            encoder.write_fixuint32(this.potato_buy_count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RoleBaseInfo;
    }());
    message.RoleBaseInfo = RoleBaseInfo;
    __reflect(RoleBaseInfo.prototype, "message.RoleBaseInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 邮件信息
    // struct MailInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MailInfo = (function () {
        function MailInfo() {
            this.type = 0; // 邮件类型
            this.mailId = ""; // 邮件ID
            this.from_id = 0; // 发起方角色ID，若为系统邮件则为0
            this.roleBaseInfo = [];
            this.title = ""; // 邮件标题
            this.content = ""; // 邮件正文(为json数组格式,参数type和内容content)
            this.content_type = ""; // 内容类型
            this.attachment = []; // 附件
            this.is_read = false; // 是否已读
            this.is_attachment = false; // 是否已经领取
            this.createtime = 0; // 录入时间
            this.war_id = ""; // 战报Id
            this.battleResult = 0; // 战斗结果
            this.rank_change = 0; // 排名变化
            this.goodsInfo = []; // 影响物品
            this.battleDate = []; // 战斗数据
        }
        MailInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // mailId
            if (decoder_.eof())
                return true;
            this.mailId = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // from_id
            if (decoder_.eof())
                return true;
            this.from_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roleBaseInfo
            if (decoder_.eof())
                return true;
            var roleBaseInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roleBaseInfo_count; i++) {
                this.roleBaseInfo.push(new RoleBriefInfo());
                if (!this.roleBaseInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // title
            if (decoder_.eof())
                return true;
            this.title = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // content
            if (decoder_.eof())
                return true;
            this.content = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // content_type
            if (decoder_.eof())
                return true;
            this.content_type = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // attachment
            if (decoder_.eof())
                return true;
            var attachment_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < attachment_count; i++) {
                this.attachment.push(new GoodsInfo());
                if (!this.attachment[i].parse_bytes(decoder_))
                    return false;
            }
            // is_read
            if (decoder_.eof())
                return true;
            this.is_read = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_attachment
            if (decoder_.eof())
                return true;
            this.is_attachment = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // createtime
            if (decoder_.eof())
                return true;
            this.createtime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // war_id
            if (decoder_.eof())
                return true;
            this.war_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // battleResult
            if (decoder_.eof())
                return true;
            this.battleResult = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank_change
            if (decoder_.eof())
                return true;
            this.rank_change = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // goodsInfo
            if (decoder_.eof())
                return true;
            var goodsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodsInfo_count; i++) {
                this.goodsInfo.push(new GoodsInfo());
                if (!this.goodsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // battleDate
            if (decoder_.eof())
                return true;
            this.battleDate = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MailInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // mailId
            encoder.write_string(this.mailId);
            // from_id
            encoder.write_fixuint32(this.from_id);
            // roleBaseInfo
            encoder.write_fixuint32(Object.keys(this.roleBaseInfo).length);
            for (var k in this.roleBaseInfo) {
                if (!this.roleBaseInfo[k].to_bytes(encoder))
                    return false;
            }
            // title
            encoder.write_string(this.title);
            // content
            encoder.write_string(this.content);
            // content_type
            encoder.write_string(this.content_type);
            // attachment
            encoder.write_fixuint32(Object.keys(this.attachment).length);
            for (var k in this.attachment) {
                if (!this.attachment[k].to_bytes(encoder))
                    return false;
            }
            // is_read
            encoder.write_bool(this.is_read);
            // is_attachment
            encoder.write_bool(this.is_attachment);
            // createtime
            encoder.write_fixuint32(this.createtime);
            // war_id
            encoder.write_string(this.war_id);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // rank_change
            encoder.write_fixuint32(this.rank_change);
            // goodsInfo
            encoder.write_fixuint32(Object.keys(this.goodsInfo).length);
            for (var k in this.goodsInfo) {
                if (!this.goodsInfo[k].to_bytes(encoder))
                    return false;
            }
            // battleDate
            encoder.write_byte_vector(this.battleDate);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MailInfo;
    }());
    message.MailInfo = MailInfo;
    __reflect(MailInfo.prototype, "message.MailInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 邮箱信息
    // struct MailBoxInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MailBoxInfo = (function () {
        function MailBoxInfo() {
            this.unReward = 0; // 可领取的附件数量
            this.unReadCount = 0; // 未读邮件数量
        }
        MailBoxInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // unReward
            if (decoder_.eof())
                return true;
            this.unReward = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // unReadCount
            if (decoder_.eof())
                return true;
            this.unReadCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MailBoxInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // unReward
            encoder.write_fixuint32(this.unReward);
            // unReadCount
            encoder.write_fixuint32(this.unReadCount);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MailBoxInfo;
    }());
    message.MailBoxInfo = MailBoxInfo;
    __reflect(MailBoxInfo.prototype, "message.MailBoxInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 聊天信息
    // struct ChatMessage
    ////////////////////////////////////////////////////////////////////////////////
    var ChatMessage = (function () {
        function ChatMessage() {
            this.type = 0; // 聊天信息类型
            this.channel_id = 0; // 频道Id(游戏服填充)
            this.chat_id = 0; // 聊天信息Id(聊天服务填充)
            this.sender_id = 0; // 发送者id(游戏服填充)
            this.sender_name = ""; // 发送者名字(游戏服填充)
            this.sender_level = 0; // 发送者等级(游戏服填充)
            this.sender_licence = 0; // 发送者执照等级(游戏服填充)
            this.sender_pic = 0; // 发送者头像Id(游戏服填充)
            this.sender_title = 0; // 发送者称号(游戏服填充)
            this.sender_picFrame = 0; // 发送者头像框(游戏服填充)
            this.sender_league_id = 0; // 发送者联盟Id(游戏服填充)
            this.sender_league_name = ""; // 发送者联盟名称(游戏服填充)
            this.send_time = 0; // 发送时间(游戏服填充)
            this.content_type = ""; // 内容类型(游戏服填充)(为空直接显示content)
            this.content = ""; // 发送内容(为json数组格式,参数type和内容content)
            this.receiver_id = 0; // 接收者id(用于私聊)
            this.receiver_name = ""; // 接收者名字(用于私聊)
            this.show_type = 0; // 展示类型(仙境中1表示有人挑战你)
            this.show_uid = 0; // uid(可能是武将，物品)(场景聊天表示Id)
            this.battle_id = ""; // 战报
            this.sender_group_id = 0; // 发送者分区Id
        }
        ChatMessage.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // channel_id
            if (decoder_.eof())
                return true;
            this.channel_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // chat_id
            if (decoder_.eof())
                return true;
            this.chat_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sender_id
            if (decoder_.eof())
                return true;
            this.sender_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sender_name
            if (decoder_.eof())
                return true;
            this.sender_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // sender_level
            if (decoder_.eof())
                return true;
            this.sender_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sender_licence
            if (decoder_.eof())
                return true;
            this.sender_licence = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sender_pic
            if (decoder_.eof())
                return true;
            this.sender_pic = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sender_title
            if (decoder_.eof())
                return true;
            this.sender_title = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sender_picFrame
            if (decoder_.eof())
                return true;
            this.sender_picFrame = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sender_league_id
            if (decoder_.eof())
                return true;
            this.sender_league_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sender_league_name
            if (decoder_.eof())
                return true;
            this.sender_league_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // send_time
            if (decoder_.eof())
                return true;
            this.send_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // content_type
            if (decoder_.eof())
                return true;
            this.content_type = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // content
            if (decoder_.eof())
                return true;
            this.content = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // receiver_id
            if (decoder_.eof())
                return true;
            this.receiver_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // receiver_name
            if (decoder_.eof())
                return true;
            this.receiver_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // show_type
            if (decoder_.eof())
                return true;
            this.show_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // show_uid
            if (decoder_.eof())
                return true;
            this.show_uid = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // sender_group_id
            if (decoder_.eof())
                return true;
            this.sender_group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ChatMessage.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // channel_id
            encoder.write_fixuint32(this.channel_id);
            // chat_id
            encoder.write_fixuint32(this.chat_id);
            // sender_id
            encoder.write_fixuint32(this.sender_id);
            // sender_name
            encoder.write_string(this.sender_name);
            // sender_level
            encoder.write_fixuint32(this.sender_level);
            // sender_licence
            encoder.write_fixuint32(this.sender_licence);
            // sender_pic
            encoder.write_fixuint32(this.sender_pic);
            // sender_title
            encoder.write_fixuint32(this.sender_title);
            // sender_picFrame
            encoder.write_fixuint32(this.sender_picFrame);
            // sender_league_id
            encoder.write_fixuint32(this.sender_league_id);
            // sender_league_name
            encoder.write_string(this.sender_league_name);
            // send_time
            encoder.write_fixuint32(this.send_time);
            // content_type
            encoder.write_string(this.content_type);
            // content
            encoder.write_string(this.content);
            // receiver_id
            encoder.write_fixuint32(this.receiver_id);
            // receiver_name
            encoder.write_string(this.receiver_name);
            // show_type
            encoder.write_fixuint32(this.show_type);
            // show_uid
            encoder.write_fixuint32(this.show_uid);
            // battle_id
            encoder.write_string(this.battle_id);
            // sender_group_id
            encoder.write_fixuint32(this.sender_group_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChatMessage;
    }());
    message.ChatMessage = ChatMessage;
    __reflect(ChatMessage.prototype, "message.ChatMessage", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买游戏币记录
    // struct BuyMoneyItem
    ////////////////////////////////////////////////////////////////////////////////
    var BuyMoneyItem = (function () {
        function BuyMoneyItem() {
            this.token = 0;
            this.money = 0;
            this.multiple = 0;
        }
        BuyMoneyItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // money
            if (decoder_.eof())
                return true;
            this.money = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // multiple
            if (decoder_.eof())
                return true;
            this.multiple = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BuyMoneyItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // token
            encoder.write_fixuint32(this.token);
            // money
            encoder.write_fixuint32(this.money);
            // multiple
            encoder.write_fixuint32(this.multiple);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyMoneyItem;
    }());
    message.BuyMoneyItem = BuyMoneyItem;
    __reflect(BuyMoneyItem.prototype, "message.BuyMoneyItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 礼包类型
    // struct GiftInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GiftInfo = (function () {
        function GiftInfo() {
            this.index = 0; // 礼包唯一索引
            this.gift_index = 0; // 礼包id
            this.giftType = 0; // 礼包类型
            this.trigger_time = 0; // 触发时间
            this.buy_times = 0; // 已购买次数
            this.dailyIndex = 0; // 每日礼包索引
            this.lastRefreshTime = 0; // 上次刷新时间
            this.mark = 0; // 重复礼包备用标识（Type4.5表示触发武将的ID, Form5表示今天是否领取,Form6消失时间）
            this.markIndex = []; // 备用字段（Form6.表示已领取的）
        }
        GiftInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // gift_index
            if (decoder_.eof())
                return true;
            this.gift_index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // giftType
            if (decoder_.eof())
                return true;
            this.giftType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // trigger_time
            if (decoder_.eof())
                return true;
            this.trigger_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buy_times
            if (decoder_.eof())
                return true;
            this.buy_times = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // dailyIndex
            if (decoder_.eof())
                return true;
            this.dailyIndex = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lastRefreshTime
            if (decoder_.eof())
                return true;
            this.lastRefreshTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // mark
            if (decoder_.eof())
                return true;
            this.mark = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // markIndex
            if (decoder_.eof())
                return true;
            this.markIndex = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GiftInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // gift_index
            encoder.write_fixuint32(this.gift_index);
            // giftType
            encoder.write_fixuint32(this.giftType);
            // trigger_time
            encoder.write_fixuint32(this.trigger_time);
            // buy_times
            encoder.write_fixuint32(this.buy_times);
            // dailyIndex
            encoder.write_fixuint32(this.dailyIndex);
            // lastRefreshTime
            encoder.write_fixuint32(this.lastRefreshTime);
            // mark
            encoder.write_fixuint32(this.mark);
            // markIndex
            encoder.write_uint32_vector(this.markIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GiftInfo;
    }());
    message.GiftInfo = GiftInfo;
    __reflect(GiftInfo.prototype, "message.GiftInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 双色球
    // struct PublicFruitItem
    ////////////////////////////////////////////////////////////////////////////////
    var PublicFruitItem = (function () {
        function PublicFruitItem() {
            this.redFruit = 0; // 中奖红色果子
            this.blueFruit = []; // 中奖蓝色果子
            this.bestCount = 0; // 特等奖数量
            this.firstCount = 0; // 一等奖数量
            this.secondCount = 0; // 二等奖数量
            this.creatTime = 0; // 时间
        }
        PublicFruitItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // redFruit
            if (decoder_.eof())
                return true;
            this.redFruit = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // blueFruit
            if (decoder_.eof())
                return true;
            this.blueFruit = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // bestCount
            if (decoder_.eof())
                return true;
            this.bestCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // firstCount
            if (decoder_.eof())
                return true;
            this.firstCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // secondCount
            if (decoder_.eof())
                return true;
            this.secondCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // creatTime
            if (decoder_.eof())
                return true;
            this.creatTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PublicFruitItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // redFruit
            encoder.write_fixuint32(this.redFruit);
            // blueFruit
            encoder.write_uint32_vector(this.blueFruit);
            // bestCount
            encoder.write_fixuint32(this.bestCount);
            // firstCount
            encoder.write_fixuint32(this.firstCount);
            // secondCount
            encoder.write_fixuint32(this.secondCount);
            // creatTime
            encoder.write_fixuint32(this.creatTime);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PublicFruitItem;
    }());
    message.PublicFruitItem = PublicFruitItem;
    __reflect(PublicFruitItem.prototype, "message.PublicFruitItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 公共双色球信息
    // struct PublicFruitInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PublicFruitInfo = (function () {
        function PublicFruitInfo() {
            this.dailyLotteryFruit = new PublicFruitItem(); // 今日中奖号
            this.historyLotteryFruit = []; // 历史信息
        }
        PublicFruitInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // dailyLotteryFruit
            if (decoder_.eof())
                return true;
            if (!this.dailyLotteryFruit.parse_bytes(decoder_))
                return false;
            // historyLotteryFruit
            if (decoder_.eof())
                return true;
            var historyLotteryFruit_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < historyLotteryFruit_count; i++) {
                this.historyLotteryFruit.push(new PublicFruitItem());
                if (!this.historyLotteryFruit[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PublicFruitInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // dailyLotteryFruit
            this.dailyLotteryFruit.to_bytes(encoder);
            // historyLotteryFruit
            encoder.write_fixuint32(Object.keys(this.historyLotteryFruit).length);
            for (var k in this.historyLotteryFruit) {
                if (!this.historyLotteryFruit[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PublicFruitInfo;
    }());
    message.PublicFruitInfo = PublicFruitInfo;
    __reflect(PublicFruitInfo.prototype, "message.PublicFruitInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 数据杂项
    // struct RoleMixUnit
    ////////////////////////////////////////////////////////////////////////////////
    var RoleMixUnit = (function () {
        function RoleMixUnit() {
            this.isBindReward = false; // 是否领取绑定奖励
            this.firstChargeReward = []; // 首冲礼包索引
            this.spgeneralReward = []; // 猛将传礼包索引
            this.isMissionnewReward = []; // 领取的嘉年华任务奖励
            this.modifyName = 0; // 改名次数
            this.getNewToken = 0; // 新手嘉年华完成任务个数
            this.sign_time = 0; // 签到次数
            this.is_signToday = false; // 今日是否签到
            this.buy_money_list = []; // 购买游戏币记录
            this.payIndexs = []; // 已经买过的商品
            this.buy_fund = false; // 购买开服奖励 0：未购买 1：已购买
            this.fund_reward = []; // 开服基金
            this.shareType = []; // 今日分享类型
            this.loginTodayReward = false; // 今日是否已经领取
            this.loginDaysIndex = 0; // 领取到第几天(从0开始>=7消失)
            this.isCollectFruit = []; // 是否采集过果子（仙境id）
            this.isSceneMobs = false; // 是否打过怪
            this.isJadeRefresh = false; // 宝石磨洗新手引导
            this.facebookReward = []; // 奖励领取信息
            this.runes = 0; // 中奖符文的数量
            this.exchangeMalls = []; // 所有兑换商城兑换信息
            this.collectionFruit = []; // 采集时段果子信息
            this.fishing_refresh = 0; // 锦鲤刷新次数
            this.already_fish = []; // 已经刷新到的鱼
            this.process = new ProgressInfo(); // 钓鱼倒计时
            this.goodses = []; // 钓鱼最后的奖励(不为空表示钓鱼已经结束)
            this.refresh_purple_time = 0; // 刷紫次数
            this.refresh_double_time = 0; // 刷双倍奖励次数
            this.last_publish_post_time = []; // 上次发帖时间
            this.monthGift = []; // 已买的月度礼包
            this.redFruit = 0; // 玩家红色果子
            this.blueFruit = []; // 玩家蓝色果子
            this.integral_allScore = 0; // 扭蛋机总积分
            this.integral_currentScore = 0; // 当前积分
            this.integral_isFree = false; // 是否第一次
            this.integral_freeZone = []; // 已经领取的奖励
            this.integral_exchangeZone = []; // 兑换过的物品
            this.lotteryRewards = []; // 开服寻访奖励信息
            this.levelReward = []; // 等级奖励
            this.monthReward = []; // 等级月卡奖励
            this.starReward = []; // 武将星级奖励（k:星级，v：是否奖励）
            this.last_publish_comment_time = []; // 上次发评论时间
            this.vipReward = []; // 大V奖励
            this.newFirstChargeReward = []; // 首冲礼包索引(按充值额度计算)
            this.old_chargeToken = 0; // 原充值数
            this.newGiftSeven = []; // 购买的七日礼包索引
            this.sevenLoginReward = []; // 开服七日登陆情况
            this.lowVipWeal = []; // vip购买福利索引
            this.xuyuan_allScore = 0; // 许愿屋总积分
            this.xuyuan_currentScore = 0; // 许愿屋当前积分
            this.xuyuan_time = 0; // 本期次数
            this.xuyuan_freeZone = []; // 已经领取的奖励
            this.xuyuan_exchangeZone = []; // 兑换过的物品
            this.share_role_create_count = 0; // 分享的创建角色的人数
            this.share_role_six_star_count = 0; // 分享的6星猎人的人数
            this.share_role_first_charge_count = 0; // 分享的首充奖励的人数
            this.share_general_id_count = 0; // 分享S武将数量
            this.share_role_create_gift = []; // 领取的分享创建角色人数的礼包
            this.share_role_six_star_gift = []; // 领取的分享6星猎人人数的礼包
            this.share_role_first_charge_gift = []; // 领取的分享首充人数的礼包
            this.share_general_id_gift = []; // 分享S武将奖励情况
            this.collect_goods = []; // 收集活动获得物品
            this.share_url = ""; // 微信分享的url
            this.beer_s_time = 0; // 啤酒抽取S武将的数量
            this.wonderlandRebirthTime = 0; // 仙境复活次数
            this.missionToken = []; // 嘉年华任务获得的元宝（k:type,v:count）
            this.missionReward = []; // 已经领取的嘉年华类型
            this.first_beer = false; // 是否使用了每日首抽啤酒
            this.instancePower = []; // 每日副本体力领取情况
            this.bossBattleTime = []; // 活动boss战斗次数(k场次v次数)
            this.bossCommonInspire = []; // 活动boss普通激励次数(k场次v次数)
            this.bossSeniorInspire = []; // 活动boss高级激励次数(k场次v次数)
            this.contend_battleTime = 0; // 争霸进攻次数
            this.contend_win_count = 0; // 争霸胜利场次
            this.contend_win_blood = 0; // 争霸胜利血量
            this.contend_fail_hunt = 0; // 争霸失败伤害
            this.title_check = []; // 称号触发相关
            this.online_reward = []; // 在线时长奖励领取情况
            this.pay_reward = []; // 充值领奖索引
            this.mission_gift = []; // 买过的嘉年华礼包
            this.permit_free_reward = []; // 通行证免费奖励
            this.permit_pay_reward = []; // 通行证高级奖励
            this.permitMissionReward = []; // 通行证每日领取奖励
            this.is_rewardTodayPay = false; // 每日首充奖励是否领取
            this.uplotter_dayfree = []; // Up池每日首抽情况
            this.praiseRanks = []; // 点赞次数
            this.permit_monthgift = []; // 通行证激活月卡
            this.activityGrab = []; // 抢夺的红包（k:info v:token）
            this.activityGrabDes = []; // 抢夺的红包描述
        }
        RoleMixUnit.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // isBindReward
            if (decoder_.eof())
                return true;
            this.isBindReward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // firstChargeReward
            if (decoder_.eof())
                return true;
            this.firstChargeReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // spgeneralReward
            if (decoder_.eof())
                return true;
            this.spgeneralReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // isMissionnewReward
            if (decoder_.eof())
                return true;
            this.isMissionnewReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // modifyName
            if (decoder_.eof())
                return true;
            this.modifyName = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // getNewToken
            if (decoder_.eof())
                return true;
            this.getNewToken = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sign_time
            if (decoder_.eof())
                return true;
            this.sign_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_signToday
            if (decoder_.eof())
                return true;
            this.is_signToday = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // buy_money_list
            if (decoder_.eof())
                return true;
            var buy_money_list_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < buy_money_list_count; i++) {
                this.buy_money_list.push(new BuyMoneyItem());
                if (!this.buy_money_list[i].parse_bytes(decoder_))
                    return false;
            }
            // payIndexs
            if (decoder_.eof())
                return true;
            this.payIndexs = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // buy_fund
            if (decoder_.eof())
                return true;
            this.buy_fund = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // fund_reward
            if (decoder_.eof())
                return true;
            this.fund_reward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // shareType
            if (decoder_.eof())
                return true;
            this.shareType = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // loginTodayReward
            if (decoder_.eof())
                return true;
            this.loginTodayReward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // loginDaysIndex
            if (decoder_.eof())
                return true;
            this.loginDaysIndex = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // isCollectFruit
            if (decoder_.eof())
                return true;
            this.isCollectFruit = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // isSceneMobs
            if (decoder_.eof())
                return true;
            this.isSceneMobs = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // isJadeRefresh
            if (decoder_.eof())
                return true;
            this.isJadeRefresh = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // facebookReward
            if (decoder_.eof())
                return true;
            this.facebookReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // runes
            if (decoder_.eof())
                return true;
            this.runes = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // exchangeMalls
            if (decoder_.eof())
                return true;
            var exchangeMalls_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < exchangeMalls_count; i++) {
                this.exchangeMalls.push(new message.IIKVPairs());
                if (!this.exchangeMalls[i].parse_bytes(decoder_))
                    return false;
            }
            // collectionFruit
            if (decoder_.eof())
                return true;
            var collectionFruit_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < collectionFruit_count; i++) {
                this.collectionFruit.push(new message.IIKVPairs());
                if (!this.collectionFruit[i].parse_bytes(decoder_))
                    return false;
            }
            // fishing_refresh
            if (decoder_.eof())
                return true;
            this.fishing_refresh = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // already_fish
            if (decoder_.eof())
                return true;
            this.already_fish = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // process
            if (decoder_.eof())
                return true;
            if (!this.process.parse_bytes(decoder_))
                return false;
            // goodses
            if (decoder_.eof())
                return true;
            var goodses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodses_count; i++) {
                this.goodses.push(new GoodsInfo());
                if (!this.goodses[i].parse_bytes(decoder_))
                    return false;
            }
            // refresh_purple_time
            if (decoder_.eof())
                return true;
            this.refresh_purple_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // refresh_double_time
            if (decoder_.eof())
                return true;
            this.refresh_double_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // last_publish_post_time
            if (decoder_.eof())
                return true;
            var last_publish_post_time_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < last_publish_post_time_count; i++) {
                this.last_publish_post_time.push(new message.IIKVPairs());
                if (!this.last_publish_post_time[i].parse_bytes(decoder_))
                    return false;
            }
            // monthGift
            if (decoder_.eof())
                return true;
            this.monthGift = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // redFruit
            if (decoder_.eof())
                return true;
            this.redFruit = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // blueFruit
            if (decoder_.eof())
                return true;
            this.blueFruit = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // integral_allScore
            if (decoder_.eof())
                return true;
            this.integral_allScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // integral_currentScore
            if (decoder_.eof())
                return true;
            this.integral_currentScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // integral_isFree
            if (decoder_.eof())
                return true;
            this.integral_isFree = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // integral_freeZone
            if (decoder_.eof())
                return true;
            this.integral_freeZone = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // integral_exchangeZone
            if (decoder_.eof())
                return true;
            var integral_exchangeZone_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < integral_exchangeZone_count; i++) {
                this.integral_exchangeZone.push(new message.IIKVPairs());
                if (!this.integral_exchangeZone[i].parse_bytes(decoder_))
                    return false;
            }
            // lotteryRewards
            if (decoder_.eof())
                return true;
            this.lotteryRewards = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // levelReward
            if (decoder_.eof())
                return true;
            this.levelReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // monthReward
            if (decoder_.eof())
                return true;
            this.monthReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // starReward
            if (decoder_.eof())
                return true;
            var starReward_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < starReward_count; i++) {
                this.starReward.push(new message.IIKVPairs());
                if (!this.starReward[i].parse_bytes(decoder_))
                    return false;
            }
            // last_publish_comment_time
            if (decoder_.eof())
                return true;
            var last_publish_comment_time_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < last_publish_comment_time_count; i++) {
                this.last_publish_comment_time.push(new message.IIKVPairs());
                if (!this.last_publish_comment_time[i].parse_bytes(decoder_))
                    return false;
            }
            // vipReward
            if (decoder_.eof())
                return true;
            this.vipReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // newFirstChargeReward
            if (decoder_.eof())
                return true;
            this.newFirstChargeReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // old_chargeToken
            if (decoder_.eof())
                return true;
            this.old_chargeToken = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // newGiftSeven
            if (decoder_.eof())
                return true;
            this.newGiftSeven = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // sevenLoginReward
            if (decoder_.eof())
                return true;
            this.sevenLoginReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // lowVipWeal
            if (decoder_.eof())
                return true;
            this.lowVipWeal = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // xuyuan_allScore
            if (decoder_.eof())
                return true;
            this.xuyuan_allScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // xuyuan_currentScore
            if (decoder_.eof())
                return true;
            this.xuyuan_currentScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // xuyuan_time
            if (decoder_.eof())
                return true;
            this.xuyuan_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // xuyuan_freeZone
            if (decoder_.eof())
                return true;
            this.xuyuan_freeZone = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // xuyuan_exchangeZone
            if (decoder_.eof())
                return true;
            var xuyuan_exchangeZone_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < xuyuan_exchangeZone_count; i++) {
                this.xuyuan_exchangeZone.push(new message.IIKVPairs());
                if (!this.xuyuan_exchangeZone[i].parse_bytes(decoder_))
                    return false;
            }
            // share_role_create_count
            if (decoder_.eof())
                return true;
            this.share_role_create_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // share_role_six_star_count
            if (decoder_.eof())
                return true;
            this.share_role_six_star_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // share_role_first_charge_count
            if (decoder_.eof())
                return true;
            this.share_role_first_charge_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // share_general_id_count
            if (decoder_.eof())
                return true;
            this.share_general_id_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // share_role_create_gift
            if (decoder_.eof())
                return true;
            this.share_role_create_gift = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // share_role_six_star_gift
            if (decoder_.eof())
                return true;
            this.share_role_six_star_gift = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // share_role_first_charge_gift
            if (decoder_.eof())
                return true;
            this.share_role_first_charge_gift = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // share_general_id_gift
            if (decoder_.eof())
                return true;
            this.share_general_id_gift = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // collect_goods
            if (decoder_.eof())
                return true;
            var collect_goods_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < collect_goods_count; i++) {
                this.collect_goods.push(new message.IIKVPairs());
                if (!this.collect_goods[i].parse_bytes(decoder_))
                    return false;
            }
            // share_url
            if (decoder_.eof())
                return true;
            this.share_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // beer_s_time
            if (decoder_.eof())
                return true;
            this.beer_s_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // wonderlandRebirthTime
            if (decoder_.eof())
                return true;
            this.wonderlandRebirthTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // missionToken
            if (decoder_.eof())
                return true;
            var missionToken_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < missionToken_count; i++) {
                this.missionToken.push(new message.IIKVPairs());
                if (!this.missionToken[i].parse_bytes(decoder_))
                    return false;
            }
            // missionReward
            if (decoder_.eof())
                return true;
            this.missionReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // first_beer
            if (decoder_.eof())
                return true;
            this.first_beer = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // instancePower
            if (decoder_.eof())
                return true;
            this.instancePower = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // bossBattleTime
            if (decoder_.eof())
                return true;
            var bossBattleTime_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < bossBattleTime_count; i++) {
                this.bossBattleTime.push(new message.IIKVPairs());
                if (!this.bossBattleTime[i].parse_bytes(decoder_))
                    return false;
            }
            // bossCommonInspire
            if (decoder_.eof())
                return true;
            var bossCommonInspire_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < bossCommonInspire_count; i++) {
                this.bossCommonInspire.push(new message.IIKVPairs());
                if (!this.bossCommonInspire[i].parse_bytes(decoder_))
                    return false;
            }
            // bossSeniorInspire
            if (decoder_.eof())
                return true;
            var bossSeniorInspire_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < bossSeniorInspire_count; i++) {
                this.bossSeniorInspire.push(new message.IIKVPairs());
                if (!this.bossSeniorInspire[i].parse_bytes(decoder_))
                    return false;
            }
            // contend_battleTime
            if (decoder_.eof())
                return true;
            this.contend_battleTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // contend_win_count
            if (decoder_.eof())
                return true;
            this.contend_win_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // contend_win_blood
            if (decoder_.eof())
                return true;
            this.contend_win_blood = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // contend_fail_hunt
            if (decoder_.eof())
                return true;
            this.contend_fail_hunt = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // title_check
            if (decoder_.eof())
                return true;
            var title_check_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < title_check_count; i++) {
                this.title_check.push(new message.IIKVPairs());
                if (!this.title_check[i].parse_bytes(decoder_))
                    return false;
            }
            // online_reward
            if (decoder_.eof())
                return true;
            this.online_reward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // pay_reward
            if (decoder_.eof())
                return true;
            this.pay_reward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // mission_gift
            if (decoder_.eof())
                return true;
            this.mission_gift = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // permit_free_reward
            if (decoder_.eof())
                return true;
            this.permit_free_reward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // permit_pay_reward
            if (decoder_.eof())
                return true;
            this.permit_pay_reward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // permitMissionReward
            if (decoder_.eof())
                return true;
            this.permitMissionReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // is_rewardTodayPay
            if (decoder_.eof())
                return true;
            this.is_rewardTodayPay = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // uplotter_dayfree
            if (decoder_.eof())
                return true;
            this.uplotter_dayfree = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // praiseRanks
            if (decoder_.eof())
                return true;
            this.praiseRanks = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // permit_monthgift
            if (decoder_.eof())
                return true;
            this.permit_monthgift = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // activityGrab
            if (decoder_.eof())
                return true;
            var activityGrab_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < activityGrab_count; i++) {
                this.activityGrab.push(new message.IIKVPairs());
                if (!this.activityGrab[i].parse_bytes(decoder_))
                    return false;
            }
            // activityGrabDes
            if (decoder_.eof())
                return true;
            var activityGrabDes_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < activityGrabDes_count; i++) {
                this.activityGrabDes.push(new message.IIKVPairs());
                if (!this.activityGrabDes[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RoleMixUnit.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // isBindReward
            encoder.write_bool(this.isBindReward);
            // firstChargeReward
            encoder.write_uint32_vector(this.firstChargeReward);
            // spgeneralReward
            encoder.write_uint32_vector(this.spgeneralReward);
            // isMissionnewReward
            encoder.write_uint32_vector(this.isMissionnewReward);
            // modifyName
            encoder.write_fixuint32(this.modifyName);
            // getNewToken
            encoder.write_fixuint32(this.getNewToken);
            // sign_time
            encoder.write_fixuint32(this.sign_time);
            // is_signToday
            encoder.write_bool(this.is_signToday);
            // buy_money_list
            encoder.write_fixuint32(Object.keys(this.buy_money_list).length);
            for (var k in this.buy_money_list) {
                if (!this.buy_money_list[k].to_bytes(encoder))
                    return false;
            }
            // payIndexs
            encoder.write_uint32_vector(this.payIndexs);
            // buy_fund
            encoder.write_bool(this.buy_fund);
            // fund_reward
            encoder.write_uint32_vector(this.fund_reward);
            // shareType
            encoder.write_uint32_vector(this.shareType);
            // loginTodayReward
            encoder.write_bool(this.loginTodayReward);
            // loginDaysIndex
            encoder.write_fixuint32(this.loginDaysIndex);
            // isCollectFruit
            encoder.write_uint32_vector(this.isCollectFruit);
            // isSceneMobs
            encoder.write_bool(this.isSceneMobs);
            // isJadeRefresh
            encoder.write_bool(this.isJadeRefresh);
            // facebookReward
            encoder.write_uint32_vector(this.facebookReward);
            // runes
            encoder.write_fixuint32(this.runes);
            // exchangeMalls
            encoder.write_fixuint32(Object.keys(this.exchangeMalls).length);
            for (var k in this.exchangeMalls) {
                if (!this.exchangeMalls[k].to_bytes(encoder))
                    return false;
            }
            // collectionFruit
            encoder.write_fixuint32(Object.keys(this.collectionFruit).length);
            for (var k in this.collectionFruit) {
                if (!this.collectionFruit[k].to_bytes(encoder))
                    return false;
            }
            // fishing_refresh
            encoder.write_fixuint32(this.fishing_refresh);
            // already_fish
            encoder.write_uint32_vector(this.already_fish);
            // process
            this.process.to_bytes(encoder);
            // goodses
            encoder.write_fixuint32(Object.keys(this.goodses).length);
            for (var k in this.goodses) {
                if (!this.goodses[k].to_bytes(encoder))
                    return false;
            }
            // refresh_purple_time
            encoder.write_fixuint32(this.refresh_purple_time);
            // refresh_double_time
            encoder.write_fixuint32(this.refresh_double_time);
            // last_publish_post_time
            encoder.write_fixuint32(Object.keys(this.last_publish_post_time).length);
            for (var k in this.last_publish_post_time) {
                if (!this.last_publish_post_time[k].to_bytes(encoder))
                    return false;
            }
            // monthGift
            encoder.write_uint32_vector(this.monthGift);
            // redFruit
            encoder.write_fixuint32(this.redFruit);
            // blueFruit
            encoder.write_uint32_vector(this.blueFruit);
            // integral_allScore
            encoder.write_fixuint32(this.integral_allScore);
            // integral_currentScore
            encoder.write_fixuint32(this.integral_currentScore);
            // integral_isFree
            encoder.write_bool(this.integral_isFree);
            // integral_freeZone
            encoder.write_uint32_vector(this.integral_freeZone);
            // integral_exchangeZone
            encoder.write_fixuint32(Object.keys(this.integral_exchangeZone).length);
            for (var k in this.integral_exchangeZone) {
                if (!this.integral_exchangeZone[k].to_bytes(encoder))
                    return false;
            }
            // lotteryRewards
            encoder.write_uint32_vector(this.lotteryRewards);
            // levelReward
            encoder.write_uint32_vector(this.levelReward);
            // monthReward
            encoder.write_uint32_vector(this.monthReward);
            // starReward
            encoder.write_fixuint32(Object.keys(this.starReward).length);
            for (var k in this.starReward) {
                if (!this.starReward[k].to_bytes(encoder))
                    return false;
            }
            // last_publish_comment_time
            encoder.write_fixuint32(Object.keys(this.last_publish_comment_time).length);
            for (var k in this.last_publish_comment_time) {
                if (!this.last_publish_comment_time[k].to_bytes(encoder))
                    return false;
            }
            // vipReward
            encoder.write_uint32_vector(this.vipReward);
            // newFirstChargeReward
            encoder.write_uint32_vector(this.newFirstChargeReward);
            // old_chargeToken
            encoder.write_fixuint32(this.old_chargeToken);
            // newGiftSeven
            encoder.write_uint32_vector(this.newGiftSeven);
            // sevenLoginReward
            encoder.write_uint32_vector(this.sevenLoginReward);
            // lowVipWeal
            encoder.write_uint32_vector(this.lowVipWeal);
            // xuyuan_allScore
            encoder.write_fixuint32(this.xuyuan_allScore);
            // xuyuan_currentScore
            encoder.write_fixuint32(this.xuyuan_currentScore);
            // xuyuan_time
            encoder.write_fixuint32(this.xuyuan_time);
            // xuyuan_freeZone
            encoder.write_uint32_vector(this.xuyuan_freeZone);
            // xuyuan_exchangeZone
            encoder.write_fixuint32(Object.keys(this.xuyuan_exchangeZone).length);
            for (var k in this.xuyuan_exchangeZone) {
                if (!this.xuyuan_exchangeZone[k].to_bytes(encoder))
                    return false;
            }
            // share_role_create_count
            encoder.write_fixuint32(this.share_role_create_count);
            // share_role_six_star_count
            encoder.write_fixuint32(this.share_role_six_star_count);
            // share_role_first_charge_count
            encoder.write_fixuint32(this.share_role_first_charge_count);
            // share_general_id_count
            encoder.write_fixuint32(this.share_general_id_count);
            // share_role_create_gift
            encoder.write_uint32_vector(this.share_role_create_gift);
            // share_role_six_star_gift
            encoder.write_uint32_vector(this.share_role_six_star_gift);
            // share_role_first_charge_gift
            encoder.write_uint32_vector(this.share_role_first_charge_gift);
            // share_general_id_gift
            encoder.write_uint32_vector(this.share_general_id_gift);
            // collect_goods
            encoder.write_fixuint32(Object.keys(this.collect_goods).length);
            for (var k in this.collect_goods) {
                if (!this.collect_goods[k].to_bytes(encoder))
                    return false;
            }
            // share_url
            encoder.write_string(this.share_url);
            // beer_s_time
            encoder.write_fixuint32(this.beer_s_time);
            // wonderlandRebirthTime
            encoder.write_fixuint32(this.wonderlandRebirthTime);
            // missionToken
            encoder.write_fixuint32(Object.keys(this.missionToken).length);
            for (var k in this.missionToken) {
                if (!this.missionToken[k].to_bytes(encoder))
                    return false;
            }
            // missionReward
            encoder.write_uint32_vector(this.missionReward);
            // first_beer
            encoder.write_bool(this.first_beer);
            // instancePower
            encoder.write_uint32_vector(this.instancePower);
            // bossBattleTime
            encoder.write_fixuint32(Object.keys(this.bossBattleTime).length);
            for (var k in this.bossBattleTime) {
                if (!this.bossBattleTime[k].to_bytes(encoder))
                    return false;
            }
            // bossCommonInspire
            encoder.write_fixuint32(Object.keys(this.bossCommonInspire).length);
            for (var k in this.bossCommonInspire) {
                if (!this.bossCommonInspire[k].to_bytes(encoder))
                    return false;
            }
            // bossSeniorInspire
            encoder.write_fixuint32(Object.keys(this.bossSeniorInspire).length);
            for (var k in this.bossSeniorInspire) {
                if (!this.bossSeniorInspire[k].to_bytes(encoder))
                    return false;
            }
            // contend_battleTime
            encoder.write_fixuint32(this.contend_battleTime);
            // contend_win_count
            encoder.write_fixuint32(this.contend_win_count);
            // contend_win_blood
            encoder.write_float64(this.contend_win_blood);
            // contend_fail_hunt
            encoder.write_float64(this.contend_fail_hunt);
            // title_check
            encoder.write_fixuint32(Object.keys(this.title_check).length);
            for (var k in this.title_check) {
                if (!this.title_check[k].to_bytes(encoder))
                    return false;
            }
            // online_reward
            encoder.write_uint32_vector(this.online_reward);
            // pay_reward
            encoder.write_uint32_vector(this.pay_reward);
            // mission_gift
            encoder.write_uint32_vector(this.mission_gift);
            // permit_free_reward
            encoder.write_uint32_vector(this.permit_free_reward);
            // permit_pay_reward
            encoder.write_uint32_vector(this.permit_pay_reward);
            // permitMissionReward
            encoder.write_uint32_vector(this.permitMissionReward);
            // is_rewardTodayPay
            encoder.write_bool(this.is_rewardTodayPay);
            // uplotter_dayfree
            encoder.write_uint32_vector(this.uplotter_dayfree);
            // praiseRanks
            encoder.write_uint32_vector(this.praiseRanks);
            // permit_monthgift
            encoder.write_uint32_vector(this.permit_monthgift);
            // activityGrab
            encoder.write_fixuint32(Object.keys(this.activityGrab).length);
            for (var k in this.activityGrab) {
                if (!this.activityGrab[k].to_bytes(encoder))
                    return false;
            }
            // activityGrabDes
            encoder.write_fixuint32(Object.keys(this.activityGrabDes).length);
            for (var k in this.activityGrabDes) {
                if (!this.activityGrabDes[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RoleMixUnit;
    }());
    message.RoleMixUnit = RoleMixUnit;
    __reflect(RoleMixUnit.prototype, "message.RoleMixUnit", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 执照信息
    // struct LicenceInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LicenceInfo = (function () {
        function LicenceInfo() {
            this.pvpPower = 0; // pvp体力(记次数)
            this.buyPvpPower = 0; // pvp体力购买(记次数)
            this.buyPower = 0; // 体力购买(记次数)
            this.buyPlate = 0; // 盘子购买(记次数)
            this.strategy_time = 0; // 每日阵型洗练次数
            this.tower_time = 0; // 每日爬塔次数
            this.lottery_beer_time = 0; // 累积抽奖啤酒次数
            this.lottery_redwine_time = 0; // 累积抽奖红酒次数
            this.lottery_champagne_time = 0; // 累积抽奖香槟次数
            this.lottery_soda_time = 0; // 累积抽奖苏打次数
            this.mall_ordinary_time = 0; // 每日普通商店刷新次数
            this.rewardPower = 0; // 今日已领体力
            this.buy_money = 0; // 购买游戏币次数
            this.buy_money_exp = 0; // 购买游戏币未暴击经验
            this.league_fishing = 0; // 联盟钓鱼次数
            this.normal_gamble = 0; // 普通赌石次数
            this.normal_gamble_free = 0; // 普通赌石免费次数
            this.wish_tree_time = 0; // 许愿树刷新次数
            this.gain_runes_time = 0; // 祭祀次数
            this.change_runes_time = 0; // 换符文次数
            this.craft_time = 0; // 跨服挑战次数
            this.craft_buy = 0; // 跨服挑战次数购买
            this.buy_wantedtime = 0; // 悬赏令购买(记次数)
            this.buy_arresttime = 0; // 海捕令购买(记次数)
            this.buy_hunttime = 0; // 缉拿令购买(记次数)
            this.assist_time = 0; // 每日助战次数
            this.xuyuan_free = 0; // 许愿屋次数
            this.mall_relic_time = 0; // 每日魔晶商店刷新次数
            this.buy_coin_free_time = 0; // 购买金币免费次数
            this.activity_time = 0; // 活动副本战斗次数
            this.buy_activity_time = 0; // 购买活动副本战斗次数
        }
        LicenceInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pvpPower
            if (decoder_.eof())
                return true;
            this.pvpPower = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buyPvpPower
            if (decoder_.eof())
                return true;
            this.buyPvpPower = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buyPower
            if (decoder_.eof())
                return true;
            this.buyPower = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buyPlate
            if (decoder_.eof())
                return true;
            this.buyPlate = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // strategy_time
            if (decoder_.eof())
                return true;
            this.strategy_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // tower_time
            if (decoder_.eof())
                return true;
            this.tower_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lottery_beer_time
            if (decoder_.eof())
                return true;
            this.lottery_beer_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lottery_redwine_time
            if (decoder_.eof())
                return true;
            this.lottery_redwine_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lottery_champagne_time
            if (decoder_.eof())
                return true;
            this.lottery_champagne_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lottery_soda_time
            if (decoder_.eof())
                return true;
            this.lottery_soda_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // mall_ordinary_time
            if (decoder_.eof())
                return true;
            this.mall_ordinary_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rewardPower
            if (decoder_.eof())
                return true;
            this.rewardPower = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buy_money
            if (decoder_.eof())
                return true;
            this.buy_money = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buy_money_exp
            if (decoder_.eof())
                return true;
            this.buy_money_exp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // league_fishing
            if (decoder_.eof())
                return true;
            this.league_fishing = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // normal_gamble
            if (decoder_.eof())
                return true;
            this.normal_gamble = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // normal_gamble_free
            if (decoder_.eof())
                return true;
            this.normal_gamble_free = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // wish_tree_time
            if (decoder_.eof())
                return true;
            this.wish_tree_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // gain_runes_time
            if (decoder_.eof())
                return true;
            this.gain_runes_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // change_runes_time
            if (decoder_.eof())
                return true;
            this.change_runes_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // craft_time
            if (decoder_.eof())
                return true;
            this.craft_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // craft_buy
            if (decoder_.eof())
                return true;
            this.craft_buy = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buy_wantedtime
            if (decoder_.eof())
                return true;
            this.buy_wantedtime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buy_arresttime
            if (decoder_.eof())
                return true;
            this.buy_arresttime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buy_hunttime
            if (decoder_.eof())
                return true;
            this.buy_hunttime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // assist_time
            if (decoder_.eof())
                return true;
            this.assist_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // xuyuan_free
            if (decoder_.eof())
                return true;
            this.xuyuan_free = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // mall_relic_time
            if (decoder_.eof())
                return true;
            this.mall_relic_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buy_coin_free_time
            if (decoder_.eof())
                return true;
            this.buy_coin_free_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // activity_time
            if (decoder_.eof())
                return true;
            this.activity_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buy_activity_time
            if (decoder_.eof())
                return true;
            this.buy_activity_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LicenceInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pvpPower
            encoder.write_fixuint32(this.pvpPower);
            // buyPvpPower
            encoder.write_fixuint32(this.buyPvpPower);
            // buyPower
            encoder.write_fixuint32(this.buyPower);
            // buyPlate
            encoder.write_fixuint32(this.buyPlate);
            // strategy_time
            encoder.write_fixuint32(this.strategy_time);
            // tower_time
            encoder.write_fixuint32(this.tower_time);
            // lottery_beer_time
            encoder.write_fixuint32(this.lottery_beer_time);
            // lottery_redwine_time
            encoder.write_fixuint32(this.lottery_redwine_time);
            // lottery_champagne_time
            encoder.write_fixuint32(this.lottery_champagne_time);
            // lottery_soda_time
            encoder.write_fixuint32(this.lottery_soda_time);
            // mall_ordinary_time
            encoder.write_fixuint32(this.mall_ordinary_time);
            // rewardPower
            encoder.write_fixuint32(this.rewardPower);
            // buy_money
            encoder.write_fixuint32(this.buy_money);
            // buy_money_exp
            encoder.write_fixuint32(this.buy_money_exp);
            // league_fishing
            encoder.write_fixuint32(this.league_fishing);
            // normal_gamble
            encoder.write_fixuint32(this.normal_gamble);
            // normal_gamble_free
            encoder.write_fixuint32(this.normal_gamble_free);
            // wish_tree_time
            encoder.write_fixuint32(this.wish_tree_time);
            // gain_runes_time
            encoder.write_fixuint32(this.gain_runes_time);
            // change_runes_time
            encoder.write_fixuint32(this.change_runes_time);
            // craft_time
            encoder.write_fixuint32(this.craft_time);
            // craft_buy
            encoder.write_fixuint32(this.craft_buy);
            // buy_wantedtime
            encoder.write_fixuint32(this.buy_wantedtime);
            // buy_arresttime
            encoder.write_fixuint32(this.buy_arresttime);
            // buy_hunttime
            encoder.write_fixuint32(this.buy_hunttime);
            // assist_time
            encoder.write_fixuint32(this.assist_time);
            // xuyuan_free
            encoder.write_fixuint32(this.xuyuan_free);
            // mall_relic_time
            encoder.write_fixuint32(this.mall_relic_time);
            // buy_coin_free_time
            encoder.write_fixuint32(this.buy_coin_free_time);
            // activity_time
            encoder.write_fixuint32(this.activity_time);
            // buy_activity_time
            encoder.write_fixuint32(this.buy_activity_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LicenceInfo;
    }());
    message.LicenceInfo = LicenceInfo;
    __reflect(LicenceInfo.prototype, "message.LicenceInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 任务基础信息
    // struct MissionInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MissionInfo = (function () {
        function MissionInfo() {
            this.type = 0; // 任务类型(MissionType主线任务、日常任务)
            this.subType = 0; // 任务子类型(MissionSubType)
            this.missionId = 0; // 任务id(type1\2\4\5读type表，3\6读main表)
            this.isFinish = false; // 是否已经完成(标记为完成的任务客户端不显示或标记每日任务完成)
            this.value = 0; // 任务当前状态
            this.valueEx = []; // 其他信息
        }
        MissionInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // subType
            if (decoder_.eof())
                return true;
            this.subType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // missionId
            if (decoder_.eof())
                return true;
            this.missionId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // isFinish
            if (decoder_.eof())
                return true;
            this.isFinish = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // valueEx
            if (decoder_.eof())
                return true;
            this.valueEx = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MissionInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // subType
            encoder.write_fixuint32(this.subType);
            // missionId
            encoder.write_fixuint32(this.missionId);
            // isFinish
            encoder.write_bool(this.isFinish);
            // value
            encoder.write_fixuint32(this.value);
            // valueEx
            encoder.write_uint32_vector(this.valueEx);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionInfo;
    }());
    message.MissionInfo = MissionInfo;
    __reflect(MissionInfo.prototype, "message.MissionInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 每日活跃度信息
    // struct MissionActive
    ////////////////////////////////////////////////////////////////////////////////
    var MissionActive = (function () {
        function MissionActive() {
            this.activeScore = 0; // 每日活跃度
            this.activeIndex = []; // 活跃度奖励领取情况
            this.licence = 0; // 猎人执照
            this.licenceReward = []; // 执照奖励领取情况
            this.raceKM = []; // 每日公里数
            this.raceRewards = []; // 奖励领取情况
            this.jewelToday = 0; // 今天获得宝石
            this.jewelAll = 0; // 累积获得宝石
            this.jewelHave = 0; // 可使用的宝石
            this.jewelMall = []; // 宝石兑换商城
            this.missionWeekIndex = 0; // 周常任务索引
            this.missionWeekStart = 0; // 周常任务开始时间
            this.missionWeekReward = []; // 周常任务领取情况
        }
        MissionActive.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // activeScore
            if (decoder_.eof())
                return true;
            this.activeScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // activeIndex
            if (decoder_.eof())
                return true;
            this.activeIndex = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // licence
            if (decoder_.eof())
                return true;
            this.licence = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // licenceReward
            if (decoder_.eof())
                return true;
            this.licenceReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // raceKM
            if (decoder_.eof())
                return true;
            this.raceKM = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // raceRewards
            if (decoder_.eof())
                return true;
            this.raceRewards = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // jewelToday
            if (decoder_.eof())
                return true;
            this.jewelToday = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // jewelAll
            if (decoder_.eof())
                return true;
            this.jewelAll = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // jewelHave
            if (decoder_.eof())
                return true;
            this.jewelHave = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // jewelMall
            if (decoder_.eof())
                return true;
            var jewelMall_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < jewelMall_count; i++) {
                this.jewelMall.push(new message.IIKVPairs());
                if (!this.jewelMall[i].parse_bytes(decoder_))
                    return false;
            }
            // missionWeekIndex
            if (decoder_.eof())
                return true;
            this.missionWeekIndex = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // missionWeekStart
            if (decoder_.eof())
                return true;
            this.missionWeekStart = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // missionWeekReward
            if (decoder_.eof())
                return true;
            var missionWeekReward_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < missionWeekReward_count; i++) {
                this.missionWeekReward.push(new message.IIKVPairs());
                if (!this.missionWeekReward[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionActive.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // activeScore
            encoder.write_fixuint32(this.activeScore);
            // activeIndex
            encoder.write_uint32_vector(this.activeIndex);
            // licence
            encoder.write_fixuint32(this.licence);
            // licenceReward
            encoder.write_uint32_vector(this.licenceReward);
            // raceKM
            encoder.write_uint32_vector(this.raceKM);
            // raceRewards
            encoder.write_uint32_vector(this.raceRewards);
            // jewelToday
            encoder.write_fixuint32(this.jewelToday);
            // jewelAll
            encoder.write_fixuint32(this.jewelAll);
            // jewelHave
            encoder.write_fixuint32(this.jewelHave);
            // jewelMall
            encoder.write_fixuint32(Object.keys(this.jewelMall).length);
            for (var k in this.jewelMall) {
                if (!this.jewelMall[k].to_bytes(encoder))
                    return false;
            }
            // missionWeekIndex
            encoder.write_fixuint32(this.missionWeekIndex);
            // missionWeekStart
            encoder.write_fixuint32(this.missionWeekStart);
            // missionWeekReward
            encoder.write_fixuint32(Object.keys(this.missionWeekReward).length);
            for (var k in this.missionWeekReward) {
                if (!this.missionWeekReward[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionActive;
    }());
    message.MissionActive = MissionActive;
    __reflect(MissionActive.prototype, "message.MissionActive", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将相关begin
    // 属性信息
    // struct AttriInfo
    ////////////////////////////////////////////////////////////////////////////////
    var AttriInfo = (function () {
        function AttriInfo() {
            this.general_hp = 0;
            this.general_atk_all = 0;
            this.general_atk = 0;
            this.general_def = 0;
            this.skill_atk = 0;
            this.skill_def = 0;
            this.atk_crit = 0;
            this.skill_crit = 0;
            this.crit_extra = 0;
            this.crit_resistance = 0;
            this.dodge_rate = 0;
            this.hit_rate = 0;
            this.ignore_phyDef = 0;
            this.ignore_magicDef = 0;
            this.final_extra = 0;
            this.final_reduce = 0;
            this.rage_reduce = 0;
            this.general_def_all = 0;
            this.all_crit = 0;
            this.ignore_def_all = 0;
            this.universal_resistance = 0;
            this.ignore_resistance = 0;
            this.float_resistance = 0;
            this.cd_speed = 0;
            this.support_consume = 0;
        }
        AttriInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // general_hp
            if (decoder_.eof())
                return true;
            this.general_hp = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // general_atk_all
            if (decoder_.eof())
                return true;
            this.general_atk_all = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // general_atk
            if (decoder_.eof())
                return true;
            this.general_atk = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // general_def
            if (decoder_.eof())
                return true;
            this.general_def = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // skill_atk
            if (decoder_.eof())
                return true;
            this.skill_atk = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // skill_def
            if (decoder_.eof())
                return true;
            this.skill_def = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // atk_crit
            if (decoder_.eof())
                return true;
            this.atk_crit = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // skill_crit
            if (decoder_.eof())
                return true;
            this.skill_crit = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // crit_extra
            if (decoder_.eof())
                return true;
            this.crit_extra = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // crit_resistance
            if (decoder_.eof())
                return true;
            this.crit_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // dodge_rate
            if (decoder_.eof())
                return true;
            this.dodge_rate = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // hit_rate
            if (decoder_.eof())
                return true;
            this.hit_rate = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // ignore_phyDef
            if (decoder_.eof())
                return true;
            this.ignore_phyDef = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // ignore_magicDef
            if (decoder_.eof())
                return true;
            this.ignore_magicDef = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // final_extra
            if (decoder_.eof())
                return true;
            this.final_extra = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // final_reduce
            if (decoder_.eof())
                return true;
            this.final_reduce = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // rage_reduce
            if (decoder_.eof())
                return true;
            this.rage_reduce = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // general_def_all
            if (decoder_.eof())
                return true;
            this.general_def_all = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // all_crit
            if (decoder_.eof())
                return true;
            this.all_crit = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // ignore_def_all
            if (decoder_.eof())
                return true;
            this.ignore_def_all = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // universal_resistance
            if (decoder_.eof())
                return true;
            this.universal_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // ignore_resistance
            if (decoder_.eof())
                return true;
            this.ignore_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // float_resistance
            if (decoder_.eof())
                return true;
            this.float_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // cd_speed
            if (decoder_.eof())
                return true;
            this.cd_speed = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // support_consume
            if (decoder_.eof())
                return true;
            this.support_consume = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AttriInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // general_hp
            encoder.write_float64(this.general_hp);
            // general_atk_all
            encoder.write_float64(this.general_atk_all);
            // general_atk
            encoder.write_float64(this.general_atk);
            // general_def
            encoder.write_float64(this.general_def);
            // skill_atk
            encoder.write_float64(this.skill_atk);
            // skill_def
            encoder.write_float64(this.skill_def);
            // atk_crit
            encoder.write_float64(this.atk_crit);
            // skill_crit
            encoder.write_float64(this.skill_crit);
            // crit_extra
            encoder.write_float64(this.crit_extra);
            // crit_resistance
            encoder.write_float64(this.crit_resistance);
            // dodge_rate
            encoder.write_float64(this.dodge_rate);
            // hit_rate
            encoder.write_float64(this.hit_rate);
            // ignore_phyDef
            encoder.write_float64(this.ignore_phyDef);
            // ignore_magicDef
            encoder.write_float64(this.ignore_magicDef);
            // final_extra
            encoder.write_float64(this.final_extra);
            // final_reduce
            encoder.write_float64(this.final_reduce);
            // rage_reduce
            encoder.write_float64(this.rage_reduce);
            // general_def_all
            encoder.write_float64(this.general_def_all);
            // all_crit
            encoder.write_float64(this.all_crit);
            // ignore_def_all
            encoder.write_float64(this.ignore_def_all);
            // universal_resistance
            encoder.write_float64(this.universal_resistance);
            // ignore_resistance
            encoder.write_float64(this.ignore_resistance);
            // float_resistance
            encoder.write_float64(this.float_resistance);
            // cd_speed
            encoder.write_float64(this.cd_speed);
            // support_consume
            encoder.write_float64(this.support_consume);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AttriInfo;
    }());
    message.AttriInfo = AttriInfo;
    __reflect(AttriInfo.prototype, "message.AttriInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物属性信息
    // struct PotatoAttriItem
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoAttriItem = (function () {
        function PotatoAttriItem() {
            this.attriId = 0; // 属性Id
            this.attriValue = 0; // 属性值
            this.growthValue = 0; // 增幅百分比
        }
        PotatoAttriItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // attriId
            if (decoder_.eof())
                return true;
            this.attriId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // attriValue
            if (decoder_.eof())
                return true;
            this.attriValue = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // growthValue
            if (decoder_.eof())
                return true;
            this.growthValue = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PotatoAttriItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // attriId
            encoder.write_fixuint32(this.attriId);
            // attriValue
            encoder.write_float64(this.attriValue);
            // growthValue
            encoder.write_float64(this.growthValue);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoAttriItem;
    }());
    message.PotatoAttriItem = PotatoAttriItem;
    __reflect(PotatoAttriItem.prototype, "message.PotatoAttriItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物结构
    // struct PotatoInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoInfo = (function () {
        function PotatoInfo() {
            this.id = 0; // 宝物id
            this.index = 0; // 宝物唯一索引
            this.pos = 0; // 装备位子
            this.star = 0; // 星级
            this.level = 0; // 等级
            this.add_attri = []; // 附加属性
            this.is_lock = false; // 是否锁定
            this.attri = new AttriInfo(); // 属性
            this.battleValue = 0; // 战力
            this.break_level = 0; // 突破等级
        }
        PotatoInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pos
            if (decoder_.eof())
                return true;
            this.pos = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // star
            if (decoder_.eof())
                return true;
            this.star = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // add_attri
            if (decoder_.eof())
                return true;
            var add_attri_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < add_attri_count; i++) {
                this.add_attri.push(new PotatoAttriItem());
                if (!this.add_attri[i].parse_bytes(decoder_))
                    return false;
            }
            // is_lock
            if (decoder_.eof())
                return true;
            this.is_lock = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // attri
            if (decoder_.eof())
                return true;
            if (!this.attri.parse_bytes(decoder_))
                return false;
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // break_level
            if (decoder_.eof())
                return true;
            this.break_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PotatoInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            // index
            encoder.write_fixuint32(this.index);
            // pos
            encoder.write_fixuint32(this.pos);
            // star
            encoder.write_fixuint32(this.star);
            // level
            encoder.write_fixuint32(this.level);
            // add_attri
            encoder.write_fixuint32(Object.keys(this.add_attri).length);
            for (var k in this.add_attri) {
                if (!this.add_attri[k].to_bytes(encoder))
                    return false;
            }
            // is_lock
            encoder.write_bool(this.is_lock);
            // attri
            this.attri.to_bytes(encoder);
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            // break_level
            encoder.write_fixuint32(this.break_level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoInfo;
    }());
    message.PotatoInfo = PotatoInfo;
    __reflect(PotatoInfo.prototype, "message.PotatoInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将技能信息
    // struct SkillInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SkillInfo = (function () {
        function SkillInfo() {
            this.pos = 0; // 装备位置(1-3)
            this.level = 0; // 技能等级
            this.skillId = 0; // 技能Id
        }
        SkillInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pos
            if (decoder_.eof())
                return true;
            this.pos = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // skillId
            if (decoder_.eof())
                return true;
            this.skillId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        SkillInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pos
            encoder.write_uint8(this.pos);
            // level
            encoder.write_fixuint32(this.level);
            // skillId
            encoder.write_fixuint32(this.skillId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SkillInfo;
    }());
    message.SkillInfo = SkillInfo;
    __reflect(SkillInfo.prototype, "message.SkillInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将传记信息
    // struct LifeInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LifeInfo = (function () {
        function LifeInfo() {
            this.pos = 0; // 位置(1-3)
            this.lifeId = 0; // 传记Id
            this.statPoints = []; // 激活的属性点
            this.winPoints = []; // 挑战胜利的属性点
            this.battleValue = 0; // 传记提供的战力
            this.attri = new AttriInfo(); // 传记属性
        }
        LifeInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pos
            if (decoder_.eof())
                return true;
            this.pos = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // lifeId
            if (decoder_.eof())
                return true;
            this.lifeId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // statPoints
            if (decoder_.eof())
                return true;
            this.statPoints = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // winPoints
            if (decoder_.eof())
                return true;
            this.winPoints = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // attri
            if (decoder_.eof())
                return true;
            if (!this.attri.parse_bytes(decoder_))
                return false;
            return true;
        };
        LifeInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pos
            encoder.write_uint8(this.pos);
            // lifeId
            encoder.write_fixuint32(this.lifeId);
            // statPoints
            encoder.write_uint32_vector(this.statPoints);
            // winPoints
            encoder.write_uint32_vector(this.winPoints);
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            // attri
            this.attri.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LifeInfo;
    }());
    message.LifeInfo = LifeInfo;
    __reflect(LifeInfo.prototype, "message.LifeInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神兵信息
    // struct ArtifactInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ArtifactInfo = (function () {
        function ArtifactInfo() {
            this.artifactId = 0; // 神兵Id(对1000取余为神兵类型,相同类型神兵只能有一个)
            this.attri = new AttriInfo(); // 神兵属性
            this.newAttri = []; // 洗练属性(替换之后为空)
            this.goodses = []; // 镶嵌宝石(index表示位置,从1开始)
            this.battleValue = 0;
        }
        ArtifactInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // artifactId
            if (decoder_.eof())
                return true;
            this.artifactId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // attri
            if (decoder_.eof())
                return true;
            if (!this.attri.parse_bytes(decoder_))
                return false;
            // newAttri
            if (decoder_.eof())
                return true;
            var newAttri_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < newAttri_count; i++) {
                this.newAttri.push(new AttriInfo());
                if (!this.newAttri[i].parse_bytes(decoder_))
                    return false;
            }
            // goodses
            if (decoder_.eof())
                return true;
            var goodses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodses_count; i++) {
                this.goodses.push(new GoodsInfo());
                if (!this.goodses[i].parse_bytes(decoder_))
                    return false;
            }
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ArtifactInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            // attri
            this.attri.to_bytes(encoder);
            // newAttri
            encoder.write_fixuint32(Object.keys(this.newAttri).length);
            for (var k in this.newAttri) {
                if (!this.newAttri[k].to_bytes(encoder))
                    return false;
            }
            // goodses
            encoder.write_fixuint32(Object.keys(this.goodses).length);
            for (var k in this.goodses) {
                if (!this.goodses[k].to_bytes(encoder))
                    return false;
            }
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArtifactInfo;
    }());
    message.ArtifactInfo = ArtifactInfo;
    __reflect(ArtifactInfo.prototype, "message.ArtifactInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 装备信息
    // struct EquipInfo
    ////////////////////////////////////////////////////////////////////////////////
    var EquipInfo = (function () {
        function EquipInfo() {
            this.equipId = 0; // 装备id
            this.level = 0; // 等级
            this.step = 0; // 阶级
        }
        EquipInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // equipId
            if (decoder_.eof())
                return true;
            this.equipId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // step
            if (decoder_.eof())
                return true;
            this.step = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        EquipInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // equipId
            encoder.write_fixuint32(this.equipId);
            // level
            encoder.write_fixuint32(this.level);
            // step
            encoder.write_fixuint32(this.step);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return EquipInfo;
    }());
    message.EquipInfo = EquipInfo;
    __reflect(EquipInfo.prototype, "message.EquipInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将被动信息
    // struct PassiveInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PassiveInfo = (function () {
        function PassiveInfo() {
            this.pos = 0; // 位置
            this.level = 0; // 等级
            this.talentId = 0; // 被动Id
        }
        PassiveInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pos
            if (decoder_.eof())
                return true;
            this.pos = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // talentId
            if (decoder_.eof())
                return true;
            this.talentId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PassiveInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pos
            encoder.write_uint8(this.pos);
            // level
            encoder.write_fixuint32(this.level);
            // talentId
            encoder.write_fixuint32(this.talentId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PassiveInfo;
    }());
    message.PassiveInfo = PassiveInfo;
    __reflect(PassiveInfo.prototype, "message.PassiveInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 伙伴信息
    // struct FriendsInfo
    ////////////////////////////////////////////////////////////////////////////////
    var FriendsInfo = (function () {
        function FriendsInfo() {
            this.general_id = 0;
            this.level = 0;
            this.exp = 0;
            this.is_baseown = false; // 固定伙伴是否激活
        }
        FriendsInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // general_id
            if (decoder_.eof())
                return true;
            this.general_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // exp
            if (decoder_.eof())
                return true;
            this.exp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_baseown
            if (decoder_.eof())
                return true;
            this.is_baseown = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        FriendsInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // general_id
            encoder.write_fixuint32(this.general_id);
            // level
            encoder.write_fixuint32(this.level);
            // exp
            encoder.write_fixuint32(this.exp);
            // is_baseown
            encoder.write_bool(this.is_baseown);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return FriendsInfo;
    }());
    message.FriendsInfo = FriendsInfo;
    __reflect(FriendsInfo.prototype, "message.FriendsInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 念力信息
    // struct PsychicInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PsychicInfo = (function () {
        function PsychicInfo() {
            this.pos = 0;
            this.level = 0;
        }
        PsychicInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pos
            if (decoder_.eof())
                return true;
            this.pos = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PsychicInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pos
            encoder.write_fixuint32(this.pos);
            // level
            encoder.write_fixuint32(this.level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PsychicInfo;
    }());
    message.PsychicInfo = PsychicInfo;
    __reflect(PsychicInfo.prototype, "message.PsychicInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将信息
    // struct GeneralInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralInfo = (function () {
        function GeneralInfo() {
            this.general_id = 0; // 武将Id（N*100000 + general_id）
            this.level = 0; // 武将等级
            this.exp = 0; // 武将经验
            this.star = 0; // 武将星级
            this.step = 0; // 武将阶数
            this.battleValue = 0; // 武将提供的战力
            this.attri = new AttriInfo(); // 武将属性
            this.partner = []; // 羁绊激活(1-4)
            this.skills = []; // 武将技能
            this.artifactId = 0; // 神兵Id
            this.fashionId = 0; // 时装Id
            this.potatoInfo = []; // 宝物信息
            this.lifes = []; // 传记信息
            this.passives = []; // 武将被动
            this.skill_num = 0; // 剩余技能点
            this.awakePassive = new PassiveInfo(); // 武将觉醒被动
            this.friendsInfo = []; // 武将伙伴
            this.choiceFriend = 0; // 可选伙伴
            this.use_skillItem = 0; // 使用技能书
            this.is_ware = false; // 是否放在仓库
            this.psychicInfo = []; // 武将念力
            this.break_level = 0; // 突破等级
            this.break_skill = []; // 获得的突破技能(k:技能id v:技能等级)
            this.using_break_skill = []; // 正在使用的突破技
            this.equipInfo = []; // 藏品信息
            this.transfer_level = 0; // 变身技能等级
            this.is_show_transfer = false; // 是否显示变身时装
        }
        GeneralInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // general_id
            if (decoder_.eof())
                return true;
            this.general_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // exp
            if (decoder_.eof())
                return true;
            this.exp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // star
            if (decoder_.eof())
                return true;
            this.star = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // step
            if (decoder_.eof())
                return true;
            this.step = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // attri
            if (decoder_.eof())
                return true;
            if (!this.attri.parse_bytes(decoder_))
                return false;
            // partner
            if (decoder_.eof())
                return true;
            this.partner = decoder_.read_uint8_vector();
            if (decoder_.has_error())
                return false;
            // skills
            if (decoder_.eof())
                return true;
            var skills_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < skills_count; i++) {
                this.skills.push(new SkillInfo());
                if (!this.skills[i].parse_bytes(decoder_))
                    return false;
            }
            // artifactId
            if (decoder_.eof())
                return true;
            this.artifactId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // fashionId
            if (decoder_.eof())
                return true;
            this.fashionId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // potatoInfo
            if (decoder_.eof())
                return true;
            var potatoInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < potatoInfo_count; i++) {
                this.potatoInfo.push(new PotatoInfo());
                if (!this.potatoInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // lifes
            if (decoder_.eof())
                return true;
            var lifes_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < lifes_count; i++) {
                this.lifes.push(new LifeInfo());
                if (!this.lifes[i].parse_bytes(decoder_))
                    return false;
            }
            // passives
            if (decoder_.eof())
                return true;
            var passives_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < passives_count; i++) {
                this.passives.push(new PassiveInfo());
                if (!this.passives[i].parse_bytes(decoder_))
                    return false;
            }
            // skill_num
            if (decoder_.eof())
                return true;
            this.skill_num = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // awakePassive
            if (decoder_.eof())
                return true;
            if (!this.awakePassive.parse_bytes(decoder_))
                return false;
            // friendsInfo
            if (decoder_.eof())
                return true;
            var friendsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < friendsInfo_count; i++) {
                this.friendsInfo.push(new FriendsInfo());
                if (!this.friendsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // choiceFriend
            if (decoder_.eof())
                return true;
            this.choiceFriend = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // use_skillItem
            if (decoder_.eof())
                return true;
            this.use_skillItem = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_ware
            if (decoder_.eof())
                return true;
            this.is_ware = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // psychicInfo
            if (decoder_.eof())
                return true;
            var psychicInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < psychicInfo_count; i++) {
                this.psychicInfo.push(new PsychicInfo());
                if (!this.psychicInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // break_level
            if (decoder_.eof())
                return true;
            this.break_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // break_skill
            if (decoder_.eof())
                return true;
            var break_skill_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < break_skill_count; i++) {
                this.break_skill.push(new message.IIKVPairs());
                if (!this.break_skill[i].parse_bytes(decoder_))
                    return false;
            }
            // using_break_skill
            if (decoder_.eof())
                return true;
            this.using_break_skill = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // equipInfo
            if (decoder_.eof())
                return true;
            var equipInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < equipInfo_count; i++) {
                this.equipInfo.push(new EquipInfo());
                if (!this.equipInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // transfer_level
            if (decoder_.eof())
                return true;
            this.transfer_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_show_transfer
            if (decoder_.eof())
                return true;
            this.is_show_transfer = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GeneralInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // general_id
            encoder.write_fixuint32(this.general_id);
            // level
            encoder.write_uint16(this.level);
            // exp
            encoder.write_fixuint32(this.exp);
            // star
            encoder.write_fixuint32(this.star);
            // step
            encoder.write_fixuint32(this.step);
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            // attri
            this.attri.to_bytes(encoder);
            // partner
            encoder.write_uint8_vector(this.partner);
            // skills
            encoder.write_fixuint32(Object.keys(this.skills).length);
            for (var k in this.skills) {
                if (!this.skills[k].to_bytes(encoder))
                    return false;
            }
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            // fashionId
            encoder.write_fixuint32(this.fashionId);
            // potatoInfo
            encoder.write_fixuint32(Object.keys(this.potatoInfo).length);
            for (var k in this.potatoInfo) {
                if (!this.potatoInfo[k].to_bytes(encoder))
                    return false;
            }
            // lifes
            encoder.write_fixuint32(Object.keys(this.lifes).length);
            for (var k in this.lifes) {
                if (!this.lifes[k].to_bytes(encoder))
                    return false;
            }
            // passives
            encoder.write_fixuint32(Object.keys(this.passives).length);
            for (var k in this.passives) {
                if (!this.passives[k].to_bytes(encoder))
                    return false;
            }
            // skill_num
            encoder.write_fixuint32(this.skill_num);
            // awakePassive
            this.awakePassive.to_bytes(encoder);
            // friendsInfo
            encoder.write_fixuint32(Object.keys(this.friendsInfo).length);
            for (var k in this.friendsInfo) {
                if (!this.friendsInfo[k].to_bytes(encoder))
                    return false;
            }
            // choiceFriend
            encoder.write_fixuint32(this.choiceFriend);
            // use_skillItem
            encoder.write_fixuint32(this.use_skillItem);
            // is_ware
            encoder.write_bool(this.is_ware);
            // psychicInfo
            encoder.write_fixuint32(Object.keys(this.psychicInfo).length);
            for (var k in this.psychicInfo) {
                if (!this.psychicInfo[k].to_bytes(encoder))
                    return false;
            }
            // break_level
            encoder.write_fixuint32(this.break_level);
            // break_skill
            encoder.write_fixuint32(Object.keys(this.break_skill).length);
            for (var k in this.break_skill) {
                if (!this.break_skill[k].to_bytes(encoder))
                    return false;
            }
            // using_break_skill
            encoder.write_uint32_vector(this.using_break_skill);
            // equipInfo
            encoder.write_fixuint32(Object.keys(this.equipInfo).length);
            for (var k in this.equipInfo) {
                if (!this.equipInfo[k].to_bytes(encoder))
                    return false;
            }
            // transfer_level
            encoder.write_fixuint32(this.transfer_level);
            // is_show_transfer
            encoder.write_bool(this.is_show_transfer);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralInfo;
    }());
    message.GeneralInfo = GeneralInfo;
    __reflect(GeneralInfo.prototype, "message.GeneralInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将简单信息
    // struct GeneralSimpleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralSimpleInfo = (function () {
        function GeneralSimpleInfo() {
            this.general_id = 0; // 武将Id（N*100000 + general_id）
            this.level = 0; // 武将等级
            this.star = 0; // 武将星级
            this.step = 0; // 武将阶数
            this.fashionId = 0; // 时装Id
            this.battleValue = 0; // 武将提供的战力
            this.awaken_level = 0; // 武将觉醒等级
            this.transfer_level = 0; // 变身技能等级
        }
        GeneralSimpleInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // general_id
            if (decoder_.eof())
                return true;
            this.general_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // star
            if (decoder_.eof())
                return true;
            this.star = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // step
            if (decoder_.eof())
                return true;
            this.step = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // fashionId
            if (decoder_.eof())
                return true;
            this.fashionId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // awaken_level
            if (decoder_.eof())
                return true;
            this.awaken_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // transfer_level
            if (decoder_.eof())
                return true;
            this.transfer_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GeneralSimpleInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // general_id
            encoder.write_fixuint32(this.general_id);
            // level
            encoder.write_fixuint32(this.level);
            // star
            encoder.write_fixuint32(this.star);
            // step
            encoder.write_fixuint32(this.step);
            // fashionId
            encoder.write_fixuint32(this.fashionId);
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            // awaken_level
            encoder.write_fixuint32(this.awaken_level);
            // transfer_level
            encoder.write_fixuint32(this.transfer_level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralSimpleInfo;
    }());
    message.GeneralSimpleInfo = GeneralSimpleInfo;
    __reflect(GeneralSimpleInfo.prototype, "message.GeneralSimpleInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 念兽信息
    // struct AdviserInfo
    ////////////////////////////////////////////////////////////////////////////////
    var AdviserInfo = (function () {
        function AdviserInfo() {
            this.adviserId = 0; // 念兽UID
            this.level = 0; // 念兽等级
            this.battleValue = 0; // 提供战力
            this.levelfa_times = 0; // 升级失败次数
            this.last_addTime = 0; // 上次增加时间
            this.reward_count = 0; // 累积数量
        }
        AdviserInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // adviserId
            if (decoder_.eof())
                return true;
            this.adviserId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // levelfa_times
            if (decoder_.eof())
                return true;
            this.levelfa_times = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // last_addTime
            if (decoder_.eof())
                return true;
            this.last_addTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // reward_count
            if (decoder_.eof())
                return true;
            this.reward_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AdviserInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // adviserId
            encoder.write_fixuint32(this.adviserId);
            // level
            encoder.write_fixuint32(this.level);
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            // levelfa_times
            encoder.write_fixuint32(this.levelfa_times);
            // last_addTime
            encoder.write_fixuint32(this.last_addTime);
            // reward_count
            encoder.write_fixuint32(this.reward_count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AdviserInfo;
    }());
    message.AdviserInfo = AdviserInfo;
    __reflect(AdviserInfo.prototype, "message.AdviserInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 角色阵型保存
    // struct FormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var FormationInfo = (function () {
        function FormationInfo() {
            this.formationType = 0; // 阵型类型
            this.formationIndex = 0; // 阵型索引
            this.adviserId = 0; // 使用军师
            this.strategyId = 0; // 使用阵型
            this.adviserSkill = 0; // 使用军师技(类型23表示是否好友使用)
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
        }
        FormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formationType
            if (decoder_.eof())
                return true;
            this.formationType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // formationIndex
            if (decoder_.eof())
                return true;
            this.formationIndex = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // adviserId
            if (decoder_.eof())
                return true;
            this.adviserId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // strategyId
            if (decoder_.eof())
                return true;
            this.strategyId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // adviserSkill
            if (decoder_.eof())
                return true;
            this.adviserSkill = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // generals
            if (decoder_.eof())
                return true;
            this.generals = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // reserves
            if (decoder_.eof())
                return true;
            this.reserves = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // supports
            if (decoder_.eof())
                return true;
            this.supports = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        FormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // formationType
            encoder.write_fixuint32(this.formationType);
            // formationIndex
            encoder.write_fixuint32(this.formationIndex);
            // adviserId
            encoder.write_fixuint32(this.adviserId);
            // strategyId
            encoder.write_fixuint32(this.strategyId);
            // adviserSkill
            encoder.write_fixuint32(this.adviserSkill);
            // generals
            encoder.write_uint32_vector(this.generals);
            // reserves
            encoder.write_uint32_vector(this.reserves);
            // supports
            encoder.write_uint32_vector(this.supports);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return FormationInfo;
    }());
    message.FormationInfo = FormationInfo;
    __reflect(FormationInfo.prototype, "message.FormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将阵型
    // struct SimpleFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SimpleFormationInfo = (function () {
        function SimpleFormationInfo() {
            this.adviserId = 0; // 使用军师
            this.strategyId = 0; // 使用阵型
            this.adviserSkill = 0; // 使用军师技（成员信息代表阵容索引）
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
        }
        SimpleFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // adviserId
            if (decoder_.eof())
                return true;
            this.adviserId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // strategyId
            if (decoder_.eof())
                return true;
            this.strategyId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // adviserSkill
            if (decoder_.eof())
                return true;
            this.adviserSkill = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // generals
            if (decoder_.eof())
                return true;
            var generals_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < generals_count; i++) {
                this.generals.push(new GeneralSimpleInfo());
                if (!this.generals[i].parse_bytes(decoder_))
                    return false;
            }
            // reserves
            if (decoder_.eof())
                return true;
            var reserves_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < reserves_count; i++) {
                this.reserves.push(new GeneralSimpleInfo());
                if (!this.reserves[i].parse_bytes(decoder_))
                    return false;
            }
            // supports
            if (decoder_.eof())
                return true;
            var supports_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < supports_count; i++) {
                this.supports.push(new GeneralSimpleInfo());
                if (!this.supports[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimpleFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // adviserId
            encoder.write_fixuint32(this.adviserId);
            // strategyId
            encoder.write_fixuint32(this.strategyId);
            // adviserSkill
            encoder.write_fixuint32(this.adviserSkill);
            // generals
            encoder.write_fixuint32(Object.keys(this.generals).length);
            for (var k in this.generals) {
                if (!this.generals[k].to_bytes(encoder))
                    return false;
            }
            // reserves
            encoder.write_fixuint32(Object.keys(this.reserves).length);
            for (var k in this.reserves) {
                if (!this.reserves[k].to_bytes(encoder))
                    return false;
            }
            // supports
            encoder.write_fixuint32(Object.keys(this.supports).length);
            for (var k in this.supports) {
                if (!this.supports[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimpleFormationInfo;
    }());
    message.SimpleFormationInfo = SimpleFormationInfo;
    __reflect(SimpleFormationInfo.prototype, "message.SimpleFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 详细阵型
    // struct DetailFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var DetailFormationInfo = (function () {
        function DetailFormationInfo() {
            this.adviserId = 0; // 使用军师
            this.strategyId = 0; // 使用阵型
            this.adviserSkill = 0; // 使用军师技
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
            this.advisers = []; // 军师信息
            this.artifacts = []; // 神兵信息
            this.pets = []; // 宠物信息
            this.historyGenerals = []; // 猎人图鉴信息
        }
        DetailFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // adviserId
            if (decoder_.eof())
                return true;
            this.adviserId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // strategyId
            if (decoder_.eof())
                return true;
            this.strategyId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // adviserSkill
            if (decoder_.eof())
                return true;
            this.adviserSkill = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // generals
            if (decoder_.eof())
                return true;
            var generals_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < generals_count; i++) {
                this.generals.push(new GeneralInfo());
                if (!this.generals[i].parse_bytes(decoder_))
                    return false;
            }
            // reserves
            if (decoder_.eof())
                return true;
            var reserves_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < reserves_count; i++) {
                this.reserves.push(new GeneralInfo());
                if (!this.reserves[i].parse_bytes(decoder_))
                    return false;
            }
            // supports
            if (decoder_.eof())
                return true;
            var supports_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < supports_count; i++) {
                this.supports.push(new GeneralInfo());
                if (!this.supports[i].parse_bytes(decoder_))
                    return false;
            }
            // advisers
            if (decoder_.eof())
                return true;
            var advisers_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < advisers_count; i++) {
                this.advisers.push(new AdviserInfo());
                if (!this.advisers[i].parse_bytes(decoder_))
                    return false;
            }
            // artifacts
            if (decoder_.eof())
                return true;
            var artifacts_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < artifacts_count; i++) {
                this.artifacts.push(new ArtifactInfo());
                if (!this.artifacts[i].parse_bytes(decoder_))
                    return false;
            }
            // pets
            if (decoder_.eof())
                return true;
            var pets_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < pets_count; i++) {
                this.pets.push(new PetInfo());
                if (!this.pets[i].parse_bytes(decoder_))
                    return false;
            }
            // historyGenerals
            if (decoder_.eof())
                return true;
            this.historyGenerals = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        DetailFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // adviserId
            encoder.write_fixuint32(this.adviserId);
            // strategyId
            encoder.write_fixuint32(this.strategyId);
            // adviserSkill
            encoder.write_fixuint32(this.adviserSkill);
            // generals
            encoder.write_fixuint32(Object.keys(this.generals).length);
            for (var k in this.generals) {
                if (!this.generals[k].to_bytes(encoder))
                    return false;
            }
            // reserves
            encoder.write_fixuint32(Object.keys(this.reserves).length);
            for (var k in this.reserves) {
                if (!this.reserves[k].to_bytes(encoder))
                    return false;
            }
            // supports
            encoder.write_fixuint32(Object.keys(this.supports).length);
            for (var k in this.supports) {
                if (!this.supports[k].to_bytes(encoder))
                    return false;
            }
            // advisers
            encoder.write_fixuint32(Object.keys(this.advisers).length);
            for (var k in this.advisers) {
                if (!this.advisers[k].to_bytes(encoder))
                    return false;
            }
            // artifacts
            encoder.write_fixuint32(Object.keys(this.artifacts).length);
            for (var k in this.artifacts) {
                if (!this.artifacts[k].to_bytes(encoder))
                    return false;
            }
            // pets
            encoder.write_fixuint32(Object.keys(this.pets).length);
            for (var k in this.pets) {
                if (!this.pets[k].to_bytes(encoder))
                    return false;
            }
            // historyGenerals
            encoder.write_uint32_vector(this.historyGenerals);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DetailFormationInfo;
    }());
    message.DetailFormationInfo = DetailFormationInfo;
    __reflect(DetailFormationInfo.prototype, "message.DetailFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 简单角色阵型
    // struct SimpleRoleFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SimpleRoleFormationInfo = (function () {
        function SimpleRoleFormationInfo() {
            this.baseInfo = new RoleBriefInfo(); // 基础信息
            this.formation = new SimpleFormationInfo(); // 阵型信息
        }
        SimpleRoleFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            if (!this.baseInfo.parse_bytes(decoder_))
                return false;
            // formation
            if (decoder_.eof())
                return true;
            if (!this.formation.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimpleRoleFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // baseInfo
            this.baseInfo.to_bytes(encoder);
            // formation
            this.formation.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimpleRoleFormationInfo;
    }());
    message.SimpleRoleFormationInfo = SimpleRoleFormationInfo;
    __reflect(SimpleRoleFormationInfo.prototype, "message.SimpleRoleFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 简单成员信息
    // struct SimpleMemberFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SimpleMemberFormationInfo = (function () {
        function SimpleMemberFormationInfo() {
            this.baseInfo = new RoleBriefInfo(); // 基础信息
            this.formation = []; // 多对阵型信息
        }
        SimpleMemberFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            if (!this.baseInfo.parse_bytes(decoder_))
                return false;
            // formation
            if (decoder_.eof())
                return true;
            var formation_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formation_count; i++) {
                this.formation.push(new SimpleFormationInfo());
                if (!this.formation[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimpleMemberFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // baseInfo
            this.baseInfo.to_bytes(encoder);
            // formation
            encoder.write_fixuint32(Object.keys(this.formation).length);
            for (var k in this.formation) {
                if (!this.formation[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimpleMemberFormationInfo;
    }());
    message.SimpleMemberFormationInfo = SimpleMemberFormationInfo;
    __reflect(SimpleMemberFormationInfo.prototype, "message.SimpleMemberFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 详细角色阵型
    // struct DetailRoleFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var DetailRoleFormationInfo = (function () {
        function DetailRoleFormationInfo() {
            this.baseInfo = new RoleBriefInfo(); // 基础信息
            this.formation = new DetailFormationInfo(); // 阵型信息
        }
        DetailRoleFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            if (!this.baseInfo.parse_bytes(decoder_))
                return false;
            // formation
            if (decoder_.eof())
                return true;
            if (!this.formation.parse_bytes(decoder_))
                return false;
            return true;
        };
        DetailRoleFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // baseInfo
            this.baseInfo.to_bytes(encoder);
            // formation
            this.formation.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DetailRoleFormationInfo;
    }());
    message.DetailRoleFormationInfo = DetailRoleFormationInfo;
    __reflect(DetailRoleFormationInfo.prototype, "message.DetailRoleFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将相关end
    // 怪物信息
    // struct MobInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MobInfo = (function () {
        function MobInfo() {
            this.mobId = 0; // 怪物Id
            this.dayTime = 0; // 当天挑战次数
            this.star = 0; // 挑战最高星级
            this.allTime = 0; // 挑战总次数
            this.buyTime = 0; // 当天购买次数
            this.chestReward = false; // 宝箱奖励是否领取
            this.firstReward = false; // 首杀奖励是否领取
        }
        MobInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mobId
            if (decoder_.eof())
                return true;
            this.mobId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // dayTime
            if (decoder_.eof())
                return true;
            this.dayTime = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // star
            if (decoder_.eof())
                return true;
            this.star = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // allTime
            if (decoder_.eof())
                return true;
            this.allTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buyTime
            if (decoder_.eof())
                return true;
            this.buyTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // chestReward
            if (decoder_.eof())
                return true;
            this.chestReward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // firstReward
            if (decoder_.eof())
                return true;
            this.firstReward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MobInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mobId
            encoder.write_fixuint32(this.mobId);
            // dayTime
            encoder.write_uint16(this.dayTime);
            // star
            encoder.write_fixuint32(this.star);
            // allTime
            encoder.write_fixuint32(this.allTime);
            // buyTime
            encoder.write_fixuint32(this.buyTime);
            // chestReward
            encoder.write_bool(this.chestReward);
            // firstReward
            encoder.write_bool(this.firstReward);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MobInfo;
    }());
    message.MobInfo = MobInfo;
    __reflect(MobInfo.prototype, "message.MobInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本奖励领取状态
    // struct InstanceReward
    ////////////////////////////////////////////////////////////////////////////////
    var InstanceReward = (function () {
        function InstanceReward() {
            this.instanceId = 0; // 章节Id
            this.indexs = []; // 领取信息
        }
        InstanceReward.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // instanceId
            if (decoder_.eof())
                return true;
            this.instanceId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // indexs
            if (decoder_.eof())
                return true;
            this.indexs = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        InstanceReward.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // indexs
            encoder.write_uint32_vector(this.indexs);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return InstanceReward;
    }());
    message.InstanceReward = InstanceReward;
    __reflect(InstanceReward.prototype, "message.InstanceReward", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 商城物品信息
    // struct MallItem
    ////////////////////////////////////////////////////////////////////////////////
    var MallItem = (function () {
        function MallItem() {
            this.mall_id = 0;
            this.mall_name = 0; // 映射到table_language.csv表中
            this.buy_limit = 0; // 购买等级限制
            this.goods_id = [];
            this.goods_count = [];
            this.show_type = [];
            this.consume_type = 0;
            this.original_price = 0; // 原价
            this.discount_price = 0; // 折价
            this.remain = 0;
            this.picId = 0;
        }
        MallItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mall_id
            if (decoder_.eof())
                return true;
            this.mall_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // mall_name
            if (decoder_.eof())
                return true;
            this.mall_name = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buy_limit
            if (decoder_.eof())
                return true;
            this.buy_limit = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // goods_id
            if (decoder_.eof())
                return true;
            this.goods_id = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // goods_count
            if (decoder_.eof())
                return true;
            this.goods_count = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // show_type
            if (decoder_.eof())
                return true;
            this.show_type = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // consume_type
            if (decoder_.eof())
                return true;
            this.consume_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // original_price
            if (decoder_.eof())
                return true;
            this.original_price = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // discount_price
            if (decoder_.eof())
                return true;
            this.discount_price = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // remain
            if (decoder_.eof())
                return true;
            this.remain = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // picId
            if (decoder_.eof())
                return true;
            this.picId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MallItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mall_id
            encoder.write_fixuint32(this.mall_id);
            // mall_name
            encoder.write_fixuint32(this.mall_name);
            // buy_limit
            encoder.write_fixuint32(this.buy_limit);
            // goods_id
            encoder.write_uint32_vector(this.goods_id);
            // goods_count
            encoder.write_uint32_vector(this.goods_count);
            // show_type
            encoder.write_uint32_vector(this.show_type);
            // consume_type
            encoder.write_fixuint32(this.consume_type);
            // original_price
            encoder.write_fixuint32(this.original_price);
            // discount_price
            encoder.write_fixuint32(this.discount_price);
            // remain
            encoder.write_fixuint32(this.remain);
            // picId
            encoder.write_fixuint32(this.picId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MallItem;
    }());
    message.MallItem = MallItem;
    __reflect(MallItem.prototype, "message.MallItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 特训关卡信息
    // struct InstanceTraining
    ////////////////////////////////////////////////////////////////////////////////
    var InstanceTraining = (function () {
        function InstanceTraining() {
            this.instanceId = 0; // 特训关卡
            this.isFinish = false; // 是否已经打过
            this.isReward = false; // 奖励是否已经领取
        }
        InstanceTraining.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // instanceId
            if (decoder_.eof())
                return true;
            this.instanceId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // isFinish
            if (decoder_.eof())
                return true;
            this.isFinish = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // isReward
            if (decoder_.eof())
                return true;
            this.isReward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        InstanceTraining.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // isFinish
            encoder.write_bool(this.isFinish);
            // isReward
            encoder.write_bool(this.isReward);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return InstanceTraining;
    }());
    message.InstanceTraining = InstanceTraining;
    __reflect(InstanceTraining.prototype, "message.InstanceTraining", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 探索副本信息
    // struct InstanceSearch
    ////////////////////////////////////////////////////////////////////////////////
    var InstanceSearch = (function () {
        function InstanceSearch() {
            this.id = 0;
            this.order_id = 0; // 顺序id
            this.index = 0; // 索引
            this.des_id = 0; // 描述id
            this.goodInfos = []; // 奖励物品
            this.general_step = 0;
            this.general_level = 0;
            this.general_star = 0;
            this.general_aptitude = 0;
            this.general_type = [];
            this.time = 0;
            this.start_time = 0; // 开始时间
            this.generalId = []; // 上阵武将
            this.is_reward = false; // 是否领奖
            this.is_lock = false; // 是否锁定
        }
        InstanceSearch.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // order_id
            if (decoder_.eof())
                return true;
            this.order_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // des_id
            if (decoder_.eof())
                return true;
            this.des_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // goodInfos
            if (decoder_.eof())
                return true;
            var goodInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodInfos_count; i++) {
                this.goodInfos.push(new GoodsInfo());
                if (!this.goodInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // general_step
            if (decoder_.eof())
                return true;
            this.general_step = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // general_level
            if (decoder_.eof())
                return true;
            this.general_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // general_star
            if (decoder_.eof())
                return true;
            this.general_star = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // general_aptitude
            if (decoder_.eof())
                return true;
            this.general_aptitude = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // general_type
            if (decoder_.eof())
                return true;
            this.general_type = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // time
            if (decoder_.eof())
                return true;
            this.time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // start_time
            if (decoder_.eof())
                return true;
            this.start_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // generalId
            if (decoder_.eof())
                return true;
            this.generalId = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // is_reward
            if (decoder_.eof())
                return true;
            this.is_reward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_lock
            if (decoder_.eof())
                return true;
            this.is_lock = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        InstanceSearch.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            // order_id
            encoder.write_fixuint32(this.order_id);
            // index
            encoder.write_fixuint32(this.index);
            // des_id
            encoder.write_fixuint32(this.des_id);
            // goodInfos
            encoder.write_fixuint32(Object.keys(this.goodInfos).length);
            for (var k in this.goodInfos) {
                if (!this.goodInfos[k].to_bytes(encoder))
                    return false;
            }
            // general_step
            encoder.write_fixuint32(this.general_step);
            // general_level
            encoder.write_fixuint32(this.general_level);
            // general_star
            encoder.write_fixuint32(this.general_star);
            // general_aptitude
            encoder.write_fixuint32(this.general_aptitude);
            // general_type
            encoder.write_uint32_vector(this.general_type);
            // time
            encoder.write_fixuint32(this.time);
            // start_time
            encoder.write_fixuint32(this.start_time);
            // generalId
            encoder.write_uint32_vector(this.generalId);
            // is_reward
            encoder.write_bool(this.is_reward);
            // is_lock
            encoder.write_bool(this.is_lock);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return InstanceSearch;
    }());
    message.InstanceSearch = InstanceSearch;
    __reflect(InstanceSearch.prototype, "message.InstanceSearch", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 遗迹副本信息
    // struct InstanceRelic
    ////////////////////////////////////////////////////////////////////////////////
    var InstanceRelic = (function () {
        function InstanceRelic() {
            this.id = 0; // 关卡
            this.star = 0; // 星级
            this.damage_reward = 0; // 伤害阶段奖励
            this.damage_max = 0; // 最大伤害
        }
        InstanceRelic.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // star
            if (decoder_.eof())
                return true;
            this.star = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // damage_reward
            if (decoder_.eof())
                return true;
            this.damage_reward = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // damage_max
            if (decoder_.eof())
                return true;
            this.damage_max = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            return true;
        };
        InstanceRelic.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            // star
            encoder.write_fixuint32(this.star);
            // damage_reward
            encoder.write_fixuint32(this.damage_reward);
            // damage_max
            encoder.write_float64(this.damage_max);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return InstanceRelic;
    }());
    message.InstanceRelic = InstanceRelic;
    __reflect(InstanceRelic.prototype, "message.InstanceRelic", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本其他信息
    // struct InstanceInfo
    ////////////////////////////////////////////////////////////////////////////////
    var InstanceInfo = (function () {
        function InstanceInfo() {
            this.instance_money = 0; // 游戏币副本次数
            this.instance_money_time = 0; // 游戏币副本cd剩余时间
            this.instance_exp = 0; // 经验副本次数
            this.instance_exp_time = 0; // 经验副本cd剩余时间
            this.instance_money_max = 0; // 游戏币副本最高伤害
            this.instance_exp_max = 0; // 经验副本最高连击
            this.instance_money_last = 0; // 游戏币副本上次伤害
            this.instance_exp_last = 0; // 经验副本上次连击
            this.normalReward = []; // 普通副本领取状态
            this.eliteReward = []; // 精英副本领取状态
            this.training = []; // 特训关卡信息
            this.searchInfo = []; // 探索副本信息
            this.lastTowerRefreshTime = 0; // 上次爬塔刷新时间
            this.monsterTowerIndex = 0; // 本周爬塔怪物索引
            this.relicInfo = []; // 遗迹副本信息
            this.relicChest = []; // 获得宝箱（k.id;v.times）
            this.relicBattleTimes = []; // 遗迹挑战次数（k.id;v.times）
            this.activityRandMobs = []; // 活动随机怪物
            this.activityBattleCount = 0; // 活动战斗次数
        }
        InstanceInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // instance_money
            if (decoder_.eof())
                return true;
            this.instance_money = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_money_time
            if (decoder_.eof())
                return true;
            this.instance_money_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_exp
            if (decoder_.eof())
                return true;
            this.instance_exp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_exp_time
            if (decoder_.eof())
                return true;
            this.instance_exp_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_money_max
            if (decoder_.eof())
                return true;
            this.instance_money_max = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_exp_max
            if (decoder_.eof())
                return true;
            this.instance_exp_max = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_money_last
            if (decoder_.eof())
                return true;
            this.instance_money_last = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_exp_last
            if (decoder_.eof())
                return true;
            this.instance_exp_last = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // normalReward
            if (decoder_.eof())
                return true;
            var normalReward_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < normalReward_count; i++) {
                this.normalReward.push(new InstanceReward());
                if (!this.normalReward[i].parse_bytes(decoder_))
                    return false;
            }
            // eliteReward
            if (decoder_.eof())
                return true;
            var eliteReward_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < eliteReward_count; i++) {
                this.eliteReward.push(new InstanceReward());
                if (!this.eliteReward[i].parse_bytes(decoder_))
                    return false;
            }
            // training
            if (decoder_.eof())
                return true;
            var training_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < training_count; i++) {
                this.training.push(new InstanceTraining());
                if (!this.training[i].parse_bytes(decoder_))
                    return false;
            }
            // searchInfo
            if (decoder_.eof())
                return true;
            var searchInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < searchInfo_count; i++) {
                this.searchInfo.push(new InstanceSearch());
                if (!this.searchInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // lastTowerRefreshTime
            if (decoder_.eof())
                return true;
            this.lastTowerRefreshTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monsterTowerIndex
            if (decoder_.eof())
                return true;
            this.monsterTowerIndex = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // relicInfo
            if (decoder_.eof())
                return true;
            var relicInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < relicInfo_count; i++) {
                this.relicInfo.push(new InstanceRelic());
                if (!this.relicInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // relicChest
            if (decoder_.eof())
                return true;
            var relicChest_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < relicChest_count; i++) {
                this.relicChest.push(new message.IIKVPairs());
                if (!this.relicChest[i].parse_bytes(decoder_))
                    return false;
            }
            // relicBattleTimes
            if (decoder_.eof())
                return true;
            var relicBattleTimes_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < relicBattleTimes_count; i++) {
                this.relicBattleTimes.push(new message.IIKVPairs());
                if (!this.relicBattleTimes[i].parse_bytes(decoder_))
                    return false;
            }
            // activityRandMobs
            if (decoder_.eof())
                return true;
            var activityRandMobs_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < activityRandMobs_count; i++) {
                this.activityRandMobs.push(new message.IIKVPairs());
                if (!this.activityRandMobs[i].parse_bytes(decoder_))
                    return false;
            }
            // activityBattleCount
            if (decoder_.eof())
                return true;
            this.activityBattleCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        InstanceInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instance_money
            encoder.write_fixuint32(this.instance_money);
            // instance_money_time
            encoder.write_fixuint32(this.instance_money_time);
            // instance_exp
            encoder.write_fixuint32(this.instance_exp);
            // instance_exp_time
            encoder.write_fixuint32(this.instance_exp_time);
            // instance_money_max
            encoder.write_fixuint32(this.instance_money_max);
            // instance_exp_max
            encoder.write_fixuint32(this.instance_exp_max);
            // instance_money_last
            encoder.write_fixuint32(this.instance_money_last);
            // instance_exp_last
            encoder.write_fixuint32(this.instance_exp_last);
            // normalReward
            encoder.write_fixuint32(Object.keys(this.normalReward).length);
            for (var k in this.normalReward) {
                if (!this.normalReward[k].to_bytes(encoder))
                    return false;
            }
            // eliteReward
            encoder.write_fixuint32(Object.keys(this.eliteReward).length);
            for (var k in this.eliteReward) {
                if (!this.eliteReward[k].to_bytes(encoder))
                    return false;
            }
            // training
            encoder.write_fixuint32(Object.keys(this.training).length);
            for (var k in this.training) {
                if (!this.training[k].to_bytes(encoder))
                    return false;
            }
            // searchInfo
            encoder.write_fixuint32(Object.keys(this.searchInfo).length);
            for (var k in this.searchInfo) {
                if (!this.searchInfo[k].to_bytes(encoder))
                    return false;
            }
            // lastTowerRefreshTime
            encoder.write_fixuint32(this.lastTowerRefreshTime);
            // monsterTowerIndex
            encoder.write_fixuint32(this.monsterTowerIndex);
            // relicInfo
            encoder.write_fixuint32(Object.keys(this.relicInfo).length);
            for (var k in this.relicInfo) {
                if (!this.relicInfo[k].to_bytes(encoder))
                    return false;
            }
            // relicChest
            encoder.write_fixuint32(Object.keys(this.relicChest).length);
            for (var k in this.relicChest) {
                if (!this.relicChest[k].to_bytes(encoder))
                    return false;
            }
            // relicBattleTimes
            encoder.write_fixuint32(Object.keys(this.relicBattleTimes).length);
            for (var k in this.relicBattleTimes) {
                if (!this.relicBattleTimes[k].to_bytes(encoder))
                    return false;
            }
            // activityRandMobs
            encoder.write_fixuint32(Object.keys(this.activityRandMobs).length);
            for (var k in this.activityRandMobs) {
                if (!this.activityRandMobs[k].to_bytes(encoder))
                    return false;
            }
            // activityBattleCount
            encoder.write_fixuint32(this.activityBattleCount);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return InstanceInfo;
    }());
    message.InstanceInfo = InstanceInfo;
    __reflect(InstanceInfo.prototype, "message.InstanceInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 塔信息
    // struct TowerInfo
    ////////////////////////////////////////////////////////////////////////////////
    var TowerInfo = (function () {
        function TowerInfo() {
            this.towerCur = 0; // 爬塔当前层
            this.towerMax = 0; // 爬塔最高层
            this.sweep_time = 0; // 开始扫荡时间
            this.sweep_reward = false; // 爬塔奖励是有领取可以领
            this.towerRewardId = []; // 奖励领取信息
            this.mallItems = []; // 商品列表
            this.towerFirstReward = []; // 爬塔首杀奖励领取
        }
        TowerInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // towerCur
            if (decoder_.eof())
                return true;
            this.towerCur = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // towerMax
            if (decoder_.eof())
                return true;
            this.towerMax = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sweep_time
            if (decoder_.eof())
                return true;
            this.sweep_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sweep_reward
            if (decoder_.eof())
                return true;
            this.sweep_reward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // towerRewardId
            if (decoder_.eof())
                return true;
            this.towerRewardId = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // mallItems
            if (decoder_.eof())
                return true;
            var mallItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mallItems_count; i++) {
                this.mallItems.push(new MallItem());
                if (!this.mallItems[i].parse_bytes(decoder_))
                    return false;
            }
            // towerFirstReward
            if (decoder_.eof())
                return true;
            this.towerFirstReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        TowerInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // towerCur
            encoder.write_fixuint32(this.towerCur);
            // towerMax
            encoder.write_fixuint32(this.towerMax);
            // sweep_time
            encoder.write_fixuint32(this.sweep_time);
            // sweep_reward
            encoder.write_bool(this.sweep_reward);
            // towerRewardId
            encoder.write_uint32_vector(this.towerRewardId);
            // mallItems
            encoder.write_fixuint32(Object.keys(this.mallItems).length);
            for (var k in this.mallItems) {
                if (!this.mallItems[k].to_bytes(encoder))
                    return false;
            }
            // towerFirstReward
            encoder.write_uint32_vector(this.towerFirstReward);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return TowerInfo;
    }());
    message.TowerInfo = TowerInfo;
    __reflect(TowerInfo.prototype, "message.TowerInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 头像信息
    // struct RoleOtherAttri
    ////////////////////////////////////////////////////////////////////////////////
    var RoleOtherAttri = (function () {
        function RoleOtherAttri() {
            this.picIds = []; // 头像列表
            this.picFrameIds = []; // 头像框列表
            this.titleIds = []; // 称号列表
        }
        RoleOtherAttri.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // picIds
            if (decoder_.eof())
                return true;
            this.picIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // picFrameIds
            if (decoder_.eof())
                return true;
            var picFrameIds_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < picFrameIds_count; i++) {
                this.picFrameIds.push(new message.IIKVPairs());
                if (!this.picFrameIds[i].parse_bytes(decoder_))
                    return false;
            }
            // titleIds
            if (decoder_.eof())
                return true;
            var titleIds_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < titleIds_count; i++) {
                this.titleIds.push(new message.IIKVPairs());
                if (!this.titleIds[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RoleOtherAttri.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // picIds
            encoder.write_uint32_vector(this.picIds);
            // picFrameIds
            encoder.write_fixuint32(Object.keys(this.picFrameIds).length);
            for (var k in this.picFrameIds) {
                if (!this.picFrameIds[k].to_bytes(encoder))
                    return false;
            }
            // titleIds
            encoder.write_fixuint32(Object.keys(this.titleIds).length);
            for (var k in this.titleIds) {
                if (!this.titleIds[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RoleOtherAttri;
    }());
    message.RoleOtherAttri = RoleOtherAttri;
    __reflect(RoleOtherAttri.prototype, "message.RoleOtherAttri", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 关系信息
    // struct RelationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RelationInfo = (function () {
        function RelationInfo() {
            this.type = 0; // 关系类型
            this.roleInfo = new RoleBriefInfo(); // 角色信息
            this.canReward = false; // 是否可领取体力
            this.isReward = false; // 今日是否已经领取体力
        }
        RelationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // canReward
            if (decoder_.eof())
                return true;
            this.canReward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // isReward
            if (decoder_.eof())
                return true;
            this.isReward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RelationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // roleInfo
            this.roleInfo.to_bytes(encoder);
            // canReward
            encoder.write_bool(this.canReward);
            // isReward
            encoder.write_bool(this.isReward);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationInfo;
    }());
    message.RelationInfo = RelationInfo;
    __reflect(RelationInfo.prototype, "message.RelationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 被申请信息
    // struct RoleApply
    ////////////////////////////////////////////////////////////////////////////////
    var RoleApply = (function () {
        function RoleApply() {
            this.roleInfo = new RoleBriefInfo(); // 角色信息
            this.applyMsg = ""; // 申请信息
            this.applyTime = 0; // 申请时间
        }
        RoleApply.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // applyMsg
            if (decoder_.eof())
                return true;
            this.applyMsg = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // applyTime
            if (decoder_.eof())
                return true;
            this.applyTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RoleApply.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleInfo
            this.roleInfo.to_bytes(encoder);
            // applyMsg
            encoder.write_string(this.applyMsg);
            // applyTime
            encoder.write_fixuint32(this.applyTime);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RoleApply;
    }());
    message.RoleApply = RoleApply;
    __reflect(RoleApply.prototype, "message.RoleApply", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 新手引导
    // struct TeachItem
    ////////////////////////////////////////////////////////////////////////////////
    var TeachItem = (function () {
        function TeachItem() {
            this.part = 0;
            this.is_jump = false;
        }
        TeachItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // part
            if (decoder_.eof())
                return true;
            this.part = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_jump
            if (decoder_.eof())
                return true;
            this.is_jump = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        TeachItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // part
            encoder.write_fixuint32(this.part);
            // is_jump
            encoder.write_bool(this.is_jump);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return TeachItem;
    }());
    message.TeachItem = TeachItem;
    __reflect(TeachItem.prototype, "message.TeachItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 战斗双方信息begin
    // 战斗单元基本信息
    // struct ArmyUnitBase
    ////////////////////////////////////////////////////////////////////////////////
    var ArmyUnitBase = (function () {
        function ArmyUnitBase() {
            this.monster_roleId = 0;
            this.monster_name = 0; // 映射到table_language.csv表中
            this.des = 0; // 映射到table_language.csv表中
            this.role_type = 0;
            this.monster_profession = 0;
            this.monster_level = 0;
            this.monster_star = 0;
            this.monster_step = 0;
            this.skill_ids = [];
            this.skill_levels = [];
            this.talent_ids = [];
            this.talent_levels = [];
            this.hide_talent_ids = [];
            this.bean_max = 0;
            this.hp_tube = 0;
            this.monster_rage = 0;
            this.monster_hp = 0;
            this.monster_atk = 0;
            this.monster_def = 0;
            this.skill_atk = 0;
            this.skill_def = 0;
            this.atk_crit = 0;
            this.skill_crit = 0;
            this.crit_extra = 0;
            this.crit_resistance = 0;
            this.dodge_rate = 0;
            this.hit_rate = 0;
            this.ignore_phyDef = 0;
            this.ignore_magicDef = 0;
            this.final_extra = 0;
            this.final_reduce = 0;
            this.stiff_resistance = 0;
            this.get_up_time = 0;
            this.is_stir_up = 0;
            this.stir_up_resistance = 0;
            this.stir_again_def = 0;
            this.is_gravity = 0;
            this.move_speed = 0;
            this.universal_resistance = 0;
            this.ignore_resistance = 0;
            this.float_resistance = 0;
            this.cd_speed = 0;
            this.support_consume = 0;
        }
        ArmyUnitBase.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // monster_roleId
            if (decoder_.eof())
                return true;
            this.monster_roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_name
            if (decoder_.eof())
                return true;
            this.monster_name = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // des
            if (decoder_.eof())
                return true;
            this.des = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_type
            if (decoder_.eof())
                return true;
            this.role_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_profession
            if (decoder_.eof())
                return true;
            this.monster_profession = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_level
            if (decoder_.eof())
                return true;
            this.monster_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_star
            if (decoder_.eof())
                return true;
            this.monster_star = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_step
            if (decoder_.eof())
                return true;
            this.monster_step = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // skill_ids
            if (decoder_.eof())
                return true;
            this.skill_ids = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // skill_levels
            if (decoder_.eof())
                return true;
            this.skill_levels = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // talent_ids
            if (decoder_.eof())
                return true;
            this.talent_ids = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // talent_levels
            if (decoder_.eof())
                return true;
            this.talent_levels = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // hide_talent_ids
            if (decoder_.eof())
                return true;
            this.hide_talent_ids = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // bean_max
            if (decoder_.eof())
                return true;
            this.bean_max = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // hp_tube
            if (decoder_.eof())
                return true;
            this.hp_tube = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_rage
            if (decoder_.eof())
                return true;
            this.monster_rage = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_hp
            if (decoder_.eof())
                return true;
            this.monster_hp = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // monster_atk
            if (decoder_.eof())
                return true;
            this.monster_atk = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // monster_def
            if (decoder_.eof())
                return true;
            this.monster_def = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // skill_atk
            if (decoder_.eof())
                return true;
            this.skill_atk = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // skill_def
            if (decoder_.eof())
                return true;
            this.skill_def = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // atk_crit
            if (decoder_.eof())
                return true;
            this.atk_crit = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // skill_crit
            if (decoder_.eof())
                return true;
            this.skill_crit = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // crit_extra
            if (decoder_.eof())
                return true;
            this.crit_extra = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // crit_resistance
            if (decoder_.eof())
                return true;
            this.crit_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // dodge_rate
            if (decoder_.eof())
                return true;
            this.dodge_rate = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // hit_rate
            if (decoder_.eof())
                return true;
            this.hit_rate = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // ignore_phyDef
            if (decoder_.eof())
                return true;
            this.ignore_phyDef = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // ignore_magicDef
            if (decoder_.eof())
                return true;
            this.ignore_magicDef = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // final_extra
            if (decoder_.eof())
                return true;
            this.final_extra = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // final_reduce
            if (decoder_.eof())
                return true;
            this.final_reduce = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // stiff_resistance
            if (decoder_.eof())
                return true;
            this.stiff_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // get_up_time
            if (decoder_.eof())
                return true;
            this.get_up_time = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // is_stir_up
            if (decoder_.eof())
                return true;
            this.is_stir_up = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // stir_up_resistance
            if (decoder_.eof())
                return true;
            this.stir_up_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // stir_again_def
            if (decoder_.eof())
                return true;
            this.stir_again_def = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // is_gravity
            if (decoder_.eof())
                return true;
            this.is_gravity = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // move_speed
            if (decoder_.eof())
                return true;
            this.move_speed = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // universal_resistance
            if (decoder_.eof())
                return true;
            this.universal_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // ignore_resistance
            if (decoder_.eof())
                return true;
            this.ignore_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // float_resistance
            if (decoder_.eof())
                return true;
            this.float_resistance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // cd_speed
            if (decoder_.eof())
                return true;
            this.cd_speed = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // support_consume
            if (decoder_.eof())
                return true;
            this.support_consume = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ArmyUnitBase.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // monster_roleId
            encoder.write_fixuint32(this.monster_roleId);
            // monster_name
            encoder.write_fixuint32(this.monster_name);
            // des
            encoder.write_fixuint32(this.des);
            // role_type
            encoder.write_fixuint32(this.role_type);
            // monster_profession
            encoder.write_fixuint32(this.monster_profession);
            // monster_level
            encoder.write_fixuint32(this.monster_level);
            // monster_star
            encoder.write_fixuint32(this.monster_star);
            // monster_step
            encoder.write_fixuint32(this.monster_step);
            // skill_ids
            encoder.write_uint32_vector(this.skill_ids);
            // skill_levels
            encoder.write_uint32_vector(this.skill_levels);
            // talent_ids
            encoder.write_uint32_vector(this.talent_ids);
            // talent_levels
            encoder.write_uint32_vector(this.talent_levels);
            // hide_talent_ids
            encoder.write_uint32_vector(this.hide_talent_ids);
            // bean_max
            encoder.write_fixuint32(this.bean_max);
            // hp_tube
            encoder.write_fixuint32(this.hp_tube);
            // monster_rage
            encoder.write_fixuint32(this.monster_rage);
            // monster_hp
            encoder.write_float64(this.monster_hp);
            // monster_atk
            encoder.write_float64(this.monster_atk);
            // monster_def
            encoder.write_float64(this.monster_def);
            // skill_atk
            encoder.write_float64(this.skill_atk);
            // skill_def
            encoder.write_float64(this.skill_def);
            // atk_crit
            encoder.write_float64(this.atk_crit);
            // skill_crit
            encoder.write_float64(this.skill_crit);
            // crit_extra
            encoder.write_float64(this.crit_extra);
            // crit_resistance
            encoder.write_float64(this.crit_resistance);
            // dodge_rate
            encoder.write_float64(this.dodge_rate);
            // hit_rate
            encoder.write_float64(this.hit_rate);
            // ignore_phyDef
            encoder.write_float64(this.ignore_phyDef);
            // ignore_magicDef
            encoder.write_float64(this.ignore_magicDef);
            // final_extra
            encoder.write_float64(this.final_extra);
            // final_reduce
            encoder.write_float64(this.final_reduce);
            // stiff_resistance
            encoder.write_float64(this.stiff_resistance);
            // get_up_time
            encoder.write_float64(this.get_up_time);
            // is_stir_up
            encoder.write_float64(this.is_stir_up);
            // stir_up_resistance
            encoder.write_float64(this.stir_up_resistance);
            // stir_again_def
            encoder.write_float64(this.stir_again_def);
            // is_gravity
            encoder.write_float64(this.is_gravity);
            // move_speed
            encoder.write_float64(this.move_speed);
            // universal_resistance
            encoder.write_float64(this.universal_resistance);
            // ignore_resistance
            encoder.write_float64(this.ignore_resistance);
            // float_resistance
            encoder.write_float64(this.float_resistance);
            // cd_speed
            encoder.write_float64(this.cd_speed);
            // support_consume
            encoder.write_float64(this.support_consume);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArmyUnitBase;
    }());
    message.ArmyUnitBase = ArmyUnitBase;
    __reflect(ArmyUnitBase.prototype, "message.ArmyUnitBase", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 战斗单元当前属性
    // struct ArmyUnitCur
    ////////////////////////////////////////////////////////////////////////////////
    var ArmyUnitCur = (function () {
        function ArmyUnitCur() {
            this.monster_id = 0;
            this.is_dead = false;
            this.cur_pos = 0; // 仙境战斗表示当前伤害
            this.cur_hp = 0; // 仙境战斗回血后血量(即当前血量)
            this.cur_rage = 0; // 仙境战斗表示战斗前血量
            this.cur_bean = 0; // 仙境战斗表示最大血量
            this.cur_skillCd = 0; // 仙境战斗后血量
        }
        ArmyUnitCur.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // monster_id
            if (decoder_.eof())
                return true;
            this.monster_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_dead
            if (decoder_.eof())
                return true;
            this.is_dead = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // cur_pos
            if (decoder_.eof())
                return true;
            this.cur_pos = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // cur_hp
            if (decoder_.eof())
                return true;
            this.cur_hp = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // cur_rage
            if (decoder_.eof())
                return true;
            this.cur_rage = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // cur_bean
            if (decoder_.eof())
                return true;
            this.cur_bean = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // cur_skillCd
            if (decoder_.eof())
                return true;
            this.cur_skillCd = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ArmyUnitCur.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // monster_id
            encoder.write_fixuint32(this.monster_id);
            // is_dead
            encoder.write_bool(this.is_dead);
            // cur_pos
            encoder.write_fixuint32(this.cur_pos);
            // cur_hp
            encoder.write_float64(this.cur_hp);
            // cur_rage
            encoder.write_fixuint32(this.cur_rage);
            // cur_bean
            encoder.write_fixuint32(this.cur_bean);
            // cur_skillCd
            encoder.write_fixuint32(this.cur_skillCd);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArmyUnitCur;
    }());
    message.ArmyUnitCur = ArmyUnitCur;
    __reflect(ArmyUnitCur.prototype, "message.ArmyUnitCur", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 怪物信息
    // struct ArmyMobs
    ////////////////////////////////////////////////////////////////////////////////
    var ArmyMobs = (function () {
        function ArmyMobs() {
            this.curInfo = new ArmyUnitCur();
            this.baseInfo = new ArmyUnitBase();
        }
        ArmyMobs.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // curInfo
            if (decoder_.eof())
                return true;
            if (!this.curInfo.parse_bytes(decoder_))
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            if (!this.baseInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ArmyMobs.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // curInfo
            this.curInfo.to_bytes(encoder);
            // baseInfo
            this.baseInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArmyMobs;
    }());
    message.ArmyMobs = ArmyMobs;
    __reflect(ArmyMobs.prototype, "message.ArmyMobs", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 关卡信息
    // struct ArmyStage
    ////////////////////////////////////////////////////////////////////////////////
    var ArmyStage = (function () {
        function ArmyStage() {
            this.stage_id = 0;
            this.stage_type = 0;
            this.state_time = 0;
            this.bossDes = 0; // 映射到table_language.csv表中
            this.monster_pos1 = [];
            this.monster_pos2 = [];
            this.monster_pos3 = [];
            this.monster_pos4 = [];
            this.monster_dialog = []; // (剧情对话怪)
        }
        ArmyStage.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // stage_id
            if (decoder_.eof())
                return true;
            this.stage_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // stage_type
            if (decoder_.eof())
                return true;
            this.stage_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // state_time
            if (decoder_.eof())
                return true;
            this.state_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // bossDes
            if (decoder_.eof())
                return true;
            this.bossDes = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_pos1
            if (decoder_.eof())
                return true;
            var monster_pos1_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < monster_pos1_count; i++) {
                this.monster_pos1.push(new ArmyMobs());
                if (!this.monster_pos1[i].parse_bytes(decoder_))
                    return false;
            }
            // monster_pos2
            if (decoder_.eof())
                return true;
            var monster_pos2_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < monster_pos2_count; i++) {
                this.monster_pos2.push(new ArmyMobs());
                if (!this.monster_pos2[i].parse_bytes(decoder_))
                    return false;
            }
            // monster_pos3
            if (decoder_.eof())
                return true;
            var monster_pos3_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < monster_pos3_count; i++) {
                this.monster_pos3.push(new ArmyMobs());
                if (!this.monster_pos3[i].parse_bytes(decoder_))
                    return false;
            }
            // monster_pos4
            if (decoder_.eof())
                return true;
            var monster_pos4_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < monster_pos4_count; i++) {
                this.monster_pos4.push(new ArmyMobs());
                if (!this.monster_pos4[i].parse_bytes(decoder_))
                    return false;
            }
            // monster_dialog
            if (decoder_.eof())
                return true;
            var monster_dialog_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < monster_dialog_count; i++) {
                this.monster_dialog.push(new ArmyMobs());
                if (!this.monster_dialog[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ArmyStage.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // stage_id
            encoder.write_fixuint32(this.stage_id);
            // stage_type
            encoder.write_fixuint32(this.stage_type);
            // state_time
            encoder.write_fixuint32(this.state_time);
            // bossDes
            encoder.write_fixuint32(this.bossDes);
            // monster_pos1
            encoder.write_fixuint32(Object.keys(this.monster_pos1).length);
            for (var k in this.monster_pos1) {
                if (!this.monster_pos1[k].to_bytes(encoder))
                    return false;
            }
            // monster_pos2
            encoder.write_fixuint32(Object.keys(this.monster_pos2).length);
            for (var k in this.monster_pos2) {
                if (!this.monster_pos2[k].to_bytes(encoder))
                    return false;
            }
            // monster_pos3
            encoder.write_fixuint32(Object.keys(this.monster_pos3).length);
            for (var k in this.monster_pos3) {
                if (!this.monster_pos3[k].to_bytes(encoder))
                    return false;
            }
            // monster_pos4
            encoder.write_fixuint32(Object.keys(this.monster_pos4).length);
            for (var k in this.monster_pos4) {
                if (!this.monster_pos4[k].to_bytes(encoder))
                    return false;
            }
            // monster_dialog
            encoder.write_fixuint32(Object.keys(this.monster_dialog).length);
            for (var k in this.monster_dialog) {
                if (!this.monster_dialog[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ArmyStage;
    }());
    message.ArmyStage = ArmyStage;
    __reflect(ArmyStage.prototype, "message.ArmyStage", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 战报排行
    // struct BattleRankInfo
    ////////////////////////////////////////////////////////////////////////////////
    var BattleRankInfo = (function () {
        function BattleRankInfo() {
            this.type = 0;
            this.baseInfo = new RoleBriefInfo();
            this.rank = 0;
            this.value = 0;
            this.battleId = "";
        }
        BattleRankInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            if (!this.baseInfo.parse_bytes(decoder_))
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleId
            if (decoder_.eof())
                return true;
            this.battleId = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BattleRankInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // baseInfo
            this.baseInfo.to_bytes(encoder);
            // rank
            encoder.write_fixuint32(this.rank);
            // value
            encoder.write_fixuint32(this.value);
            // battleId
            encoder.write_string(this.battleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BattleRankInfo;
    }());
    message.BattleRankInfo = BattleRankInfo;
    __reflect(BattleRankInfo.prototype, "message.BattleRankInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 流星街信息
    // struct WantedInfo
    ////////////////////////////////////////////////////////////////////////////////
    var WantedInfo = (function () {
        function WantedInfo() {
            this.refreshTime = 0; // 信物大盗刷新次数（无）
            this.typeLevel = []; // 流星街对应类型最大关卡
            this.itemIds = []; // 刷新奖励组合（无）
            this.maxBattleStar = []; // 流星街3星关卡
            this.battleStar = []; // 流星街关卡对应战斗星级
            this.leftTime = 0; // 剩余时间
            this.wantedFirstReward = []; // 流星街首杀奖励
            this.groupBattleUsed = []; // 组队战今日使用好友阵型
            this.groupBattleTime = []; // 组队战今日类型对应战斗次数
            this.groupBattleFirst = []; // 组队战首杀奖励
            this.groupBattleStar = []; // 组队战关卡对应最大星级
            this.wantedTicketTime = []; // 流星街门票购买次数
        }
        WantedInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // refreshTime
            if (decoder_.eof())
                return true;
            this.refreshTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // typeLevel
            if (decoder_.eof())
                return true;
            var typeLevel_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < typeLevel_count; i++) {
                this.typeLevel.push(new message.IIKVPairs());
                if (!this.typeLevel[i].parse_bytes(decoder_))
                    return false;
            }
            // itemIds
            if (decoder_.eof())
                return true;
            this.itemIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // maxBattleStar
            if (decoder_.eof())
                return true;
            this.maxBattleStar = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // battleStar
            if (decoder_.eof())
                return true;
            var battleStar_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < battleStar_count; i++) {
                this.battleStar.push(new message.IIKVPairs());
                if (!this.battleStar[i].parse_bytes(decoder_))
                    return false;
            }
            // leftTime
            if (decoder_.eof())
                return true;
            this.leftTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // wantedFirstReward
            if (decoder_.eof())
                return true;
            this.wantedFirstReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // groupBattleUsed
            if (decoder_.eof())
                return true;
            this.groupBattleUsed = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // groupBattleTime
            if (decoder_.eof())
                return true;
            var groupBattleTime_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < groupBattleTime_count; i++) {
                this.groupBattleTime.push(new message.IIKVPairs());
                if (!this.groupBattleTime[i].parse_bytes(decoder_))
                    return false;
            }
            // groupBattleFirst
            if (decoder_.eof())
                return true;
            this.groupBattleFirst = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // groupBattleStar
            if (decoder_.eof())
                return true;
            var groupBattleStar_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < groupBattleStar_count; i++) {
                this.groupBattleStar.push(new message.IIKVPairs());
                if (!this.groupBattleStar[i].parse_bytes(decoder_))
                    return false;
            }
            // wantedTicketTime
            if (decoder_.eof())
                return true;
            var wantedTicketTime_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < wantedTicketTime_count; i++) {
                this.wantedTicketTime.push(new message.IIKVPairs());
                if (!this.wantedTicketTime[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WantedInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // refreshTime
            encoder.write_fixuint32(this.refreshTime);
            // typeLevel
            encoder.write_fixuint32(Object.keys(this.typeLevel).length);
            for (var k in this.typeLevel) {
                if (!this.typeLevel[k].to_bytes(encoder))
                    return false;
            }
            // itemIds
            encoder.write_uint32_vector(this.itemIds);
            // maxBattleStar
            encoder.write_uint32_vector(this.maxBattleStar);
            // battleStar
            encoder.write_fixuint32(Object.keys(this.battleStar).length);
            for (var k in this.battleStar) {
                if (!this.battleStar[k].to_bytes(encoder))
                    return false;
            }
            // leftTime
            encoder.write_fixuint32(this.leftTime);
            // wantedFirstReward
            encoder.write_uint32_vector(this.wantedFirstReward);
            // groupBattleUsed
            encoder.write_uint32_vector(this.groupBattleUsed);
            // groupBattleTime
            encoder.write_fixuint32(Object.keys(this.groupBattleTime).length);
            for (var k in this.groupBattleTime) {
                if (!this.groupBattleTime[k].to_bytes(encoder))
                    return false;
            }
            // groupBattleFirst
            encoder.write_uint32_vector(this.groupBattleFirst);
            // groupBattleStar
            encoder.write_fixuint32(Object.keys(this.groupBattleStar).length);
            for (var k in this.groupBattleStar) {
                if (!this.groupBattleStar[k].to_bytes(encoder))
                    return false;
            }
            // wantedTicketTime
            encoder.write_fixuint32(Object.keys(this.wantedTicketTime).length);
            for (var k in this.wantedTicketTime) {
                if (!this.wantedTicketTime[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WantedInfo;
    }());
    message.WantedInfo = WantedInfo;
    __reflect(WantedInfo.prototype, "message.WantedInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 兑换信息
    // struct ActivityExchangeInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityExchangeInfo = (function () {
        function ActivityExchangeInfo() {
            this.index = 0; // 兑换索引
            this.exchangeInfo = []; // 兑换物品
            this.goodsInfo = []; // 获得物品
            this.exchangeCount = 0; // 兑换次数
        }
        ActivityExchangeInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // exchangeInfo
            if (decoder_.eof())
                return true;
            var exchangeInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < exchangeInfo_count; i++) {
                this.exchangeInfo.push(new GoodsInfo());
                if (!this.exchangeInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // goodsInfo
            if (decoder_.eof())
                return true;
            var goodsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodsInfo_count; i++) {
                this.goodsInfo.push(new GoodsInfo());
                if (!this.goodsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // exchangeCount
            if (decoder_.eof())
                return true;
            this.exchangeCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActivityExchangeInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // exchangeInfo
            encoder.write_fixuint32(Object.keys(this.exchangeInfo).length);
            for (var k in this.exchangeInfo) {
                if (!this.exchangeInfo[k].to_bytes(encoder))
                    return false;
            }
            // goodsInfo
            encoder.write_fixuint32(Object.keys(this.goodsInfo).length);
            for (var k in this.goodsInfo) {
                if (!this.goodsInfo[k].to_bytes(encoder))
                    return false;
            }
            // exchangeCount
            encoder.write_fixuint32(this.exchangeCount);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityExchangeInfo;
    }());
    message.ActivityExchangeInfo = ActivityExchangeInfo;
    __reflect(ActivityExchangeInfo.prototype, "message.ActivityExchangeInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动商品信息
    // struct ActivityMallItem
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityMallItem = (function () {
        function ActivityMallItem() {
            this.index = 0; // 商品Id
            this.original_price = 0; // 原价
            this.discount_price = 0; // 折价
            this.pic_id = 0; // 商品图片
            this.goodsInfo = []; // 商品内容
        }
        ActivityMallItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // original_price
            if (decoder_.eof())
                return true;
            this.original_price = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // discount_price
            if (decoder_.eof())
                return true;
            this.discount_price = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pic_id
            if (decoder_.eof())
                return true;
            this.pic_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // goodsInfo
            if (decoder_.eof())
                return true;
            var goodsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodsInfo_count; i++) {
                this.goodsInfo.push(new GoodsInfo());
                if (!this.goodsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityMallItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // original_price
            encoder.write_fixuint32(this.original_price);
            // discount_price
            encoder.write_fixuint32(this.discount_price);
            // pic_id
            encoder.write_fixuint32(this.pic_id);
            // goodsInfo
            encoder.write_fixuint32(Object.keys(this.goodsInfo).length);
            for (var k in this.goodsInfo) {
                if (!this.goodsInfo[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityMallItem;
    }());
    message.ActivityMallItem = ActivityMallItem;
    __reflect(ActivityMallItem.prototype, "message.ActivityMallItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // vip商城
    // struct ActivityVipItem
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityVipItem = (function () {
        function ActivityVipItem() {
            this.mallItem = new ActivityMallItem(); // 商品信息
            this.vip_level = 0; // VIP等级
        }
        ActivityVipItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mallItem
            if (decoder_.eof())
                return true;
            if (!this.mallItem.parse_bytes(decoder_))
                return false;
            // vip_level
            if (decoder_.eof())
                return true;
            this.vip_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActivityVipItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mallItem
            this.mallItem.to_bytes(encoder);
            // vip_level
            encoder.write_fixuint32(this.vip_level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityVipItem;
    }());
    message.ActivityVipItem = ActivityVipItem;
    __reflect(ActivityVipItem.prototype, "message.ActivityVipItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 冲级活动
    // struct ActivityUplevelItem
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityUplevelItem = (function () {
        function ActivityUplevelItem() {
            this.index = 0; // 索引
            this.goodsInfo = []; // 奖励物品
            this.picId = 0; // 图片
            this.rewardCount = 0; // 奖励人数
        }
        ActivityUplevelItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // goodsInfo
            if (decoder_.eof())
                return true;
            var goodsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodsInfo_count; i++) {
                this.goodsInfo.push(new GoodsInfo());
                if (!this.goodsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // picId
            if (decoder_.eof())
                return true;
            this.picId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rewardCount
            if (decoder_.eof())
                return true;
            this.rewardCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActivityUplevelItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // goodsInfo
            encoder.write_fixuint32(Object.keys(this.goodsInfo).length);
            for (var k in this.goodsInfo) {
                if (!this.goodsInfo[k].to_bytes(encoder))
                    return false;
            }
            // picId
            encoder.write_fixuint32(this.picId);
            // rewardCount
            encoder.write_fixuint32(this.rewardCount);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityUplevelItem;
    }());
    message.ActivityUplevelItem = ActivityUplevelItem;
    __reflect(ActivityUplevelItem.prototype, "message.ActivityUplevelItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 每日累计充值
    // struct ActivityDailyAddItem
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityDailyAddItem = (function () {
        function ActivityDailyAddItem() {
            this.index = 0; // 第几天
            this.chargeCount = 0; // 累计额度
            this.rewardZone = []; // 奖励区间
            this.rewards = []; // 奖励
            this.rewardIndex = []; // 奖励领取索引
        }
        ActivityDailyAddItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // chargeCount
            if (decoder_.eof())
                return true;
            this.chargeCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rewardZone
            if (decoder_.eof())
                return true;
            this.rewardZone = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // rewards
            if (decoder_.eof())
                return true;
            var rewards_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rewards_count; i++) {
                this.rewards.push(new GoodsGroupInfo());
                if (!this.rewards[i].parse_bytes(decoder_))
                    return false;
            }
            // rewardIndex
            if (decoder_.eof())
                return true;
            this.rewardIndex = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActivityDailyAddItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // chargeCount
            encoder.write_fixuint32(this.chargeCount);
            // rewardZone
            encoder.write_uint32_vector(this.rewardZone);
            // rewards
            encoder.write_fixuint32(Object.keys(this.rewards).length);
            for (var k in this.rewards) {
                if (!this.rewards[k].to_bytes(encoder))
                    return false;
            }
            // rewardIndex
            encoder.write_uint32_vector(this.rewardIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityDailyAddItem;
    }());
    message.ActivityDailyAddItem = ActivityDailyAddItem;
    __reflect(ActivityDailyAddItem.prototype, "message.ActivityDailyAddItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 排名信息
    // struct ActivityUpLevelRankItem
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityUpLevelRankItem = (function () {
        function ActivityUpLevelRankItem() {
            this.roleId = 0;
            this.rank = 0;
            this.name = "";
            this.rewardTime = "";
        }
        ActivityUpLevelRankItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleId
            if (decoder_.eof())
                return true;
            this.roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // rewardTime
            if (decoder_.eof())
                return true;
            this.rewardTime = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActivityUpLevelRankItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // rank
            encoder.write_fixuint32(this.rank);
            // name
            encoder.write_string(this.name);
            // rewardTime
            encoder.write_string(this.rewardTime);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityUpLevelRankItem;
    }());
    message.ActivityUpLevelRankItem = ActivityUpLevelRankItem;
    __reflect(ActivityUpLevelRankItem.prototype, "message.ActivityUpLevelRankItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 专题献礼(类似任务)
    // struct ActivityMissionItem
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityMissionItem = (function () {
        function ActivityMissionItem() {
            this.mission_type = 0; // 任务类型
            this.mission_condition = 0; // 达成条件
            this.rewards = []; // 奖励
        }
        ActivityMissionItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mission_type
            if (decoder_.eof())
                return true;
            this.mission_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // mission_condition
            if (decoder_.eof())
                return true;
            this.mission_condition = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rewards
            if (decoder_.eof())
                return true;
            var rewards_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rewards_count; i++) {
                this.rewards.push(new GoodsInfo());
                if (!this.rewards[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityMissionItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mission_type
            encoder.write_fixuint32(this.mission_type);
            // mission_condition
            encoder.write_fixuint32(this.mission_condition);
            // rewards
            encoder.write_fixuint32(Object.keys(this.rewards).length);
            for (var k in this.rewards) {
                if (!this.rewards[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityMissionItem;
    }());
    message.ActivityMissionItem = ActivityMissionItem;
    __reflect(ActivityMissionItem.prototype, "message.ActivityMissionItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 神秘商店
    // struct ActivitySecretMall
    ////////////////////////////////////////////////////////////////////////////////
    var ActivitySecretMall = (function () {
        function ActivitySecretMall() {
            this.mall_id = 0; // 商店索引
            this.level_min = 0; // 左闭
            this.level_max = 0; // 右闭
            this.items = []; // 商品信息
        }
        ActivitySecretMall.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mall_id
            if (decoder_.eof())
                return true;
            this.mall_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level_min
            if (decoder_.eof())
                return true;
            this.level_min = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level_max
            if (decoder_.eof())
                return true;
            this.level_max = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new TributeGroupInfo());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivitySecretMall.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mall_id
            encoder.write_fixuint32(this.mall_id);
            // level_min
            encoder.write_fixuint32(this.level_min);
            // level_max
            encoder.write_fixuint32(this.level_max);
            // items
            encoder.write_fixuint32(Object.keys(this.items).length);
            for (var k in this.items) {
                if (!this.items[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivitySecretMall;
    }());
    message.ActivitySecretMall = ActivitySecretMall;
    __reflect(ActivitySecretMall.prototype, "message.ActivitySecretMall", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 搜集道具
    // struct ActivityCollectItem
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityCollectItem = (function () {
        function ActivityCollectItem() {
            this.type = 0; // （6掉落类型1普通2精英3全掉）（17兑换类型1体力2消耗元宝3充值元宝）
            this.goodId = 0; // （6物品）（17消耗）
            this.randPower = 0; // （6权重）（17获取）
            this.dailyNum = 0; // （6每天掉落数量）（17活动期间上线积分填0表示无上限）
        }
        ActivityCollectItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // goodId
            if (decoder_.eof())
                return true;
            this.goodId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // randPower
            if (decoder_.eof())
                return true;
            this.randPower = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // dailyNum
            if (decoder_.eof())
                return true;
            this.dailyNum = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActivityCollectItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // goodId
            encoder.write_fixuint32(this.goodId);
            // randPower
            encoder.write_fixuint32(this.randPower);
            // dailyNum
            encoder.write_fixuint32(this.dailyNum);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityCollectItem;
    }());
    message.ActivityCollectItem = ActivityCollectItem;
    __reflect(ActivityCollectItem.prototype, "message.ActivityCollectItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 排行奖励
    // struct ActivityRankItem
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityRankItem = (function () {
        function ActivityRankItem() {
            this.goodsInfo = []; // 一组物品(3累充奖励)
            this.rankZone = []; // 区间（左闭右闭）(3充值数量)
            this.ext = 0; // (3奖励门票)
        }
        ActivityRankItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // goodsInfo
            if (decoder_.eof())
                return true;
            var goodsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodsInfo_count; i++) {
                this.goodsInfo.push(new GoodsInfo());
                if (!this.goodsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // rankZone
            if (decoder_.eof())
                return true;
            this.rankZone = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // ext
            if (decoder_.eof())
                return true;
            this.ext = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActivityRankItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // goodsInfo
            encoder.write_fixuint32(Object.keys(this.goodsInfo).length);
            for (var k in this.goodsInfo) {
                if (!this.goodsInfo[k].to_bytes(encoder))
                    return false;
            }
            // rankZone
            encoder.write_uint32_vector(this.rankZone);
            // ext
            encoder.write_fixuint32(this.ext);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityRankItem;
    }());
    message.ActivityRankItem = ActivityRankItem;
    __reflect(ActivityRankItem.prototype, "message.ActivityRankItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // UP池信息
    // struct ActivityLotteryGoods
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityLotteryGoods = (function () {
        function ActivityLotteryGoods() {
            this.goodId = []; // 物品ID
            this.goodNum = []; // 物品数量
            this.goodPower = []; // 权重
        }
        ActivityLotteryGoods.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // goodId
            if (decoder_.eof())
                return true;
            this.goodId = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // goodNum
            if (decoder_.eof())
                return true;
            this.goodNum = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // goodPower
            if (decoder_.eof())
                return true;
            this.goodPower = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActivityLotteryGoods.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // goodId
            encoder.write_uint32_vector(this.goodId);
            // goodNum
            encoder.write_uint32_vector(this.goodNum);
            // goodPower
            encoder.write_uint32_vector(this.goodPower);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityLotteryGoods;
    }());
    message.ActivityLotteryGoods = ActivityLotteryGoods;
    __reflect(ActivityLotteryGoods.prototype, "message.ActivityLotteryGoods", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 运营活动信息
    // struct ActivityInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ActivityInfo = (function () {
        function ActivityInfo() {
            this.type = 0; // 活动类型
            this.index = 0; // 该类型唯一索引
            this.noticeType = 0; // 热门等
            this.picId = 0; // 活动图片
            this.name = ""; // 活动名称
            this.des = ""; // 活动描述
            this.openTime = 0; // 活动开启时间
            this.closeTime = 0; // 活动结束时间
            this.stopTime = 0; // 活动展示结束时间(为0则使用closeTime字段)
            this.topTime = 0; // 活动置顶时间
            this.buffType = 0; // buff类型(4\12\19)(ActivityBuffType)（23表示指定猎人）(3累充转盘是否开启)
            this.buffValue = 0; // 加成比例(4\19)(21开启副本类型)(22开启boss)
            this.chargeDaily = 0; // 每日充值额度(2)
            this.collectId = 0; // 搜集(6普通副本掉率)
            this.consumeType = 0; // 消耗类型(7\27)(ConsumeType)
            this.uplevel = 0; // 冲级活动等级(8\17为进入排行榜的门槛)(6精英副本掉率)
            this.uplevelItems = []; // 冲级活动奖励(8)
            this.exchanges = []; // 兑换信息(6)
            this.vipMall = []; // vip商城(9)
            this.discountMall = []; // 折扣商城(10\13)
            this.dailyAddItems = []; // 每日累计活动(11)(21副本星级)
            this.rewardZone = []; // 奖励区间(1\3\7\13\17\23抽取次数)(复用字段)
            this.rewards = []; // 奖励(1\2\4\7\13\17\18\19)(复用字段)(23展示猎人)
            this.todayReward = false; // 今天的奖励是否已经领取(1\2\14)
            this.daysIndex = 0; // 当前可领取的索引\天数(1\2\11\14明日奖励标记)(20触发商店索引id非零)(21表示积分)
            this.itemCount = 0; // 累计数量(2\3\7\13\14累计天数)(复用字段)(21表示最大副本)
            this.is_uplevel = false; // 是否已经领取(8)
            this.uplevelReward = 0; // 领取奖励总人数(8)
            this.rewardIndex = []; // 奖励领取索引(3\7\13\15\17)(复用字段)(21领取星级奖励区间)(23领取次数阶段奖励)
            this.kvInfos = []; // kv信息(6\9\10\13\15\16\20\17)(21兑换次数)
            this.wishTreeReward = []; // 许愿树奖励(14)
            this.missions = []; // 专题献礼(15)(23阶段奖励)(复用字段)
            this.rankRewards = []; // 排行奖励(17\22\27)(3累充奖励)
            this.secretMalls = []; // 所有商店类型(20)
            this.collectItems = []; // 搜集活动掉落物品(6\17)
            this.lotteryGoods = []; // 抽取物品池(23)(3累充转盘物品池)
        }
        ActivityInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // noticeType
            if (decoder_.eof())
                return true;
            this.noticeType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // picId
            if (decoder_.eof())
                return true;
            this.picId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // des
            if (decoder_.eof())
                return true;
            this.des = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // openTime
            if (decoder_.eof())
                return true;
            this.openTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // closeTime
            if (decoder_.eof())
                return true;
            this.closeTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // stopTime
            if (decoder_.eof())
                return true;
            this.stopTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // topTime
            if (decoder_.eof())
                return true;
            this.topTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buffType
            if (decoder_.eof())
                return true;
            this.buffType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buffValue
            if (decoder_.eof())
                return true;
            this.buffValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // chargeDaily
            if (decoder_.eof())
                return true;
            this.chargeDaily = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // collectId
            if (decoder_.eof())
                return true;
            this.collectId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // consumeType
            if (decoder_.eof())
                return true;
            this.consumeType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // uplevel
            if (decoder_.eof())
                return true;
            this.uplevel = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // uplevelItems
            if (decoder_.eof())
                return true;
            var uplevelItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < uplevelItems_count; i++) {
                this.uplevelItems.push(new ActivityUplevelItem());
                if (!this.uplevelItems[i].parse_bytes(decoder_))
                    return false;
            }
            // exchanges
            if (decoder_.eof())
                return true;
            var exchanges_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < exchanges_count; i++) {
                this.exchanges.push(new ActivityExchangeInfo());
                if (!this.exchanges[i].parse_bytes(decoder_))
                    return false;
            }
            // vipMall
            if (decoder_.eof())
                return true;
            var vipMall_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < vipMall_count; i++) {
                this.vipMall.push(new ActivityVipItem());
                if (!this.vipMall[i].parse_bytes(decoder_))
                    return false;
            }
            // discountMall
            if (decoder_.eof())
                return true;
            var discountMall_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < discountMall_count; i++) {
                this.discountMall.push(new ActivityMallItem());
                if (!this.discountMall[i].parse_bytes(decoder_))
                    return false;
            }
            // dailyAddItems
            if (decoder_.eof())
                return true;
            var dailyAddItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < dailyAddItems_count; i++) {
                this.dailyAddItems.push(new ActivityDailyAddItem());
                if (!this.dailyAddItems[i].parse_bytes(decoder_))
                    return false;
            }
            // rewardZone
            if (decoder_.eof())
                return true;
            this.rewardZone = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // rewards
            if (decoder_.eof())
                return true;
            var rewards_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rewards_count; i++) {
                this.rewards.push(new GoodsGroupInfo());
                if (!this.rewards[i].parse_bytes(decoder_))
                    return false;
            }
            // todayReward
            if (decoder_.eof())
                return true;
            this.todayReward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // daysIndex
            if (decoder_.eof())
                return true;
            this.daysIndex = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // itemCount
            if (decoder_.eof())
                return true;
            this.itemCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_uplevel
            if (decoder_.eof())
                return true;
            this.is_uplevel = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // uplevelReward
            if (decoder_.eof())
                return true;
            this.uplevelReward = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rewardIndex
            if (decoder_.eof())
                return true;
            this.rewardIndex = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // kvInfos
            if (decoder_.eof())
                return true;
            var kvInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < kvInfos_count; i++) {
                this.kvInfos.push(new message.IIKVPairs());
                if (!this.kvInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // wishTreeReward
            if (decoder_.eof())
                return true;
            var wishTreeReward_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < wishTreeReward_count; i++) {
                this.wishTreeReward.push(new GoodsInfo());
                if (!this.wishTreeReward[i].parse_bytes(decoder_))
                    return false;
            }
            // missions
            if (decoder_.eof())
                return true;
            var missions_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < missions_count; i++) {
                this.missions.push(new ActivityMissionItem());
                if (!this.missions[i].parse_bytes(decoder_))
                    return false;
            }
            // rankRewards
            if (decoder_.eof())
                return true;
            var rankRewards_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rankRewards_count; i++) {
                this.rankRewards.push(new ActivityRankItem());
                if (!this.rankRewards[i].parse_bytes(decoder_))
                    return false;
            }
            // secretMalls
            if (decoder_.eof())
                return true;
            var secretMalls_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < secretMalls_count; i++) {
                this.secretMalls.push(new ActivitySecretMall());
                if (!this.secretMalls[i].parse_bytes(decoder_))
                    return false;
            }
            // collectItems
            if (decoder_.eof())
                return true;
            var collectItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < collectItems_count; i++) {
                this.collectItems.push(new ActivityCollectItem());
                if (!this.collectItems[i].parse_bytes(decoder_))
                    return false;
            }
            // lotteryGoods
            if (decoder_.eof())
                return true;
            var lotteryGoods_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < lotteryGoods_count; i++) {
                this.lotteryGoods.push(new ActivityLotteryGoods());
                if (!this.lotteryGoods[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ActivityInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // index
            encoder.write_fixuint32(this.index);
            // noticeType
            encoder.write_fixuint32(this.noticeType);
            // picId
            encoder.write_fixuint32(this.picId);
            // name
            encoder.write_string(this.name);
            // des
            encoder.write_string(this.des);
            // openTime
            encoder.write_fixuint32(this.openTime);
            // closeTime
            encoder.write_fixuint32(this.closeTime);
            // stopTime
            encoder.write_fixuint32(this.stopTime);
            // topTime
            encoder.write_fixuint32(this.topTime);
            // buffType
            encoder.write_fixuint32(this.buffType);
            // buffValue
            encoder.write_fixuint32(this.buffValue);
            // chargeDaily
            encoder.write_fixuint32(this.chargeDaily);
            // collectId
            encoder.write_fixuint32(this.collectId);
            // consumeType
            encoder.write_fixuint32(this.consumeType);
            // uplevel
            encoder.write_fixuint32(this.uplevel);
            // uplevelItems
            encoder.write_fixuint32(Object.keys(this.uplevelItems).length);
            for (var k in this.uplevelItems) {
                if (!this.uplevelItems[k].to_bytes(encoder))
                    return false;
            }
            // exchanges
            encoder.write_fixuint32(Object.keys(this.exchanges).length);
            for (var k in this.exchanges) {
                if (!this.exchanges[k].to_bytes(encoder))
                    return false;
            }
            // vipMall
            encoder.write_fixuint32(Object.keys(this.vipMall).length);
            for (var k in this.vipMall) {
                if (!this.vipMall[k].to_bytes(encoder))
                    return false;
            }
            // discountMall
            encoder.write_fixuint32(Object.keys(this.discountMall).length);
            for (var k in this.discountMall) {
                if (!this.discountMall[k].to_bytes(encoder))
                    return false;
            }
            // dailyAddItems
            encoder.write_fixuint32(Object.keys(this.dailyAddItems).length);
            for (var k in this.dailyAddItems) {
                if (!this.dailyAddItems[k].to_bytes(encoder))
                    return false;
            }
            // rewardZone
            encoder.write_uint32_vector(this.rewardZone);
            // rewards
            encoder.write_fixuint32(Object.keys(this.rewards).length);
            for (var k in this.rewards) {
                if (!this.rewards[k].to_bytes(encoder))
                    return false;
            }
            // todayReward
            encoder.write_bool(this.todayReward);
            // daysIndex
            encoder.write_fixuint32(this.daysIndex);
            // itemCount
            encoder.write_fixuint32(this.itemCount);
            // is_uplevel
            encoder.write_bool(this.is_uplevel);
            // uplevelReward
            encoder.write_fixuint32(this.uplevelReward);
            // rewardIndex
            encoder.write_uint32_vector(this.rewardIndex);
            // kvInfos
            encoder.write_fixuint32(Object.keys(this.kvInfos).length);
            for (var k in this.kvInfos) {
                if (!this.kvInfos[k].to_bytes(encoder))
                    return false;
            }
            // wishTreeReward
            encoder.write_fixuint32(Object.keys(this.wishTreeReward).length);
            for (var k in this.wishTreeReward) {
                if (!this.wishTreeReward[k].to_bytes(encoder))
                    return false;
            }
            // missions
            encoder.write_fixuint32(Object.keys(this.missions).length);
            for (var k in this.missions) {
                if (!this.missions[k].to_bytes(encoder))
                    return false;
            }
            // rankRewards
            encoder.write_fixuint32(Object.keys(this.rankRewards).length);
            for (var k in this.rankRewards) {
                if (!this.rankRewards[k].to_bytes(encoder))
                    return false;
            }
            // secretMalls
            encoder.write_fixuint32(Object.keys(this.secretMalls).length);
            for (var k in this.secretMalls) {
                if (!this.secretMalls[k].to_bytes(encoder))
                    return false;
            }
            // collectItems
            encoder.write_fixuint32(Object.keys(this.collectItems).length);
            for (var k in this.collectItems) {
                if (!this.collectItems[k].to_bytes(encoder))
                    return false;
            }
            // lotteryGoods
            encoder.write_fixuint32(Object.keys(this.lotteryGoods).length);
            for (var k in this.lotteryGoods) {
                if (!this.lotteryGoods[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActivityInfo;
    }());
    message.ActivityInfo = ActivityInfo;
    __reflect(ActivityInfo.prototype, "message.ActivityInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本奖励补领信息
    // struct LegInstRewardSupply
    ////////////////////////////////////////////////////////////////////////////////
    var LegInstRewardSupply = (function () {
        function LegInstRewardSupply() {
            this.instanceId = 0;
            this.supplyReward = []; // 副本补领奖励
        }
        LegInstRewardSupply.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // instanceId
            if (decoder_.eof())
                return true;
            this.instanceId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // supplyReward
            if (decoder_.eof())
                return true;
            var supplyReward_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < supplyReward_count; i++) {
                this.supplyReward.push(new GoodsInfo());
                if (!this.supplyReward[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LegInstRewardSupply.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // supplyReward
            encoder.write_fixuint32(Object.keys(this.supplyReward).length);
            for (var k in this.supplyReward) {
                if (!this.supplyReward[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LegInstRewardSupply;
    }());
    message.LegInstRewardSupply = LegInstRewardSupply;
    __reflect(LegInstRewardSupply.prototype, "message.LegInstRewardSupply", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本奖励领取信息
    // struct LegInstRewardInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LegInstRewardInfo = (function () {
        function LegInstRewardInfo() {
            this.instanceId = 0;
            this.mobsReward = []; // 打赢怪物后的奖励领取情况
        }
        LegInstRewardInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // instanceId
            if (decoder_.eof())
                return true;
            this.instanceId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // mobsReward
            if (decoder_.eof())
                return true;
            this.mobsReward = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LegInstRewardInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // mobsReward
            encoder.write_uint32_vector(this.mobsReward);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LegInstRewardInfo;
    }());
    message.LegInstRewardInfo = LegInstRewardInfo;
    __reflect(LegInstRewardInfo.prototype, "message.LegInstRewardInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟成员基础数据结构
    // struct MemberInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MemberInfo = (function () {
        function MemberInfo() {
            this.officialId = 0; // 官职
            this.contribution = 0; // 贡献
            this.is_donate = 0; // 捐献次数
            this.enliven_all = 0; // 一共提供的活跃度
            this.enliven_day = 0; // 今日提供的活跃度
            this.enliven_seven = 0; // 最近的活跃度
            this.monarchbase = new RoleBriefInfo(); // 君主基础信息
            this.boss_time = 0; // 挑战boss次数
            this.buffIds = []; // buff信息
            this.bossHurt = 0; // 对BOSS的总伤害
            this.party_time = 0; // 享用宴会次数
            this.party_time_add = 0; // 加餐享用次数
            this.is_party_join = false; // 是否已经加入宴会
            this.is_boss_join = false; // 是否参与过boss
            this.applying = []; // 联盟存在，该字段为空(覆盖)
            this.instance_time = 0; // 副本挑战次数
            this.instance_attendance = 0; // 副本出勤率
            this.mobsReward = []; // 打赢怪物后的奖励领取情况
            this.leagueOutNumber = 0; // 退出工会次数
            this.dailyMatchBattleWinTime = 0; // 联赛每日挑战胜利次数
            this.dailyMatchBattleScore = 0; // 联赛每日贡献
            this.usedMatchGenerals = []; // 联赛今日使用武将
            this.weekMatchBattleTime = 0; // 联赛每周挑战次数
            this.weekMatchBattleScore = 0; // 联赛每周贡献
            this.skillLevel = []; // 技能等级
            this.skillReset = []; // 技能重置次数
            this.instance_buy_time = 0; // 购买副本次数
        }
        MemberInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // officialId
            if (decoder_.eof())
                return true;
            this.officialId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // contribution
            if (decoder_.eof())
                return true;
            this.contribution = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_donate
            if (decoder_.eof())
                return true;
            this.is_donate = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // enliven_all
            if (decoder_.eof())
                return true;
            this.enliven_all = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // enliven_day
            if (decoder_.eof())
                return true;
            this.enliven_day = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // enliven_seven
            if (decoder_.eof())
                return true;
            this.enliven_seven = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monarchbase
            if (decoder_.eof())
                return true;
            if (!this.monarchbase.parse_bytes(decoder_))
                return false;
            // boss_time
            if (decoder_.eof())
                return true;
            this.boss_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // buffIds
            if (decoder_.eof())
                return true;
            this.buffIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // bossHurt
            if (decoder_.eof())
                return true;
            this.bossHurt = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // party_time
            if (decoder_.eof())
                return true;
            this.party_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // party_time_add
            if (decoder_.eof())
                return true;
            this.party_time_add = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_party_join
            if (decoder_.eof())
                return true;
            this.is_party_join = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_boss_join
            if (decoder_.eof())
                return true;
            this.is_boss_join = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // applying
            if (decoder_.eof())
                return true;
            this.applying = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // instance_time
            if (decoder_.eof())
                return true;
            this.instance_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_attendance
            if (decoder_.eof())
                return true;
            this.instance_attendance = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // mobsReward
            if (decoder_.eof())
                return true;
            var mobsReward_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mobsReward_count; i++) {
                this.mobsReward.push(new LegInstRewardInfo());
                if (!this.mobsReward[i].parse_bytes(decoder_))
                    return false;
            }
            // leagueOutNumber
            if (decoder_.eof())
                return true;
            this.leagueOutNumber = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // dailyMatchBattleWinTime
            if (decoder_.eof())
                return true;
            this.dailyMatchBattleWinTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // dailyMatchBattleScore
            if (decoder_.eof())
                return true;
            this.dailyMatchBattleScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // usedMatchGenerals
            if (decoder_.eof())
                return true;
            this.usedMatchGenerals = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // weekMatchBattleTime
            if (decoder_.eof())
                return true;
            this.weekMatchBattleTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // weekMatchBattleScore
            if (decoder_.eof())
                return true;
            this.weekMatchBattleScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // skillLevel
            if (decoder_.eof())
                return true;
            var skillLevel_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < skillLevel_count; i++) {
                this.skillLevel.push(new message.IIKVPairs());
                if (!this.skillLevel[i].parse_bytes(decoder_))
                    return false;
            }
            // skillReset
            if (decoder_.eof())
                return true;
            var skillReset_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < skillReset_count; i++) {
                this.skillReset.push(new message.IIKVPairs());
                if (!this.skillReset[i].parse_bytes(decoder_))
                    return false;
            }
            // instance_buy_time
            if (decoder_.eof())
                return true;
            this.instance_buy_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MemberInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // officialId
            encoder.write_fixuint32(this.officialId);
            // contribution
            encoder.write_fixuint32(this.contribution);
            // is_donate
            encoder.write_fixuint32(this.is_donate);
            // enliven_all
            encoder.write_fixuint32(this.enliven_all);
            // enliven_day
            encoder.write_fixuint32(this.enliven_day);
            // enliven_seven
            encoder.write_fixuint32(this.enliven_seven);
            // monarchbase
            this.monarchbase.to_bytes(encoder);
            // boss_time
            encoder.write_fixuint32(this.boss_time);
            // buffIds
            encoder.write_uint32_vector(this.buffIds);
            // bossHurt
            encoder.write_fixuint32(this.bossHurt);
            // party_time
            encoder.write_fixuint32(this.party_time);
            // party_time_add
            encoder.write_fixuint32(this.party_time_add);
            // is_party_join
            encoder.write_bool(this.is_party_join);
            // is_boss_join
            encoder.write_bool(this.is_boss_join);
            // applying
            encoder.write_uint32_vector(this.applying);
            // instance_time
            encoder.write_fixuint32(this.instance_time);
            // instance_attendance
            encoder.write_float64(this.instance_attendance);
            // mobsReward
            encoder.write_fixuint32(Object.keys(this.mobsReward).length);
            for (var k in this.mobsReward) {
                if (!this.mobsReward[k].to_bytes(encoder))
                    return false;
            }
            // leagueOutNumber
            encoder.write_fixuint32(this.leagueOutNumber);
            // dailyMatchBattleWinTime
            encoder.write_fixuint32(this.dailyMatchBattleWinTime);
            // dailyMatchBattleScore
            encoder.write_fixuint32(this.dailyMatchBattleScore);
            // usedMatchGenerals
            encoder.write_uint32_vector(this.usedMatchGenerals);
            // weekMatchBattleTime
            encoder.write_fixuint32(this.weekMatchBattleTime);
            // weekMatchBattleScore
            encoder.write_fixuint32(this.weekMatchBattleScore);
            // skillLevel
            encoder.write_fixuint32(Object.keys(this.skillLevel).length);
            for (var k in this.skillLevel) {
                if (!this.skillLevel[k].to_bytes(encoder))
                    return false;
            }
            // skillReset
            encoder.write_fixuint32(Object.keys(this.skillReset).length);
            for (var k in this.skillReset) {
                if (!this.skillReset[k].to_bytes(encoder))
                    return false;
            }
            // instance_buy_time
            encoder.write_fixuint32(this.instance_buy_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MemberInfo;
    }());
    message.MemberInfo = MemberInfo;
    __reflect(MemberInfo.prototype, "message.MemberInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟成员统计数据
    // struct MemberStatic
    ////////////////////////////////////////////////////////////////////////////////
    var MemberStatic = (function () {
        function MemberStatic() {
            this.memberId = 0;
            this.level = 0;
            this.pic_id = 0;
            this.frame_id = 0;
            this.memberName = "";
            this.donate_all = 0;
            this.donate_day = 0;
            this.donate_seven = 0;
            this.animal_all = 0;
            this.animal_day = 0;
            this.animal_seven = 0;
            this.instance_all = 0;
            this.instance_day = 0;
            this.instance_seven = 0;
            this.dailyMatchBattleWinTime = 0; // 联赛每日挑战胜利次数
            this.dailyMatchBattleScore = 0; // 联赛每日贡献
            this.weekMatchBattleWinTime = 0; // 联赛每周挑战胜利次数
            this.weekMatchBattleScore = 0; // 联赛每周贡献
        }
        MemberStatic.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // memberId
            if (decoder_.eof())
                return true;
            this.memberId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pic_id
            if (decoder_.eof())
                return true;
            this.pic_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // frame_id
            if (decoder_.eof())
                return true;
            this.frame_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // memberName
            if (decoder_.eof())
                return true;
            this.memberName = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // donate_all
            if (decoder_.eof())
                return true;
            this.donate_all = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // donate_day
            if (decoder_.eof())
                return true;
            this.donate_day = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // donate_seven
            if (decoder_.eof())
                return true;
            this.donate_seven = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // animal_all
            if (decoder_.eof())
                return true;
            this.animal_all = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // animal_day
            if (decoder_.eof())
                return true;
            this.animal_day = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // animal_seven
            if (decoder_.eof())
                return true;
            this.animal_seven = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_all
            if (decoder_.eof())
                return true;
            this.instance_all = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_day
            if (decoder_.eof())
                return true;
            this.instance_day = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instance_seven
            if (decoder_.eof())
                return true;
            this.instance_seven = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // dailyMatchBattleWinTime
            if (decoder_.eof())
                return true;
            this.dailyMatchBattleWinTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // dailyMatchBattleScore
            if (decoder_.eof())
                return true;
            this.dailyMatchBattleScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // weekMatchBattleWinTime
            if (decoder_.eof())
                return true;
            this.weekMatchBattleWinTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // weekMatchBattleScore
            if (decoder_.eof())
                return true;
            this.weekMatchBattleScore = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MemberStatic.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // memberId
            encoder.write_fixuint32(this.memberId);
            // level
            encoder.write_fixuint32(this.level);
            // pic_id
            encoder.write_fixuint32(this.pic_id);
            // frame_id
            encoder.write_fixuint32(this.frame_id);
            // memberName
            encoder.write_string(this.memberName);
            // donate_all
            encoder.write_fixuint32(this.donate_all);
            // donate_day
            encoder.write_fixuint32(this.donate_day);
            // donate_seven
            encoder.write_fixuint32(this.donate_seven);
            // animal_all
            encoder.write_fixuint32(this.animal_all);
            // animal_day
            encoder.write_fixuint32(this.animal_day);
            // animal_seven
            encoder.write_fixuint32(this.animal_seven);
            // instance_all
            encoder.write_fixuint32(this.instance_all);
            // instance_day
            encoder.write_fixuint32(this.instance_day);
            // instance_seven
            encoder.write_fixuint32(this.instance_seven);
            // dailyMatchBattleWinTime
            encoder.write_fixuint32(this.dailyMatchBattleWinTime);
            // dailyMatchBattleScore
            encoder.write_fixuint32(this.dailyMatchBattleScore);
            // weekMatchBattleWinTime
            encoder.write_fixuint32(this.weekMatchBattleWinTime);
            // weekMatchBattleScore
            encoder.write_fixuint32(this.weekMatchBattleScore);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MemberStatic;
    }());
    message.MemberStatic = MemberStatic;
    __reflect(MemberStatic.prototype, "message.MemberStatic", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 跨服战信息
    // struct SinglecraftInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SinglecraftInfo = (function () {
        function SinglecraftInfo() {
            this.index = 0; // 第几轮数据
            this.active_time = 0; // 主动挑战场次
            this.active_win = 0; // 主动挑战胜利
            this.passive_time = 0; // 被动挑战场次
            this.passive_win = 0; // 被动挑战胜利
            this.all_time = 0; // 挑战总场数
            this.all_win = 0; // 挑战胜利
            this.histroy_max_score = 0; // 历史最高积分
            this.histroy_max_rank = 0; // 历史最高排名
            this.active_win_swarm = 0; // 主动挑战最大连胜
        }
        SinglecraftInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // active_time
            if (decoder_.eof())
                return true;
            this.active_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // active_win
            if (decoder_.eof())
                return true;
            this.active_win = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // passive_time
            if (decoder_.eof())
                return true;
            this.passive_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // passive_win
            if (decoder_.eof())
                return true;
            this.passive_win = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // all_time
            if (decoder_.eof())
                return true;
            this.all_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // all_win
            if (decoder_.eof())
                return true;
            this.all_win = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // histroy_max_score
            if (decoder_.eof())
                return true;
            this.histroy_max_score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // histroy_max_rank
            if (decoder_.eof())
                return true;
            this.histroy_max_rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // active_win_swarm
            if (decoder_.eof())
                return true;
            this.active_win_swarm = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        SinglecraftInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // active_time
            encoder.write_fixuint32(this.active_time);
            // active_win
            encoder.write_fixuint32(this.active_win);
            // passive_time
            encoder.write_fixuint32(this.passive_time);
            // passive_win
            encoder.write_fixuint32(this.passive_win);
            // all_time
            encoder.write_fixuint32(this.all_time);
            // all_win
            encoder.write_fixuint32(this.all_win);
            // histroy_max_score
            encoder.write_fixuint32(this.histroy_max_score);
            // histroy_max_rank
            encoder.write_fixuint32(this.histroy_max_rank);
            // active_win_swarm
            encoder.write_fixuint32(this.active_win_swarm);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SinglecraftInfo;
    }());
    message.SinglecraftInfo = SinglecraftInfo;
    __reflect(SinglecraftInfo.prototype, "message.SinglecraftInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 君主信息
    // struct GameInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GameInfo = (function () {
        function GameInfo() {
            this.baseInfo = []; // 1.角色基础数据(取最后一个元素)
            this.mixUnitInfo = []; // 2.数据杂项(取最后一个元素)
            this.potatos = []; // 3.宝物信息(不覆盖)
            this.goodsInfo = []; // 5.物品信息(不覆盖)
            this.delGoods = []; // 6.删除物品(删除没有的物品Id)
            this.licenceInfo = []; // 7.执照信息(取最后一个元素)
            this.missionInfo = []; // 8.任务信息(不覆盖)
            this.missionActive = []; // 9.每日活跃度(取最后一个元素)
            this.generals = []; // 10.武将信息(不覆盖)
            this.mobInfos = []; // 11.普通怪物信息(不覆盖)
            this.instanceInfo = []; // 12.副本其他信息(取最后一个元素)
            this.towerInfo = []; // 13.塔信息(取最后一个元素)
            this.advisers = []; // 14.军师信息(不覆盖)
            this.formations = []; // 15.阵型信息(不覆盖)
            this.progresses = []; // 16.进程队列(不覆盖)
            this.memberInfo = []; // 18.联盟成员信息(取最后一个元素)
            this.wantedInfo = []; // 19.通缉令(取最后一个元素)
            this.activities = []; // 20.所有活动信息(不覆盖)
            this.otherAttri = []; // 21.角色属性(取最后一个元素)
            this.artifacts = []; // 22.神兵信息(不覆盖)
            this.giftInfos = []; // 23.礼包情况(不覆盖)
            this.delGiftIndexs = []; // 24.删除礼包(删除已购买的礼包)
            this.enemyCamp = []; // 25.已通关最大关卡(不覆盖)
            this.singlecraft = []; // 26.跨服信息
            this.generalHistoryIds = []; // 27.猎人图鉴
            this.potatoHistoryIds = []; // 28.卡片图鉴
            this.petInfo = []; // 30. 宠物信息
            this.getGoods = []; // 物品获得信息
        }
        GameInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            var baseInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < baseInfo_count; i++) {
                this.baseInfo.push(new RoleBaseInfo());
                if (!this.baseInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // mixUnitInfo
            if (decoder_.eof())
                return true;
            var mixUnitInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mixUnitInfo_count; i++) {
                this.mixUnitInfo.push(new RoleMixUnit());
                if (!this.mixUnitInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // potatos
            if (decoder_.eof())
                return true;
            var potatos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < potatos_count; i++) {
                this.potatos.push(new PotatoInfo());
                if (!this.potatos[i].parse_bytes(decoder_))
                    return false;
            }
            // goodsInfo
            if (decoder_.eof())
                return true;
            var goodsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodsInfo_count; i++) {
                this.goodsInfo.push(new GoodsInfo());
                if (!this.goodsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // delGoods
            if (decoder_.eof())
                return true;
            this.delGoods = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // licenceInfo
            if (decoder_.eof())
                return true;
            var licenceInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < licenceInfo_count; i++) {
                this.licenceInfo.push(new LicenceInfo());
                if (!this.licenceInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // missionInfo
            if (decoder_.eof())
                return true;
            var missionInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < missionInfo_count; i++) {
                this.missionInfo.push(new MissionInfo());
                if (!this.missionInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // missionActive
            if (decoder_.eof())
                return true;
            var missionActive_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < missionActive_count; i++) {
                this.missionActive.push(new MissionActive());
                if (!this.missionActive[i].parse_bytes(decoder_))
                    return false;
            }
            // generals
            if (decoder_.eof())
                return true;
            var generals_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < generals_count; i++) {
                this.generals.push(new GeneralInfo());
                if (!this.generals[i].parse_bytes(decoder_))
                    return false;
            }
            // mobInfos
            if (decoder_.eof())
                return true;
            var mobInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mobInfos_count; i++) {
                this.mobInfos.push(new MobInfo());
                if (!this.mobInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // instanceInfo
            if (decoder_.eof())
                return true;
            var instanceInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < instanceInfo_count; i++) {
                this.instanceInfo.push(new InstanceInfo());
                if (!this.instanceInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // towerInfo
            if (decoder_.eof())
                return true;
            var towerInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < towerInfo_count; i++) {
                this.towerInfo.push(new TowerInfo());
                if (!this.towerInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // advisers
            if (decoder_.eof())
                return true;
            var advisers_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < advisers_count; i++) {
                this.advisers.push(new AdviserInfo());
                if (!this.advisers[i].parse_bytes(decoder_))
                    return false;
            }
            // formations
            if (decoder_.eof())
                return true;
            var formations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formations_count; i++) {
                this.formations.push(new FormationInfo());
                if (!this.formations[i].parse_bytes(decoder_))
                    return false;
            }
            // progresses
            if (decoder_.eof())
                return true;
            var progresses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < progresses_count; i++) {
                this.progresses.push(new ProgressInfo());
                if (!this.progresses[i].parse_bytes(decoder_))
                    return false;
            }
            // memberInfo
            if (decoder_.eof())
                return true;
            var memberInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < memberInfo_count; i++) {
                this.memberInfo.push(new MemberInfo());
                if (!this.memberInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // wantedInfo
            if (decoder_.eof())
                return true;
            var wantedInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < wantedInfo_count; i++) {
                this.wantedInfo.push(new WantedInfo());
                if (!this.wantedInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // activities
            if (decoder_.eof())
                return true;
            var activities_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < activities_count; i++) {
                this.activities.push(new ActivityInfo());
                if (!this.activities[i].parse_bytes(decoder_))
                    return false;
            }
            // otherAttri
            if (decoder_.eof())
                return true;
            var otherAttri_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < otherAttri_count; i++) {
                this.otherAttri.push(new RoleOtherAttri());
                if (!this.otherAttri[i].parse_bytes(decoder_))
                    return false;
            }
            // artifacts
            if (decoder_.eof())
                return true;
            var artifacts_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < artifacts_count; i++) {
                this.artifacts.push(new ArtifactInfo());
                if (!this.artifacts[i].parse_bytes(decoder_))
                    return false;
            }
            // giftInfos
            if (decoder_.eof())
                return true;
            var giftInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < giftInfos_count; i++) {
                this.giftInfos.push(new GiftInfo());
                if (!this.giftInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // delGiftIndexs
            if (decoder_.eof())
                return true;
            this.delGiftIndexs = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // enemyCamp
            if (decoder_.eof())
                return true;
            var enemyCamp_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < enemyCamp_count; i++) {
                this.enemyCamp.push(new message.IIKVPairs());
                if (!this.enemyCamp[i].parse_bytes(decoder_))
                    return false;
            }
            // singlecraft
            if (decoder_.eof())
                return true;
            var singlecraft_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < singlecraft_count; i++) {
                this.singlecraft.push(new SinglecraftInfo());
                if (!this.singlecraft[i].parse_bytes(decoder_))
                    return false;
            }
            // generalHistoryIds
            if (decoder_.eof())
                return true;
            this.generalHistoryIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // potatoHistoryIds
            if (decoder_.eof())
                return true;
            this.potatoHistoryIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // petInfo
            if (decoder_.eof())
                return true;
            var petInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < petInfo_count; i++) {
                this.petInfo.push(new PetInfo());
                if (!this.petInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // getGoods
            if (decoder_.eof())
                return true;
            var getGoods_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < getGoods_count; i++) {
                this.getGoods.push(new GoodsInfo());
                if (!this.getGoods[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GameInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // baseInfo
            encoder.write_fixuint32(Object.keys(this.baseInfo).length);
            for (var k in this.baseInfo) {
                if (!this.baseInfo[k].to_bytes(encoder))
                    return false;
            }
            // mixUnitInfo
            encoder.write_fixuint32(Object.keys(this.mixUnitInfo).length);
            for (var k in this.mixUnitInfo) {
                if (!this.mixUnitInfo[k].to_bytes(encoder))
                    return false;
            }
            // potatos
            encoder.write_fixuint32(Object.keys(this.potatos).length);
            for (var k in this.potatos) {
                if (!this.potatos[k].to_bytes(encoder))
                    return false;
            }
            // goodsInfo
            encoder.write_fixuint32(Object.keys(this.goodsInfo).length);
            for (var k in this.goodsInfo) {
                if (!this.goodsInfo[k].to_bytes(encoder))
                    return false;
            }
            // delGoods
            encoder.write_uint32_vector(this.delGoods);
            // licenceInfo
            encoder.write_fixuint32(Object.keys(this.licenceInfo).length);
            for (var k in this.licenceInfo) {
                if (!this.licenceInfo[k].to_bytes(encoder))
                    return false;
            }
            // missionInfo
            encoder.write_fixuint32(Object.keys(this.missionInfo).length);
            for (var k in this.missionInfo) {
                if (!this.missionInfo[k].to_bytes(encoder))
                    return false;
            }
            // missionActive
            encoder.write_fixuint32(Object.keys(this.missionActive).length);
            for (var k in this.missionActive) {
                if (!this.missionActive[k].to_bytes(encoder))
                    return false;
            }
            // generals
            encoder.write_fixuint32(Object.keys(this.generals).length);
            for (var k in this.generals) {
                if (!this.generals[k].to_bytes(encoder))
                    return false;
            }
            // mobInfos
            encoder.write_fixuint32(Object.keys(this.mobInfos).length);
            for (var k in this.mobInfos) {
                if (!this.mobInfos[k].to_bytes(encoder))
                    return false;
            }
            // instanceInfo
            encoder.write_fixuint32(Object.keys(this.instanceInfo).length);
            for (var k in this.instanceInfo) {
                if (!this.instanceInfo[k].to_bytes(encoder))
                    return false;
            }
            // towerInfo
            encoder.write_fixuint32(Object.keys(this.towerInfo).length);
            for (var k in this.towerInfo) {
                if (!this.towerInfo[k].to_bytes(encoder))
                    return false;
            }
            // advisers
            encoder.write_fixuint32(Object.keys(this.advisers).length);
            for (var k in this.advisers) {
                if (!this.advisers[k].to_bytes(encoder))
                    return false;
            }
            // formations
            encoder.write_fixuint32(Object.keys(this.formations).length);
            for (var k in this.formations) {
                if (!this.formations[k].to_bytes(encoder))
                    return false;
            }
            // progresses
            encoder.write_fixuint32(Object.keys(this.progresses).length);
            for (var k in this.progresses) {
                if (!this.progresses[k].to_bytes(encoder))
                    return false;
            }
            // memberInfo
            encoder.write_fixuint32(Object.keys(this.memberInfo).length);
            for (var k in this.memberInfo) {
                if (!this.memberInfo[k].to_bytes(encoder))
                    return false;
            }
            // wantedInfo
            encoder.write_fixuint32(Object.keys(this.wantedInfo).length);
            for (var k in this.wantedInfo) {
                if (!this.wantedInfo[k].to_bytes(encoder))
                    return false;
            }
            // activities
            encoder.write_fixuint32(Object.keys(this.activities).length);
            for (var k in this.activities) {
                if (!this.activities[k].to_bytes(encoder))
                    return false;
            }
            // otherAttri
            encoder.write_fixuint32(Object.keys(this.otherAttri).length);
            for (var k in this.otherAttri) {
                if (!this.otherAttri[k].to_bytes(encoder))
                    return false;
            }
            // artifacts
            encoder.write_fixuint32(Object.keys(this.artifacts).length);
            for (var k in this.artifacts) {
                if (!this.artifacts[k].to_bytes(encoder))
                    return false;
            }
            // giftInfos
            encoder.write_fixuint32(Object.keys(this.giftInfos).length);
            for (var k in this.giftInfos) {
                if (!this.giftInfos[k].to_bytes(encoder))
                    return false;
            }
            // delGiftIndexs
            encoder.write_uint32_vector(this.delGiftIndexs);
            // enemyCamp
            encoder.write_fixuint32(Object.keys(this.enemyCamp).length);
            for (var k in this.enemyCamp) {
                if (!this.enemyCamp[k].to_bytes(encoder))
                    return false;
            }
            // singlecraft
            encoder.write_fixuint32(Object.keys(this.singlecraft).length);
            for (var k in this.singlecraft) {
                if (!this.singlecraft[k].to_bytes(encoder))
                    return false;
            }
            // generalHistoryIds
            encoder.write_uint32_vector(this.generalHistoryIds);
            // potatoHistoryIds
            encoder.write_uint32_vector(this.potatoHistoryIds);
            // petInfo
            encoder.write_fixuint32(Object.keys(this.petInfo).length);
            for (var k in this.petInfo) {
                if (!this.petInfo[k].to_bytes(encoder))
                    return false;
            }
            // getGoods
            encoder.write_fixuint32(Object.keys(this.getGoods).length);
            for (var k in this.getGoods) {
                if (!this.getGoods[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GameInfo;
    }());
    message.GameInfo = GameInfo;
    __reflect(GameInfo.prototype, "message.GameInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 排名信息
    // struct RankItemInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RankItemInfo = (function () {
        function RankItemInfo() {
            this.type = 0; // 排名类型
            this.itemId = 0; // 参与排名的Id
            this.rank = 0; // 排名(0表示未上榜)
            this.value = 0; // 排名时的值
        }
        RankItemInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // itemId
            if (decoder_.eof())
                return true;
            this.itemId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RankItemInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // itemId
            encoder.write_fixuint32(this.itemId);
            // rank
            encoder.write_fixuint32(this.rank);
            // value
            encoder.write_fixuint32(this.value);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RankItemInfo;
    }());
    message.RankItemInfo = RankItemInfo;
    __reflect(RankItemInfo.prototype, "message.RankItemInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 排行结构体
    // struct RankBaseItemInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RankBaseItemInfo = (function () {
        function RankBaseItemInfo() {
            this.rank = 0; // 排名
            this.value = 0; // 值
            this.baseInfo = new RoleBriefInfo(); // 君主信息
        }
        RankBaseItemInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            if (!this.baseInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RankBaseItemInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // rank
            encoder.write_fixuint32(this.rank);
            // value
            encoder.write_fixuint32(this.value);
            // baseInfo
            this.baseInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RankBaseItemInfo;
    }());
    message.RankBaseItemInfo = RankBaseItemInfo;
    __reflect(RankBaseItemInfo.prototype, "message.RankBaseItemInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 监测客户端行为结构
    // struct ClientOperate
    ////////////////////////////////////////////////////////////////////////////////
    var ClientOperate = (function () {
        function ClientOperate() {
            this.operate_local = ""; // 操作界面(在哪个界面做的操作)
            this.operate_scene = ""; // 操作场景
            this.operate_object = ""; // 操作对象(例如：操作的是哪个对象按钮)
            this.operate_type = ""; // 操作(例如：打开或关闭)
            this.operate_result = ""; // 操作结果(例如：打开或关闭的界面)
            this.operate_time = 0; // 操作时间(以心跳同步的服务器时间为准)
        }
        ClientOperate.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // operate_local
            if (decoder_.eof())
                return true;
            this.operate_local = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // operate_scene
            if (decoder_.eof())
                return true;
            this.operate_scene = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // operate_object
            if (decoder_.eof())
                return true;
            this.operate_object = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // operate_type
            if (decoder_.eof())
                return true;
            this.operate_type = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // operate_result
            if (decoder_.eof())
                return true;
            this.operate_result = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // operate_time
            if (decoder_.eof())
                return true;
            this.operate_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ClientOperate.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // operate_local
            encoder.write_string(this.operate_local);
            // operate_scene
            encoder.write_string(this.operate_scene);
            // operate_object
            encoder.write_string(this.operate_object);
            // operate_type
            encoder.write_string(this.operate_type);
            // operate_result
            encoder.write_string(this.operate_result);
            // operate_time
            encoder.write_fixuint32(this.operate_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ClientOperate;
    }());
    message.ClientOperate = ClientOperate;
    __reflect(ClientOperate.prototype, "message.ClientOperate", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟相关begin
    // 联盟信息公共结构体
    // struct LeagueBase
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBase = (function () {
        function LeagueBase() {
            this.leagueId = 0; // 联盟ID(ID为0表示没有联盟)
            this.picId = 0; // 联盟图片id
            this.picFrameId = 0; // 头像框
            this.name = ""; // 联盟名称
            this.level = 0; // 联盟等级
            this.exp = 0; // 经验
            this.rank = 0; // 联盟排名
            this.curNum = 0; // 联盟成员数量
            this.introduce = ""; // 联盟简介
            this.notice = ""; // 联盟公告
            this.join_condition = 0; // 加入条件
            this.join_level = 0; // 加入条件
            this.enliven_all = 0; // 一共提供的活跃度
            this.enliven_day = 0; // 今日提供的活跃度
            this.enliven_seven = 0; // 最近的活跃度
            this.leaderId = 0; // 盟主Id
            this.leaderName = ""; // 联盟领导名称
            this.isOnline = false; // 盟主是否在线
            this.processes = []; // 倒计时
            this.adopted_count = 0; // 开启boss次数
            this.instanceId = 0; // 联盟副本打至哪一个
            this.modify_name = 0; // 免费修改次数
            this.match_join = false; // 是否报名联赛
            this.match_score = 0; // 联赛积分
            this.match_rank = 0; // 联赛本服排名
            this.battle_value = 0; // 工会战力
            this.recruitInfo = ""; // 招募信息
        }
        LeagueBase.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // leagueId
            if (decoder_.eof())
                return true;
            this.leagueId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // picId
            if (decoder_.eof())
                return true;
            this.picId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // picFrameId
            if (decoder_.eof())
                return true;
            this.picFrameId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // exp
            if (decoder_.eof())
                return true;
            this.exp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // curNum
            if (decoder_.eof())
                return true;
            this.curNum = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // introduce
            if (decoder_.eof())
                return true;
            this.introduce = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // notice
            if (decoder_.eof())
                return true;
            this.notice = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // join_condition
            if (decoder_.eof())
                return true;
            this.join_condition = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // join_level
            if (decoder_.eof())
                return true;
            this.join_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // enliven_all
            if (decoder_.eof())
                return true;
            this.enliven_all = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // enliven_day
            if (decoder_.eof())
                return true;
            this.enliven_day = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // enliven_seven
            if (decoder_.eof())
                return true;
            this.enliven_seven = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leaderId
            if (decoder_.eof())
                return true;
            this.leaderId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leaderName
            if (decoder_.eof())
                return true;
            this.leaderName = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // isOnline
            if (decoder_.eof())
                return true;
            this.isOnline = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // processes
            if (decoder_.eof())
                return true;
            var processes_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < processes_count; i++) {
                this.processes.push(new ProgressInfo());
                if (!this.processes[i].parse_bytes(decoder_))
                    return false;
            }
            // adopted_count
            if (decoder_.eof())
                return true;
            this.adopted_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // instanceId
            if (decoder_.eof())
                return true;
            this.instanceId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // modify_name
            if (decoder_.eof())
                return true;
            this.modify_name = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // match_join
            if (decoder_.eof())
                return true;
            this.match_join = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // match_score
            if (decoder_.eof())
                return true;
            this.match_score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // match_rank
            if (decoder_.eof())
                return true;
            this.match_rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battle_value
            if (decoder_.eof())
                return true;
            this.battle_value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // recruitInfo
            if (decoder_.eof())
                return true;
            this.recruitInfo = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueBase.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // leagueId
            encoder.write_fixuint32(this.leagueId);
            // picId
            encoder.write_fixuint32(this.picId);
            // picFrameId
            encoder.write_fixuint32(this.picFrameId);
            // name
            encoder.write_string(this.name);
            // level
            encoder.write_fixuint32(this.level);
            // exp
            encoder.write_fixuint32(this.exp);
            // rank
            encoder.write_fixuint32(this.rank);
            // curNum
            encoder.write_fixuint32(this.curNum);
            // introduce
            encoder.write_string(this.introduce);
            // notice
            encoder.write_string(this.notice);
            // join_condition
            encoder.write_fixuint32(this.join_condition);
            // join_level
            encoder.write_fixuint32(this.join_level);
            // enliven_all
            encoder.write_fixuint32(this.enliven_all);
            // enliven_day
            encoder.write_fixuint32(this.enliven_day);
            // enliven_seven
            encoder.write_fixuint32(this.enliven_seven);
            // leaderId
            encoder.write_fixuint32(this.leaderId);
            // leaderName
            encoder.write_string(this.leaderName);
            // isOnline
            encoder.write_bool(this.isOnline);
            // processes
            encoder.write_fixuint32(Object.keys(this.processes).length);
            for (var k in this.processes) {
                if (!this.processes[k].to_bytes(encoder))
                    return false;
            }
            // adopted_count
            encoder.write_fixuint32(this.adopted_count);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // modify_name
            encoder.write_fixuint32(this.modify_name);
            // match_join
            encoder.write_bool(this.match_join);
            // match_score
            encoder.write_fixuint32(this.match_score);
            // match_rank
            encoder.write_fixuint32(this.match_rank);
            // battle_value
            encoder.write_fixuint32(this.battle_value);
            // recruitInfo
            encoder.write_string(this.recruitInfo);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueBase;
    }());
    message.LeagueBase = LeagueBase;
    __reflect(LeagueBase.prototype, "message.LeagueBase", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟申请信息
    // struct MemberApply
    ////////////////////////////////////////////////////////////////////////////////
    var MemberApply = (function () {
        function MemberApply() {
            this.applicantTime = 0; // 申请加入联盟时间
            this.monarchbase = new RoleBriefInfo(); // 君主基础信息
        }
        MemberApply.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // applicantTime
            if (decoder_.eof())
                return true;
            this.applicantTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monarchbase
            if (decoder_.eof())
                return true;
            if (!this.monarchbase.parse_bytes(decoder_))
                return false;
            return true;
        };
        MemberApply.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // applicantTime
            encoder.write_fixuint32(this.applicantTime);
            // monarchbase
            this.monarchbase.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MemberApply;
    }());
    message.MemberApply = MemberApply;
    __reflect(MemberApply.prototype, "message.MemberApply", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟日志
    // struct LeagueRecord
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueRecord = (function () {
        function LeagueRecord() {
            this.type = 0; // 日志类型
            this.operater = ""; // 操作者
            this.operate_object = ""; // 操作对象(15\20\21\23\29\30\31\33)
            this.operate_result = 0; // 操作结果
            this.generate_time = 0; // 日志生成时间
        }
        LeagueRecord.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // operater
            if (decoder_.eof())
                return true;
            this.operater = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // operate_object
            if (decoder_.eof())
                return true;
            this.operate_object = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // operate_result
            if (decoder_.eof())
                return true;
            this.operate_result = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // generate_time
            if (decoder_.eof())
                return true;
            this.generate_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueRecord.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // operater
            encoder.write_string(this.operater);
            // operate_object
            encoder.write_string(this.operate_object);
            // operate_result
            encoder.write_fixuint32(this.operate_result);
            // generate_time
            encoder.write_fixuint32(this.generate_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueRecord;
    }());
    message.LeagueRecord = LeagueRecord;
    __reflect(LeagueRecord.prototype, "message.LeagueRecord", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟技能
    // struct LeagueSkill
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSkill = (function () {
        function LeagueSkill() {
            this.type = 0; // 技能类型
            this.level = 0; // 技能等级
        }
        LeagueSkill.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueSkill.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // level
            encoder.write_fixuint32(this.level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueSkill;
    }());
    message.LeagueSkill = LeagueSkill;
    __reflect(LeagueSkill.prototype, "message.LeagueSkill", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // boss伤害排名
    // struct LeagueBossHurtRank
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossHurtRank = (function () {
        function LeagueBossHurtRank() {
            this.roleId = 0;
            this.rank = 0;
            this.value = 0;
        }
        LeagueBossHurtRank.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleId
            if (decoder_.eof())
                return true;
            this.roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueBossHurtRank.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // rank
            encoder.write_fixuint32(this.rank);
            // value
            encoder.write_fixuint32(this.value);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueBossHurtRank;
    }());
    message.LeagueBossHurtRank = LeagueBossHurtRank;
    __reflect(LeagueBossHurtRank.prototype, "message.LeagueBossHurtRank", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 通缉令关卡信息
    // struct LeagueInstanceStageInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceStageInfo = (function () {
        function LeagueInstanceStageInfo() {
            this.stageInfo = new ArmyStage(); // 关卡信息
            this.pos = 0; // 位置
            this.generalIds = []; // 推荐武将
            this.battleValue = 0; // 推荐战力
            this.is_win = false; // 是否已经打过
            this.is_boss = false; // 是否是boss
            this.battle_time = 0; // 正在挑战
            this.memberId = 0; // 挑战者Id
        }
        LeagueInstanceStageInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // stageInfo
            if (decoder_.eof())
                return true;
            if (!this.stageInfo.parse_bytes(decoder_))
                return false;
            // pos
            if (decoder_.eof())
                return true;
            this.pos = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // generalIds
            if (decoder_.eof())
                return true;
            this.generalIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_win
            if (decoder_.eof())
                return true;
            this.is_win = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_boss
            if (decoder_.eof())
                return true;
            this.is_boss = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // battle_time
            if (decoder_.eof())
                return true;
            this.battle_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // memberId
            if (decoder_.eof())
                return true;
            this.memberId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueInstanceStageInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // stageInfo
            this.stageInfo.to_bytes(encoder);
            // pos
            encoder.write_fixuint32(this.pos);
            // generalIds
            encoder.write_uint32_vector(this.generalIds);
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            // is_win
            encoder.write_bool(this.is_win);
            // is_boss
            encoder.write_bool(this.is_boss);
            // battle_time
            encoder.write_fixuint32(this.battle_time);
            // memberId
            encoder.write_fixuint32(this.memberId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceStageInfo;
    }());
    message.LeagueInstanceStageInfo = LeagueInstanceStageInfo;
    __reflect(LeagueInstanceStageInfo.prototype, "message.LeagueInstanceStageInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 通缉令关卡简单信息
    // struct LeagueInstanceStageInfoSimple
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceStageInfoSimple = (function () {
        function LeagueInstanceStageInfoSimple() {
            this.pos = 0; // 位置
            this.is_win = false; // 是否已经打过
            this.is_boss = false; // 是否是boss
            this.curHp = 0; // 当前血量百分比
            this.roleMap = 0; // 怪物形象
            this.battle_time = 0; // 正在挑战
            this.memberId = 0; // 挑战者Id
        }
        LeagueInstanceStageInfoSimple.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pos
            if (decoder_.eof())
                return true;
            this.pos = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_win
            if (decoder_.eof())
                return true;
            this.is_win = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_boss
            if (decoder_.eof())
                return true;
            this.is_boss = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // curHp
            if (decoder_.eof())
                return true;
            this.curHp = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // roleMap
            if (decoder_.eof())
                return true;
            this.roleMap = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battle_time
            if (decoder_.eof())
                return true;
            this.battle_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // memberId
            if (decoder_.eof())
                return true;
            this.memberId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueInstanceStageInfoSimple.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pos
            encoder.write_fixuint32(this.pos);
            // is_win
            encoder.write_bool(this.is_win);
            // is_boss
            encoder.write_bool(this.is_boss);
            // curHp
            encoder.write_float64(this.curHp);
            // roleMap
            encoder.write_fixuint32(this.roleMap);
            // battle_time
            encoder.write_fixuint32(this.battle_time);
            // memberId
            encoder.write_fixuint32(this.memberId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceStageInfoSimple;
    }());
    message.LeagueInstanceStageInfoSimple = LeagueInstanceStageInfoSimple;
    __reflect(LeagueInstanceStageInfoSimple.prototype, "message.LeagueInstanceStageInfoSimple", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟副本简单信息
    // struct LeagueInstanceSimple
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceSimple = (function () {
        function LeagueInstanceSimple() {
            this.instance_id = 0; // 开启哪个副本
            this.startTime = 0; // 开始时间
            this.stageInfos = []; // 所有关卡信息
        }
        LeagueInstanceSimple.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // instance_id
            if (decoder_.eof())
                return true;
            this.instance_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // startTime
            if (decoder_.eof())
                return true;
            this.startTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // stageInfos
            if (decoder_.eof())
                return true;
            var stageInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < stageInfos_count; i++) {
                this.stageInfos.push(new LeagueInstanceStageInfoSimple());
                if (!this.stageInfos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceSimple.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instance_id
            encoder.write_fixuint32(this.instance_id);
            // startTime
            encoder.write_fixuint32(this.startTime);
            // stageInfos
            encoder.write_fixuint32(Object.keys(this.stageInfos).length);
            for (var k in this.stageInfos) {
                if (!this.stageInfos[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceSimple;
    }());
    message.LeagueInstanceSimple = LeagueInstanceSimple;
    __reflect(LeagueInstanceSimple.prototype, "message.LeagueInstanceSimple", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟副本伤害排行
    // struct LeagueInstanceRankItem
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceRankItem = (function () {
        function LeagueInstanceRankItem() {
            this.rank = 0; // 排名
            this.value = 0; // 值
            this.baseInfo = new RoleBriefInfo(); // 君主信息
            this.battleValue = 0; // 战力
            this.battleId = ""; // 战报Id
        }
        LeagueInstanceRankItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            if (!this.baseInfo.parse_bytes(decoder_))
                return false;
            // battleValue
            if (decoder_.eof())
                return true;
            this.battleValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleId
            if (decoder_.eof())
                return true;
            this.battleId = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueInstanceRankItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // rank
            encoder.write_fixuint32(this.rank);
            // value
            encoder.write_fixuint32(this.value);
            // baseInfo
            this.baseInfo.to_bytes(encoder);
            // battleValue
            encoder.write_fixuint32(this.battleValue);
            // battleId
            encoder.write_string(this.battleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceRankItem;
    }());
    message.LeagueInstanceRankItem = LeagueInstanceRankItem;
    __reflect(LeagueInstanceRankItem.prototype, "message.LeagueInstanceRankItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟联赛据点信息
    // struct LeagueMatchFortress
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFortress = (function () {
        function LeagueMatchFortress() {
            this.type = 0; // 类型
            this.index = 0; // 索引（type*100+数字）
            this.memberId = 0; // 成员Id
            this.name = ""; // 名字
            this.formationIndex = 0; // 阵容索引
            this.simpleFormation = new SimpleFormationInfo(); // 简单阵型信息
        }
        LeagueMatchFortress.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // memberId
            if (decoder_.eof())
                return true;
            this.memberId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // formationIndex
            if (decoder_.eof())
                return true;
            this.formationIndex = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // simpleFormation
            if (decoder_.eof())
                return true;
            if (!this.simpleFormation.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueMatchFortress.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // index
            encoder.write_fixuint32(this.index);
            // memberId
            encoder.write_fixuint32(this.memberId);
            // name
            encoder.write_string(this.name);
            // formationIndex
            encoder.write_fixuint32(this.formationIndex);
            // simpleFormation
            this.simpleFormation.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchFortress;
    }());
    message.LeagueMatchFortress = LeagueMatchFortress;
    __reflect(LeagueMatchFortress.prototype, "message.LeagueMatchFortress", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟联赛信息
    // struct LeagueMatchInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchInfo = (function () {
        function LeagueMatchInfo() {
            this.leagueFortress = []; // 联盟据点信息
            this.fortressStar = []; // 打过的据点星级（k:index,v:star）
        }
        LeagueMatchInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // leagueFortress
            if (decoder_.eof())
                return true;
            var leagueFortress_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < leagueFortress_count; i++) {
                this.leagueFortress.push(new LeagueMatchFortress());
                if (!this.leagueFortress[i].parse_bytes(decoder_))
                    return false;
            }
            // fortressStar
            if (decoder_.eof())
                return true;
            var fortressStar_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < fortressStar_count; i++) {
                this.fortressStar.push(new message.IIKVPairs());
                if (!this.fortressStar[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // leagueFortress
            encoder.write_fixuint32(Object.keys(this.leagueFortress).length);
            for (var k in this.leagueFortress) {
                if (!this.leagueFortress[k].to_bytes(encoder))
                    return false;
            }
            // fortressStar
            encoder.write_fixuint32(Object.keys(this.fortressStar).length);
            for (var k in this.fortressStar) {
                if (!this.fortressStar[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchInfo;
    }());
    message.LeagueMatchInfo = LeagueMatchInfo;
    __reflect(LeagueMatchInfo.prototype, "message.LeagueMatchInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛战斗信息
    // struct LeagueMatchBattleFortressInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchBattleFortressInfo = (function () {
        function LeagueMatchBattleFortressInfo() {
            this.fortressStar = []; // 打过的对方据点（k:index,v:star）
            this.fortressTime = []; // 正在战斗的据点开始时间
            this.fortressMember = []; // 正在战斗的据点成员
        }
        LeagueMatchBattleFortressInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // fortressStar
            if (decoder_.eof())
                return true;
            var fortressStar_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < fortressStar_count; i++) {
                this.fortressStar.push(new message.IIKVPairs());
                if (!this.fortressStar[i].parse_bytes(decoder_))
                    return false;
            }
            // fortressTime
            if (decoder_.eof())
                return true;
            var fortressTime_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < fortressTime_count; i++) {
                this.fortressTime.push(new message.IIKVPairs());
                if (!this.fortressTime[i].parse_bytes(decoder_))
                    return false;
            }
            // fortressMember
            if (decoder_.eof())
                return true;
            var fortressMember_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < fortressMember_count; i++) {
                this.fortressMember.push(new message.IIKVPairs());
                if (!this.fortressMember[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchBattleFortressInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // fortressStar
            encoder.write_fixuint32(Object.keys(this.fortressStar).length);
            for (var k in this.fortressStar) {
                if (!this.fortressStar[k].to_bytes(encoder))
                    return false;
            }
            // fortressTime
            encoder.write_fixuint32(Object.keys(this.fortressTime).length);
            for (var k in this.fortressTime) {
                if (!this.fortressTime[k].to_bytes(encoder))
                    return false;
            }
            // fortressMember
            encoder.write_fixuint32(Object.keys(this.fortressMember).length);
            for (var k in this.fortressMember) {
                if (!this.fortressMember[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchBattleFortressInfo;
    }());
    message.LeagueMatchBattleFortressInfo = LeagueMatchBattleFortressInfo;
    __reflect(LeagueMatchBattleFortressInfo.prototype, "message.LeagueMatchBattleFortressInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 包含基本信息，并扩展字段
    // struct LeagueInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInfo = (function () {
        function LeagueInfo() {
            this.info = new LeagueBase(); // 联盟基本信息
            this.members = []; // 联盟所有成员(覆盖)
            this.applicants = []; // 联盟申请列表
            this.picIds = []; // 头像列表
            this.picFrameIds = []; // 头像框列表
            this.skills = []; // 联盟技能
            this.instances = []; // 副本信息
            this.openInstanceIds = []; // 今日开启哪些副本
        }
        LeagueInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            if (!this.info.parse_bytes(decoder_))
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            // applicants
            if (decoder_.eof())
                return true;
            var applicants_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < applicants_count; i++) {
                this.applicants.push(new MemberApply());
                if (!this.applicants[i].parse_bytes(decoder_))
                    return false;
            }
            // picIds
            if (decoder_.eof())
                return true;
            this.picIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // picFrameIds
            if (decoder_.eof())
                return true;
            this.picFrameIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // skills
            if (decoder_.eof())
                return true;
            var skills_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < skills_count; i++) {
                this.skills.push(new LeagueSkill());
                if (!this.skills[i].parse_bytes(decoder_))
                    return false;
            }
            // instances
            if (decoder_.eof())
                return true;
            var instances_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < instances_count; i++) {
                this.instances.push(new LeagueInstanceSimple());
                if (!this.instances[i].parse_bytes(decoder_))
                    return false;
            }
            // openInstanceIds
            if (decoder_.eof())
                return true;
            this.openInstanceIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // info
            this.info.to_bytes(encoder);
            // members
            encoder.write_fixuint32(Object.keys(this.members).length);
            for (var k in this.members) {
                if (!this.members[k].to_bytes(encoder))
                    return false;
            }
            // applicants
            encoder.write_fixuint32(Object.keys(this.applicants).length);
            for (var k in this.applicants) {
                if (!this.applicants[k].to_bytes(encoder))
                    return false;
            }
            // picIds
            encoder.write_uint32_vector(this.picIds);
            // picFrameIds
            encoder.write_uint32_vector(this.picFrameIds);
            // skills
            encoder.write_fixuint32(Object.keys(this.skills).length);
            for (var k in this.skills) {
                if (!this.skills[k].to_bytes(encoder))
                    return false;
            }
            // instances
            encoder.write_fixuint32(Object.keys(this.instances).length);
            for (var k in this.instances) {
                if (!this.instances[k].to_bytes(encoder))
                    return false;
            }
            // openInstanceIds
            encoder.write_uint32_vector(this.openInstanceIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInfo;
    }());
    message.LeagueInfo = LeagueInfo;
    __reflect(LeagueInfo.prototype, "message.LeagueInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟相关end
    // 其他君主信息
    // struct OtherGameInfo
    ////////////////////////////////////////////////////////////////////////////////
    var OtherGameInfo = (function () {
        function OtherGameInfo() {
            this.info = []; // 没有联盟该字段返回空否则取第一个元素
            this.mailBoxs = []; // 邮箱信息
            this.teachItems = []; // 教学
            this.operations = []; // 客户端设置
        }
        OtherGameInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            var info_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < info_count; i++) {
                this.info.push(new LeagueInfo());
                if (!this.info[i].parse_bytes(decoder_))
                    return false;
            }
            // mailBoxs
            if (decoder_.eof())
                return true;
            var mailBoxs_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mailBoxs_count; i++) {
                this.mailBoxs.push(new MailBoxInfo());
                if (!this.mailBoxs[i].parse_bytes(decoder_))
                    return false;
            }
            // teachItems
            if (decoder_.eof())
                return true;
            var teachItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < teachItems_count; i++) {
                this.teachItems.push(new TeachItem());
                if (!this.teachItems[i].parse_bytes(decoder_))
                    return false;
            }
            // operations
            if (decoder_.eof())
                return true;
            this.operations = decoder_.read_bool_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        OtherGameInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // info
            encoder.write_fixuint32(Object.keys(this.info).length);
            for (var k in this.info) {
                if (!this.info[k].to_bytes(encoder))
                    return false;
            }
            // mailBoxs
            encoder.write_fixuint32(Object.keys(this.mailBoxs).length);
            for (var k in this.mailBoxs) {
                if (!this.mailBoxs[k].to_bytes(encoder))
                    return false;
            }
            // teachItems
            encoder.write_fixuint32(Object.keys(this.teachItems).length);
            for (var k in this.teachItems) {
                if (!this.teachItems[k].to_bytes(encoder))
                    return false;
            }
            // operations
            encoder.write_bool_vector(this.operations);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return OtherGameInfo;
    }());
    message.OtherGameInfo = OtherGameInfo;
    __reflect(OtherGameInfo.prototype, "message.OtherGameInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回放人物行为状态信息
    // struct ActionStateInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ActionStateInfo = (function () {
        function ActionStateInfo() {
            this.triggerTime = 0; // 触发时机
            this.state = 0; // 重要行为状态
        }
        ActionStateInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // triggerTime
            if (decoder_.eof())
                return true;
            this.triggerTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // state
            if (decoder_.eof())
                return true;
            this.state = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActionStateInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // triggerTime
            encoder.write_fixuint32(this.triggerTime);
            // state
            encoder.write_fixuint32(this.state);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActionStateInfo;
    }());
    message.ActionStateInfo = ActionStateInfo;
    __reflect(ActionStateInfo.prototype, "message.ActionStateInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回放人物技能行为信息
    // struct ActionSkillInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ActionSkillInfo = (function () {
        function ActionSkillInfo() {
            this.triggerTime = 0; // 触发时机
            this.type = 0; // 技能类型
            this.index = 0; // 索引值
            this.atomic = 0; // 技能发动序号
        }
        ActionSkillInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // triggerTime
            if (decoder_.eof())
                return true;
            this.triggerTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // atomic
            if (decoder_.eof())
                return true;
            this.atomic = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ActionSkillInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // triggerTime
            encoder.write_fixuint32(this.triggerTime);
            // type
            encoder.write_fixuint32(this.type);
            // index
            encoder.write_fixuint32(this.index);
            // atomic
            encoder.write_fixuint32(this.atomic);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ActionSkillInfo;
    }());
    message.ActionSkillInfo = ActionSkillInfo;
    __reflect(ActionSkillInfo.prototype, "message.ActionSkillInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回放战斗行为组合
    // struct BattleActionInfo
    ////////////////////////////////////////////////////////////////////////////////
    var BattleActionInfo = (function () {
        function BattleActionInfo() {
            this.skillInfos = []; // 技能信息
            this.stateInfos = []; // 特殊状态信息
        }
        BattleActionInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // skillInfos
            if (decoder_.eof())
                return true;
            var skillInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < skillInfos_count; i++) {
                this.skillInfos.push(new ActionSkillInfo());
                if (!this.skillInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // stateInfos
            if (decoder_.eof())
                return true;
            var stateInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < stateInfos_count; i++) {
                this.stateInfos.push(new ActionStateInfo());
                if (!this.stateInfos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BattleActionInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // skillInfos
            encoder.write_fixuint32(Object.keys(this.skillInfos).length);
            for (var k in this.skillInfos) {
                if (!this.skillInfos[k].to_bytes(encoder))
                    return false;
            }
            // stateInfos
            encoder.write_fixuint32(Object.keys(this.stateInfos).length);
            for (var k in this.stateInfos) {
                if (!this.stateInfos[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BattleActionInfo;
    }());
    message.BattleActionInfo = BattleActionInfo;
    __reflect(BattleActionInfo.prototype, "message.BattleActionInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 技能伤害表格信息
    // struct SkillHurtTableInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SkillHurtTableInfo = (function () {
        function SkillHurtTableInfo() {
            this.hurt_id = 0; // 伤害Id
            this.proof_value = 0; // 效果校对
        }
        SkillHurtTableInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // hurt_id
            if (decoder_.eof())
                return true;
            this.hurt_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // proof_value
            if (decoder_.eof())
                return true;
            this.proof_value = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            return true;
        };
        SkillHurtTableInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // hurt_id
            encoder.write_fixuint32(this.hurt_id);
            // proof_value
            encoder.write_float64(this.proof_value);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SkillHurtTableInfo;
    }());
    message.SkillHurtTableInfo = SkillHurtTableInfo;
    __reflect(SkillHurtTableInfo.prototype, "message.SkillHurtTableInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 技能表格信息
    // struct SkillTableInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SkillTableInfo = (function () {
        function SkillTableInfo() {
            this.skill_id = 0; // 技能Id
            this.skill_cd = 0; // 技能cd时间
            this.skill_cd_entry = 0; // 入场技能cd时间
            this.skill_consume_rage = 0; // 消耗怒气值
            this.skill_hurt_ratio = 0; // 效果基础值(百分比)及升级增量
            this.skill_extra_value = 0; // 效果附加值(数值)及升级增量
            this.hurts = []; // 伤害表格信息
        }
        SkillTableInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // skill_id
            if (decoder_.eof())
                return true;
            this.skill_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // skill_cd
            if (decoder_.eof())
                return true;
            this.skill_cd = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // skill_cd_entry
            if (decoder_.eof())
                return true;
            this.skill_cd_entry = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // skill_consume_rage
            if (decoder_.eof())
                return true;
            this.skill_consume_rage = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // skill_hurt_ratio
            if (decoder_.eof())
                return true;
            this.skill_hurt_ratio = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // skill_extra_value
            if (decoder_.eof())
                return true;
            this.skill_extra_value = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // hurts
            if (decoder_.eof())
                return true;
            var hurts_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < hurts_count; i++) {
                this.hurts.push(new SkillHurtTableInfo());
                if (!this.hurts[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SkillTableInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // skill_id
            encoder.write_fixuint32(this.skill_id);
            // skill_cd
            encoder.write_fixuint32(this.skill_cd);
            // skill_cd_entry
            encoder.write_fixuint32(this.skill_cd_entry);
            // skill_consume_rage
            encoder.write_fixuint32(this.skill_consume_rage);
            // skill_hurt_ratio
            encoder.write_float64(this.skill_hurt_ratio);
            // skill_extra_value
            encoder.write_float64(this.skill_extra_value);
            // hurts
            encoder.write_fixuint32(Object.keys(this.hurts).length);
            for (var k in this.hurts) {
                if (!this.hurts[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SkillTableInfo;
    }());
    message.SkillTableInfo = SkillTableInfo;
    __reflect(SkillTableInfo.prototype, "message.SkillTableInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回放战斗武将信息
    // struct BattleGeneralInfo
    ////////////////////////////////////////////////////////////////////////////////
    var BattleGeneralInfo = (function () {
        function BattleGeneralInfo() {
            this.stage = 0; // 出现的战斗阶段
            this.pos = 0; // 武将真实站位或补位站位
            this.type = 0; // 类型(1-主将, 2-替补, 3-援助)
            this.generalInfo = new GeneralInfo(); // 武将基础信息
            this.totalDamage = 0; // 该武将产生的总伤害
            this.recoverValue = 0; // 该武将产生的总回血量
            this.skills = []; // 技能表格信息
            this.plugin_state = ""; // 外挂检测状态(为空表示正常)
        }
        BattleGeneralInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // stage
            if (decoder_.eof())
                return true;
            this.stage = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pos
            if (decoder_.eof())
                return true;
            this.pos = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // generalInfo
            if (decoder_.eof())
                return true;
            if (!this.generalInfo.parse_bytes(decoder_))
                return false;
            // totalDamage
            if (decoder_.eof())
                return true;
            this.totalDamage = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // recoverValue
            if (decoder_.eof())
                return true;
            this.recoverValue = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // skills
            if (decoder_.eof())
                return true;
            var skills_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < skills_count; i++) {
                this.skills.push(new SkillTableInfo());
                if (!this.skills[i].parse_bytes(decoder_))
                    return false;
            }
            // plugin_state
            if (decoder_.eof())
                return true;
            this.plugin_state = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BattleGeneralInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // stage
            encoder.write_fixuint32(this.stage);
            // pos
            encoder.write_fixuint32(this.pos);
            // type
            encoder.write_fixuint32(this.type);
            // generalInfo
            this.generalInfo.to_bytes(encoder);
            // totalDamage
            encoder.write_float64(this.totalDamage);
            // recoverValue
            encoder.write_float64(this.recoverValue);
            // skills
            encoder.write_fixuint32(Object.keys(this.skills).length);
            for (var k in this.skills) {
                if (!this.skills[k].to_bytes(encoder))
                    return false;
            }
            // plugin_state
            encoder.write_string(this.plugin_state);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BattleGeneralInfo;
    }());
    message.BattleGeneralInfo = BattleGeneralInfo;
    __reflect(BattleGeneralInfo.prototype, "message.BattleGeneralInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回放阶段行为数据
    // struct BattleStageAction
    ////////////////////////////////////////////////////////////////////////////////
    var BattleStageAction = (function () {
        function BattleStageAction() {
            this.generalId = 0; // 武将id
            this.stage = 0; // 战斗阶段
            this.pos = 0; // 左1右2
            this.action = new BattleActionInfo(); // 武将战斗行为
        }
        BattleStageAction.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // generalId
            if (decoder_.eof())
                return true;
            this.generalId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // stage
            if (decoder_.eof())
                return true;
            this.stage = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pos
            if (decoder_.eof())
                return true;
            this.pos = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // action
            if (decoder_.eof())
                return true;
            if (!this.action.parse_bytes(decoder_))
                return false;
            return true;
        };
        BattleStageAction.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // stage
            encoder.write_fixuint32(this.stage);
            // pos
            encoder.write_fixuint32(this.pos);
            // action
            this.action.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BattleStageAction;
    }());
    message.BattleStageAction = BattleStageAction;
    __reflect(BattleStageAction.prototype, "message.BattleStageAction", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回放场景事件重要触发点
    // struct SceneEventAction
    ////////////////////////////////////////////////////////////////////////////////
    var SceneEventAction = (function () {
        function SceneEventAction() {
            this.triggerTime = 0; // 触发时机
            this.type = 0; // 事件类型(1-进入下一关卡  2-战斗结束  3 援助进入  4 援助退场)
        }
        SceneEventAction.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // triggerTime
            if (decoder_.eof())
                return true;
            this.triggerTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        SceneEventAction.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // triggerTime
            encoder.write_fixuint32(this.triggerTime);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneEventAction;
    }());
    message.SceneEventAction = SceneEventAction;
    __reflect(SceneEventAction.prototype, "message.SceneEventAction", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回放方信息
    // struct ReplayDetailInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ReplayDetailInfo = (function () {
        function ReplayDetailInfo() {
            this.roleInfo = new RoleBriefInfo(); // 君主信息
            this.generals = []; // 武将信息
            this.formation = new FormationInfo(); // 当前阵型信息
            this.advisers = []; // 当前使用的所有军师信息
            this.artifacts = []; // 神兵信息
        }
        ReplayDetailInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // generals
            if (decoder_.eof())
                return true;
            var generals_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < generals_count; i++) {
                this.generals.push(new BattleGeneralInfo());
                if (!this.generals[i].parse_bytes(decoder_))
                    return false;
            }
            // formation
            if (decoder_.eof())
                return true;
            if (!this.formation.parse_bytes(decoder_))
                return false;
            // advisers
            if (decoder_.eof())
                return true;
            var advisers_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < advisers_count; i++) {
                this.advisers.push(new AdviserInfo());
                if (!this.advisers[i].parse_bytes(decoder_))
                    return false;
            }
            // artifacts
            if (decoder_.eof())
                return true;
            var artifacts_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < artifacts_count; i++) {
                this.artifacts.push(new ArtifactInfo());
                if (!this.artifacts[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ReplayDetailInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleInfo
            this.roleInfo.to_bytes(encoder);
            // generals
            encoder.write_fixuint32(Object.keys(this.generals).length);
            for (var k in this.generals) {
                if (!this.generals[k].to_bytes(encoder))
                    return false;
            }
            // formation
            this.formation.to_bytes(encoder);
            // advisers
            encoder.write_fixuint32(Object.keys(this.advisers).length);
            for (var k in this.advisers) {
                if (!this.advisers[k].to_bytes(encoder))
                    return false;
            }
            // artifacts
            encoder.write_fixuint32(Object.keys(this.artifacts).length);
            for (var k in this.artifacts) {
                if (!this.artifacts[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ReplayDetailInfo;
    }());
    message.ReplayDetailInfo = ReplayDetailInfo;
    __reflect(ReplayDetailInfo.prototype, "message.ReplayDetailInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回放战斗信息
    // struct ReplayBattleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ReplayBattleInfo = (function () {
        function ReplayBattleInfo() {
            this.seed = 0; // 战斗种子
            this.bgId = 0; // 战斗背景
            this.helpMaxNum = 0; // 单个武将援助最大次数
            this.stageTimes = []; // 关卡时间
            this.leftReplayInfo = new ReplayDetailInfo(); // 左边信息
            this.rightReplayInfo = new ReplayDetailInfo(); // 右边信息
            this.generalsCur = []; // 武将当前信息
            this.stageInfo = []; // 关卡信息(用于预加载)
            this.stageActions = []; // 人物战斗具体行为数据
            this.eventActions = []; // 场景重要事件数据
            this.battleSpeeds = []; // 战斗速度记录
            this.buffTypes = []; // 战斗生效的buff
            this.battle_const = []; // 战斗中使用参数
            this.battleFakeData = ""; // 战斗中使用参数2
        }
        ReplayBattleInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // seed
            if (decoder_.eof())
                return true;
            this.seed = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // bgId
            if (decoder_.eof())
                return true;
            this.bgId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // helpMaxNum
            if (decoder_.eof())
                return true;
            this.helpMaxNum = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // stageTimes
            if (decoder_.eof())
                return true;
            this.stageTimes = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // leftReplayInfo
            if (decoder_.eof())
                return true;
            if (!this.leftReplayInfo.parse_bytes(decoder_))
                return false;
            // rightReplayInfo
            if (decoder_.eof())
                return true;
            if (!this.rightReplayInfo.parse_bytes(decoder_))
                return false;
            // generalsCur
            if (decoder_.eof())
                return true;
            var generalsCur_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < generalsCur_count; i++) {
                this.generalsCur.push(new ArmyUnitCur());
                if (!this.generalsCur[i].parse_bytes(decoder_))
                    return false;
            }
            // stageInfo
            if (decoder_.eof())
                return true;
            var stageInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < stageInfo_count; i++) {
                this.stageInfo.push(new ArmyStage());
                if (!this.stageInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // stageActions
            if (decoder_.eof())
                return true;
            var stageActions_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < stageActions_count; i++) {
                this.stageActions.push(new BattleStageAction());
                if (!this.stageActions[i].parse_bytes(decoder_))
                    return false;
            }
            // eventActions
            if (decoder_.eof())
                return true;
            var eventActions_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < eventActions_count; i++) {
                this.eventActions.push(new SceneEventAction());
                if (!this.eventActions[i].parse_bytes(decoder_))
                    return false;
            }
            // battleSpeeds
            if (decoder_.eof())
                return true;
            var battleSpeeds_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < battleSpeeds_count; i++) {
                this.battleSpeeds.push(new message.IIKVPairs());
                if (!this.battleSpeeds[i].parse_bytes(decoder_))
                    return false;
            }
            // buffTypes
            if (decoder_.eof())
                return true;
            this.buffTypes = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // battle_const
            if (decoder_.eof())
                return true;
            this.battle_const = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // battleFakeData
            if (decoder_.eof())
                return true;
            this.battleFakeData = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ReplayBattleInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // seed
            encoder.write_fixuint32(this.seed);
            // bgId
            encoder.write_fixuint32(this.bgId);
            // helpMaxNum
            encoder.write_fixuint32(this.helpMaxNum);
            // stageTimes
            encoder.write_uint32_vector(this.stageTimes);
            // leftReplayInfo
            this.leftReplayInfo.to_bytes(encoder);
            // rightReplayInfo
            this.rightReplayInfo.to_bytes(encoder);
            // generalsCur
            encoder.write_fixuint32(Object.keys(this.generalsCur).length);
            for (var k in this.generalsCur) {
                if (!this.generalsCur[k].to_bytes(encoder))
                    return false;
            }
            // stageInfo
            encoder.write_fixuint32(Object.keys(this.stageInfo).length);
            for (var k in this.stageInfo) {
                if (!this.stageInfo[k].to_bytes(encoder))
                    return false;
            }
            // stageActions
            encoder.write_fixuint32(Object.keys(this.stageActions).length);
            for (var k in this.stageActions) {
                if (!this.stageActions[k].to_bytes(encoder))
                    return false;
            }
            // eventActions
            encoder.write_fixuint32(Object.keys(this.eventActions).length);
            for (var k in this.eventActions) {
                if (!this.eventActions[k].to_bytes(encoder))
                    return false;
            }
            // battleSpeeds
            encoder.write_fixuint32(Object.keys(this.battleSpeeds).length);
            for (var k in this.battleSpeeds) {
                if (!this.battleSpeeds[k].to_bytes(encoder))
                    return false;
            }
            // buffTypes
            encoder.write_uint32_vector(this.buffTypes);
            // battle_const
            encoder.write_uint32_vector(this.battle_const);
            // battleFakeData
            encoder.write_string(this.battleFakeData);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ReplayBattleInfo;
    }());
    message.ReplayBattleInfo = ReplayBattleInfo;
    __reflect(ReplayBattleInfo.prototype, "message.ReplayBattleInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 战斗数据
    // struct BattleResultInfo
    ////////////////////////////////////////////////////////////////////////////////
    var BattleResultInfo = (function () {
        function BattleResultInfo() {
            this.is_check = false; // 是否验证战报正确性(release版本该字段无效)
            this.battleId = ""; // 战报Id(查看战报时)
            this.battleType = 0; // 战斗类型
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.battleTime = 0; // 战斗时间
            this.totalDamage = 0; // 总伤害值（23表示roleID）
            this.maxCombo = 0; // 最大连击（23表示队友位子）
            this.battleData = []; // 战斗数据(类型为16\22\23数据格式为MultiResultInfo否则为ReplayBattleInfo)
        }
        BattleResultInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // is_check
            if (decoder_.eof())
                return true;
            this.is_check = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // battleId
            if (decoder_.eof())
                return true;
            this.battleId = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // battleType
            if (decoder_.eof())
                return true;
            this.battleType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleResult
            if (decoder_.eof())
                return true;
            this.battleResult = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleStar
            if (decoder_.eof())
                return true;
            this.battleStar = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleTime
            if (decoder_.eof())
                return true;
            this.battleTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // totalDamage
            if (decoder_.eof())
                return true;
            this.totalDamage = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // maxCombo
            if (decoder_.eof())
                return true;
            this.maxCombo = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleData
            if (decoder_.eof())
                return true;
            this.battleData = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BattleResultInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_check
            encoder.write_bool(this.is_check);
            // battleId
            encoder.write_string(this.battleId);
            // battleType
            encoder.write_fixuint32(this.battleType);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // battleTime
            encoder.write_fixuint32(this.battleTime);
            // totalDamage
            encoder.write_float64(this.totalDamage);
            // maxCombo
            encoder.write_fixuint32(this.maxCombo);
            // battleData
            encoder.write_byte_vector(this.battleData);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BattleResultInfo;
    }());
    message.BattleResultInfo = BattleResultInfo;
    __reflect(BattleResultInfo.prototype, "message.BattleResultInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 多场战斗数据
    // struct MultiResultInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MultiResultInfo = (function () {
        function MultiResultInfo() {
            this.results = []; // 所有战报
            this.leftFormation = []; // 未开局左侧信息
            this.rightFormation = []; // 未开局右侧信息
        }
        MultiResultInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // results
            if (decoder_.eof())
                return true;
            var results_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < results_count; i++) {
                this.results.push(new BattleResultInfo());
                if (!this.results[i].parse_bytes(decoder_))
                    return false;
            }
            // leftFormation
            if (decoder_.eof())
                return true;
            var leftFormation_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < leftFormation_count; i++) {
                this.leftFormation.push(new SimpleFormationInfo());
                if (!this.leftFormation[i].parse_bytes(decoder_))
                    return false;
            }
            // rightFormation
            if (decoder_.eof())
                return true;
            var rightFormation_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rightFormation_count; i++) {
                this.rightFormation.push(new SimpleFormationInfo());
                if (!this.rightFormation[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MultiResultInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // results
            encoder.write_fixuint32(Object.keys(this.results).length);
            for (var k in this.results) {
                if (!this.results[k].to_bytes(encoder))
                    return false;
            }
            // leftFormation
            encoder.write_fixuint32(Object.keys(this.leftFormation).length);
            for (var k in this.leftFormation) {
                if (!this.leftFormation[k].to_bytes(encoder))
                    return false;
            }
            // rightFormation
            encoder.write_fixuint32(Object.keys(this.rightFormation).length);
            for (var k in this.rightFormation) {
                if (!this.rightFormation[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MultiResultInfo;
    }());
    message.MultiResultInfo = MultiResultInfo;
    __reflect(MultiResultInfo.prototype, "message.MultiResultInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////
    // 场景信息基类
    // struct ScenePosItem
    ////////////////////////////////////////////////////////////////////////////////
    var ScenePosItem = (function () {
        function ScenePosItem() {
            this.joiner_id = 0; // 成员ID
            this.sceneType = 0; // 场景类型
            this.sceneId = 0; // 场景Id
            this.posState = 0; // 位置状态(见类型ESceneItemState)
            this.joinerType = 0; // 成员类型(见类型ESceneItemType)
            this.scene_x = 0; // 场景坐标
            this.scene_y = 0; // 场景坐标
        }
        ScenePosItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // joiner_id
            if (decoder_.eof())
                return true;
            this.joiner_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sceneType
            if (decoder_.eof())
                return true;
            this.sceneType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sceneId
            if (decoder_.eof())
                return true;
            this.sceneId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // posState
            if (decoder_.eof())
                return true;
            this.posState = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // joinerType
            if (decoder_.eof())
                return true;
            this.joinerType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // scene_x
            if (decoder_.eof())
                return true;
            this.scene_x = decoder_.read_int32();
            if (decoder_.has_error())
                return false;
            // scene_y
            if (decoder_.eof())
                return true;
            this.scene_y = decoder_.read_int32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ScenePosItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // joiner_id
            encoder.write_fixuint32(this.joiner_id);
            // sceneType
            encoder.write_fixuint32(this.sceneType);
            // sceneId
            encoder.write_fixuint32(this.sceneId);
            // posState
            encoder.write_fixuint32(this.posState);
            // joinerType
            encoder.write_fixuint32(this.joinerType);
            // scene_x
            encoder.write_int32(this.scene_x);
            // scene_y
            encoder.write_int32(this.scene_y);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ScenePosItem;
    }());
    message.ScenePosItem = ScenePosItem;
    __reflect(ScenePosItem.prototype, "message.ScenePosItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 玩家位置信息
    // struct ScenePosInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ScenePosInfo = (function () {
        function ScenePosInfo() {
            this.posItem = new ScenePosItem();
            this.roleBase = new RoleBriefInfo(); // 角色基本信息(建筑物的血量变化也通过他来表示id表示建筑物,battleValue表示血量)
            this.hpPre = 0; // 血量百分比(建筑物该值无用)(boss当前血量)
            this.recovery_hp = 0; // 仙境战斗后血量
            this.buildId = 0; // 操作建筑(为0表示没有在操作建筑)
            this.clickTime = 0; // 操作时间(buildId为0该值无效)(与客户端本地时间做比较读秒)
            this.deadProtectTime = 0; // 死亡保护剩余时间(果树表示成熟剩余时间)
            this.battleProtectTime = 0; // 战斗保护剩余时间(果树表示剩余果实)
            this.invincibleTime = 0; // 无敌剩余时间(与deadProtect同时存在时,先显示死亡保护)
            this.fasterTime = 0; // 加速剩余时间(大炮0表示中立1表示被左方占领2表示被右方占领)
            this.frozenTime = 0; // 冰冻倒计时(大炮表示占领时刻)
            this.otherBase = []; // 对方信息
            this.battleMode = 0; // 战斗模式
            this.kill_combo = 0; // 当前连杀数
            this.kill_time = 0; // 当前杀人总数
            this.kill_rank = 0; // 杀人排名
            this.evil_value = 0; // 罪恶值
        }
        ScenePosInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // posItem
            if (decoder_.eof())
                return true;
            if (!this.posItem.parse_bytes(decoder_))
                return false;
            // roleBase
            if (decoder_.eof())
                return true;
            if (!this.roleBase.parse_bytes(decoder_))
                return false;
            // hpPre
            if (decoder_.eof())
                return true;
            this.hpPre = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // recovery_hp
            if (decoder_.eof())
                return true;
            this.recovery_hp = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // buildId
            if (decoder_.eof())
                return true;
            this.buildId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // clickTime
            if (decoder_.eof())
                return true;
            this.clickTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // deadProtectTime
            if (decoder_.eof())
                return true;
            this.deadProtectTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleProtectTime
            if (decoder_.eof())
                return true;
            this.battleProtectTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // invincibleTime
            if (decoder_.eof())
                return true;
            this.invincibleTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // fasterTime
            if (decoder_.eof())
                return true;
            this.fasterTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // frozenTime
            if (decoder_.eof())
                return true;
            this.frozenTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // otherBase
            if (decoder_.eof())
                return true;
            var otherBase_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < otherBase_count; i++) {
                this.otherBase.push(new RoleBriefInfo());
                if (!this.otherBase[i].parse_bytes(decoder_))
                    return false;
            }
            // battleMode
            if (decoder_.eof())
                return true;
            this.battleMode = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // kill_combo
            if (decoder_.eof())
                return true;
            this.kill_combo = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // kill_time
            if (decoder_.eof())
                return true;
            this.kill_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // kill_rank
            if (decoder_.eof())
                return true;
            this.kill_rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // evil_value
            if (decoder_.eof())
                return true;
            this.evil_value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ScenePosInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // posItem
            this.posItem.to_bytes(encoder);
            // roleBase
            this.roleBase.to_bytes(encoder);
            // hpPre
            encoder.write_float64(this.hpPre);
            // recovery_hp
            encoder.write_float64(this.recovery_hp);
            // buildId
            encoder.write_fixuint32(this.buildId);
            // clickTime
            encoder.write_fixuint32(this.clickTime);
            // deadProtectTime
            encoder.write_fixuint32(this.deadProtectTime);
            // battleProtectTime
            encoder.write_fixuint32(this.battleProtectTime);
            // invincibleTime
            encoder.write_fixuint32(this.invincibleTime);
            // fasterTime
            encoder.write_fixuint32(this.fasterTime);
            // frozenTime
            encoder.write_fixuint32(this.frozenTime);
            // otherBase
            encoder.write_fixuint32(Object.keys(this.otherBase).length);
            for (var k in this.otherBase) {
                if (!this.otherBase[k].to_bytes(encoder))
                    return false;
            }
            // battleMode
            encoder.write_fixuint32(this.battleMode);
            // kill_combo
            encoder.write_fixuint32(this.kill_combo);
            // kill_time
            encoder.write_fixuint32(this.kill_time);
            // kill_rank
            encoder.write_fixuint32(this.kill_rank);
            // evil_value
            encoder.write_fixuint32(this.evil_value);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ScenePosInfo;
    }());
    message.ScenePosInfo = ScenePosInfo;
    __reflect(ScenePosInfo.prototype, "message.ScenePosInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 后台战斗模拟结果
    // struct BattleImitateResult
    ////////////////////////////////////////////////////////////////////////////////
    var BattleImitateResult = (function () {
        function BattleImitateResult() {
            this.sceneType = 0; // 场景类型
            this.sceneId = 0; // 场景Id
            this.generate_time = 0; // 生成时间
            this.battleType = 0; // 战斗类型
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.leftRoleBase = new RoleBriefInfo(); // 左方角色基本信息
            this.rightRoleBase = new RoleBriefInfo(); // 右方角色基本信息
            this.leftArmy = []; // 武将最终状态
            this.rightArmy = []; // 武将最终状态
            this.leftGenerals = []; // 左侧武将信息
            this.rightGenerals = []; // 右侧武将信息
        }
        BattleImitateResult.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sceneType
            if (decoder_.eof())
                return true;
            this.sceneType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sceneId
            if (decoder_.eof())
                return true;
            this.sceneId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // generate_time
            if (decoder_.eof())
                return true;
            this.generate_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleType
            if (decoder_.eof())
                return true;
            this.battleType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleResult
            if (decoder_.eof())
                return true;
            this.battleResult = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleStar
            if (decoder_.eof())
                return true;
            this.battleStar = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leftRoleBase
            if (decoder_.eof())
                return true;
            if (!this.leftRoleBase.parse_bytes(decoder_))
                return false;
            // rightRoleBase
            if (decoder_.eof())
                return true;
            if (!this.rightRoleBase.parse_bytes(decoder_))
                return false;
            // leftArmy
            if (decoder_.eof())
                return true;
            var leftArmy_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < leftArmy_count; i++) {
                this.leftArmy.push(new ArmyUnitCur());
                if (!this.leftArmy[i].parse_bytes(decoder_))
                    return false;
            }
            // rightArmy
            if (decoder_.eof())
                return true;
            var rightArmy_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rightArmy_count; i++) {
                this.rightArmy.push(new ArmyUnitCur());
                if (!this.rightArmy[i].parse_bytes(decoder_))
                    return false;
            }
            // leftGenerals
            if (decoder_.eof())
                return true;
            var leftGenerals_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < leftGenerals_count; i++) {
                this.leftGenerals.push(new GeneralSimpleInfo());
                if (!this.leftGenerals[i].parse_bytes(decoder_))
                    return false;
            }
            // rightGenerals
            if (decoder_.eof())
                return true;
            var rightGenerals_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rightGenerals_count; i++) {
                this.rightGenerals.push(new GeneralSimpleInfo());
                if (!this.rightGenerals[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BattleImitateResult.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sceneType
            encoder.write_fixuint32(this.sceneType);
            // sceneId
            encoder.write_fixuint32(this.sceneId);
            // generate_time
            encoder.write_fixuint32(this.generate_time);
            // battleType
            encoder.write_fixuint32(this.battleType);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // leftRoleBase
            this.leftRoleBase.to_bytes(encoder);
            // rightRoleBase
            this.rightRoleBase.to_bytes(encoder);
            // leftArmy
            encoder.write_fixuint32(Object.keys(this.leftArmy).length);
            for (var k in this.leftArmy) {
                if (!this.leftArmy[k].to_bytes(encoder))
                    return false;
            }
            // rightArmy
            encoder.write_fixuint32(Object.keys(this.rightArmy).length);
            for (var k in this.rightArmy) {
                if (!this.rightArmy[k].to_bytes(encoder))
                    return false;
            }
            // leftGenerals
            encoder.write_fixuint32(Object.keys(this.leftGenerals).length);
            for (var k in this.leftGenerals) {
                if (!this.leftGenerals[k].to_bytes(encoder))
                    return false;
            }
            // rightGenerals
            encoder.write_fixuint32(Object.keys(this.rightGenerals).length);
            for (var k in this.rightGenerals) {
                if (!this.rightGenerals[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BattleImitateResult;
    }());
    message.BattleImitateResult = BattleImitateResult;
    __reflect(BattleImitateResult.prototype, "message.BattleImitateResult", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景角色战斗信息
    // struct SceneFightRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SceneFightRoleInfo = (function () {
        function SceneFightRoleInfo() {
            this.posItem = new ScenePosItem();
            this.battleMode = 0; // 战斗模式
            this.kill_combo = 0; // 当前连杀数(玩家技能1普通攻击，2炸弹)
            this.kill_combo_max = 0; // 最大连杀数
            this.kill_time = 0; // 杀人次数(玩家释放技能对boss的伤害值)
            this.killed_time = 0; // 被杀次数
            this.hpPre = 0; // 血量百分比
            this.buildId = 0; // 操作建筑(为0表示没有在操作建筑)
            this.clickTime = 0; // 操作时间(buildId为0改值无效)
            this.addBloodLeftTime = 0; // 加血倒计时
            this.addSpeedLeftTime = 0; // 加速倒计时
            this.fasterTime = 0; // 加速剩余时间
            this.deadProtectTime = 0; // 死亡保护剩余时间
            this.battleProtectTime = 0; // 战斗保护剩余时间
            this.invincibleTime = 0; // 无敌剩余时间
            this.frozenTime = 0; // 冰冻倒计时
            this.curGenerals = []; // 武将当前信息
        }
        SceneFightRoleInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // posItem
            if (decoder_.eof())
                return true;
            if (!this.posItem.parse_bytes(decoder_))
                return false;
            // battleMode
            if (decoder_.eof())
                return true;
            this.battleMode = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // kill_combo
            if (decoder_.eof())
                return true;
            this.kill_combo = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // kill_combo_max
            if (decoder_.eof())
                return true;
            this.kill_combo_max = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // kill_time
            if (decoder_.eof())
                return true;
            this.kill_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // killed_time
            if (decoder_.eof())
                return true;
            this.killed_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // hpPre
            if (decoder_.eof())
                return true;
            this.hpPre = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // buildId
            if (decoder_.eof())
                return true;
            this.buildId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // clickTime
            if (decoder_.eof())
                return true;
            this.clickTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // addBloodLeftTime
            if (decoder_.eof())
                return true;
            this.addBloodLeftTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // addSpeedLeftTime
            if (decoder_.eof())
                return true;
            this.addSpeedLeftTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // fasterTime
            if (decoder_.eof())
                return true;
            this.fasterTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // deadProtectTime
            if (decoder_.eof())
                return true;
            this.deadProtectTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleProtectTime
            if (decoder_.eof())
                return true;
            this.battleProtectTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // invincibleTime
            if (decoder_.eof())
                return true;
            this.invincibleTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // frozenTime
            if (decoder_.eof())
                return true;
            this.frozenTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // curGenerals
            if (decoder_.eof())
                return true;
            var curGenerals_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < curGenerals_count; i++) {
                this.curGenerals.push(new ArmyUnitCur());
                if (!this.curGenerals[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneFightRoleInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // posItem
            this.posItem.to_bytes(encoder);
            // battleMode
            encoder.write_fixuint32(this.battleMode);
            // kill_combo
            encoder.write_fixuint32(this.kill_combo);
            // kill_combo_max
            encoder.write_fixuint32(this.kill_combo_max);
            // kill_time
            encoder.write_fixuint32(this.kill_time);
            // killed_time
            encoder.write_fixuint32(this.killed_time);
            // hpPre
            encoder.write_float64(this.hpPre);
            // buildId
            encoder.write_fixuint32(this.buildId);
            // clickTime
            encoder.write_fixuint32(this.clickTime);
            // addBloodLeftTime
            encoder.write_fixuint32(this.addBloodLeftTime);
            // addSpeedLeftTime
            encoder.write_fixuint32(this.addSpeedLeftTime);
            // fasterTime
            encoder.write_fixuint32(this.fasterTime);
            // deadProtectTime
            encoder.write_fixuint32(this.deadProtectTime);
            // battleProtectTime
            encoder.write_fixuint32(this.battleProtectTime);
            // invincibleTime
            encoder.write_fixuint32(this.invincibleTime);
            // frozenTime
            encoder.write_fixuint32(this.frozenTime);
            // curGenerals
            encoder.write_fixuint32(Object.keys(this.curGenerals).length);
            for (var k in this.curGenerals) {
                if (!this.curGenerals[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneFightRoleInfo;
    }());
    message.SceneFightRoleInfo = SceneFightRoleInfo;
    __reflect(SceneFightRoleInfo.prototype, "message.SceneFightRoleInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 仙境角色信息
    // struct WonderlandRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandRoleInfo = (function () {
        function WonderlandRoleInfo() {
            this.posInfo = new SceneFightRoleInfo(); // 基本信息
            this.mobsKillCount = 0; // 仙境怪物击杀数量
            this.evil_value = 0; // 罪恶值
        }
        WonderlandRoleInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // posInfo
            if (decoder_.eof())
                return true;
            if (!this.posInfo.parse_bytes(decoder_))
                return false;
            // mobsKillCount
            if (decoder_.eof())
                return true;
            this.mobsKillCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // evil_value
            if (decoder_.eof())
                return true;
            this.evil_value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        WonderlandRoleInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // posInfo
            this.posInfo.to_bytes(encoder);
            // mobsKillCount
            encoder.write_fixuint32(this.mobsKillCount);
            // evil_value
            encoder.write_fixuint32(this.evil_value);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandRoleInfo;
    }());
    message.WonderlandRoleInfo = WonderlandRoleInfo;
    __reflect(WonderlandRoleInfo.prototype, "message.WonderlandRoleInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景角色信息
    // struct DarklandRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandRoleInfo = (function () {
        function DarklandRoleInfo() {
            this.posInfo = new SceneFightRoleInfo(); // 基本信息
            this.mobsKillCount = 0; // 仙境怪物击杀数量
            this.evil_value = 0; // 罪恶值
        }
        DarklandRoleInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // posInfo
            if (decoder_.eof())
                return true;
            if (!this.posInfo.parse_bytes(decoder_))
                return false;
            // mobsKillCount
            if (decoder_.eof())
                return true;
            this.mobsKillCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // evil_value
            if (decoder_.eof())
                return true;
            this.evil_value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        DarklandRoleInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // posInfo
            this.posInfo.to_bytes(encoder);
            // mobsKillCount
            encoder.write_fixuint32(this.mobsKillCount);
            // evil_value
            encoder.write_fixuint32(this.evil_value);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DarklandRoleInfo;
    }());
    message.DarklandRoleInfo = DarklandRoleInfo;
    __reflect(DarklandRoleInfo.prototype, "message.DarklandRoleInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Boss场景角色信息
    // struct BossRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var BossRoleInfo = (function () {
        function BossRoleInfo() {
            this.posInfo = new SceneFightRoleInfo(); // 基本信息
            this.bossHurt = 0; // 对BOSS的总伤害
        }
        BossRoleInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // posInfo
            if (decoder_.eof())
                return true;
            if (!this.posInfo.parse_bytes(decoder_))
                return false;
            // bossHurt
            if (decoder_.eof())
                return true;
            this.bossHurt = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BossRoleInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // posInfo
            this.posInfo.to_bytes(encoder);
            // bossHurt
            encoder.write_float64(this.bossHurt);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossRoleInfo;
    }());
    message.BossRoleInfo = BossRoleInfo;
    __reflect(BossRoleInfo.prototype, "message.BossRoleInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景BOSS信息
    // struct BossInfo
    ////////////////////////////////////////////////////////////////////////////////
    var BossInfo = (function () {
        function BossInfo() {
            this.monster_id = 0; // 怪物Id
            this.monster_roleId = 0; // 模型
            this.monster_name = 0; // 映射到table_language.csv表中
            this.des = 0; // 映射到table_language.csv表中
            this.monster_level = 0; // 等级
            this.hp_pre = 0; // 剩余血量百分比
            this.bossInfo = new ArmyStage(); // BOSS信息
        }
        BossInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // monster_id
            if (decoder_.eof())
                return true;
            this.monster_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_roleId
            if (decoder_.eof())
                return true;
            this.monster_roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_name
            if (decoder_.eof())
                return true;
            this.monster_name = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // des
            if (decoder_.eof())
                return true;
            this.des = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // monster_level
            if (decoder_.eof())
                return true;
            this.monster_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // hp_pre
            if (decoder_.eof())
                return true;
            this.hp_pre = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // bossInfo
            if (decoder_.eof())
                return true;
            if (!this.bossInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BossInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // monster_id
            encoder.write_fixuint32(this.monster_id);
            // monster_roleId
            encoder.write_fixuint32(this.monster_roleId);
            // monster_name
            encoder.write_fixuint32(this.monster_name);
            // des
            encoder.write_fixuint32(this.des);
            // monster_level
            encoder.write_fixuint32(this.monster_level);
            // hp_pre
            encoder.write_float64(this.hp_pre);
            // bossInfo
            this.bossInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossInfo;
    }());
    message.BossInfo = BossInfo;
    __reflect(BossInfo.prototype, "message.BossInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////
    // 评论信息
    // struct CommentInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CommentInfo = (function () {
        function CommentInfo() {
            this.role_id = 0; // 评论人id
            this.role_level = 0; // 评论人等级
            this.role_name = ""; // 评论人姓名
            this.comment_id = 0; // 评论id
            this.post_id = 0; // 帖子id
            this.publish_time = 0; // 发布时间
            this.content = ""; // 评论内容
            this.topValue = 0; // 置顶权重
            this.is_better = false; // 是否最佳
        }
        CommentInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // role_id
            if (decoder_.eof())
                return true;
            this.role_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_level
            if (decoder_.eof())
                return true;
            this.role_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_name
            if (decoder_.eof())
                return true;
            this.role_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // comment_id
            if (decoder_.eof())
                return true;
            this.comment_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // post_id
            if (decoder_.eof())
                return true;
            this.post_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // publish_time
            if (decoder_.eof())
                return true;
            this.publish_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // content
            if (decoder_.eof())
                return true;
            this.content = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // topValue
            if (decoder_.eof())
                return true;
            this.topValue = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_better
            if (decoder_.eof())
                return true;
            this.is_better = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CommentInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // role_level
            encoder.write_fixuint32(this.role_level);
            // role_name
            encoder.write_string(this.role_name);
            // comment_id
            encoder.write_fixuint32(this.comment_id);
            // post_id
            encoder.write_fixuint32(this.post_id);
            // publish_time
            encoder.write_fixuint32(this.publish_time);
            // content
            encoder.write_string(this.content);
            // topValue
            encoder.write_fixuint32(this.topValue);
            // is_better
            encoder.write_bool(this.is_better);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CommentInfo;
    }());
    message.CommentInfo = CommentInfo;
    __reflect(CommentInfo.prototype, "message.CommentInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 帖子信息
    // struct PostInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PostInfo = (function () {
        function PostInfo() {
            this.type = 0; // 版面类型
            this.type_id = 0; // 类型Id
            this.post_id = 0; // 帖子id
            this.role_info = new RoleBriefInfo(); // 发帖人信息
            this.publish_time = 0; // 发布时间
            this.content = ""; // 帖子内容
            this.praises = 0; // 点赞
            this.is_praise = false; // 是否点赞
            this.steps = 0; // 被踩
            this.is_step = false; // 是否踩
            this.power = 0; // 置顶权重
            this.formationInfo = new SimpleFormationInfo(); // 阵容信息
            this.comment_count = 0; // 回复数量
        }
        PostInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // type_id
            if (decoder_.eof())
                return true;
            this.type_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // post_id
            if (decoder_.eof())
                return true;
            this.post_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_info
            if (decoder_.eof())
                return true;
            if (!this.role_info.parse_bytes(decoder_))
                return false;
            // publish_time
            if (decoder_.eof())
                return true;
            this.publish_time = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // content
            if (decoder_.eof())
                return true;
            this.content = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // praises
            if (decoder_.eof())
                return true;
            this.praises = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_praise
            if (decoder_.eof())
                return true;
            this.is_praise = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // steps
            if (decoder_.eof())
                return true;
            this.steps = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_step
            if (decoder_.eof())
                return true;
            this.is_step = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // power
            if (decoder_.eof())
                return true;
            this.power = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // formationInfo
            if (decoder_.eof())
                return true;
            if (!this.formationInfo.parse_bytes(decoder_))
                return false;
            // comment_count
            if (decoder_.eof())
                return true;
            this.comment_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PostInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // type_id
            encoder.write_fixuint32(this.type_id);
            // post_id
            encoder.write_fixuint32(this.post_id);
            // role_info
            this.role_info.to_bytes(encoder);
            // publish_time
            encoder.write_fixuint32(this.publish_time);
            // content
            encoder.write_string(this.content);
            // praises
            encoder.write_fixuint32(this.praises);
            // is_praise
            encoder.write_bool(this.is_praise);
            // steps
            encoder.write_fixuint32(this.steps);
            // is_step
            encoder.write_bool(this.is_step);
            // power
            encoder.write_fixuint32(this.power);
            // formationInfo
            this.formationInfo.to_bytes(encoder);
            // comment_count
            encoder.write_fixuint32(this.comment_count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PostInfo;
    }());
    message.PostInfo = PostInfo;
    __reflect(PostInfo.prototype, "message.PostInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////
    // 跨服相关
    // 跨服战玩家简单信息
    // struct CraftRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CraftRoleInfo = (function () {
        function CraftRoleInfo() {
            this.index = 0; // 第几轮
            this.is_win = false; // 是否挑战过了
            this.role_id = 0; // 角色Id
            this.group_id = 0; // 分区Id
            this.group_name = ""; // 分区名称
            this.craft_score = 0; // 跨服积分
            this.craft_rank = 0; // 跨服排名
            this.craft_rank_self = 0; // 本服排名
            this.battle_value = 0; // 玩家战力
            this.role_name = ""; // 角色名字
            this.role_level = 0; // 角色等级
            this.licence_level = 0; // 执照等级
            this.pic = 0; // 玩家形象
            this.title_id = 0; // 称号
            this.fashion_id = 0; // 玩家形象
        }
        CraftRoleInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_win
            if (decoder_.eof())
                return true;
            this.is_win = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // role_id
            if (decoder_.eof())
                return true;
            this.role_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_id
            if (decoder_.eof())
                return true;
            this.group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // craft_score
            if (decoder_.eof())
                return true;
            this.craft_score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // craft_rank
            if (decoder_.eof())
                return true;
            this.craft_rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // craft_rank_self
            if (decoder_.eof())
                return true;
            this.craft_rank_self = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battle_value
            if (decoder_.eof())
                return true;
            this.battle_value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_name
            if (decoder_.eof())
                return true;
            this.role_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // role_level
            if (decoder_.eof())
                return true;
            this.role_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // licence_level
            if (decoder_.eof())
                return true;
            this.licence_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pic
            if (decoder_.eof())
                return true;
            this.pic = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // title_id
            if (decoder_.eof())
                return true;
            this.title_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // fashion_id
            if (decoder_.eof())
                return true;
            this.fashion_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CraftRoleInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // is_win
            encoder.write_bool(this.is_win);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // group_name
            encoder.write_string(this.group_name);
            // craft_score
            encoder.write_fixuint32(this.craft_score);
            // craft_rank
            encoder.write_fixuint32(this.craft_rank);
            // craft_rank_self
            encoder.write_fixuint32(this.craft_rank_self);
            // battle_value
            encoder.write_fixuint32(this.battle_value);
            // role_name
            encoder.write_string(this.role_name);
            // role_level
            encoder.write_fixuint32(this.role_level);
            // licence_level
            encoder.write_fixuint32(this.licence_level);
            // pic
            encoder.write_fixuint32(this.pic);
            // title_id
            encoder.write_fixuint32(this.title_id);
            // fashion_id
            encoder.write_fixuint32(this.fashion_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftRoleInfo;
    }());
    message.CraftRoleInfo = CraftRoleInfo;
    __reflect(CraftRoleInfo.prototype, "message.CraftRoleInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 简单阵型信息
    // struct CraftFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CraftFormationInfo = (function () {
        function CraftFormationInfo() {
            this.index = 0;
            this.simpleInfo = new SimpleFormationInfo();
        }
        CraftFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // simpleInfo
            if (decoder_.eof())
                return true;
            if (!this.simpleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        CraftFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // simpleInfo
            this.simpleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftFormationInfo;
    }());
    message.CraftFormationInfo = CraftFormationInfo;
    __reflect(CraftFormationInfo.prototype, "message.CraftFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 精英列表
    // struct CraftElitesListItem
    ////////////////////////////////////////////////////////////////////////////////
    var CraftElitesListItem = (function () {
        function CraftElitesListItem() {
            this.group_name = [];
            this.roles = [];
        }
        CraftElitesListItem.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string_vector();
            if (decoder_.has_error())
                return false;
            // roles
            if (decoder_.eof())
                return true;
            var roles_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roles_count; i++) {
                this.roles.push(new CraftRoleInfo());
                if (!this.roles[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftElitesListItem.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // group_name
            encoder.write_string_vector(this.group_name);
            // roles
            encoder.write_fixuint32(Object.keys(this.roles).length);
            for (var k in this.roles) {
                if (!this.roles[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftElitesListItem;
    }());
    message.CraftElitesListItem = CraftElitesListItem;
    __reflect(CraftElitesListItem.prototype, "message.CraftElitesListItem", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛联盟信息
    // struct CraftLeagueInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CraftLeagueInfo = (function () {
        function CraftLeagueInfo() {
            this.leagueId = 0;
            this.leagueName = "";
            this.group_id = 0;
            this.group_name = "";
            this.score = 0;
            this.rank_self = 0;
            this.opponentId = 0;
            this.rank_final = 0;
        }
        CraftLeagueInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // leagueId
            if (decoder_.eof())
                return true;
            this.leagueId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueName
            if (decoder_.eof())
                return true;
            this.leagueName = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // group_id
            if (decoder_.eof())
                return true;
            this.group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // score
            if (decoder_.eof())
                return true;
            this.score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank_self
            if (decoder_.eof())
                return true;
            this.rank_self = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // opponentId
            if (decoder_.eof())
                return true;
            this.opponentId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank_final
            if (decoder_.eof())
                return true;
            this.rank_final = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CraftLeagueInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // leagueId
            encoder.write_fixuint32(this.leagueId);
            // leagueName
            encoder.write_string(this.leagueName);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // group_name
            encoder.write_string(this.group_name);
            // score
            encoder.write_fixuint32(this.score);
            // rank_self
            encoder.write_fixuint32(this.rank_self);
            // opponentId
            encoder.write_fixuint32(this.opponentId);
            // rank_final
            encoder.write_fixuint32(this.rank_final);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftLeagueInfo;
    }());
    message.CraftLeagueInfo = CraftLeagueInfo;
    __reflect(CraftLeagueInfo.prototype, "message.CraftLeagueInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛联盟结算信息
    // struct CraftLeagueBattleResultInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CraftLeagueBattleResultInfo = (function () {
        function CraftLeagueBattleResultInfo() {
            this.leagueId = 0;
            this.result = 0;
            this.self_star = "";
            this.self_old_score = 0;
            this.self_score_changge = 0;
            this.opponent_name = "";
            this.opponent_star = "";
            this.opponent_old_score = 0;
            this.opponent_score_changge = 0;
            this.battleId = 0;
            this.createTime = 0;
        }
        CraftLeagueBattleResultInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // leagueId
            if (decoder_.eof())
                return true;
            this.leagueId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // result
            if (decoder_.eof())
                return true;
            this.result = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // self_star
            if (decoder_.eof())
                return true;
            this.self_star = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // self_old_score
            if (decoder_.eof())
                return true;
            this.self_old_score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // self_score_changge
            if (decoder_.eof())
                return true;
            this.self_score_changge = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // opponent_name
            if (decoder_.eof())
                return true;
            this.opponent_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // opponent_star
            if (decoder_.eof())
                return true;
            this.opponent_star = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // opponent_old_score
            if (decoder_.eof())
                return true;
            this.opponent_old_score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // opponent_score_changge
            if (decoder_.eof())
                return true;
            this.opponent_score_changge = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battleId
            if (decoder_.eof())
                return true;
            this.battleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // createTime
            if (decoder_.eof())
                return true;
            this.createTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CraftLeagueBattleResultInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // leagueId
            encoder.write_fixuint32(this.leagueId);
            // result
            encoder.write_fixuint32(this.result);
            // self_star
            encoder.write_string(this.self_star);
            // self_old_score
            encoder.write_fixuint32(this.self_old_score);
            // self_score_changge
            encoder.write_fixuint32(this.self_score_changge);
            // opponent_name
            encoder.write_string(this.opponent_name);
            // opponent_star
            encoder.write_string(this.opponent_star);
            // opponent_old_score
            encoder.write_fixuint32(this.opponent_old_score);
            // opponent_score_changge
            encoder.write_fixuint32(this.opponent_score_changge);
            // battleId
            encoder.write_fixuint32(this.battleId);
            // createTime
            encoder.write_fixuint32(this.createTime);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftLeagueBattleResultInfo;
    }());
    message.CraftLeagueBattleResultInfo = CraftLeagueBattleResultInfo;
    __reflect(CraftLeagueBattleResultInfo.prototype, "message.CraftLeagueBattleResultInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛排行信息
    // struct CraftLeagueRankInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CraftLeagueRankInfo = (function () {
        function CraftLeagueRankInfo() {
            this.group_id = 0;
            this.leagueName = "";
            this.score = 0;
            this.leagueId = 0;
            this.rank = 0;
            this.group_name = "";
            this.server_id = 0;
        }
        CraftLeagueRankInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // group_id
            if (decoder_.eof())
                return true;
            this.group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueName
            if (decoder_.eof())
                return true;
            this.leagueName = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // score
            if (decoder_.eof())
                return true;
            this.score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueId
            if (decoder_.eof())
                return true;
            this.leagueId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // server_id
            if (decoder_.eof())
                return true;
            this.server_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CraftLeagueRankInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // leagueName
            encoder.write_string(this.leagueName);
            // score
            encoder.write_fixuint32(this.score);
            // leagueId
            encoder.write_fixuint32(this.leagueId);
            // rank
            encoder.write_fixuint32(this.rank);
            // group_name
            encoder.write_string(this.group_name);
            // server_id
            encoder.write_fixuint32(this.server_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftLeagueRankInfo;
    }());
    message.CraftLeagueRankInfo = CraftLeagueRankInfo;
    __reflect(CraftLeagueRankInfo.prototype, "message.CraftLeagueRankInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct DarklandRankInfo
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandRankInfo = (function () {
        function DarklandRankInfo() {
            this.group_id = 0;
            this.roleName = "";
            this.roleId = 0;
            this.rank = 0;
            this.score = 0;
            this.groupName = "";
        }
        DarklandRankInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // group_id
            if (decoder_.eof())
                return true;
            this.group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roleName
            if (decoder_.eof())
                return true;
            this.roleName = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // roleId
            if (decoder_.eof())
                return true;
            this.roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // score
            if (decoder_.eof())
                return true;
            this.score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // groupName
            if (decoder_.eof())
                return true;
            this.groupName = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        DarklandRankInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // roleName
            encoder.write_string(this.roleName);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // rank
            encoder.write_fixuint32(this.rank);
            // score
            encoder.write_fixuint32(this.score);
            // groupName
            encoder.write_string(this.groupName);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DarklandRankInfo;
    }());
    message.DarklandRankInfo = DarklandRankInfo;
    __reflect(DarklandRankInfo.prototype, "message.DarklandRankInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
})(message || (message = {}));
//Date: 2019-4
//File: msg_cg_custom.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端自用相关协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // struct CustomInstanceInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CustomInstanceInfo = (function () {
        function CustomInstanceInfo() {
            this.mobsMap = [];
            this.curAreaID = 0;
            this.maxAreaID = 0;
            this.curChapterID = 0;
            this.maxChapterID = 0;
            this.curMobID = 0;
            this.maxMobID = 0;
            this.bClear = false;
            this.bReview = false;
            this.instanceType = 0;
        }
        CustomInstanceInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mobsMap
            if (decoder_.eof())
                return true;
            var mobsMap_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mobsMap_count; i++) {
                this.mobsMap.push(new message.MobInfo());
                if (!this.mobsMap[i].parse_bytes(decoder_))
                    return false;
            }
            // curAreaID
            if (decoder_.eof())
                return true;
            this.curAreaID = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // maxAreaID
            if (decoder_.eof())
                return true;
            this.maxAreaID = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // curChapterID
            if (decoder_.eof())
                return true;
            this.curChapterID = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // maxChapterID
            if (decoder_.eof())
                return true;
            this.maxChapterID = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // curMobID
            if (decoder_.eof())
                return true;
            this.curMobID = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // maxMobID
            if (decoder_.eof())
                return true;
            this.maxMobID = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // bClear
            if (decoder_.eof())
                return true;
            this.bClear = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // bReview
            if (decoder_.eof())
                return true;
            this.bReview = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // instanceType
            if (decoder_.eof())
                return true;
            this.instanceType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CustomInstanceInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mobsMap
            encoder.write_fixuint32(Object.keys(this.mobsMap).length);
            for (var k in this.mobsMap) {
                if (!this.mobsMap[k].to_bytes(encoder))
                    return false;
            }
            // curAreaID
            encoder.write_fixuint32(this.curAreaID);
            // maxAreaID
            encoder.write_fixuint32(this.maxAreaID);
            // curChapterID
            encoder.write_fixuint32(this.curChapterID);
            // maxChapterID
            encoder.write_fixuint32(this.maxChapterID);
            // curMobID
            encoder.write_fixuint32(this.curMobID);
            // maxMobID
            encoder.write_fixuint32(this.maxMobID);
            // bClear
            encoder.write_bool(this.bClear);
            // bReview
            encoder.write_bool(this.bReview);
            // instanceType
            encoder.write_fixuint32(this.instanceType);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CustomInstanceInfo;
    }());
    message.CustomInstanceInfo = CustomInstanceInfo;
    __reflect(CustomInstanceInfo.prototype, "message.CustomInstanceInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct CustomFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CustomFormationInfo = (function () {
        function CustomFormationInfo() {
            this.formations = [];
            this.ID = "";
            this.OwnerGroupID = "";
        }
        CustomFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            var formations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formations_count; i++) {
                this.formations.push(new message.FormationInfo());
                if (!this.formations[i].parse_bytes(decoder_))
                    return false;
            }
            // ID
            if (decoder_.eof())
                return true;
            this.ID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // OwnerGroupID
            if (decoder_.eof())
                return true;
            this.OwnerGroupID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CustomFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // formations
            encoder.write_fixuint32(Object.keys(this.formations).length);
            for (var k in this.formations) {
                if (!this.formations[k].to_bytes(encoder))
                    return false;
            }
            // ID
            encoder.write_string(this.ID);
            // OwnerGroupID
            encoder.write_string(this.OwnerGroupID);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CustomFormationInfo;
    }());
    message.CustomFormationInfo = CustomFormationInfo;
    __reflect(CustomFormationInfo.prototype, "message.CustomFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct CustomFormationMap
    ////////////////////////////////////////////////////////////////////////////////
    var CustomFormationMap = (function () {
        function CustomFormationMap() {
            this.units = [];
        }
        CustomFormationMap.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // units
            if (decoder_.eof())
                return true;
            var units_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < units_count; i++) {
                this.units.push(new CustomFormationInfo());
                if (!this.units[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CustomFormationMap.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // units
            encoder.write_fixuint32(Object.keys(this.units).length);
            for (var k in this.units) {
                if (!this.units[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CustomFormationMap;
    }());
    message.CustomFormationMap = CustomFormationMap;
    __reflect(CustomFormationMap.prototype, "message.CustomFormationMap", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct CustomCharmInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CustomCharmInfo = (function () {
        function CustomCharmInfo() {
            this.formations = [];
            this.ID = "";
            this.OwnerGroupID = "";
        }
        CustomCharmInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            this.formations = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // ID
            if (decoder_.eof())
                return true;
            this.ID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // OwnerGroupID
            if (decoder_.eof())
                return true;
            this.OwnerGroupID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CustomCharmInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // formations
            encoder.write_uint32_vector(this.formations);
            // ID
            encoder.write_string(this.ID);
            // OwnerGroupID
            encoder.write_string(this.OwnerGroupID);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CustomCharmInfo;
    }());
    message.CustomCharmInfo = CustomCharmInfo;
    __reflect(CustomCharmInfo.prototype, "message.CustomCharmInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct CustomPushingGiftIndexInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CustomPushingGiftIndexInfo = (function () {
        function CustomPushingGiftIndexInfo() {
            this.index = [];
            this.ID = "";
            this.OwnerGroupID = "";
        }
        CustomPushingGiftIndexInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // ID
            if (decoder_.eof())
                return true;
            this.ID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // OwnerGroupID
            if (decoder_.eof())
                return true;
            this.OwnerGroupID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CustomPushingGiftIndexInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_uint32_vector(this.index);
            // ID
            encoder.write_string(this.ID);
            // OwnerGroupID
            encoder.write_string(this.OwnerGroupID);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CustomPushingGiftIndexInfo;
    }());
    message.CustomPushingGiftIndexInfo = CustomPushingGiftIndexInfo;
    __reflect(CustomPushingGiftIndexInfo.prototype, "message.CustomPushingGiftIndexInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct CustomSingleFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CustomSingleFormationInfo = (function () {
        function CustomSingleFormationInfo() {
            this.formations = [];
            this.ID = "";
            this.OwnerGroupID = "";
        }
        CustomSingleFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            var formations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formations_count; i++) {
                this.formations.push(new message.FormationInfo());
                if (!this.formations[i].parse_bytes(decoder_))
                    return false;
            }
            // ID
            if (decoder_.eof())
                return true;
            this.ID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // OwnerGroupID
            if (decoder_.eof())
                return true;
            this.OwnerGroupID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CustomSingleFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // formations
            encoder.write_fixuint32(Object.keys(this.formations).length);
            for (var k in this.formations) {
                if (!this.formations[k].to_bytes(encoder))
                    return false;
            }
            // ID
            encoder.write_string(this.ID);
            // OwnerGroupID
            encoder.write_string(this.OwnerGroupID);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CustomSingleFormationInfo;
    }());
    message.CustomSingleFormationInfo = CustomSingleFormationInfo;
    __reflect(CustomSingleFormationInfo.prototype, "message.CustomSingleFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct CustomPreSetBFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CustomPreSetBFormationInfo = (function () {
        function CustomPreSetBFormationInfo() {
            this.formations = "";
            this.formationType = 0;
            this.useIndex = [];
        }
        CustomPreSetBFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            this.formations = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // formationType
            if (decoder_.eof())
                return true;
            this.formationType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // useIndex
            if (decoder_.eof())
                return true;
            this.useIndex = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CustomPreSetBFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // formations
            encoder.write_string(this.formations);
            // formationType
            encoder.write_fixuint32(this.formationType);
            // useIndex
            encoder.write_uint32_vector(this.useIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CustomPreSetBFormationInfo;
    }());
    message.CustomPreSetBFormationInfo = CustomPreSetBFormationInfo;
    __reflect(CustomPreSetBFormationInfo.prototype, "message.CustomPreSetBFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct CustomPreSetFormationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CustomPreSetFormationInfo = (function () {
        function CustomPreSetFormationInfo() {
            this.formations = [];
            this.ID = "";
            this.OwnerGroupID = "";
        }
        CustomPreSetFormationInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            var formations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formations_count; i++) {
                this.formations.push(new CustomPreSetBFormationInfo());
                if (!this.formations[i].parse_bytes(decoder_))
                    return false;
            }
            // ID
            if (decoder_.eof())
                return true;
            this.ID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // OwnerGroupID
            if (decoder_.eof())
                return true;
            this.OwnerGroupID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CustomPreSetFormationInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // formations
            encoder.write_fixuint32(Object.keys(this.formations).length);
            for (var k in this.formations) {
                if (!this.formations[k].to_bytes(encoder))
                    return false;
            }
            // ID
            encoder.write_string(this.ID);
            // OwnerGroupID
            encoder.write_string(this.OwnerGroupID);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CustomPreSetFormationInfo;
    }());
    message.CustomPreSetFormationInfo = CustomPreSetFormationInfo;
    __reflect(CustomPreSetFormationInfo.prototype, "message.CustomPreSetFormationInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct CustomLastDoubleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var CustomLastDoubleInfo = (function () {
        function CustomLastDoubleInfo() {
            this.doubleInfo = "";
            this.lastTime = "";
            this.bPushed = false;
            this.ID = "";
            this.OwnerGroupID = "";
        }
        CustomLastDoubleInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // doubleInfo
            if (decoder_.eof())
                return true;
            this.doubleInfo = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // lastTime
            if (decoder_.eof())
                return true;
            this.lastTime = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // bPushed
            if (decoder_.eof())
                return true;
            this.bPushed = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // ID
            if (decoder_.eof())
                return true;
            this.ID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // OwnerGroupID
            if (decoder_.eof())
                return true;
            this.OwnerGroupID = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CustomLastDoubleInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // doubleInfo
            encoder.write_string(this.doubleInfo);
            // lastTime
            encoder.write_string(this.lastTime);
            // bPushed
            encoder.write_bool(this.bPushed);
            // ID
            encoder.write_string(this.ID);
            // OwnerGroupID
            encoder.write_string(this.OwnerGroupID);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CustomLastDoubleInfo;
    }());
    message.CustomLastDoubleInfo = CustomLastDoubleInfo;
    __reflect(CustomLastDoubleInfo.prototype, "message.CustomLastDoubleInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
})(message || (message = {}));
//Date: 2019-7
//File: msg_cg_darkland.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 本文档定义联盟协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////
    // 拉取本城势力信息请求
    // request SceneTribeInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SceneTribeInfoReqBody = (function () {
        function SceneTribeInfoReqBody() {
        }
        SceneTribeInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneTribeInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneTribeInfoReqBody;
    }());
    message.SceneTribeInfoReqBody = SceneTribeInfoReqBody;
    __reflect(SceneTribeInfoReqBody.prototype, "message.SceneTribeInfoReqBody", ["aone.AoneBody"]);
    var SceneTribeInfoRequest = (function () {
        function SceneTribeInfoRequest() {
            this.header = new aone.AoneReqHeader(SceneTribeInfoRequest.ID);
            this.body = new SceneTribeInfoReqBody();
        }
        SceneTribeInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneTribeInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneTribeInfoRequest.ID = 40000;
        return SceneTribeInfoRequest;
    }());
    message.SceneTribeInfoRequest = SceneTribeInfoRequest;
    __reflect(SceneTribeInfoRequest.prototype, "message.SceneTribeInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取本城势力信息回复
    // response SceneTribeInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SceneTribeInfoRespBody = (function () {
        function SceneTribeInfoRespBody() {
            this.tribeInfo = [];
        }
        SceneTribeInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // tribeInfo
            if (decoder_.eof())
                return true;
            var tribeInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < tribeInfo_count; i++) {
                this.tribeInfo.push(new message.IIKVPairs());
                if (!this.tribeInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneTribeInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneTribeInfoRespBody;
    }());
    message.SceneTribeInfoRespBody = SceneTribeInfoRespBody;
    __reflect(SceneTribeInfoRespBody.prototype, "message.SceneTribeInfoRespBody", ["aone.AoneBody"]);
    var SceneTribeInfoResponse = (function () {
        function SceneTribeInfoResponse() {
            this.header = new aone.AoneRespHeader(SceneTribeInfoResponse.ID);
            this.body = new SceneTribeInfoRespBody();
        }
        SceneTribeInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneTribeInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneTribeInfoResponse.ID = 40001;
        return SceneTribeInfoResponse;
    }());
    message.SceneTribeInfoResponse = SceneTribeInfoResponse;
    __reflect(SceneTribeInfoResponse.prototype, "message.SceneTribeInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 选择势力请求
    // request SceneChooseTribe
    ////////////////////////////////////////////////////////////////////////////////
    var SceneChooseTribeReqBody = (function () {
        function SceneChooseTribeReqBody() {
            this.tribe = 0;
        }
        SceneChooseTribeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneChooseTribeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // tribe
            encoder.write_fixuint32(this.tribe);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneChooseTribeReqBody;
    }());
    message.SceneChooseTribeReqBody = SceneChooseTribeReqBody;
    __reflect(SceneChooseTribeReqBody.prototype, "message.SceneChooseTribeReqBody", ["aone.AoneBody"]);
    var SceneChooseTribeRequest = (function () {
        function SceneChooseTribeRequest() {
            this.header = new aone.AoneReqHeader(SceneChooseTribeRequest.ID);
            this.body = new SceneChooseTribeReqBody();
        }
        SceneChooseTribeRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneChooseTribeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneChooseTribeRequest.ID = 40002;
        return SceneChooseTribeRequest;
    }());
    message.SceneChooseTribeRequest = SceneChooseTribeRequest;
    __reflect(SceneChooseTribeRequest.prototype, "message.SceneChooseTribeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 选择势力回复
    // response SceneChooseTribe
    ////////////////////////////////////////////////////////////////////////////////
    var SceneChooseTribeRespBody = (function () {
        function SceneChooseTribeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SceneChooseTribeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SceneChooseTribeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneChooseTribeRespBody;
    }());
    message.SceneChooseTribeRespBody = SceneChooseTribeRespBody;
    __reflect(SceneChooseTribeRespBody.prototype, "message.SceneChooseTribeRespBody", ["aone.AoneBody"]);
    var SceneChooseTribeResponse = (function () {
        function SceneChooseTribeResponse() {
            this.header = new aone.AoneRespHeader(SceneChooseTribeResponse.ID);
            this.body = new SceneChooseTribeRespBody();
        }
        SceneChooseTribeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneChooseTribeResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneChooseTribeResponse.ID = 40003;
        return SceneChooseTribeResponse;
    }());
    message.SceneChooseTribeResponse = SceneChooseTribeResponse;
    __reflect(SceneChooseTribeResponse.prototype, "message.SceneChooseTribeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 进入仙境场景请求
    // request SceneEnter
    ////////////////////////////////////////////////////////////////////////////////
    var SceneEnterReqBody = (function () {
        function SceneEnterReqBody() {
            this.id = 0;
        }
        SceneEnterReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneEnterReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneEnterReqBody;
    }());
    message.SceneEnterReqBody = SceneEnterReqBody;
    __reflect(SceneEnterReqBody.prototype, "message.SceneEnterReqBody", ["aone.AoneBody"]);
    var SceneEnterRequest = (function () {
        function SceneEnterRequest() {
            this.header = new aone.AoneReqHeader(SceneEnterRequest.ID);
            this.body = new SceneEnterReqBody();
        }
        SceneEnterRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneEnterRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneEnterRequest.ID = 40010;
        return SceneEnterRequest;
    }());
    message.SceneEnterRequest = SceneEnterRequest;
    __reflect(SceneEnterRequest.prototype, "message.SceneEnterRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 进入仙境场景回复
    // response SceneEnter
    ////////////////////////////////////////////////////////////////////////////////
    var SceneEnterRespBody = (function () {
        function SceneEnterRespBody() {
            this.sceneId = 0;
            this.roleInfo = new message.DarklandRoleInfo(); // 角色基本信息
            this.posInfos = [];
            this.cityId = 0; // 城市
            this.group_name = [];
        }
        SceneEnterRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sceneId
            if (decoder_.eof())
                return true;
            this.sceneId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // posInfos
            if (decoder_.eof())
                return true;
            var posInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < posInfos_count; i++) {
                this.posInfos.push(new message.ScenePosInfo());
                if (!this.posInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // cityId
            if (decoder_.eof())
                return true;
            this.cityId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        SceneEnterRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneEnterRespBody;
    }());
    message.SceneEnterRespBody = SceneEnterRespBody;
    __reflect(SceneEnterRespBody.prototype, "message.SceneEnterRespBody", ["aone.AoneBody"]);
    var SceneEnterResponse = (function () {
        function SceneEnterResponse() {
            this.header = new aone.AoneRespHeader(SceneEnterResponse.ID);
            this.body = new SceneEnterRespBody();
        }
        SceneEnterResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneEnterResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneEnterResponse.ID = 40011;
        return SceneEnterResponse;
    }());
    message.SceneEnterResponse = SceneEnterResponse;
    __reflect(SceneEnterResponse.prototype, "message.SceneEnterResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 离开场景请求
    // request SceneLeave
    ////////////////////////////////////////////////////////////////////////////////
    var SceneLeaveReqBody = (function () {
        function SceneLeaveReqBody() {
        }
        SceneLeaveReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneLeaveReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneLeaveReqBody;
    }());
    message.SceneLeaveReqBody = SceneLeaveReqBody;
    __reflect(SceneLeaveReqBody.prototype, "message.SceneLeaveReqBody", ["aone.AoneBody"]);
    var SceneLeaveRequest = (function () {
        function SceneLeaveRequest() {
            this.header = new aone.AoneReqHeader(SceneLeaveRequest.ID);
            this.body = new SceneLeaveReqBody();
        }
        SceneLeaveRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneLeaveRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneLeaveRequest.ID = 40012;
        return SceneLeaveRequest;
    }());
    message.SceneLeaveRequest = SceneLeaveRequest;
    __reflect(SceneLeaveRequest.prototype, "message.SceneLeaveRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 离开场景回复
    // response SceneLeave
    ////////////////////////////////////////////////////////////////////////////////
    var SceneLeaveRespBody = (function () {
        function SceneLeaveRespBody() {
        }
        SceneLeaveRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SceneLeaveRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneLeaveRespBody;
    }());
    message.SceneLeaveRespBody = SceneLeaveRespBody;
    __reflect(SceneLeaveRespBody.prototype, "message.SceneLeaveRespBody", ["aone.AoneBody"]);
    var SceneLeaveResponse = (function () {
        function SceneLeaveResponse() {
            this.header = new aone.AoneRespHeader(SceneLeaveResponse.ID);
            this.body = new SceneLeaveRespBody();
        }
        SceneLeaveResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneLeaveResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneLeaveResponse.ID = 40013;
        return SceneLeaveResponse;
    }());
    message.SceneLeaveResponse = SceneLeaveResponse;
    __reflect(SceneLeaveResponse.prototype, "message.SceneLeaveResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景中移动请求
    // 该协议发送最大间隔为2分钟，最小间隔取经验值
    // request SceneMove
    ////////////////////////////////////////////////////////////////////////////////
    var SceneMoveReqBody = (function () {
        function SceneMoveReqBody() {
            this.scene_x = 0; // 场景坐标
            this.scene_y = 0; // 场景坐标
        }
        SceneMoveReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneMoveReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // scene_x
            encoder.write_fixuint32(this.scene_x);
            // scene_y
            encoder.write_fixuint32(this.scene_y);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneMoveReqBody;
    }());
    message.SceneMoveReqBody = SceneMoveReqBody;
    __reflect(SceneMoveReqBody.prototype, "message.SceneMoveReqBody", ["aone.AoneBody"]);
    var SceneMoveRequest = (function () {
        function SceneMoveRequest() {
            this.header = new aone.AoneReqHeader(SceneMoveRequest.ID);
            this.body = new SceneMoveReqBody();
        }
        SceneMoveRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneMoveRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneMoveRequest.ID = 40014;
        return SceneMoveRequest;
    }());
    message.SceneMoveRequest = SceneMoveRequest;
    __reflect(SceneMoveRequest.prototype, "message.SceneMoveRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景中移动回复
    // response SceneMove
    ////////////////////////////////////////////////////////////////////////////////
    var SceneMoveRespBody = (function () {
        function SceneMoveRespBody() {
            this.roleInfo = []; // 角色基本信息
        }
        SceneMoveRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            var roleInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roleInfo_count; i++) {
                this.roleInfo.push(new message.DarklandRoleInfo());
                if (!this.roleInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneMoveRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneMoveRespBody;
    }());
    message.SceneMoveRespBody = SceneMoveRespBody;
    __reflect(SceneMoveRespBody.prototype, "message.SceneMoveRespBody", ["aone.AoneBody"]);
    var SceneMoveResponse = (function () {
        function SceneMoveResponse() {
            this.header = new aone.AoneRespHeader(SceneMoveResponse.ID);
            this.body = new SceneMoveRespBody();
        }
        SceneMoveResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneMoveResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneMoveResponse.ID = 40015;
        return SceneMoveResponse;
    }());
    message.SceneMoveResponse = SceneMoveResponse;
    __reflect(SceneMoveResponse.prototype, "message.SceneMoveResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 清空死亡冷却请求
    // request SceneDeadCooling
    ////////////////////////////////////////////////////////////////////////////////
    var SceneDeadCoolingReqBody = (function () {
        function SceneDeadCoolingReqBody() {
        }
        SceneDeadCoolingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneDeadCoolingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneDeadCoolingReqBody;
    }());
    message.SceneDeadCoolingReqBody = SceneDeadCoolingReqBody;
    __reflect(SceneDeadCoolingReqBody.prototype, "message.SceneDeadCoolingReqBody", ["aone.AoneBody"]);
    var SceneDeadCoolingRequest = (function () {
        function SceneDeadCoolingRequest() {
            this.header = new aone.AoneReqHeader(SceneDeadCoolingRequest.ID);
            this.body = new SceneDeadCoolingReqBody();
        }
        SceneDeadCoolingRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneDeadCoolingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneDeadCoolingRequest.ID = 40016;
        return SceneDeadCoolingRequest;
    }());
    message.SceneDeadCoolingRequest = SceneDeadCoolingRequest;
    __reflect(SceneDeadCoolingRequest.prototype, "message.SceneDeadCoolingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 清空死亡冷却回复
    // response SceneDeadCooling
    ////////////////////////////////////////////////////////////////////////////////
    var SceneDeadCoolingRespBody = (function () {
        function SceneDeadCoolingRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.DarklandRoleInfo(); // 角色基本信息
        }
        SceneDeadCoolingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SceneDeadCoolingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneDeadCoolingRespBody;
    }());
    message.SceneDeadCoolingRespBody = SceneDeadCoolingRespBody;
    __reflect(SceneDeadCoolingRespBody.prototype, "message.SceneDeadCoolingRespBody", ["aone.AoneBody"]);
    var SceneDeadCoolingResponse = (function () {
        function SceneDeadCoolingResponse() {
            this.header = new aone.AoneRespHeader(SceneDeadCoolingResponse.ID);
            this.body = new SceneDeadCoolingRespBody();
        }
        SceneDeadCoolingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneDeadCoolingResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneDeadCoolingResponse.ID = 40017;
        return SceneDeadCoolingResponse;
    }());
    message.SceneDeadCoolingResponse = SceneDeadCoolingResponse;
    __reflect(SceneDeadCoolingResponse.prototype, "message.SceneDeadCoolingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加快移动速度请求
    // request SceneFaster
    ////////////////////////////////////////////////////////////////////////////////
    var SceneFasterReqBody = (function () {
        function SceneFasterReqBody() {
        }
        SceneFasterReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneFasterReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneFasterReqBody;
    }());
    message.SceneFasterReqBody = SceneFasterReqBody;
    __reflect(SceneFasterReqBody.prototype, "message.SceneFasterReqBody", ["aone.AoneBody"]);
    var SceneFasterRequest = (function () {
        function SceneFasterRequest() {
            this.header = new aone.AoneReqHeader(SceneFasterRequest.ID);
            this.body = new SceneFasterReqBody();
        }
        SceneFasterRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneFasterRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneFasterRequest.ID = 40018;
        return SceneFasterRequest;
    }());
    message.SceneFasterRequest = SceneFasterRequest;
    __reflect(SceneFasterRequest.prototype, "message.SceneFasterRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加快移动速度回复
    // response SceneFaster
    ////////////////////////////////////////////////////////////////////////////////
    var SceneFasterRespBody = (function () {
        function SceneFasterRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.DarklandRoleInfo(); // 角色基本信息
        }
        SceneFasterRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SceneFasterRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneFasterRespBody;
    }());
    message.SceneFasterRespBody = SceneFasterRespBody;
    __reflect(SceneFasterRespBody.prototype, "message.SceneFasterRespBody", ["aone.AoneBody"]);
    var SceneFasterResponse = (function () {
        function SceneFasterResponse() {
            this.header = new aone.AoneRespHeader(SceneFasterResponse.ID);
            this.body = new SceneFasterRespBody();
        }
        SceneFasterResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneFasterResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneFasterResponse.ID = 40019;
        return SceneFasterResponse;
    }());
    message.SceneFasterResponse = SceneFasterResponse;
    __reflect(SceneFasterResponse.prototype, "message.SceneFasterResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加血请求
    // request SceneAddBlood
    ////////////////////////////////////////////////////////////////////////////////
    var SceneAddBloodReqBody = (function () {
        function SceneAddBloodReqBody() {
        }
        SceneAddBloodReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneAddBloodReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneAddBloodReqBody;
    }());
    message.SceneAddBloodReqBody = SceneAddBloodReqBody;
    __reflect(SceneAddBloodReqBody.prototype, "message.SceneAddBloodReqBody", ["aone.AoneBody"]);
    var SceneAddBloodRequest = (function () {
        function SceneAddBloodRequest() {
            this.header = new aone.AoneReqHeader(SceneAddBloodRequest.ID);
            this.body = new SceneAddBloodReqBody();
        }
        SceneAddBloodRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneAddBloodRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneAddBloodRequest.ID = 40020;
        return SceneAddBloodRequest;
    }());
    message.SceneAddBloodRequest = SceneAddBloodRequest;
    __reflect(SceneAddBloodRequest.prototype, "message.SceneAddBloodRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加血回复
    // response SceneAddBlood
    ////////////////////////////////////////////////////////////////////////////////
    var SceneAddBloodRespBody = (function () {
        function SceneAddBloodRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.DarklandRoleInfo(); // 角色基本信息
        }
        SceneAddBloodRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SceneAddBloodRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneAddBloodRespBody;
    }());
    message.SceneAddBloodRespBody = SceneAddBloodRespBody;
    __reflect(SceneAddBloodRespBody.prototype, "message.SceneAddBloodRespBody", ["aone.AoneBody"]);
    var SceneAddBloodResponse = (function () {
        function SceneAddBloodResponse() {
            this.header = new aone.AoneRespHeader(SceneAddBloodResponse.ID);
            this.body = new SceneAddBloodRespBody();
        }
        SceneAddBloodResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneAddBloodResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneAddBloodResponse.ID = 40021;
        return SceneAddBloodResponse;
    }());
    message.SceneAddBloodResponse = SceneAddBloodResponse;
    __reflect(SceneAddBloodResponse.prototype, "message.SceneAddBloodResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 采集果子请求
    // request SceneCollection
    ////////////////////////////////////////////////////////////////////////////////
    var SceneCollectionReqBody = (function () {
        function SceneCollectionReqBody() {
            this.treeId = 0;
        }
        SceneCollectionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneCollectionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // treeId
            encoder.write_fixuint32(this.treeId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneCollectionReqBody;
    }());
    message.SceneCollectionReqBody = SceneCollectionReqBody;
    __reflect(SceneCollectionReqBody.prototype, "message.SceneCollectionReqBody", ["aone.AoneBody"]);
    var SceneCollectionRequest = (function () {
        function SceneCollectionRequest() {
            this.header = new aone.AoneReqHeader(SceneCollectionRequest.ID);
            this.body = new SceneCollectionReqBody();
        }
        SceneCollectionRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneCollectionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneCollectionRequest.ID = 40022;
        return SceneCollectionRequest;
    }());
    message.SceneCollectionRequest = SceneCollectionRequest;
    __reflect(SceneCollectionRequest.prototype, "message.SceneCollectionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 采集果子回复
    // response SceneCollection
    ////////////////////////////////////////////////////////////////////////////////
    var SceneCollectionRespBody = (function () {
        function SceneCollectionRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.DarklandRoleInfo(); // 角色基本信息
        }
        SceneCollectionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SceneCollectionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneCollectionRespBody;
    }());
    message.SceneCollectionRespBody = SceneCollectionRespBody;
    __reflect(SceneCollectionRespBody.prototype, "message.SceneCollectionRespBody", ["aone.AoneBody"]);
    var SceneCollectionResponse = (function () {
        function SceneCollectionResponse() {
            this.header = new aone.AoneRespHeader(SceneCollectionResponse.ID);
            this.body = new SceneCollectionRespBody();
        }
        SceneCollectionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneCollectionResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneCollectionResponse.ID = 40023;
        return SceneCollectionResponse;
    }());
    message.SceneCollectionResponse = SceneCollectionResponse;
    __reflect(SceneCollectionResponse.prototype, "message.SceneCollectionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 碰撞请求
    // request SceneCollide
    ////////////////////////////////////////////////////////////////////////////////
    var SceneCollideReqBody = (function () {
        function SceneCollideReqBody() {
            this.objectId = 0; // 玩家或者怪物
        }
        SceneCollideReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneCollideReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // objectId
            encoder.write_fixuint32(this.objectId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneCollideReqBody;
    }());
    message.SceneCollideReqBody = SceneCollideReqBody;
    __reflect(SceneCollideReqBody.prototype, "message.SceneCollideReqBody", ["aone.AoneBody"]);
    var SceneCollideRequest = (function () {
        function SceneCollideRequest() {
            this.header = new aone.AoneReqHeader(SceneCollideRequest.ID);
            this.body = new SceneCollideReqBody();
        }
        SceneCollideRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneCollideRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneCollideRequest.ID = 40024;
        return SceneCollideRequest;
    }());
    message.SceneCollideRequest = SceneCollideRequest;
    __reflect(SceneCollideRequest.prototype, "message.SceneCollideRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 碰撞回复
    // response SceneCollide
    ////////////////////////////////////////////////////////////////////////////////
    var SceneCollideRespBody = (function () {
        function SceneCollideRespBody() {
            this.gameInfo = new message.GameInfo();
            this.battleResult = []; // BattleImitateResult
            this.roleInfo = new message.DarklandRoleInfo(); // 角色基本信息
        }
        SceneCollideRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // battleResult
            if (decoder_.eof())
                return true;
            this.battleResult = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SceneCollideRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneCollideRespBody;
    }());
    message.SceneCollideRespBody = SceneCollideRespBody;
    __reflect(SceneCollideRespBody.prototype, "message.SceneCollideRespBody", ["aone.AoneBody"]);
    var SceneCollideResponse = (function () {
        function SceneCollideResponse() {
            this.header = new aone.AoneRespHeader(SceneCollideResponse.ID);
            this.body = new SceneCollideRespBody();
        }
        SceneCollideResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneCollideResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneCollideResponse.ID = 40025;
        return SceneCollideResponse;
    }());
    message.SceneCollideResponse = SceneCollideResponse;
    __reflect(SceneCollideResponse.prototype, "message.SceneCollideResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取所有分线请求
    // request SceneGetBranchInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SceneGetBranchInfoReqBody = (function () {
        function SceneGetBranchInfoReqBody() {
        }
        SceneGetBranchInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneGetBranchInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneGetBranchInfoReqBody;
    }());
    message.SceneGetBranchInfoReqBody = SceneGetBranchInfoReqBody;
    __reflect(SceneGetBranchInfoReqBody.prototype, "message.SceneGetBranchInfoReqBody", ["aone.AoneBody"]);
    var SceneGetBranchInfoRequest = (function () {
        function SceneGetBranchInfoRequest() {
            this.header = new aone.AoneReqHeader(SceneGetBranchInfoRequest.ID);
            this.body = new SceneGetBranchInfoReqBody();
        }
        SceneGetBranchInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneGetBranchInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneGetBranchInfoRequest.ID = 40026;
        return SceneGetBranchInfoRequest;
    }());
    message.SceneGetBranchInfoRequest = SceneGetBranchInfoRequest;
    __reflect(SceneGetBranchInfoRequest.prototype, "message.SceneGetBranchInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取所有分线回复
    // response SceneGetBranchInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SceneGetBranchInfoRespBody = (function () {
        function SceneGetBranchInfoRespBody() {
            this.branchInfo = []; // k:id v:num
        }
        SceneGetBranchInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // branchInfo
            if (decoder_.eof())
                return true;
            var branchInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < branchInfo_count; i++) {
                this.branchInfo.push(new message.IIKVPairs());
                if (!this.branchInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneGetBranchInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneGetBranchInfoRespBody;
    }());
    message.SceneGetBranchInfoRespBody = SceneGetBranchInfoRespBody;
    __reflect(SceneGetBranchInfoRespBody.prototype, "message.SceneGetBranchInfoRespBody", ["aone.AoneBody"]);
    var SceneGetBranchInfoResponse = (function () {
        function SceneGetBranchInfoResponse() {
            this.header = new aone.AoneRespHeader(SceneGetBranchInfoResponse.ID);
            this.body = new SceneGetBranchInfoRespBody();
        }
        SceneGetBranchInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneGetBranchInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneGetBranchInfoResponse.ID = 40027;
        return SceneGetBranchInfoResponse;
    }());
    message.SceneGetBranchInfoResponse = SceneGetBranchInfoResponse;
    __reflect(SceneGetBranchInfoResponse.prototype, "message.SceneGetBranchInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 切换分线请求
    // request SceneChangeBranchInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SceneChangeBranchInfoReqBody = (function () {
        function SceneChangeBranchInfoReqBody() {
            this.scene = 0;
        }
        SceneChangeBranchInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneChangeBranchInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // scene
            encoder.write_fixuint32(this.scene);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneChangeBranchInfoReqBody;
    }());
    message.SceneChangeBranchInfoReqBody = SceneChangeBranchInfoReqBody;
    __reflect(SceneChangeBranchInfoReqBody.prototype, "message.SceneChangeBranchInfoReqBody", ["aone.AoneBody"]);
    var SceneChangeBranchInfoRequest = (function () {
        function SceneChangeBranchInfoRequest() {
            this.header = new aone.AoneReqHeader(SceneChangeBranchInfoRequest.ID);
            this.body = new SceneChangeBranchInfoReqBody();
        }
        SceneChangeBranchInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneChangeBranchInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneChangeBranchInfoRequest.ID = 40028;
        return SceneChangeBranchInfoRequest;
    }());
    message.SceneChangeBranchInfoRequest = SceneChangeBranchInfoRequest;
    __reflect(SceneChangeBranchInfoRequest.prototype, "message.SceneChangeBranchInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 切换分线回复
    // response SceneChangeBranchInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SceneChangeBranchInfoRespBody = (function () {
        function SceneChangeBranchInfoRespBody() {
            this.sceneId = 0;
            this.roleInfo = new message.DarklandRoleInfo(); // 角色基本信息
            this.posInfos = [];
        }
        SceneChangeBranchInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sceneId
            if (decoder_.eof())
                return true;
            this.sceneId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // posInfos
            if (decoder_.eof())
                return true;
            var posInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < posInfos_count; i++) {
                this.posInfos.push(new message.ScenePosInfo());
                if (!this.posInfos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneChangeBranchInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneChangeBranchInfoRespBody;
    }());
    message.SceneChangeBranchInfoRespBody = SceneChangeBranchInfoRespBody;
    __reflect(SceneChangeBranchInfoRespBody.prototype, "message.SceneChangeBranchInfoRespBody", ["aone.AoneBody"]);
    var SceneChangeBranchInfoResponse = (function () {
        function SceneChangeBranchInfoResponse() {
            this.header = new aone.AoneRespHeader(SceneChangeBranchInfoResponse.ID);
            this.body = new SceneChangeBranchInfoRespBody();
        }
        SceneChangeBranchInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneChangeBranchInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneChangeBranchInfoResponse.ID = 40029;
        return SceneChangeBranchInfoResponse;
    }());
    message.SceneChangeBranchInfoResponse = SceneChangeBranchInfoResponse;
    __reflect(SceneChangeBranchInfoResponse.prototype, "message.SceneChangeBranchInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 清除罪恶值请求
    // request SceneClearEvil
    ////////////////////////////////////////////////////////////////////////////////
    var SceneClearEvilReqBody = (function () {
        function SceneClearEvilReqBody() {
        }
        SceneClearEvilReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneClearEvilReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneClearEvilReqBody;
    }());
    message.SceneClearEvilReqBody = SceneClearEvilReqBody;
    __reflect(SceneClearEvilReqBody.prototype, "message.SceneClearEvilReqBody", ["aone.AoneBody"]);
    var SceneClearEvilRequest = (function () {
        function SceneClearEvilRequest() {
            this.header = new aone.AoneReqHeader(SceneClearEvilRequest.ID);
            this.body = new SceneClearEvilReqBody();
        }
        SceneClearEvilRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneClearEvilRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneClearEvilRequest.ID = 40030;
        return SceneClearEvilRequest;
    }());
    message.SceneClearEvilRequest = SceneClearEvilRequest;
    __reflect(SceneClearEvilRequest.prototype, "message.SceneClearEvilRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 清除罪恶值回复
    // response SceneClearEvil
    ////////////////////////////////////////////////////////////////////////////////
    var SceneClearEvilRespBody = (function () {
        function SceneClearEvilRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.DarklandRoleInfo(); // 角色基本信息
        }
        SceneClearEvilRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SceneClearEvilRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneClearEvilRespBody;
    }());
    message.SceneClearEvilRespBody = SceneClearEvilRespBody;
    __reflect(SceneClearEvilRespBody.prototype, "message.SceneClearEvilRespBody", ["aone.AoneBody"]);
    var SceneClearEvilResponse = (function () {
        function SceneClearEvilResponse() {
            this.header = new aone.AoneRespHeader(SceneClearEvilResponse.ID);
            this.body = new SceneClearEvilRespBody();
        }
        SceneClearEvilResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneClearEvilResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneClearEvilResponse.ID = 40031;
        return SceneClearEvilResponse;
    }());
    message.SceneClearEvilResponse = SceneClearEvilResponse;
    __reflect(SceneClearEvilResponse.prototype, "message.SceneClearEvilResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取积分排行请求
    // request SceneQueryScoreRank
    ////////////////////////////////////////////////////////////////////////////////
    var SceneQueryScoreRankReqBody = (function () {
        function SceneQueryScoreRankReqBody() {
            this.get_all = false;
        }
        SceneQueryScoreRankReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SceneQueryScoreRankReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // get_all
            encoder.write_bool(this.get_all);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneQueryScoreRankReqBody;
    }());
    message.SceneQueryScoreRankReqBody = SceneQueryScoreRankReqBody;
    __reflect(SceneQueryScoreRankReqBody.prototype, "message.SceneQueryScoreRankReqBody", ["aone.AoneBody"]);
    var SceneQueryScoreRankRequest = (function () {
        function SceneQueryScoreRankRequest() {
            this.header = new aone.AoneReqHeader(SceneQueryScoreRankRequest.ID);
            this.body = new SceneQueryScoreRankReqBody();
        }
        SceneQueryScoreRankRequest.prototype.parse_bytes = function (decoder) { return false; };
        SceneQueryScoreRankRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneQueryScoreRankRequest.ID = 40032;
        return SceneQueryScoreRankRequest;
    }());
    message.SceneQueryScoreRankRequest = SceneQueryScoreRankRequest;
    __reflect(SceneQueryScoreRankRequest.prototype, "message.SceneQueryScoreRankRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取积分排行回复
    // response SceneQueryScoreRank
    ////////////////////////////////////////////////////////////////////////////////
    var SceneQueryScoreRankRespBody = (function () {
        function SceneQueryScoreRankRespBody() {
            this.ranks = [];
            this.self_rank = new message.DarklandRankInfo();
        }
        SceneQueryScoreRankRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // ranks
            if (decoder_.eof())
                return true;
            var ranks_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < ranks_count; i++) {
                this.ranks.push(new message.DarklandRankInfo());
                if (!this.ranks[i].parse_bytes(decoder_))
                    return false;
            }
            // self_rank
            if (decoder_.eof())
                return true;
            if (!this.self_rank.parse_bytes(decoder_))
                return false;
            return true;
        };
        SceneQueryScoreRankRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SceneQueryScoreRankRespBody;
    }());
    message.SceneQueryScoreRankRespBody = SceneQueryScoreRankRespBody;
    __reflect(SceneQueryScoreRankRespBody.prototype, "message.SceneQueryScoreRankRespBody", ["aone.AoneBody"]);
    var SceneQueryScoreRankResponse = (function () {
        function SceneQueryScoreRankResponse() {
            this.header = new aone.AoneRespHeader(SceneQueryScoreRankResponse.ID);
            this.body = new SceneQueryScoreRankRespBody();
        }
        SceneQueryScoreRankResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneQueryScoreRankResponse.prototype.to_bytes = function (encoder) { return false; };
        SceneQueryScoreRankResponse.ID = 40033;
        return SceneQueryScoreRankResponse;
    }());
    message.SceneQueryScoreRankResponse = SceneQueryScoreRankResponse;
    __reflect(SceneQueryScoreRankResponse.prototype, "message.SceneQueryScoreRankResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //////////////////////活动boss/////////////////////////
    // 进入场景请求
    // request DarklandBossEnter
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossEnterReqBody = (function () {
        function DarklandBossEnterReqBody() {
        }
        DarklandBossEnterReqBody.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossEnterReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DarklandBossEnterReqBody;
    }());
    message.DarklandBossEnterReqBody = DarklandBossEnterReqBody;
    __reflect(DarklandBossEnterReqBody.prototype, "message.DarklandBossEnterReqBody", ["aone.AoneBody"]);
    var DarklandBossEnterRequest = (function () {
        function DarklandBossEnterRequest() {
            this.header = new aone.AoneReqHeader(DarklandBossEnterRequest.ID);
            this.body = new DarklandBossEnterReqBody();
        }
        DarklandBossEnterRequest.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossEnterRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        DarklandBossEnterRequest.ID = 40050;
        return DarklandBossEnterRequest;
    }());
    message.DarklandBossEnterRequest = DarklandBossEnterRequest;
    __reflect(DarklandBossEnterRequest.prototype, "message.DarklandBossEnterRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 进入场景回复
    // response DarklandBossEnter
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossEnterRespBody = (function () {
        function DarklandBossEnterRespBody() {
            this.roleInfo = new message.DarklandRoleInfo(); // 角色基本信息
            this.posInfos = [];
            this.cityId = 0; // 城市
            this.group_name = [];
        }
        DarklandBossEnterRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // posInfos
            if (decoder_.eof())
                return true;
            var posInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < posInfos_count; i++) {
                this.posInfos.push(new message.ScenePosInfo());
                if (!this.posInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // cityId
            if (decoder_.eof())
                return true;
            this.cityId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        DarklandBossEnterRespBody.prototype.to_bytes = function (encoder) { return false; };
        return DarklandBossEnterRespBody;
    }());
    message.DarklandBossEnterRespBody = DarklandBossEnterRespBody;
    __reflect(DarklandBossEnterRespBody.prototype, "message.DarklandBossEnterRespBody", ["aone.AoneBody"]);
    var DarklandBossEnterResponse = (function () {
        function DarklandBossEnterResponse() {
            this.header = new aone.AoneRespHeader(DarklandBossEnterResponse.ID);
            this.body = new DarklandBossEnterRespBody();
        }
        DarklandBossEnterResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        DarklandBossEnterResponse.prototype.to_bytes = function (encoder) { return false; };
        DarklandBossEnterResponse.ID = 40051;
        return DarklandBossEnterResponse;
    }());
    message.DarklandBossEnterResponse = DarklandBossEnterResponse;
    __reflect(DarklandBossEnterResponse.prototype, "message.DarklandBossEnterResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 离开场景请求
    // request DarklandBossLeave
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossLeaveReqBody = (function () {
        function DarklandBossLeaveReqBody() {
        }
        DarklandBossLeaveReqBody.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossLeaveReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DarklandBossLeaveReqBody;
    }());
    message.DarklandBossLeaveReqBody = DarklandBossLeaveReqBody;
    __reflect(DarklandBossLeaveReqBody.prototype, "message.DarklandBossLeaveReqBody", ["aone.AoneBody"]);
    var DarklandBossLeaveRequest = (function () {
        function DarklandBossLeaveRequest() {
            this.header = new aone.AoneReqHeader(DarklandBossLeaveRequest.ID);
            this.body = new DarklandBossLeaveReqBody();
        }
        DarklandBossLeaveRequest.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossLeaveRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        DarklandBossLeaveRequest.ID = 40052;
        return DarklandBossLeaveRequest;
    }());
    message.DarklandBossLeaveRequest = DarklandBossLeaveRequest;
    __reflect(DarklandBossLeaveRequest.prototype, "message.DarklandBossLeaveRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 离开场景回复
    // response DarklandBossLeave
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossLeaveRespBody = (function () {
        function DarklandBossLeaveRespBody() {
        }
        DarklandBossLeaveRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        DarklandBossLeaveRespBody.prototype.to_bytes = function (encoder) { return false; };
        return DarklandBossLeaveRespBody;
    }());
    message.DarklandBossLeaveRespBody = DarklandBossLeaveRespBody;
    __reflect(DarklandBossLeaveRespBody.prototype, "message.DarklandBossLeaveRespBody", ["aone.AoneBody"]);
    var DarklandBossLeaveResponse = (function () {
        function DarklandBossLeaveResponse() {
            this.header = new aone.AoneRespHeader(DarklandBossLeaveResponse.ID);
            this.body = new DarklandBossLeaveRespBody();
        }
        DarklandBossLeaveResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        DarklandBossLeaveResponse.prototype.to_bytes = function (encoder) { return false; };
        DarklandBossLeaveResponse.ID = 40053;
        return DarklandBossLeaveResponse;
    }());
    message.DarklandBossLeaveResponse = DarklandBossLeaveResponse;
    __reflect(DarklandBossLeaveResponse.prototype, "message.DarklandBossLeaveResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景中移动请求
    // request DarklandBossMove
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossMoveReqBody = (function () {
        function DarklandBossMoveReqBody() {
            this.scene_x = 0; // 场景坐标
            this.scene_y = 0; // 场景坐标
        }
        DarklandBossMoveReqBody.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossMoveReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // scene_x
            encoder.write_fixuint32(this.scene_x);
            // scene_y
            encoder.write_fixuint32(this.scene_y);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DarklandBossMoveReqBody;
    }());
    message.DarklandBossMoveReqBody = DarklandBossMoveReqBody;
    __reflect(DarklandBossMoveReqBody.prototype, "message.DarklandBossMoveReqBody", ["aone.AoneBody"]);
    var DarklandBossMoveRequest = (function () {
        function DarklandBossMoveRequest() {
            this.header = new aone.AoneReqHeader(DarklandBossMoveRequest.ID);
            this.body = new DarklandBossMoveReqBody();
        }
        DarklandBossMoveRequest.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossMoveRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        DarklandBossMoveRequest.ID = 40054;
        return DarklandBossMoveRequest;
    }());
    message.DarklandBossMoveRequest = DarklandBossMoveRequest;
    __reflect(DarklandBossMoveRequest.prototype, "message.DarklandBossMoveRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景中移动回复
    // response DarklandBossMove
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossMoveRespBody = (function () {
        function DarklandBossMoveRespBody() {
            this.roleInfo = []; // 角色基本信息
        }
        DarklandBossMoveRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            var roleInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roleInfo_count; i++) {
                this.roleInfo.push(new message.DarklandRoleInfo());
                if (!this.roleInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        DarklandBossMoveRespBody.prototype.to_bytes = function (encoder) { return false; };
        return DarklandBossMoveRespBody;
    }());
    message.DarklandBossMoveRespBody = DarklandBossMoveRespBody;
    __reflect(DarklandBossMoveRespBody.prototype, "message.DarklandBossMoveRespBody", ["aone.AoneBody"]);
    var DarklandBossMoveResponse = (function () {
        function DarklandBossMoveResponse() {
            this.header = new aone.AoneRespHeader(DarklandBossMoveResponse.ID);
            this.body = new DarklandBossMoveRespBody();
        }
        DarklandBossMoveResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        DarklandBossMoveResponse.prototype.to_bytes = function (encoder) { return false; };
        DarklandBossMoveResponse.ID = 40055;
        return DarklandBossMoveResponse;
    }());
    message.DarklandBossMoveResponse = DarklandBossMoveResponse;
    __reflect(DarklandBossMoveResponse.prototype, "message.DarklandBossMoveResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动boss激励请求
    // request DarklandBossInspire
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossInspireReqBody = (function () {
        function DarklandBossInspireReqBody() {
            this.inspireType = 0; // 1为普通激励2为高级激励
        }
        DarklandBossInspireReqBody.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossInspireReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // inspireType
            encoder.write_fixuint32(this.inspireType);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DarklandBossInspireReqBody;
    }());
    message.DarklandBossInspireReqBody = DarklandBossInspireReqBody;
    __reflect(DarklandBossInspireReqBody.prototype, "message.DarklandBossInspireReqBody", ["aone.AoneBody"]);
    var DarklandBossInspireRequest = (function () {
        function DarklandBossInspireRequest() {
            this.header = new aone.AoneReqHeader(DarklandBossInspireRequest.ID);
            this.body = new DarklandBossInspireReqBody();
        }
        DarklandBossInspireRequest.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossInspireRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        DarklandBossInspireRequest.ID = 40056;
        return DarklandBossInspireRequest;
    }());
    message.DarklandBossInspireRequest = DarklandBossInspireRequest;
    __reflect(DarklandBossInspireRequest.prototype, "message.DarklandBossInspireRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 活动boss激励回复
    // response DarklandBossInspire
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossInspireRespBody = (function () {
        function DarklandBossInspireRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        DarklandBossInspireRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        DarklandBossInspireRespBody.prototype.to_bytes = function (encoder) { return false; };
        return DarklandBossInspireRespBody;
    }());
    message.DarklandBossInspireRespBody = DarklandBossInspireRespBody;
    __reflect(DarklandBossInspireRespBody.prototype, "message.DarklandBossInspireRespBody", ["aone.AoneBody"]);
    var DarklandBossInspireResponse = (function () {
        function DarklandBossInspireResponse() {
            this.header = new aone.AoneRespHeader(DarklandBossInspireResponse.ID);
            this.body = new DarklandBossInspireRespBody();
        }
        DarklandBossInspireResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        DarklandBossInspireResponse.prototype.to_bytes = function (encoder) { return false; };
        DarklandBossInspireResponse.ID = 40057;
        return DarklandBossInspireResponse;
    }());
    message.DarklandBossInspireResponse = DarklandBossInspireResponse;
    __reflect(DarklandBossInspireResponse.prototype, "message.DarklandBossInspireResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战boss结果请求
    // request DarklandBossBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossBattleResultReqBody = (function () {
        function DarklandBossBattleResultReqBody() {
            this.mobId = 0;
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
            this.totalDamage = 0; // 此次战斗总伤害
            this.score = 0; // 此次换算的积分
        }
        DarklandBossBattleResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossBattleResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mobId
            encoder.write_fixuint32(this.mobId);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            // totalDamage
            encoder.write_float64(this.totalDamage);
            // score
            encoder.write_fixuint32(this.score);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DarklandBossBattleResultReqBody;
    }());
    message.DarklandBossBattleResultReqBody = DarklandBossBattleResultReqBody;
    __reflect(DarklandBossBattleResultReqBody.prototype, "message.DarklandBossBattleResultReqBody", ["aone.AoneBody"]);
    var DarklandBossBattleResultRequest = (function () {
        function DarklandBossBattleResultRequest() {
            this.header = new aone.AoneReqHeader(DarklandBossBattleResultRequest.ID);
            this.body = new DarklandBossBattleResultReqBody();
        }
        DarklandBossBattleResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossBattleResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        DarklandBossBattleResultRequest.ID = 40058;
        return DarklandBossBattleResultRequest;
    }());
    message.DarklandBossBattleResultRequest = DarklandBossBattleResultRequest;
    __reflect(DarklandBossBattleResultRequest.prototype, "message.DarklandBossBattleResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战boss结果回复
    // response DarklandBossBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossBattleResultRespBody = (function () {
        function DarklandBossBattleResultRespBody() {
            this.battle_id = ""; // 战报Id
            this.new_score = 0; // 计算加成后的最终积分
            this.gameInfo = new message.GameInfo();
        }
        DarklandBossBattleResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // new_score
            if (decoder_.eof())
                return true;
            this.new_score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        DarklandBossBattleResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return DarklandBossBattleResultRespBody;
    }());
    message.DarklandBossBattleResultRespBody = DarklandBossBattleResultRespBody;
    __reflect(DarklandBossBattleResultRespBody.prototype, "message.DarklandBossBattleResultRespBody", ["aone.AoneBody"]);
    var DarklandBossBattleResultResponse = (function () {
        function DarklandBossBattleResultResponse() {
            this.header = new aone.AoneRespHeader(DarklandBossBattleResultResponse.ID);
            this.body = new DarklandBossBattleResultRespBody();
        }
        DarklandBossBattleResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        DarklandBossBattleResultResponse.prototype.to_bytes = function (encoder) { return false; };
        DarklandBossBattleResultResponse.ID = 40059;
        return DarklandBossBattleResultResponse;
    }());
    message.DarklandBossBattleResultResponse = DarklandBossBattleResultResponse;
    __reflect(DarklandBossBattleResultResponse.prototype, "message.DarklandBossBattleResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取boss积分排行请求
    // request DarklandBossScoreRank
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossScoreRankReqBody = (function () {
        function DarklandBossScoreRankReqBody() {
        }
        DarklandBossScoreRankReqBody.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossScoreRankReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DarklandBossScoreRankReqBody;
    }());
    message.DarklandBossScoreRankReqBody = DarklandBossScoreRankReqBody;
    __reflect(DarklandBossScoreRankReqBody.prototype, "message.DarklandBossScoreRankReqBody", ["aone.AoneBody"]);
    var DarklandBossScoreRankRequest = (function () {
        function DarklandBossScoreRankRequest() {
            this.header = new aone.AoneReqHeader(DarklandBossScoreRankRequest.ID);
            this.body = new DarklandBossScoreRankReqBody();
        }
        DarklandBossScoreRankRequest.prototype.parse_bytes = function (decoder) { return false; };
        DarklandBossScoreRankRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        DarklandBossScoreRankRequest.ID = 40060;
        return DarklandBossScoreRankRequest;
    }());
    message.DarklandBossScoreRankRequest = DarklandBossScoreRankRequest;
    __reflect(DarklandBossScoreRankRequest.prototype, "message.DarklandBossScoreRankRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取boss积分排行回复
    // response DarklandBossScoreRank
    ////////////////////////////////////////////////////////////////////////////////
    var DarklandBossScoreRankRespBody = (function () {
        function DarklandBossScoreRankRespBody() {
            this.ranks = [];
            this.self_rank = new message.DarklandRankInfo();
        }
        DarklandBossScoreRankRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // ranks
            if (decoder_.eof())
                return true;
            var ranks_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < ranks_count; i++) {
                this.ranks.push(new message.DarklandRankInfo());
                if (!this.ranks[i].parse_bytes(decoder_))
                    return false;
            }
            // self_rank
            if (decoder_.eof())
                return true;
            if (!this.self_rank.parse_bytes(decoder_))
                return false;
            return true;
        };
        DarklandBossScoreRankRespBody.prototype.to_bytes = function (encoder) { return false; };
        return DarklandBossScoreRankRespBody;
    }());
    message.DarklandBossScoreRankRespBody = DarklandBossScoreRankRespBody;
    __reflect(DarklandBossScoreRankRespBody.prototype, "message.DarklandBossScoreRankRespBody", ["aone.AoneBody"]);
    var DarklandBossScoreRankResponse = (function () {
        function DarklandBossScoreRankResponse() {
            this.header = new aone.AoneRespHeader(DarklandBossScoreRankResponse.ID);
            this.body = new DarklandBossScoreRankRespBody();
        }
        DarklandBossScoreRankResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        DarklandBossScoreRankResponse.prototype.to_bytes = function (encoder) { return false; };
        DarklandBossScoreRankResponse.ID = 40061;
        return DarklandBossScoreRankResponse;
    }());
    message.DarklandBossScoreRankResponse = DarklandBossScoreRankResponse;
    __reflect(DarklandBossScoreRankResponse.prototype, "message.DarklandBossScoreRankResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(SceneTribeInfoRequest.ID, function () { return new SceneTribeInfoRequest(); });
    aone.MessageFactory.getInstance().register(SceneTribeInfoResponse.ID, function () { return new SceneTribeInfoResponse(); });
    aone.MessageFactory.getInstance().register(SceneChooseTribeRequest.ID, function () { return new SceneChooseTribeRequest(); });
    aone.MessageFactory.getInstance().register(SceneChooseTribeResponse.ID, function () { return new SceneChooseTribeResponse(); });
    aone.MessageFactory.getInstance().register(SceneEnterRequest.ID, function () { return new SceneEnterRequest(); });
    aone.MessageFactory.getInstance().register(SceneEnterResponse.ID, function () { return new SceneEnterResponse(); });
    aone.MessageFactory.getInstance().register(SceneLeaveRequest.ID, function () { return new SceneLeaveRequest(); });
    aone.MessageFactory.getInstance().register(SceneLeaveResponse.ID, function () { return new SceneLeaveResponse(); });
    aone.MessageFactory.getInstance().register(SceneMoveRequest.ID, function () { return new SceneMoveRequest(); });
    aone.MessageFactory.getInstance().register(SceneMoveResponse.ID, function () { return new SceneMoveResponse(); });
    aone.MessageFactory.getInstance().register(SceneDeadCoolingRequest.ID, function () { return new SceneDeadCoolingRequest(); });
    aone.MessageFactory.getInstance().register(SceneDeadCoolingResponse.ID, function () { return new SceneDeadCoolingResponse(); });
    aone.MessageFactory.getInstance().register(SceneFasterRequest.ID, function () { return new SceneFasterRequest(); });
    aone.MessageFactory.getInstance().register(SceneFasterResponse.ID, function () { return new SceneFasterResponse(); });
    aone.MessageFactory.getInstance().register(SceneAddBloodRequest.ID, function () { return new SceneAddBloodRequest(); });
    aone.MessageFactory.getInstance().register(SceneAddBloodResponse.ID, function () { return new SceneAddBloodResponse(); });
    aone.MessageFactory.getInstance().register(SceneCollectionRequest.ID, function () { return new SceneCollectionRequest(); });
    aone.MessageFactory.getInstance().register(SceneCollectionResponse.ID, function () { return new SceneCollectionResponse(); });
    aone.MessageFactory.getInstance().register(SceneCollideRequest.ID, function () { return new SceneCollideRequest(); });
    aone.MessageFactory.getInstance().register(SceneCollideResponse.ID, function () { return new SceneCollideResponse(); });
    aone.MessageFactory.getInstance().register(SceneGetBranchInfoRequest.ID, function () { return new SceneGetBranchInfoRequest(); });
    aone.MessageFactory.getInstance().register(SceneGetBranchInfoResponse.ID, function () { return new SceneGetBranchInfoResponse(); });
    aone.MessageFactory.getInstance().register(SceneChangeBranchInfoRequest.ID, function () { return new SceneChangeBranchInfoRequest(); });
    aone.MessageFactory.getInstance().register(SceneChangeBranchInfoResponse.ID, function () { return new SceneChangeBranchInfoResponse(); });
    aone.MessageFactory.getInstance().register(SceneClearEvilRequest.ID, function () { return new SceneClearEvilRequest(); });
    aone.MessageFactory.getInstance().register(SceneClearEvilResponse.ID, function () { return new SceneClearEvilResponse(); });
    aone.MessageFactory.getInstance().register(SceneQueryScoreRankRequest.ID, function () { return new SceneQueryScoreRankRequest(); });
    aone.MessageFactory.getInstance().register(SceneQueryScoreRankResponse.ID, function () { return new SceneQueryScoreRankResponse(); });
    aone.MessageFactory.getInstance().register(DarklandBossEnterRequest.ID, function () { return new DarklandBossEnterRequest(); });
    aone.MessageFactory.getInstance().register(DarklandBossEnterResponse.ID, function () { return new DarklandBossEnterResponse(); });
    aone.MessageFactory.getInstance().register(DarklandBossLeaveRequest.ID, function () { return new DarklandBossLeaveRequest(); });
    aone.MessageFactory.getInstance().register(DarklandBossLeaveResponse.ID, function () { return new DarklandBossLeaveResponse(); });
    aone.MessageFactory.getInstance().register(DarklandBossMoveRequest.ID, function () { return new DarklandBossMoveRequest(); });
    aone.MessageFactory.getInstance().register(DarklandBossMoveResponse.ID, function () { return new DarklandBossMoveResponse(); });
    aone.MessageFactory.getInstance().register(DarklandBossInspireRequest.ID, function () { return new DarklandBossInspireRequest(); });
    aone.MessageFactory.getInstance().register(DarklandBossInspireResponse.ID, function () { return new DarklandBossInspireResponse(); });
    aone.MessageFactory.getInstance().register(DarklandBossBattleResultRequest.ID, function () { return new DarklandBossBattleResultRequest(); });
    aone.MessageFactory.getInstance().register(DarklandBossBattleResultResponse.ID, function () { return new DarklandBossBattleResultResponse(); });
    aone.MessageFactory.getInstance().register(DarklandBossScoreRankRequest.ID, function () { return new DarklandBossScoreRankRequest(); });
    aone.MessageFactory.getInstance().register(DarklandBossScoreRankResponse.ID, function () { return new DarklandBossScoreRankResponse(); });
})(message || (message = {}));
//Date: 2019-7
//File: msg_cg_general.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 武将通过道具升级请求
    // request GeneralExpProp
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralExpPropReqBody = (function () {
        function GeneralExpPropReqBody() {
            this.generalId = 0; // 武将Id
            this.goods = [];
        }
        GeneralExpPropReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralExpPropReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // goods
            encoder.write_fixuint32(Object.keys(this.goods).length);
            for (var k in this.goods) {
                if (!this.goods[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralExpPropReqBody;
    }());
    message.GeneralExpPropReqBody = GeneralExpPropReqBody;
    __reflect(GeneralExpPropReqBody.prototype, "message.GeneralExpPropReqBody", ["aone.AoneBody"]);
    var GeneralExpPropRequest = (function () {
        function GeneralExpPropRequest() {
            this.header = new aone.AoneReqHeader(GeneralExpPropRequest.ID);
            this.body = new GeneralExpPropReqBody();
        }
        GeneralExpPropRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralExpPropRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralExpPropRequest.ID = 19000;
        return GeneralExpPropRequest;
    }());
    message.GeneralExpPropRequest = GeneralExpPropRequest;
    __reflect(GeneralExpPropRequest.prototype, "message.GeneralExpPropRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将通过道具升级回复
    // response GeneralExpProp
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralExpPropRespBody = (function () {
        function GeneralExpPropRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralExpPropRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralExpPropRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralExpPropRespBody;
    }());
    message.GeneralExpPropRespBody = GeneralExpPropRespBody;
    __reflect(GeneralExpPropRespBody.prototype, "message.GeneralExpPropRespBody", ["aone.AoneBody"]);
    var GeneralExpPropResponse = (function () {
        function GeneralExpPropResponse() {
            this.header = new aone.AoneRespHeader(GeneralExpPropResponse.ID);
            this.body = new GeneralExpPropRespBody();
        }
        GeneralExpPropResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralExpPropResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralExpPropResponse.ID = 19001;
        return GeneralExpPropResponse;
    }());
    message.GeneralExpPropResponse = GeneralExpPropResponse;
    __reflect(GeneralExpPropResponse.prototype, "message.GeneralExpPropResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 招募武将请求
    // request GeneralRecruit
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralRecruitReqBody = (function () {
        function GeneralRecruitReqBody() {
            this.generalId = 0; // 武将id
        }
        GeneralRecruitReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralRecruitReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralRecruitReqBody;
    }());
    message.GeneralRecruitReqBody = GeneralRecruitReqBody;
    __reflect(GeneralRecruitReqBody.prototype, "message.GeneralRecruitReqBody", ["aone.AoneBody"]);
    var GeneralRecruitRequest = (function () {
        function GeneralRecruitRequest() {
            this.header = new aone.AoneReqHeader(GeneralRecruitRequest.ID);
            this.body = new GeneralRecruitReqBody();
        }
        GeneralRecruitRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralRecruitRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralRecruitRequest.ID = 19002;
        return GeneralRecruitRequest;
    }());
    message.GeneralRecruitRequest = GeneralRecruitRequest;
    __reflect(GeneralRecruitRequest.prototype, "message.GeneralRecruitRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 招募武将回复
    // response GeneralRecruit
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralRecruitRespBody = (function () {
        function GeneralRecruitRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralRecruitRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralRecruitRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralRecruitRespBody;
    }());
    message.GeneralRecruitRespBody = GeneralRecruitRespBody;
    __reflect(GeneralRecruitRespBody.prototype, "message.GeneralRecruitRespBody", ["aone.AoneBody"]);
    var GeneralRecruitResponse = (function () {
        function GeneralRecruitResponse() {
            this.header = new aone.AoneRespHeader(GeneralRecruitResponse.ID);
            this.body = new GeneralRecruitRespBody();
        }
        GeneralRecruitResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralRecruitResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralRecruitResponse.ID = 19003;
        return GeneralRecruitResponse;
    }());
    message.GeneralRecruitResponse = GeneralRecruitResponse;
    __reflect(GeneralRecruitResponse.prototype, "message.GeneralRecruitResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 出售武将请求
    // request GeneralSell
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralSellReqBody = (function () {
        function GeneralSellReqBody() {
            this.general_ids = [];
        }
        GeneralSellReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralSellReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // general_ids
            encoder.write_uint32_vector(this.general_ids);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralSellReqBody;
    }());
    message.GeneralSellReqBody = GeneralSellReqBody;
    __reflect(GeneralSellReqBody.prototype, "message.GeneralSellReqBody", ["aone.AoneBody"]);
    var GeneralSellRequest = (function () {
        function GeneralSellRequest() {
            this.header = new aone.AoneReqHeader(GeneralSellRequest.ID);
            this.body = new GeneralSellReqBody();
        }
        GeneralSellRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralSellRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralSellRequest.ID = 19004;
        return GeneralSellRequest;
    }());
    message.GeneralSellRequest = GeneralSellRequest;
    __reflect(GeneralSellRequest.prototype, "message.GeneralSellRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 出售武将回复
    // response GeneralSell
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralSellRespBody = (function () {
        function GeneralSellRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralSellRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralSellRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralSellRespBody;
    }());
    message.GeneralSellRespBody = GeneralSellRespBody;
    __reflect(GeneralSellRespBody.prototype, "message.GeneralSellRespBody", ["aone.AoneBody"]);
    var GeneralSellResponse = (function () {
        function GeneralSellResponse() {
            this.header = new aone.AoneRespHeader(GeneralSellResponse.ID);
            this.body = new GeneralSellRespBody();
        }
        GeneralSellResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralSellResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralSellResponse.ID = 19005;
        return GeneralSellResponse;
    }());
    message.GeneralSellResponse = GeneralSellResponse;
    __reflect(GeneralSellResponse.prototype, "message.GeneralSellResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 猎人存放仓库请求
    // request GeneralWareHouse
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralWareHouseReqBody = (function () {
        function GeneralWareHouseReqBody() {
            this.is_ware = false; // true存入仓库
            this.general_ids = [];
        }
        GeneralWareHouseReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralWareHouseReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_ware
            encoder.write_bool(this.is_ware);
            // general_ids
            encoder.write_uint32_vector(this.general_ids);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralWareHouseReqBody;
    }());
    message.GeneralWareHouseReqBody = GeneralWareHouseReqBody;
    __reflect(GeneralWareHouseReqBody.prototype, "message.GeneralWareHouseReqBody", ["aone.AoneBody"]);
    var GeneralWareHouseRequest = (function () {
        function GeneralWareHouseRequest() {
            this.header = new aone.AoneReqHeader(GeneralWareHouseRequest.ID);
            this.body = new GeneralWareHouseReqBody();
        }
        GeneralWareHouseRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralWareHouseRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralWareHouseRequest.ID = 19006;
        return GeneralWareHouseRequest;
    }());
    message.GeneralWareHouseRequest = GeneralWareHouseRequest;
    __reflect(GeneralWareHouseRequest.prototype, "message.GeneralWareHouseRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 猎人存放仓库回复
    // response GeneralWareHouse
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralWareHouseRespBody = (function () {
        function GeneralWareHouseRespBody() {
        }
        GeneralWareHouseRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        GeneralWareHouseRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralWareHouseRespBody;
    }());
    message.GeneralWareHouseRespBody = GeneralWareHouseRespBody;
    __reflect(GeneralWareHouseRespBody.prototype, "message.GeneralWareHouseRespBody", ["aone.AoneBody"]);
    var GeneralWareHouseResponse = (function () {
        function GeneralWareHouseResponse() {
            this.header = new aone.AoneRespHeader(GeneralWareHouseResponse.ID);
            this.body = new GeneralWareHouseRespBody();
        }
        GeneralWareHouseResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralWareHouseResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralWareHouseResponse.ID = 19007;
        return GeneralWareHouseResponse;
    }());
    message.GeneralWareHouseResponse = GeneralWareHouseResponse;
    __reflect(GeneralWareHouseResponse.prototype, "message.GeneralWareHouseResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 猎人合成请求
    // request GeneralCompose
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralComposeReqBody = (function () {
        function GeneralComposeReqBody() {
            this.compose_index = 0; //合成索引
            this.general_ids = [];
        }
        GeneralComposeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralComposeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // compose_index
            encoder.write_fixuint32(this.compose_index);
            // general_ids
            encoder.write_uint32_vector(this.general_ids);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralComposeReqBody;
    }());
    message.GeneralComposeReqBody = GeneralComposeReqBody;
    __reflect(GeneralComposeReqBody.prototype, "message.GeneralComposeReqBody", ["aone.AoneBody"]);
    var GeneralComposeRequest = (function () {
        function GeneralComposeRequest() {
            this.header = new aone.AoneReqHeader(GeneralComposeRequest.ID);
            this.body = new GeneralComposeReqBody();
        }
        GeneralComposeRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralComposeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralComposeRequest.ID = 19008;
        return GeneralComposeRequest;
    }());
    message.GeneralComposeRequest = GeneralComposeRequest;
    __reflect(GeneralComposeRequest.prototype, "message.GeneralComposeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 猎人合成回复
    // response GeneralCompose
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralComposeRespBody = (function () {
        function GeneralComposeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralComposeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralComposeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralComposeRespBody;
    }());
    message.GeneralComposeRespBody = GeneralComposeRespBody;
    __reflect(GeneralComposeRespBody.prototype, "message.GeneralComposeRespBody", ["aone.AoneBody"]);
    var GeneralComposeResponse = (function () {
        function GeneralComposeResponse() {
            this.header = new aone.AoneRespHeader(GeneralComposeResponse.ID);
            this.body = new GeneralComposeRespBody();
        }
        GeneralComposeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralComposeResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralComposeResponse.ID = 19009;
        return GeneralComposeResponse;
    }());
    message.GeneralComposeResponse = GeneralComposeResponse;
    __reflect(GeneralComposeResponse.prototype, "message.GeneralComposeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将升星请求
    // request GeneralUpStar
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUpStarReqBody = (function () {
        function GeneralUpStarReqBody() {
            this.generalId = 0;
            this.itemId = [];
        }
        GeneralUpStarReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUpStarReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // itemId
            encoder.write_uint32_vector(this.itemId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralUpStarReqBody;
    }());
    message.GeneralUpStarReqBody = GeneralUpStarReqBody;
    __reflect(GeneralUpStarReqBody.prototype, "message.GeneralUpStarReqBody", ["aone.AoneBody"]);
    var GeneralUpStarRequest = (function () {
        function GeneralUpStarRequest() {
            this.header = new aone.AoneReqHeader(GeneralUpStarRequest.ID);
            this.body = new GeneralUpStarReqBody();
        }
        GeneralUpStarRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUpStarRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralUpStarRequest.ID = 19010;
        return GeneralUpStarRequest;
    }());
    message.GeneralUpStarRequest = GeneralUpStarRequest;
    __reflect(GeneralUpStarRequest.prototype, "message.GeneralUpStarRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将升星回复
    // response GeneralUpStar
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUpStarRespBody = (function () {
        function GeneralUpStarRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralUpStarRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralUpStarRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralUpStarRespBody;
    }());
    message.GeneralUpStarRespBody = GeneralUpStarRespBody;
    __reflect(GeneralUpStarRespBody.prototype, "message.GeneralUpStarRespBody", ["aone.AoneBody"]);
    var GeneralUpStarResponse = (function () {
        function GeneralUpStarResponse() {
            this.header = new aone.AoneRespHeader(GeneralUpStarResponse.ID);
            this.body = new GeneralUpStarRespBody();
        }
        GeneralUpStarResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralUpStarResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralUpStarResponse.ID = 19011;
        return GeneralUpStarResponse;
    }());
    message.GeneralUpStarResponse = GeneralUpStarResponse;
    __reflect(GeneralUpStarResponse.prototype, "message.GeneralUpStarResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将进阶请求
    // request GeneralUpQuality
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUpQualityReqBody = (function () {
        function GeneralUpQualityReqBody() {
            this.generalId = 0;
        }
        GeneralUpQualityReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUpQualityReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralUpQualityReqBody;
    }());
    message.GeneralUpQualityReqBody = GeneralUpQualityReqBody;
    __reflect(GeneralUpQualityReqBody.prototype, "message.GeneralUpQualityReqBody", ["aone.AoneBody"]);
    var GeneralUpQualityRequest = (function () {
        function GeneralUpQualityRequest() {
            this.header = new aone.AoneReqHeader(GeneralUpQualityRequest.ID);
            this.body = new GeneralUpQualityReqBody();
        }
        GeneralUpQualityRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUpQualityRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralUpQualityRequest.ID = 19012;
        return GeneralUpQualityRequest;
    }());
    message.GeneralUpQualityRequest = GeneralUpQualityRequest;
    __reflect(GeneralUpQualityRequest.prototype, "message.GeneralUpQualityRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将进阶回复
    // response GeneralUpQuality
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUpQualityRespBody = (function () {
        function GeneralUpQualityRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralUpQualityRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralUpQualityRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralUpQualityRespBody;
    }());
    message.GeneralUpQualityRespBody = GeneralUpQualityRespBody;
    __reflect(GeneralUpQualityRespBody.prototype, "message.GeneralUpQualityRespBody", ["aone.AoneBody"]);
    var GeneralUpQualityResponse = (function () {
        function GeneralUpQualityResponse() {
            this.header = new aone.AoneRespHeader(GeneralUpQualityResponse.ID);
            this.body = new GeneralUpQualityRespBody();
        }
        GeneralUpQualityResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralUpQualityResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralUpQualityResponse.ID = 19013;
        return GeneralUpQualityResponse;
    }());
    message.GeneralUpQualityResponse = GeneralUpQualityResponse;
    __reflect(GeneralUpQualityResponse.prototype, "message.GeneralUpQualityResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将突破请求
    // request GeneralBreak
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralBreakReqBody = (function () {
        function GeneralBreakReqBody() {
            this.generalId = 0;
            this.exchange_ids = [];
        }
        GeneralBreakReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralBreakReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // exchange_ids
            encoder.write_uint32_vector(this.exchange_ids);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralBreakReqBody;
    }());
    message.GeneralBreakReqBody = GeneralBreakReqBody;
    __reflect(GeneralBreakReqBody.prototype, "message.GeneralBreakReqBody", ["aone.AoneBody"]);
    var GeneralBreakRequest = (function () {
        function GeneralBreakRequest() {
            this.header = new aone.AoneReqHeader(GeneralBreakRequest.ID);
            this.body = new GeneralBreakReqBody();
        }
        GeneralBreakRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralBreakRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralBreakRequest.ID = 19014;
        return GeneralBreakRequest;
    }());
    message.GeneralBreakRequest = GeneralBreakRequest;
    __reflect(GeneralBreakRequest.prototype, "message.GeneralBreakRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将突破回复
    // response GeneralBreak
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralBreakRespBody = (function () {
        function GeneralBreakRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralBreakRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralBreakRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralBreakRespBody;
    }());
    message.GeneralBreakRespBody = GeneralBreakRespBody;
    __reflect(GeneralBreakRespBody.prototype, "message.GeneralBreakRespBody", ["aone.AoneBody"]);
    var GeneralBreakResponse = (function () {
        function GeneralBreakResponse() {
            this.header = new aone.AoneRespHeader(GeneralBreakResponse.ID);
            this.body = new GeneralBreakRespBody();
        }
        GeneralBreakResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralBreakResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralBreakResponse.ID = 19015;
        return GeneralBreakResponse;
    }());
    message.GeneralBreakResponse = GeneralBreakResponse;
    __reflect(GeneralBreakResponse.prototype, "message.GeneralBreakResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 使用突破技请求
    // request UseBreakSkill
    ////////////////////////////////////////////////////////////////////////////////
    var UseBreakSkillReqBody = (function () {
        function UseBreakSkillReqBody() {
            this.generalId = 0;
            this.skillId = 0;
            this.index = 0; // 解锁该突破技对应的突破等级
        }
        UseBreakSkillReqBody.prototype.parse_bytes = function (decoder) { return false; };
        UseBreakSkillReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // skillId
            encoder.write_fixuint32(this.skillId);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return UseBreakSkillReqBody;
    }());
    message.UseBreakSkillReqBody = UseBreakSkillReqBody;
    __reflect(UseBreakSkillReqBody.prototype, "message.UseBreakSkillReqBody", ["aone.AoneBody"]);
    var UseBreakSkillRequest = (function () {
        function UseBreakSkillRequest() {
            this.header = new aone.AoneReqHeader(UseBreakSkillRequest.ID);
            this.body = new UseBreakSkillReqBody();
        }
        UseBreakSkillRequest.prototype.parse_bytes = function (decoder) { return false; };
        UseBreakSkillRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        UseBreakSkillRequest.ID = 19016;
        return UseBreakSkillRequest;
    }());
    message.UseBreakSkillRequest = UseBreakSkillRequest;
    __reflect(UseBreakSkillRequest.prototype, "message.UseBreakSkillRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 使用突破技回复
    // response UseBreakSkill
    ////////////////////////////////////////////////////////////////////////////////
    var UseBreakSkillRespBody = (function () {
        function UseBreakSkillRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        UseBreakSkillRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        UseBreakSkillRespBody.prototype.to_bytes = function (encoder) { return false; };
        return UseBreakSkillRespBody;
    }());
    message.UseBreakSkillRespBody = UseBreakSkillRespBody;
    __reflect(UseBreakSkillRespBody.prototype, "message.UseBreakSkillRespBody", ["aone.AoneBody"]);
    var UseBreakSkillResponse = (function () {
        function UseBreakSkillResponse() {
            this.header = new aone.AoneRespHeader(UseBreakSkillResponse.ID);
            this.body = new UseBreakSkillRespBody();
        }
        UseBreakSkillResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UseBreakSkillResponse.prototype.to_bytes = function (encoder) { return false; };
        UseBreakSkillResponse.ID = 19017;
        return UseBreakSkillResponse;
    }());
    message.UseBreakSkillResponse = UseBreakSkillResponse;
    __reflect(UseBreakSkillResponse.prototype, "message.UseBreakSkillResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 突破技升级请求
    // request BreakSkillUplevel
    ////////////////////////////////////////////////////////////////////////////////
    var BreakSkillUplevelReqBody = (function () {
        function BreakSkillUplevelReqBody() {
            this.generalId = 0;
            this.skillId = 0;
            this.index = 0; // 解锁该突破技对应的突破等级
            this.consume_generalIds = [];
        }
        BreakSkillUplevelReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BreakSkillUplevelReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // skillId
            encoder.write_fixuint32(this.skillId);
            // index
            encoder.write_fixuint32(this.index);
            // consume_generalIds
            encoder.write_uint32_vector(this.consume_generalIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BreakSkillUplevelReqBody;
    }());
    message.BreakSkillUplevelReqBody = BreakSkillUplevelReqBody;
    __reflect(BreakSkillUplevelReqBody.prototype, "message.BreakSkillUplevelReqBody", ["aone.AoneBody"]);
    var BreakSkillUplevelRequest = (function () {
        function BreakSkillUplevelRequest() {
            this.header = new aone.AoneReqHeader(BreakSkillUplevelRequest.ID);
            this.body = new BreakSkillUplevelReqBody();
        }
        BreakSkillUplevelRequest.prototype.parse_bytes = function (decoder) { return false; };
        BreakSkillUplevelRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BreakSkillUplevelRequest.ID = 19018;
        return BreakSkillUplevelRequest;
    }());
    message.BreakSkillUplevelRequest = BreakSkillUplevelRequest;
    __reflect(BreakSkillUplevelRequest.prototype, "message.BreakSkillUplevelRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 突破技升级回复
    // response BreakSkillUplevel
    ////////////////////////////////////////////////////////////////////////////////
    var BreakSkillUplevelRespBody = (function () {
        function BreakSkillUplevelRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BreakSkillUplevelRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BreakSkillUplevelRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BreakSkillUplevelRespBody;
    }());
    message.BreakSkillUplevelRespBody = BreakSkillUplevelRespBody;
    __reflect(BreakSkillUplevelRespBody.prototype, "message.BreakSkillUplevelRespBody", ["aone.AoneBody"]);
    var BreakSkillUplevelResponse = (function () {
        function BreakSkillUplevelResponse() {
            this.header = new aone.AoneRespHeader(BreakSkillUplevelResponse.ID);
            this.body = new BreakSkillUplevelRespBody();
        }
        BreakSkillUplevelResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BreakSkillUplevelResponse.prototype.to_bytes = function (encoder) { return false; };
        BreakSkillUplevelResponse.ID = 19019;
        return BreakSkillUplevelResponse;
    }());
    message.BreakSkillUplevelResponse = BreakSkillUplevelResponse;
    __reflect(BreakSkillUplevelResponse.prototype, "message.BreakSkillUplevelResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将羁绊卡合成请求
    // request PartnerCompose
    ////////////////////////////////////////////////////////////////////////////////
    var PartnerComposeReqBody = (function () {
        function PartnerComposeReqBody() {
            this.partnerId = 0;
        }
        PartnerComposeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PartnerComposeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // partnerId
            encoder.write_fixuint32(this.partnerId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PartnerComposeReqBody;
    }());
    message.PartnerComposeReqBody = PartnerComposeReqBody;
    __reflect(PartnerComposeReqBody.prototype, "message.PartnerComposeReqBody", ["aone.AoneBody"]);
    var PartnerComposeRequest = (function () {
        function PartnerComposeRequest() {
            this.header = new aone.AoneReqHeader(PartnerComposeRequest.ID);
            this.body = new PartnerComposeReqBody();
        }
        PartnerComposeRequest.prototype.parse_bytes = function (decoder) { return false; };
        PartnerComposeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PartnerComposeRequest.ID = 19020;
        return PartnerComposeRequest;
    }());
    message.PartnerComposeRequest = PartnerComposeRequest;
    __reflect(PartnerComposeRequest.prototype, "message.PartnerComposeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将羁绊卡合成回复
    // response PartnerCompose
    ////////////////////////////////////////////////////////////////////////////////
    var PartnerComposeRespBody = (function () {
        function PartnerComposeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PartnerComposeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PartnerComposeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PartnerComposeRespBody;
    }());
    message.PartnerComposeRespBody = PartnerComposeRespBody;
    __reflect(PartnerComposeRespBody.prototype, "message.PartnerComposeRespBody", ["aone.AoneBody"]);
    var PartnerComposeResponse = (function () {
        function PartnerComposeResponse() {
            this.header = new aone.AoneRespHeader(PartnerComposeResponse.ID);
            this.body = new PartnerComposeRespBody();
        }
        PartnerComposeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PartnerComposeResponse.prototype.to_bytes = function (encoder) { return false; };
        PartnerComposeResponse.ID = 19021;
        return PartnerComposeResponse;
    }());
    message.PartnerComposeResponse = PartnerComposeResponse;
    __reflect(PartnerComposeResponse.prototype, "message.PartnerComposeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 羁绊卡激活请求
    // request PartnerActivate
    ////////////////////////////////////////////////////////////////////////////////
    var PartnerActivateReqBody = (function () {
        function PartnerActivateReqBody() {
            this.generalId = 0;
            this.pos = 0; // 羁绊卡位置
        }
        PartnerActivateReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PartnerActivateReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // pos
            encoder.write_fixuint32(this.pos);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PartnerActivateReqBody;
    }());
    message.PartnerActivateReqBody = PartnerActivateReqBody;
    __reflect(PartnerActivateReqBody.prototype, "message.PartnerActivateReqBody", ["aone.AoneBody"]);
    var PartnerActivateRequest = (function () {
        function PartnerActivateRequest() {
            this.header = new aone.AoneReqHeader(PartnerActivateRequest.ID);
            this.body = new PartnerActivateReqBody();
        }
        PartnerActivateRequest.prototype.parse_bytes = function (decoder) { return false; };
        PartnerActivateRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PartnerActivateRequest.ID = 19022;
        return PartnerActivateRequest;
    }());
    message.PartnerActivateRequest = PartnerActivateRequest;
    __reflect(PartnerActivateRequest.prototype, "message.PartnerActivateRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 羁绊卡激活回复
    // response PartnerActivate
    ////////////////////////////////////////////////////////////////////////////////
    var PartnerActivateRespBody = (function () {
        function PartnerActivateRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PartnerActivateRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PartnerActivateRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PartnerActivateRespBody;
    }());
    message.PartnerActivateRespBody = PartnerActivateRespBody;
    __reflect(PartnerActivateRespBody.prototype, "message.PartnerActivateRespBody", ["aone.AoneBody"]);
    var PartnerActivateResponse = (function () {
        function PartnerActivateResponse() {
            this.header = new aone.AoneRespHeader(PartnerActivateResponse.ID);
            this.body = new PartnerActivateRespBody();
        }
        PartnerActivateResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PartnerActivateResponse.prototype.to_bytes = function (encoder) { return false; };
        PartnerActivateResponse.ID = 19023;
        return PartnerActivateResponse;
    }());
    message.PartnerActivateResponse = PartnerActivateResponse;
    __reflect(PartnerActivateResponse.prototype, "message.PartnerActivateResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将批量升星请求
    // request GeneralUpStarBatch
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUpStarBatchReqBody = (function () {
        function GeneralUpStarBatchReqBody() {
            this.generalIds = [];
        }
        GeneralUpStarBatchReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUpStarBatchReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalIds
            encoder.write_uint32_vector(this.generalIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralUpStarBatchReqBody;
    }());
    message.GeneralUpStarBatchReqBody = GeneralUpStarBatchReqBody;
    __reflect(GeneralUpStarBatchReqBody.prototype, "message.GeneralUpStarBatchReqBody", ["aone.AoneBody"]);
    var GeneralUpStarBatchRequest = (function () {
        function GeneralUpStarBatchRequest() {
            this.header = new aone.AoneReqHeader(GeneralUpStarBatchRequest.ID);
            this.body = new GeneralUpStarBatchReqBody();
        }
        GeneralUpStarBatchRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUpStarBatchRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralUpStarBatchRequest.ID = 19024;
        return GeneralUpStarBatchRequest;
    }());
    message.GeneralUpStarBatchRequest = GeneralUpStarBatchRequest;
    __reflect(GeneralUpStarBatchRequest.prototype, "message.GeneralUpStarBatchRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将批量升星回复
    // response GeneralUpStarBatch
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUpStarBatchRespBody = (function () {
        function GeneralUpStarBatchRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralUpStarBatchRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralUpStarBatchRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralUpStarBatchRespBody;
    }());
    message.GeneralUpStarBatchRespBody = GeneralUpStarBatchRespBody;
    __reflect(GeneralUpStarBatchRespBody.prototype, "message.GeneralUpStarBatchRespBody", ["aone.AoneBody"]);
    var GeneralUpStarBatchResponse = (function () {
        function GeneralUpStarBatchResponse() {
            this.header = new aone.AoneRespHeader(GeneralUpStarBatchResponse.ID);
            this.body = new GeneralUpStarBatchRespBody();
        }
        GeneralUpStarBatchResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralUpStarBatchResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralUpStarBatchResponse.ID = 19025;
        return GeneralUpStarBatchResponse;
    }());
    message.GeneralUpStarBatchResponse = GeneralUpStarBatchResponse;
    __reflect(GeneralUpStarBatchResponse.prototype, "message.GeneralUpStarBatchResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将技能升级请求
    // request SkillUpLevel
    ////////////////////////////////////////////////////////////////////////////////
    var SkillUpLevelReqBody = (function () {
        function SkillUpLevelReqBody() {
            this.generalId = 0;
            this.pos = 0; // 技能位置(1-3)
            this.isQuick = false;
        }
        SkillUpLevelReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SkillUpLevelReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // pos
            encoder.write_fixuint32(this.pos);
            // isQuick
            encoder.write_bool(this.isQuick);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SkillUpLevelReqBody;
    }());
    message.SkillUpLevelReqBody = SkillUpLevelReqBody;
    __reflect(SkillUpLevelReqBody.prototype, "message.SkillUpLevelReqBody", ["aone.AoneBody"]);
    var SkillUpLevelRequest = (function () {
        function SkillUpLevelRequest() {
            this.header = new aone.AoneReqHeader(SkillUpLevelRequest.ID);
            this.body = new SkillUpLevelReqBody();
        }
        SkillUpLevelRequest.prototype.parse_bytes = function (decoder) { return false; };
        SkillUpLevelRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SkillUpLevelRequest.ID = 19040;
        return SkillUpLevelRequest;
    }());
    message.SkillUpLevelRequest = SkillUpLevelRequest;
    __reflect(SkillUpLevelRequest.prototype, "message.SkillUpLevelRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将技能升级回复
    // response SkillUpLevel
    ////////////////////////////////////////////////////////////////////////////////
    var SkillUpLevelRespBody = (function () {
        function SkillUpLevelRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SkillUpLevelRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SkillUpLevelRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SkillUpLevelRespBody;
    }());
    message.SkillUpLevelRespBody = SkillUpLevelRespBody;
    __reflect(SkillUpLevelRespBody.prototype, "message.SkillUpLevelRespBody", ["aone.AoneBody"]);
    var SkillUpLevelResponse = (function () {
        function SkillUpLevelResponse() {
            this.header = new aone.AoneRespHeader(SkillUpLevelResponse.ID);
            this.body = new SkillUpLevelRespBody();
        }
        SkillUpLevelResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SkillUpLevelResponse.prototype.to_bytes = function (encoder) { return false; };
        SkillUpLevelResponse.ID = 19041;
        return SkillUpLevelResponse;
    }());
    message.SkillUpLevelResponse = SkillUpLevelResponse;
    __reflect(SkillUpLevelResponse.prototype, "message.SkillUpLevelResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将被动升级请求
    // request PassiveUpLevel
    ////////////////////////////////////////////////////////////////////////////////
    var PassiveUpLevelReqBody = (function () {
        function PassiveUpLevelReqBody() {
            this.generalId = 0;
            this.pos = 0; // 技能位置(1-3)
        }
        PassiveUpLevelReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PassiveUpLevelReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // pos
            encoder.write_fixuint32(this.pos);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PassiveUpLevelReqBody;
    }());
    message.PassiveUpLevelReqBody = PassiveUpLevelReqBody;
    __reflect(PassiveUpLevelReqBody.prototype, "message.PassiveUpLevelReqBody", ["aone.AoneBody"]);
    var PassiveUpLevelRequest = (function () {
        function PassiveUpLevelRequest() {
            this.header = new aone.AoneReqHeader(PassiveUpLevelRequest.ID);
            this.body = new PassiveUpLevelReqBody();
        }
        PassiveUpLevelRequest.prototype.parse_bytes = function (decoder) { return false; };
        PassiveUpLevelRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PassiveUpLevelRequest.ID = 19042;
        return PassiveUpLevelRequest;
    }());
    message.PassiveUpLevelRequest = PassiveUpLevelRequest;
    __reflect(PassiveUpLevelRequest.prototype, "message.PassiveUpLevelRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将被动升级回复
    // response PassiveUpLevel
    ////////////////////////////////////////////////////////////////////////////////
    var PassiveUpLevelRespBody = (function () {
        function PassiveUpLevelRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PassiveUpLevelRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PassiveUpLevelRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PassiveUpLevelRespBody;
    }());
    message.PassiveUpLevelRespBody = PassiveUpLevelRespBody;
    __reflect(PassiveUpLevelRespBody.prototype, "message.PassiveUpLevelRespBody", ["aone.AoneBody"]);
    var PassiveUpLevelResponse = (function () {
        function PassiveUpLevelResponse() {
            this.header = new aone.AoneRespHeader(PassiveUpLevelResponse.ID);
            this.body = new PassiveUpLevelRespBody();
        }
        PassiveUpLevelResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PassiveUpLevelResponse.prototype.to_bytes = function (encoder) { return false; };
        PassiveUpLevelResponse.ID = 19043;
        return PassiveUpLevelResponse;
    }());
    message.PassiveUpLevelResponse = PassiveUpLevelResponse;
    __reflect(PassiveUpLevelResponse.prototype, "message.PassiveUpLevelResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将被动的觉醒或升级请求
    // request AwakenPassiveToDo
    ////////////////////////////////////////////////////////////////////////////////
    var AwakenPassiveToDoReqBody = (function () {
        function AwakenPassiveToDoReqBody() {
            this.is_study = false;
            this.is_upLevel = false;
            this.generalId = 0;
            this.general = []; // 同名猎人id
            this.doll_num = 0; // 玩偶数量
        }
        AwakenPassiveToDoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AwakenPassiveToDoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_study
            encoder.write_bool(this.is_study);
            // is_upLevel
            encoder.write_bool(this.is_upLevel);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // general
            encoder.write_uint32_vector(this.general);
            // doll_num
            encoder.write_fixuint32(this.doll_num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AwakenPassiveToDoReqBody;
    }());
    message.AwakenPassiveToDoReqBody = AwakenPassiveToDoReqBody;
    __reflect(AwakenPassiveToDoReqBody.prototype, "message.AwakenPassiveToDoReqBody", ["aone.AoneBody"]);
    var AwakenPassiveToDoRequest = (function () {
        function AwakenPassiveToDoRequest() {
            this.header = new aone.AoneReqHeader(AwakenPassiveToDoRequest.ID);
            this.body = new AwakenPassiveToDoReqBody();
        }
        AwakenPassiveToDoRequest.prototype.parse_bytes = function (decoder) { return false; };
        AwakenPassiveToDoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AwakenPassiveToDoRequest.ID = 19044;
        return AwakenPassiveToDoRequest;
    }());
    message.AwakenPassiveToDoRequest = AwakenPassiveToDoRequest;
    __reflect(AwakenPassiveToDoRequest.prototype, "message.AwakenPassiveToDoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将被动的觉醒或升级回复
    // response AwakenPassiveToDo
    ////////////////////////////////////////////////////////////////////////////////
    var AwakenPassiveToDoRespBody = (function () {
        function AwakenPassiveToDoRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        AwakenPassiveToDoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        AwakenPassiveToDoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AwakenPassiveToDoRespBody;
    }());
    message.AwakenPassiveToDoRespBody = AwakenPassiveToDoRespBody;
    __reflect(AwakenPassiveToDoRespBody.prototype, "message.AwakenPassiveToDoRespBody", ["aone.AoneBody"]);
    var AwakenPassiveToDoResponse = (function () {
        function AwakenPassiveToDoResponse() {
            this.header = new aone.AoneRespHeader(AwakenPassiveToDoResponse.ID);
            this.body = new AwakenPassiveToDoRespBody();
        }
        AwakenPassiveToDoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AwakenPassiveToDoResponse.prototype.to_bytes = function (encoder) { return false; };
        AwakenPassiveToDoResponse.ID = 19045;
        return AwakenPassiveToDoResponse;
    }());
    message.AwakenPassiveToDoResponse = AwakenPassiveToDoResponse;
    __reflect(AwakenPassiveToDoResponse.prototype, "message.AwakenPassiveToDoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将通过道具增加技能点请求
    // request GeneralAddSkill
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralAddSkillReqBody = (function () {
        function GeneralAddSkillReqBody() {
            this.generalId = 0; // 武将Id
            this.goods = [];
        }
        GeneralAddSkillReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralAddSkillReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // goods
            encoder.write_fixuint32(Object.keys(this.goods).length);
            for (var k in this.goods) {
                if (!this.goods[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralAddSkillReqBody;
    }());
    message.GeneralAddSkillReqBody = GeneralAddSkillReqBody;
    __reflect(GeneralAddSkillReqBody.prototype, "message.GeneralAddSkillReqBody", ["aone.AoneBody"]);
    var GeneralAddSkillRequest = (function () {
        function GeneralAddSkillRequest() {
            this.header = new aone.AoneReqHeader(GeneralAddSkillRequest.ID);
            this.body = new GeneralAddSkillReqBody();
        }
        GeneralAddSkillRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralAddSkillRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralAddSkillRequest.ID = 19046;
        return GeneralAddSkillRequest;
    }());
    message.GeneralAddSkillRequest = GeneralAddSkillRequest;
    __reflect(GeneralAddSkillRequest.prototype, "message.GeneralAddSkillRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将通过道具增加技能点回复
    // response GeneralAddSkill
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralAddSkillRespBody = (function () {
        function GeneralAddSkillRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralAddSkillRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralAddSkillRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralAddSkillRespBody;
    }());
    message.GeneralAddSkillRespBody = GeneralAddSkillRespBody;
    __reflect(GeneralAddSkillRespBody.prototype, "message.GeneralAddSkillRespBody", ["aone.AoneBody"]);
    var GeneralAddSkillResponse = (function () {
        function GeneralAddSkillResponse() {
            this.header = new aone.AoneRespHeader(GeneralAddSkillResponse.ID);
            this.body = new GeneralAddSkillRespBody();
        }
        GeneralAddSkillResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralAddSkillResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralAddSkillResponse.ID = 19047;
        return GeneralAddSkillResponse;
    }());
    message.GeneralAddSkillResponse = GeneralAddSkillResponse;
    __reflect(GeneralAddSkillResponse.prototype, "message.GeneralAddSkillResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将通过道具增加伙伴亲密度请求
    // request GeneralAddFreindExp
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralAddFreindExpReqBody = (function () {
        function GeneralAddFreindExpReqBody() {
            this.generalId = 0; // 武将Id
            this.friendId = 0; // 伙伴Id
            this.goods = [];
        }
        GeneralAddFreindExpReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralAddFreindExpReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // friendId
            encoder.write_fixuint32(this.friendId);
            // goods
            encoder.write_fixuint32(Object.keys(this.goods).length);
            for (var k in this.goods) {
                if (!this.goods[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralAddFreindExpReqBody;
    }());
    message.GeneralAddFreindExpReqBody = GeneralAddFreindExpReqBody;
    __reflect(GeneralAddFreindExpReqBody.prototype, "message.GeneralAddFreindExpReqBody", ["aone.AoneBody"]);
    var GeneralAddFreindExpRequest = (function () {
        function GeneralAddFreindExpRequest() {
            this.header = new aone.AoneReqHeader(GeneralAddFreindExpRequest.ID);
            this.body = new GeneralAddFreindExpReqBody();
        }
        GeneralAddFreindExpRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralAddFreindExpRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralAddFreindExpRequest.ID = 19048;
        return GeneralAddFreindExpRequest;
    }());
    message.GeneralAddFreindExpRequest = GeneralAddFreindExpRequest;
    __reflect(GeneralAddFreindExpRequest.prototype, "message.GeneralAddFreindExpRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将通过道具增加技能点回复
    // response GeneralAddFreindExp
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralAddFreindExpRespBody = (function () {
        function GeneralAddFreindExpRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralAddFreindExpRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralAddFreindExpRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralAddFreindExpRespBody;
    }());
    message.GeneralAddFreindExpRespBody = GeneralAddFreindExpRespBody;
    __reflect(GeneralAddFreindExpRespBody.prototype, "message.GeneralAddFreindExpRespBody", ["aone.AoneBody"]);
    var GeneralAddFreindExpResponse = (function () {
        function GeneralAddFreindExpResponse() {
            this.header = new aone.AoneRespHeader(GeneralAddFreindExpResponse.ID);
            this.body = new GeneralAddFreindExpRespBody();
        }
        GeneralAddFreindExpResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralAddFreindExpResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralAddFreindExpResponse.ID = 19049;
        return GeneralAddFreindExpResponse;
    }());
    message.GeneralAddFreindExpResponse = GeneralAddFreindExpResponse;
    __reflect(GeneralAddFreindExpResponse.prototype, "message.GeneralAddFreindExpResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将伙伴激活升级请求
    // request FreindsToDo
    ////////////////////////////////////////////////////////////////////////////////
    var FreindsToDoReqBody = (function () {
        function FreindsToDoReqBody() {
            this.is_activate = false; // true激活,false升级
            this.generalId = 0;
            this.friendId = 0;
        }
        FreindsToDoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        FreindsToDoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_activate
            encoder.write_bool(this.is_activate);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // friendId
            encoder.write_fixuint32(this.friendId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return FreindsToDoReqBody;
    }());
    message.FreindsToDoReqBody = FreindsToDoReqBody;
    __reflect(FreindsToDoReqBody.prototype, "message.FreindsToDoReqBody", ["aone.AoneBody"]);
    var FreindsToDoRequest = (function () {
        function FreindsToDoRequest() {
            this.header = new aone.AoneReqHeader(FreindsToDoRequest.ID);
            this.body = new FreindsToDoReqBody();
        }
        FreindsToDoRequest.prototype.parse_bytes = function (decoder) { return false; };
        FreindsToDoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        FreindsToDoRequest.ID = 19054;
        return FreindsToDoRequest;
    }());
    message.FreindsToDoRequest = FreindsToDoRequest;
    __reflect(FreindsToDoRequest.prototype, "message.FreindsToDoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将伙伴激活升级回复
    // response FreindsToDo
    ////////////////////////////////////////////////////////////////////////////////
    var FreindsToDoRespBody = (function () {
        function FreindsToDoRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        FreindsToDoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        FreindsToDoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return FreindsToDoRespBody;
    }());
    message.FreindsToDoRespBody = FreindsToDoRespBody;
    __reflect(FreindsToDoRespBody.prototype, "message.FreindsToDoRespBody", ["aone.AoneBody"]);
    var FreindsToDoResponse = (function () {
        function FreindsToDoResponse() {
            this.header = new aone.AoneRespHeader(FreindsToDoResponse.ID);
            this.body = new FreindsToDoRespBody();
        }
        FreindsToDoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        FreindsToDoResponse.prototype.to_bytes = function (encoder) { return false; };
        FreindsToDoResponse.ID = 19055;
        return FreindsToDoResponse;
    }());
    message.FreindsToDoResponse = FreindsToDoResponse;
    __reflect(FreindsToDoResponse.prototype, "message.FreindsToDoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将技能重置请求
    // request SkillReset
    ////////////////////////////////////////////////////////////////////////////////
    var SkillResetReqBody = (function () {
        function SkillResetReqBody() {
            this.generalId = 0;
        }
        SkillResetReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SkillResetReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SkillResetReqBody;
    }());
    message.SkillResetReqBody = SkillResetReqBody;
    __reflect(SkillResetReqBody.prototype, "message.SkillResetReqBody", ["aone.AoneBody"]);
    var SkillResetRequest = (function () {
        function SkillResetRequest() {
            this.header = new aone.AoneReqHeader(SkillResetRequest.ID);
            this.body = new SkillResetReqBody();
        }
        SkillResetRequest.prototype.parse_bytes = function (decoder) { return false; };
        SkillResetRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SkillResetRequest.ID = 19056;
        return SkillResetRequest;
    }());
    message.SkillResetRequest = SkillResetRequest;
    __reflect(SkillResetRequest.prototype, "message.SkillResetRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将技能重置回复
    // response SkillReset
    ////////////////////////////////////////////////////////////////////////////////
    var SkillResetRespBody = (function () {
        function SkillResetRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SkillResetRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SkillResetRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SkillResetRespBody;
    }());
    message.SkillResetRespBody = SkillResetRespBody;
    __reflect(SkillResetRespBody.prototype, "message.SkillResetRespBody", ["aone.AoneBody"]);
    var SkillResetResponse = (function () {
        function SkillResetResponse() {
            this.header = new aone.AoneRespHeader(SkillResetResponse.ID);
            this.body = new SkillResetRespBody();
        }
        SkillResetResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SkillResetResponse.prototype.to_bytes = function (encoder) { return false; };
        SkillResetResponse.ID = 19057;
        return SkillResetResponse;
    }());
    message.SkillResetResponse = SkillResetResponse;
    __reflect(SkillResetResponse.prototype, "message.SkillResetResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将选择伙伴请求
    // request ChooseFriend
    ////////////////////////////////////////////////////////////////////////////////
    var ChooseFriendReqBody = (function () {
        function ChooseFriendReqBody() {
            this.generalId = 0;
            this.friendId = 0;
        }
        ChooseFriendReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ChooseFriendReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // friendId
            encoder.write_fixuint32(this.friendId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChooseFriendReqBody;
    }());
    message.ChooseFriendReqBody = ChooseFriendReqBody;
    __reflect(ChooseFriendReqBody.prototype, "message.ChooseFriendReqBody", ["aone.AoneBody"]);
    var ChooseFriendRequest = (function () {
        function ChooseFriendRequest() {
            this.header = new aone.AoneReqHeader(ChooseFriendRequest.ID);
            this.body = new ChooseFriendReqBody();
        }
        ChooseFriendRequest.prototype.parse_bytes = function (decoder) { return false; };
        ChooseFriendRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChooseFriendRequest.ID = 19058;
        return ChooseFriendRequest;
    }());
    message.ChooseFriendRequest = ChooseFriendRequest;
    __reflect(ChooseFriendRequest.prototype, "message.ChooseFriendRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将选择伙伴回复
    // response ChooseFriend
    ////////////////////////////////////////////////////////////////////////////////
    var ChooseFriendRespBody = (function () {
        function ChooseFriendRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ChooseFriendRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ChooseFriendRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ChooseFriendRespBody;
    }());
    message.ChooseFriendRespBody = ChooseFriendRespBody;
    __reflect(ChooseFriendRespBody.prototype, "message.ChooseFriendRespBody", ["aone.AoneBody"]);
    var ChooseFriendResponse = (function () {
        function ChooseFriendResponse() {
            this.header = new aone.AoneRespHeader(ChooseFriendResponse.ID);
            this.body = new ChooseFriendRespBody();
        }
        ChooseFriendResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChooseFriendResponse.prototype.to_bytes = function (encoder) { return false; };
        ChooseFriendResponse.ID = 19059;
        return ChooseFriendResponse;
    }());
    message.ChooseFriendResponse = ChooseFriendResponse;
    __reflect(ChooseFriendResponse.prototype, "message.ChooseFriendResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买时装请求
    // request FashionBuy
    ////////////////////////////////////////////////////////////////////////////////
    var FashionBuyReqBody = (function () {
        function FashionBuyReqBody() {
            this.fashionId = 0;
        }
        FashionBuyReqBody.prototype.parse_bytes = function (decoder) { return false; };
        FashionBuyReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // fashionId
            encoder.write_fixuint32(this.fashionId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return FashionBuyReqBody;
    }());
    message.FashionBuyReqBody = FashionBuyReqBody;
    __reflect(FashionBuyReqBody.prototype, "message.FashionBuyReqBody", ["aone.AoneBody"]);
    var FashionBuyRequest = (function () {
        function FashionBuyRequest() {
            this.header = new aone.AoneReqHeader(FashionBuyRequest.ID);
            this.body = new FashionBuyReqBody();
        }
        FashionBuyRequest.prototype.parse_bytes = function (decoder) { return false; };
        FashionBuyRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        FashionBuyRequest.ID = 19060;
        return FashionBuyRequest;
    }());
    message.FashionBuyRequest = FashionBuyRequest;
    __reflect(FashionBuyRequest.prototype, "message.FashionBuyRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买时装回复
    // response FashionBuy
    ////////////////////////////////////////////////////////////////////////////////
    var FashionBuyRespBody = (function () {
        function FashionBuyRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        FashionBuyRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        FashionBuyRespBody.prototype.to_bytes = function (encoder) { return false; };
        return FashionBuyRespBody;
    }());
    message.FashionBuyRespBody = FashionBuyRespBody;
    __reflect(FashionBuyRespBody.prototype, "message.FashionBuyRespBody", ["aone.AoneBody"]);
    var FashionBuyResponse = (function () {
        function FashionBuyResponse() {
            this.header = new aone.AoneRespHeader(FashionBuyResponse.ID);
            this.body = new FashionBuyRespBody();
        }
        FashionBuyResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        FashionBuyResponse.prototype.to_bytes = function (encoder) { return false; };
        FashionBuyResponse.ID = 19061;
        return FashionBuyResponse;
    }());
    message.FashionBuyResponse = FashionBuyResponse;
    __reflect(FashionBuyResponse.prototype, "message.FashionBuyResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将时装激活请求
    // request FashionWear
    ////////////////////////////////////////////////////////////////////////////////
    var FashionWearReqBody = (function () {
        function FashionWearReqBody() {
            this.is_unwear = false; // 是否卸下
            this.fashion_id = 0; // 时装id
            this.general_id = 0; // 猎人id
        }
        FashionWearReqBody.prototype.parse_bytes = function (decoder) { return false; };
        FashionWearReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_unwear
            encoder.write_bool(this.is_unwear);
            // fashion_id
            encoder.write_fixuint32(this.fashion_id);
            // general_id
            encoder.write_fixuint32(this.general_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return FashionWearReqBody;
    }());
    message.FashionWearReqBody = FashionWearReqBody;
    __reflect(FashionWearReqBody.prototype, "message.FashionWearReqBody", ["aone.AoneBody"]);
    var FashionWearRequest = (function () {
        function FashionWearRequest() {
            this.header = new aone.AoneReqHeader(FashionWearRequest.ID);
            this.body = new FashionWearReqBody();
        }
        FashionWearRequest.prototype.parse_bytes = function (decoder) { return false; };
        FashionWearRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        FashionWearRequest.ID = 19062;
        return FashionWearRequest;
    }());
    message.FashionWearRequest = FashionWearRequest;
    __reflect(FashionWearRequest.prototype, "message.FashionWearRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将时装激活回复
    // response FashionWear
    ////////////////////////////////////////////////////////////////////////////////
    var FashionWearRespBody = (function () {
        function FashionWearRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        FashionWearRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        FashionWearRespBody.prototype.to_bytes = function (encoder) { return false; };
        return FashionWearRespBody;
    }());
    message.FashionWearRespBody = FashionWearRespBody;
    __reflect(FashionWearRespBody.prototype, "message.FashionWearRespBody", ["aone.AoneBody"]);
    var FashionWearResponse = (function () {
        function FashionWearResponse() {
            this.header = new aone.AoneRespHeader(FashionWearResponse.ID);
            this.body = new FashionWearRespBody();
        }
        FashionWearResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        FashionWearResponse.prototype.to_bytes = function (encoder) { return false; };
        FashionWearResponse.ID = 19063;
        return FashionWearResponse;
    }());
    message.FashionWearResponse = FashionWearResponse;
    __reflect(FashionWearResponse.prototype, "message.FashionWearResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 高级刻印石合成请求
    // request ComposeCarveProp
    ////////////////////////////////////////////////////////////////////////////////
    var ComposeCarvePropReqBody = (function () {
        function ComposeCarvePropReqBody() {
            this.propId = 0;
            this.count = 0; // 合成数量
        }
        ComposeCarvePropReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ComposeCarvePropReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // propId
            encoder.write_fixuint32(this.propId);
            // count
            encoder.write_fixuint32(this.count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ComposeCarvePropReqBody;
    }());
    message.ComposeCarvePropReqBody = ComposeCarvePropReqBody;
    __reflect(ComposeCarvePropReqBody.prototype, "message.ComposeCarvePropReqBody", ["aone.AoneBody"]);
    var ComposeCarvePropRequest = (function () {
        function ComposeCarvePropRequest() {
            this.header = new aone.AoneReqHeader(ComposeCarvePropRequest.ID);
            this.body = new ComposeCarvePropReqBody();
        }
        ComposeCarvePropRequest.prototype.parse_bytes = function (decoder) { return false; };
        ComposeCarvePropRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ComposeCarvePropRequest.ID = 19064;
        return ComposeCarvePropRequest;
    }());
    message.ComposeCarvePropRequest = ComposeCarvePropRequest;
    __reflect(ComposeCarvePropRequest.prototype, "message.ComposeCarvePropRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 高级刻印石合成回复
    // response ComposeCarveProp
    ////////////////////////////////////////////////////////////////////////////////
    var ComposeCarvePropRespBody = (function () {
        function ComposeCarvePropRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ComposeCarvePropRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ComposeCarvePropRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ComposeCarvePropRespBody;
    }());
    message.ComposeCarvePropRespBody = ComposeCarvePropRespBody;
    __reflect(ComposeCarvePropRespBody.prototype, "message.ComposeCarvePropRespBody", ["aone.AoneBody"]);
    var ComposeCarvePropResponse = (function () {
        function ComposeCarvePropResponse() {
            this.header = new aone.AoneRespHeader(ComposeCarvePropResponse.ID);
            this.body = new ComposeCarvePropRespBody();
        }
        ComposeCarvePropResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ComposeCarvePropResponse.prototype.to_bytes = function (encoder) { return false; };
        ComposeCarvePropResponse.ID = 19065;
        return ComposeCarvePropResponse;
    }());
    message.ComposeCarvePropResponse = ComposeCarvePropResponse;
    __reflect(ComposeCarvePropResponse.prototype, "message.ComposeCarvePropResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将重生请求
    // request GeneralRebirth
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralRebirthReqBody = (function () {
        function GeneralRebirthReqBody() {
            this.generalId = 0;
            this.is_general_level = false; // 等级
            this.is_general_quality = false; // 品质
            this.is_general_skill = false; // 技能
        }
        GeneralRebirthReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralRebirthReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // is_general_level
            encoder.write_bool(this.is_general_level);
            // is_general_quality
            encoder.write_bool(this.is_general_quality);
            // is_general_skill
            encoder.write_bool(this.is_general_skill);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralRebirthReqBody;
    }());
    message.GeneralRebirthReqBody = GeneralRebirthReqBody;
    __reflect(GeneralRebirthReqBody.prototype, "message.GeneralRebirthReqBody", ["aone.AoneBody"]);
    var GeneralRebirthRequest = (function () {
        function GeneralRebirthRequest() {
            this.header = new aone.AoneReqHeader(GeneralRebirthRequest.ID);
            this.body = new GeneralRebirthReqBody();
        }
        GeneralRebirthRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralRebirthRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralRebirthRequest.ID = 19066;
        return GeneralRebirthRequest;
    }());
    message.GeneralRebirthRequest = GeneralRebirthRequest;
    __reflect(GeneralRebirthRequest.prototype, "message.GeneralRebirthRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将重生回复
    // response GeneralRebirth
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralRebirthRespBody = (function () {
        function GeneralRebirthRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralRebirthRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralRebirthRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralRebirthRespBody;
    }());
    message.GeneralRebirthRespBody = GeneralRebirthRespBody;
    __reflect(GeneralRebirthRespBody.prototype, "message.GeneralRebirthRespBody", ["aone.AoneBody"]);
    var GeneralRebirthResponse = (function () {
        function GeneralRebirthResponse() {
            this.header = new aone.AoneRespHeader(GeneralRebirthResponse.ID);
            this.body = new GeneralRebirthRespBody();
        }
        GeneralRebirthResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralRebirthResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralRebirthResponse.ID = 19067;
        return GeneralRebirthResponse;
    }());
    message.GeneralRebirthResponse = GeneralRebirthResponse;
    __reflect(GeneralRebirthResponse.prototype, "message.GeneralRebirthResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 激活武将传记属性请求
    // request GeneralLifeStatActivate
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralLifeStatActivateReqBody = (function () {
        function GeneralLifeStatActivateReqBody() {
            this.generalId = 0; // 武将id
            this.pos = 0; // 位子1~3
            this.statId = 0; // 属性点id
            this.assist_item = 0; // 使用辅助物品id
        }
        GeneralLifeStatActivateReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralLifeStatActivateReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // pos
            encoder.write_fixuint32(this.pos);
            // statId
            encoder.write_fixuint32(this.statId);
            // assist_item
            encoder.write_fixuint32(this.assist_item);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralLifeStatActivateReqBody;
    }());
    message.GeneralLifeStatActivateReqBody = GeneralLifeStatActivateReqBody;
    __reflect(GeneralLifeStatActivateReqBody.prototype, "message.GeneralLifeStatActivateReqBody", ["aone.AoneBody"]);
    var GeneralLifeStatActivateRequest = (function () {
        function GeneralLifeStatActivateRequest() {
            this.header = new aone.AoneReqHeader(GeneralLifeStatActivateRequest.ID);
            this.body = new GeneralLifeStatActivateReqBody();
        }
        GeneralLifeStatActivateRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralLifeStatActivateRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralLifeStatActivateRequest.ID = 19070;
        return GeneralLifeStatActivateRequest;
    }());
    message.GeneralLifeStatActivateRequest = GeneralLifeStatActivateRequest;
    __reflect(GeneralLifeStatActivateRequest.prototype, "message.GeneralLifeStatActivateRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 激活武将传记属性回复
    // response GeneralLifeStatActivate
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralLifeStatActivateRespBody = (function () {
        function GeneralLifeStatActivateRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralLifeStatActivateRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralLifeStatActivateRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralLifeStatActivateRespBody;
    }());
    message.GeneralLifeStatActivateRespBody = GeneralLifeStatActivateRespBody;
    __reflect(GeneralLifeStatActivateRespBody.prototype, "message.GeneralLifeStatActivateRespBody", ["aone.AoneBody"]);
    var GeneralLifeStatActivateResponse = (function () {
        function GeneralLifeStatActivateResponse() {
            this.header = new aone.AoneRespHeader(GeneralLifeStatActivateResponse.ID);
            this.body = new GeneralLifeStatActivateRespBody();
        }
        GeneralLifeStatActivateResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralLifeStatActivateResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralLifeStatActivateResponse.ID = 19071;
        return GeneralLifeStatActivateResponse;
    }());
    message.GeneralLifeStatActivateResponse = GeneralLifeStatActivateResponse;
    __reflect(GeneralLifeStatActivateResponse.prototype, "message.GeneralLifeStatActivateResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将传记挑战怪物请求
    // request GeneralLifeStatBattle
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralLifeStatBattleReqBody = (function () {
        function GeneralLifeStatBattleReqBody() {
            this.generalId = 0; // 武将id
            this.pos = 0; // 位子1~3
            this.statId = 0; // 属性点id
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
        }
        GeneralLifeStatBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralLifeStatBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // pos
            encoder.write_fixuint32(this.pos);
            // statId
            encoder.write_fixuint32(this.statId);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralLifeStatBattleReqBody;
    }());
    message.GeneralLifeStatBattleReqBody = GeneralLifeStatBattleReqBody;
    __reflect(GeneralLifeStatBattleReqBody.prototype, "message.GeneralLifeStatBattleReqBody", ["aone.AoneBody"]);
    var GeneralLifeStatBattleRequest = (function () {
        function GeneralLifeStatBattleRequest() {
            this.header = new aone.AoneReqHeader(GeneralLifeStatBattleRequest.ID);
            this.body = new GeneralLifeStatBattleReqBody();
        }
        GeneralLifeStatBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralLifeStatBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralLifeStatBattleRequest.ID = 19072;
        return GeneralLifeStatBattleRequest;
    }());
    message.GeneralLifeStatBattleRequest = GeneralLifeStatBattleRequest;
    __reflect(GeneralLifeStatBattleRequest.prototype, "message.GeneralLifeStatBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将传记挑战怪物回复
    // response GeneralLifeStatBattle
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralLifeStatBattleRespBody = (function () {
        function GeneralLifeStatBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        GeneralLifeStatBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralLifeStatBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralLifeStatBattleRespBody;
    }());
    message.GeneralLifeStatBattleRespBody = GeneralLifeStatBattleRespBody;
    __reflect(GeneralLifeStatBattleRespBody.prototype, "message.GeneralLifeStatBattleRespBody", ["aone.AoneBody"]);
    var GeneralLifeStatBattleResponse = (function () {
        function GeneralLifeStatBattleResponse() {
            this.header = new aone.AoneRespHeader(GeneralLifeStatBattleResponse.ID);
            this.body = new GeneralLifeStatBattleRespBody();
        }
        GeneralLifeStatBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralLifeStatBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralLifeStatBattleResponse.ID = 19073;
        return GeneralLifeStatBattleResponse;
    }());
    message.GeneralLifeStatBattleResponse = GeneralLifeStatBattleResponse;
    __reflect(GeneralLifeStatBattleResponse.prototype, "message.GeneralLifeStatBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将念力激活请求
    // request GeneralPsychicActivate
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralPsychicActivateReqBody = (function () {
        function GeneralPsychicActivateReqBody() {
            this.generalId = 0; // 武将id
        }
        GeneralPsychicActivateReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralPsychicActivateReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralPsychicActivateReqBody;
    }());
    message.GeneralPsychicActivateReqBody = GeneralPsychicActivateReqBody;
    __reflect(GeneralPsychicActivateReqBody.prototype, "message.GeneralPsychicActivateReqBody", ["aone.AoneBody"]);
    var GeneralPsychicActivateRequest = (function () {
        function GeneralPsychicActivateRequest() {
            this.header = new aone.AoneReqHeader(GeneralPsychicActivateRequest.ID);
            this.body = new GeneralPsychicActivateReqBody();
        }
        GeneralPsychicActivateRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralPsychicActivateRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralPsychicActivateRequest.ID = 19074;
        return GeneralPsychicActivateRequest;
    }());
    message.GeneralPsychicActivateRequest = GeneralPsychicActivateRequest;
    __reflect(GeneralPsychicActivateRequest.prototype, "message.GeneralPsychicActivateRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将念力激活回复
    // response GeneralPsychicActivate
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralPsychicActivateRespBody = (function () {
        function GeneralPsychicActivateRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralPsychicActivateRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralPsychicActivateRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralPsychicActivateRespBody;
    }());
    message.GeneralPsychicActivateRespBody = GeneralPsychicActivateRespBody;
    __reflect(GeneralPsychicActivateRespBody.prototype, "message.GeneralPsychicActivateRespBody", ["aone.AoneBody"]);
    var GeneralPsychicActivateResponse = (function () {
        function GeneralPsychicActivateResponse() {
            this.header = new aone.AoneRespHeader(GeneralPsychicActivateResponse.ID);
            this.body = new GeneralPsychicActivateRespBody();
        }
        GeneralPsychicActivateResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralPsychicActivateResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralPsychicActivateResponse.ID = 19075;
        return GeneralPsychicActivateResponse;
    }());
    message.GeneralPsychicActivateResponse = GeneralPsychicActivateResponse;
    __reflect(GeneralPsychicActivateResponse.prototype, "message.GeneralPsychicActivateResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将念力修炼请求
    // request GeneralPsychicRefresh
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralPsychicRefreshReqBody = (function () {
        function GeneralPsychicRefreshReqBody() {
            this.generalId = 0; // 武将id
            this.pos = 0; // 升级位子
            this.consume_generalId = []; // 消耗猎人
        }
        GeneralPsychicRefreshReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralPsychicRefreshReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // pos
            encoder.write_fixuint32(this.pos);
            // consume_generalId
            encoder.write_uint32_vector(this.consume_generalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralPsychicRefreshReqBody;
    }());
    message.GeneralPsychicRefreshReqBody = GeneralPsychicRefreshReqBody;
    __reflect(GeneralPsychicRefreshReqBody.prototype, "message.GeneralPsychicRefreshReqBody", ["aone.AoneBody"]);
    var GeneralPsychicRefreshRequest = (function () {
        function GeneralPsychicRefreshRequest() {
            this.header = new aone.AoneReqHeader(GeneralPsychicRefreshRequest.ID);
            this.body = new GeneralPsychicRefreshReqBody();
        }
        GeneralPsychicRefreshRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralPsychicRefreshRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralPsychicRefreshRequest.ID = 19076;
        return GeneralPsychicRefreshRequest;
    }());
    message.GeneralPsychicRefreshRequest = GeneralPsychicRefreshRequest;
    __reflect(GeneralPsychicRefreshRequest.prototype, "message.GeneralPsychicRefreshRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将念力修炼回复
    // response GeneralPsychicRefresh
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralPsychicRefreshRespBody = (function () {
        function GeneralPsychicRefreshRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralPsychicRefreshRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralPsychicRefreshRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralPsychicRefreshRespBody;
    }());
    message.GeneralPsychicRefreshRespBody = GeneralPsychicRefreshRespBody;
    __reflect(GeneralPsychicRefreshRespBody.prototype, "message.GeneralPsychicRefreshRespBody", ["aone.AoneBody"]);
    var GeneralPsychicRefreshResponse = (function () {
        function GeneralPsychicRefreshResponse() {
            this.header = new aone.AoneRespHeader(GeneralPsychicRefreshResponse.ID);
            this.body = new GeneralPsychicRefreshRespBody();
        }
        GeneralPsychicRefreshResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralPsychicRefreshResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralPsychicRefreshResponse.ID = 19077;
        return GeneralPsychicRefreshResponse;
    }());
    message.GeneralPsychicRefreshResponse = GeneralPsychicRefreshResponse;
    __reflect(GeneralPsychicRefreshResponse.prototype, "message.GeneralPsychicRefreshResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将合成装备请求
    // request GeneralSelectEquip
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralSelectEquipReqBody = (function () {
        function GeneralSelectEquipReqBody() {
            this.generalId = 0;
            this.equip_type = 0; // 通用1，2，专属3
        }
        GeneralSelectEquipReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralSelectEquipReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // equip_type
            encoder.write_fixuint32(this.equip_type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralSelectEquipReqBody;
    }());
    message.GeneralSelectEquipReqBody = GeneralSelectEquipReqBody;
    __reflect(GeneralSelectEquipReqBody.prototype, "message.GeneralSelectEquipReqBody", ["aone.AoneBody"]);
    var GeneralSelectEquipRequest = (function () {
        function GeneralSelectEquipRequest() {
            this.header = new aone.AoneReqHeader(GeneralSelectEquipRequest.ID);
            this.body = new GeneralSelectEquipReqBody();
        }
        GeneralSelectEquipRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralSelectEquipRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralSelectEquipRequest.ID = 19084;
        return GeneralSelectEquipRequest;
    }());
    message.GeneralSelectEquipRequest = GeneralSelectEquipRequest;
    __reflect(GeneralSelectEquipRequest.prototype, "message.GeneralSelectEquipRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将合成装备回复
    // response GeneralSelectEquip
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralSelectEquipRespBody = (function () {
        function GeneralSelectEquipRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralSelectEquipRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralSelectEquipRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralSelectEquipRespBody;
    }());
    message.GeneralSelectEquipRespBody = GeneralSelectEquipRespBody;
    __reflect(GeneralSelectEquipRespBody.prototype, "message.GeneralSelectEquipRespBody", ["aone.AoneBody"]);
    var GeneralSelectEquipResponse = (function () {
        function GeneralSelectEquipResponse() {
            this.header = new aone.AoneRespHeader(GeneralSelectEquipResponse.ID);
            this.body = new GeneralSelectEquipRespBody();
        }
        GeneralSelectEquipResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralSelectEquipResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralSelectEquipResponse.ID = 19085;
        return GeneralSelectEquipResponse;
    }());
    message.GeneralSelectEquipResponse = GeneralSelectEquipResponse;
    __reflect(GeneralSelectEquipResponse.prototype, "message.GeneralSelectEquipResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将装备升级请求
    // request GeneralUplevelEquip
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUplevelEquipReqBody = (function () {
        function GeneralUplevelEquipReqBody() {
            this.generalId = 0;
            this.equip_type = 0; // 通用1，2，专属3
        }
        GeneralUplevelEquipReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUplevelEquipReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // equip_type
            encoder.write_fixuint32(this.equip_type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralUplevelEquipReqBody;
    }());
    message.GeneralUplevelEquipReqBody = GeneralUplevelEquipReqBody;
    __reflect(GeneralUplevelEquipReqBody.prototype, "message.GeneralUplevelEquipReqBody", ["aone.AoneBody"]);
    var GeneralUplevelEquipRequest = (function () {
        function GeneralUplevelEquipRequest() {
            this.header = new aone.AoneReqHeader(GeneralUplevelEquipRequest.ID);
            this.body = new GeneralUplevelEquipReqBody();
        }
        GeneralUplevelEquipRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUplevelEquipRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralUplevelEquipRequest.ID = 19086;
        return GeneralUplevelEquipRequest;
    }());
    message.GeneralUplevelEquipRequest = GeneralUplevelEquipRequest;
    __reflect(GeneralUplevelEquipRequest.prototype, "message.GeneralUplevelEquipRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将装备升级回复
    // response GeneralUplevelEquip
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUplevelEquipRespBody = (function () {
        function GeneralUplevelEquipRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralUplevelEquipRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralUplevelEquipRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralUplevelEquipRespBody;
    }());
    message.GeneralUplevelEquipRespBody = GeneralUplevelEquipRespBody;
    __reflect(GeneralUplevelEquipRespBody.prototype, "message.GeneralUplevelEquipRespBody", ["aone.AoneBody"]);
    var GeneralUplevelEquipResponse = (function () {
        function GeneralUplevelEquipResponse() {
            this.header = new aone.AoneRespHeader(GeneralUplevelEquipResponse.ID);
            this.body = new GeneralUplevelEquipRespBody();
        }
        GeneralUplevelEquipResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralUplevelEquipResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralUplevelEquipResponse.ID = 19087;
        return GeneralUplevelEquipResponse;
    }());
    message.GeneralUplevelEquipResponse = GeneralUplevelEquipResponse;
    __reflect(GeneralUplevelEquipResponse.prototype, "message.GeneralUplevelEquipResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将装备升品请求
    // request GeneralUpstepEquip
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUpstepEquipReqBody = (function () {
        function GeneralUpstepEquipReqBody() {
            this.generalId = 0;
            this.equip_type = 0; // 通用1，2，专属3
        }
        GeneralUpstepEquipReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUpstepEquipReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // equip_type
            encoder.write_fixuint32(this.equip_type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralUpstepEquipReqBody;
    }());
    message.GeneralUpstepEquipReqBody = GeneralUpstepEquipReqBody;
    __reflect(GeneralUpstepEquipReqBody.prototype, "message.GeneralUpstepEquipReqBody", ["aone.AoneBody"]);
    var GeneralUpstepEquipRequest = (function () {
        function GeneralUpstepEquipRequest() {
            this.header = new aone.AoneReqHeader(GeneralUpstepEquipRequest.ID);
            this.body = new GeneralUpstepEquipReqBody();
        }
        GeneralUpstepEquipRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralUpstepEquipRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralUpstepEquipRequest.ID = 19088;
        return GeneralUpstepEquipRequest;
    }());
    message.GeneralUpstepEquipRequest = GeneralUpstepEquipRequest;
    __reflect(GeneralUpstepEquipRequest.prototype, "message.GeneralUpstepEquipRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将装备升品回复
    // response GeneralUpstepEquip
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralUpstepEquipRespBody = (function () {
        function GeneralUpstepEquipRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralUpstepEquipRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralUpstepEquipRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralUpstepEquipRespBody;
    }());
    message.GeneralUpstepEquipRespBody = GeneralUpstepEquipRespBody;
    __reflect(GeneralUpstepEquipRespBody.prototype, "message.GeneralUpstepEquipRespBody", ["aone.AoneBody"]);
    var GeneralUpstepEquipResponse = (function () {
        function GeneralUpstepEquipResponse() {
            this.header = new aone.AoneRespHeader(GeneralUpstepEquipResponse.ID);
            this.body = new GeneralUpstepEquipRespBody();
        }
        GeneralUpstepEquipResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralUpstepEquipResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralUpstepEquipResponse.ID = 19089;
        return GeneralUpstepEquipResponse;
    }());
    message.GeneralUpstepEquipResponse = GeneralUpstepEquipResponse;
    __reflect(GeneralUpstepEquipResponse.prototype, "message.GeneralUpstepEquipResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将变身请求
    // request GeneralTransfer
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralTransferReqBody = (function () {
        function GeneralTransferReqBody() {
            this.generalId = 0;
        }
        GeneralTransferReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralTransferReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralTransferReqBody;
    }());
    message.GeneralTransferReqBody = GeneralTransferReqBody;
    __reflect(GeneralTransferReqBody.prototype, "message.GeneralTransferReqBody", ["aone.AoneBody"]);
    var GeneralTransferRequest = (function () {
        function GeneralTransferRequest() {
            this.header = new aone.AoneReqHeader(GeneralTransferRequest.ID);
            this.body = new GeneralTransferReqBody();
        }
        GeneralTransferRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralTransferRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralTransferRequest.ID = 19090;
        return GeneralTransferRequest;
    }());
    message.GeneralTransferRequest = GeneralTransferRequest;
    __reflect(GeneralTransferRequest.prototype, "message.GeneralTransferRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将变身回复
    // response GeneralTransfer
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralTransferRespBody = (function () {
        function GeneralTransferRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralTransferRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralTransferRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralTransferRespBody;
    }());
    message.GeneralTransferRespBody = GeneralTransferRespBody;
    __reflect(GeneralTransferRespBody.prototype, "message.GeneralTransferRespBody", ["aone.AoneBody"]);
    var GeneralTransferResponse = (function () {
        function GeneralTransferResponse() {
            this.header = new aone.AoneRespHeader(GeneralTransferResponse.ID);
            this.body = new GeneralTransferRespBody();
        }
        GeneralTransferResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralTransferResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralTransferResponse.ID = 19091;
        return GeneralTransferResponse;
    }());
    message.GeneralTransferResponse = GeneralTransferResponse;
    __reflect(GeneralTransferResponse.prototype, "message.GeneralTransferResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将变身技能升级请求
    // request GeneralTransferSkillUp
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralTransferSkillUpReqBody = (function () {
        function GeneralTransferSkillUpReqBody() {
            this.generalId = 0;
        }
        GeneralTransferSkillUpReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralTransferSkillUpReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralTransferSkillUpReqBody;
    }());
    message.GeneralTransferSkillUpReqBody = GeneralTransferSkillUpReqBody;
    __reflect(GeneralTransferSkillUpReqBody.prototype, "message.GeneralTransferSkillUpReqBody", ["aone.AoneBody"]);
    var GeneralTransferSkillUpRequest = (function () {
        function GeneralTransferSkillUpRequest() {
            this.header = new aone.AoneReqHeader(GeneralTransferSkillUpRequest.ID);
            this.body = new GeneralTransferSkillUpReqBody();
        }
        GeneralTransferSkillUpRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralTransferSkillUpRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralTransferSkillUpRequest.ID = 19092;
        return GeneralTransferSkillUpRequest;
    }());
    message.GeneralTransferSkillUpRequest = GeneralTransferSkillUpRequest;
    __reflect(GeneralTransferSkillUpRequest.prototype, "message.GeneralTransferSkillUpRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将变身技能升级回复
    // response GeneralTransferSkillUp
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralTransferSkillUpRespBody = (function () {
        function GeneralTransferSkillUpRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralTransferSkillUpRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralTransferSkillUpRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralTransferSkillUpRespBody;
    }());
    message.GeneralTransferSkillUpRespBody = GeneralTransferSkillUpRespBody;
    __reflect(GeneralTransferSkillUpRespBody.prototype, "message.GeneralTransferSkillUpRespBody", ["aone.AoneBody"]);
    var GeneralTransferSkillUpResponse = (function () {
        function GeneralTransferSkillUpResponse() {
            this.header = new aone.AoneRespHeader(GeneralTransferSkillUpResponse.ID);
            this.body = new GeneralTransferSkillUpRespBody();
        }
        GeneralTransferSkillUpResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralTransferSkillUpResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralTransferSkillUpResponse.ID = 19093;
        return GeneralTransferSkillUpResponse;
    }());
    message.GeneralTransferSkillUpResponse = GeneralTransferSkillUpResponse;
    __reflect(GeneralTransferSkillUpResponse.prototype, "message.GeneralTransferSkillUpResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 变身标识设置请求
    // request GeneralTransferTab
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralTransferTabReqBody = (function () {
        function GeneralTransferTabReqBody() {
            this.generalId = 0; // 武将id
            this.is_show_transfer = false; // 变身标识
        }
        GeneralTransferTabReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GeneralTransferTabReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // is_show_transfer
            encoder.write_bool(this.is_show_transfer);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GeneralTransferTabReqBody;
    }());
    message.GeneralTransferTabReqBody = GeneralTransferTabReqBody;
    __reflect(GeneralTransferTabReqBody.prototype, "message.GeneralTransferTabReqBody", ["aone.AoneBody"]);
    var GeneralTransferTabRequest = (function () {
        function GeneralTransferTabRequest() {
            this.header = new aone.AoneReqHeader(GeneralTransferTabRequest.ID);
            this.body = new GeneralTransferTabReqBody();
        }
        GeneralTransferTabRequest.prototype.parse_bytes = function (decoder) { return false; };
        GeneralTransferTabRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GeneralTransferTabRequest.ID = 19094;
        return GeneralTransferTabRequest;
    }());
    message.GeneralTransferTabRequest = GeneralTransferTabRequest;
    __reflect(GeneralTransferTabRequest.prototype, "message.GeneralTransferTabRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 变身标识设置回复
    // response GeneralTransferTab
    ////////////////////////////////////////////////////////////////////////////////
    var GeneralTransferTabRespBody = (function () {
        function GeneralTransferTabRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GeneralTransferTabRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GeneralTransferTabRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GeneralTransferTabRespBody;
    }());
    message.GeneralTransferTabRespBody = GeneralTransferTabRespBody;
    __reflect(GeneralTransferTabRespBody.prototype, "message.GeneralTransferTabRespBody", ["aone.AoneBody"]);
    var GeneralTransferTabResponse = (function () {
        function GeneralTransferTabResponse() {
            this.header = new aone.AoneRespHeader(GeneralTransferTabResponse.ID);
            this.body = new GeneralTransferTabRespBody();
        }
        GeneralTransferTabResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GeneralTransferTabResponse.prototype.to_bytes = function (encoder) { return false; };
        GeneralTransferTabResponse.ID = 19095;
        return GeneralTransferTabResponse;
    }());
    message.GeneralTransferTabResponse = GeneralTransferTabResponse;
    __reflect(GeneralTransferTabResponse.prototype, "message.GeneralTransferTabResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(GeneralExpPropRequest.ID, function () { return new GeneralExpPropRequest(); });
    aone.MessageFactory.getInstance().register(GeneralExpPropResponse.ID, function () { return new GeneralExpPropResponse(); });
    aone.MessageFactory.getInstance().register(GeneralRecruitRequest.ID, function () { return new GeneralRecruitRequest(); });
    aone.MessageFactory.getInstance().register(GeneralRecruitResponse.ID, function () { return new GeneralRecruitResponse(); });
    aone.MessageFactory.getInstance().register(GeneralSellRequest.ID, function () { return new GeneralSellRequest(); });
    aone.MessageFactory.getInstance().register(GeneralSellResponse.ID, function () { return new GeneralSellResponse(); });
    aone.MessageFactory.getInstance().register(GeneralWareHouseRequest.ID, function () { return new GeneralWareHouseRequest(); });
    aone.MessageFactory.getInstance().register(GeneralWareHouseResponse.ID, function () { return new GeneralWareHouseResponse(); });
    aone.MessageFactory.getInstance().register(GeneralComposeRequest.ID, function () { return new GeneralComposeRequest(); });
    aone.MessageFactory.getInstance().register(GeneralComposeResponse.ID, function () { return new GeneralComposeResponse(); });
    aone.MessageFactory.getInstance().register(GeneralUpStarRequest.ID, function () { return new GeneralUpStarRequest(); });
    aone.MessageFactory.getInstance().register(GeneralUpStarResponse.ID, function () { return new GeneralUpStarResponse(); });
    aone.MessageFactory.getInstance().register(GeneralUpQualityRequest.ID, function () { return new GeneralUpQualityRequest(); });
    aone.MessageFactory.getInstance().register(GeneralUpQualityResponse.ID, function () { return new GeneralUpQualityResponse(); });
    aone.MessageFactory.getInstance().register(GeneralBreakRequest.ID, function () { return new GeneralBreakRequest(); });
    aone.MessageFactory.getInstance().register(GeneralBreakResponse.ID, function () { return new GeneralBreakResponse(); });
    aone.MessageFactory.getInstance().register(UseBreakSkillRequest.ID, function () { return new UseBreakSkillRequest(); });
    aone.MessageFactory.getInstance().register(UseBreakSkillResponse.ID, function () { return new UseBreakSkillResponse(); });
    aone.MessageFactory.getInstance().register(BreakSkillUplevelRequest.ID, function () { return new BreakSkillUplevelRequest(); });
    aone.MessageFactory.getInstance().register(BreakSkillUplevelResponse.ID, function () { return new BreakSkillUplevelResponse(); });
    aone.MessageFactory.getInstance().register(PartnerComposeRequest.ID, function () { return new PartnerComposeRequest(); });
    aone.MessageFactory.getInstance().register(PartnerComposeResponse.ID, function () { return new PartnerComposeResponse(); });
    aone.MessageFactory.getInstance().register(PartnerActivateRequest.ID, function () { return new PartnerActivateRequest(); });
    aone.MessageFactory.getInstance().register(PartnerActivateResponse.ID, function () { return new PartnerActivateResponse(); });
    aone.MessageFactory.getInstance().register(GeneralUpStarBatchRequest.ID, function () { return new GeneralUpStarBatchRequest(); });
    aone.MessageFactory.getInstance().register(GeneralUpStarBatchResponse.ID, function () { return new GeneralUpStarBatchResponse(); });
    aone.MessageFactory.getInstance().register(SkillUpLevelRequest.ID, function () { return new SkillUpLevelRequest(); });
    aone.MessageFactory.getInstance().register(SkillUpLevelResponse.ID, function () { return new SkillUpLevelResponse(); });
    aone.MessageFactory.getInstance().register(PassiveUpLevelRequest.ID, function () { return new PassiveUpLevelRequest(); });
    aone.MessageFactory.getInstance().register(PassiveUpLevelResponse.ID, function () { return new PassiveUpLevelResponse(); });
    aone.MessageFactory.getInstance().register(AwakenPassiveToDoRequest.ID, function () { return new AwakenPassiveToDoRequest(); });
    aone.MessageFactory.getInstance().register(AwakenPassiveToDoResponse.ID, function () { return new AwakenPassiveToDoResponse(); });
    aone.MessageFactory.getInstance().register(GeneralAddSkillRequest.ID, function () { return new GeneralAddSkillRequest(); });
    aone.MessageFactory.getInstance().register(GeneralAddSkillResponse.ID, function () { return new GeneralAddSkillResponse(); });
    aone.MessageFactory.getInstance().register(GeneralAddFreindExpRequest.ID, function () { return new GeneralAddFreindExpRequest(); });
    aone.MessageFactory.getInstance().register(GeneralAddFreindExpResponse.ID, function () { return new GeneralAddFreindExpResponse(); });
    aone.MessageFactory.getInstance().register(FreindsToDoRequest.ID, function () { return new FreindsToDoRequest(); });
    aone.MessageFactory.getInstance().register(FreindsToDoResponse.ID, function () { return new FreindsToDoResponse(); });
    aone.MessageFactory.getInstance().register(SkillResetRequest.ID, function () { return new SkillResetRequest(); });
    aone.MessageFactory.getInstance().register(SkillResetResponse.ID, function () { return new SkillResetResponse(); });
    aone.MessageFactory.getInstance().register(ChooseFriendRequest.ID, function () { return new ChooseFriendRequest(); });
    aone.MessageFactory.getInstance().register(ChooseFriendResponse.ID, function () { return new ChooseFriendResponse(); });
    aone.MessageFactory.getInstance().register(FashionBuyRequest.ID, function () { return new FashionBuyRequest(); });
    aone.MessageFactory.getInstance().register(FashionBuyResponse.ID, function () { return new FashionBuyResponse(); });
    aone.MessageFactory.getInstance().register(FashionWearRequest.ID, function () { return new FashionWearRequest(); });
    aone.MessageFactory.getInstance().register(FashionWearResponse.ID, function () { return new FashionWearResponse(); });
    aone.MessageFactory.getInstance().register(ComposeCarvePropRequest.ID, function () { return new ComposeCarvePropRequest(); });
    aone.MessageFactory.getInstance().register(ComposeCarvePropResponse.ID, function () { return new ComposeCarvePropResponse(); });
    aone.MessageFactory.getInstance().register(GeneralRebirthRequest.ID, function () { return new GeneralRebirthRequest(); });
    aone.MessageFactory.getInstance().register(GeneralRebirthResponse.ID, function () { return new GeneralRebirthResponse(); });
    aone.MessageFactory.getInstance().register(GeneralLifeStatActivateRequest.ID, function () { return new GeneralLifeStatActivateRequest(); });
    aone.MessageFactory.getInstance().register(GeneralLifeStatActivateResponse.ID, function () { return new GeneralLifeStatActivateResponse(); });
    aone.MessageFactory.getInstance().register(GeneralLifeStatBattleRequest.ID, function () { return new GeneralLifeStatBattleRequest(); });
    aone.MessageFactory.getInstance().register(GeneralLifeStatBattleResponse.ID, function () { return new GeneralLifeStatBattleResponse(); });
    aone.MessageFactory.getInstance().register(GeneralPsychicActivateRequest.ID, function () { return new GeneralPsychicActivateRequest(); });
    aone.MessageFactory.getInstance().register(GeneralPsychicActivateResponse.ID, function () { return new GeneralPsychicActivateResponse(); });
    aone.MessageFactory.getInstance().register(GeneralPsychicRefreshRequest.ID, function () { return new GeneralPsychicRefreshRequest(); });
    aone.MessageFactory.getInstance().register(GeneralPsychicRefreshResponse.ID, function () { return new GeneralPsychicRefreshResponse(); });
    aone.MessageFactory.getInstance().register(GeneralSelectEquipRequest.ID, function () { return new GeneralSelectEquipRequest(); });
    aone.MessageFactory.getInstance().register(GeneralSelectEquipResponse.ID, function () { return new GeneralSelectEquipResponse(); });
    aone.MessageFactory.getInstance().register(GeneralUplevelEquipRequest.ID, function () { return new GeneralUplevelEquipRequest(); });
    aone.MessageFactory.getInstance().register(GeneralUplevelEquipResponse.ID, function () { return new GeneralUplevelEquipResponse(); });
    aone.MessageFactory.getInstance().register(GeneralUpstepEquipRequest.ID, function () { return new GeneralUpstepEquipRequest(); });
    aone.MessageFactory.getInstance().register(GeneralUpstepEquipResponse.ID, function () { return new GeneralUpstepEquipResponse(); });
    aone.MessageFactory.getInstance().register(GeneralTransferRequest.ID, function () { return new GeneralTransferRequest(); });
    aone.MessageFactory.getInstance().register(GeneralTransferResponse.ID, function () { return new GeneralTransferResponse(); });
    aone.MessageFactory.getInstance().register(GeneralTransferSkillUpRequest.ID, function () { return new GeneralTransferSkillUpRequest(); });
    aone.MessageFactory.getInstance().register(GeneralTransferSkillUpResponse.ID, function () { return new GeneralTransferSkillUpResponse(); });
    aone.MessageFactory.getInstance().register(GeneralTransferTabRequest.ID, function () { return new GeneralTransferTabRequest(); });
    aone.MessageFactory.getInstance().register(GeneralTransferTabResponse.ID, function () { return new GeneralTransferTabResponse(); });
})(message || (message = {}));
//Date: 2019-12
//File: msg_cg_instance.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战怪物请求
    // request ChallengeMob
    ////////////////////////////////////////////////////////////////////////////////
    var ChallengeMobReqBody = (function () {
        function ChallengeMobReqBody() {
            this.sequence = 0; // 战斗序号
            this.mobsId = 0; // 怪物Id
            this.is_jump = false; // 是否跳过战斗
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
            this.formation = [];
        }
        ChallengeMobReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ChallengeMobReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            // is_jump
            encoder.write_bool(this.is_jump);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            // formation
            encoder.write_fixuint32(Object.keys(this.formation).length);
            for (var k in this.formation) {
                if (!this.formation[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChallengeMobReqBody;
    }());
    message.ChallengeMobReqBody = ChallengeMobReqBody;
    __reflect(ChallengeMobReqBody.prototype, "message.ChallengeMobReqBody", ["aone.AoneBody"]);
    var ChallengeMobRequest = (function () {
        function ChallengeMobRequest() {
            this.header = new aone.AoneReqHeader(ChallengeMobRequest.ID);
            this.body = new ChallengeMobReqBody();
        }
        ChallengeMobRequest.prototype.parse_bytes = function (decoder) { return false; };
        ChallengeMobRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChallengeMobRequest.ID = 20000;
        return ChallengeMobRequest;
    }());
    message.ChallengeMobRequest = ChallengeMobRequest;
    __reflect(ChallengeMobRequest.prototype, "message.ChallengeMobRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战怪物响应
    // response ChallengeMob
    ////////////////////////////////////////////////////////////////////////////////
    var ChallengeMobRespBody = (function () {
        function ChallengeMobRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
            this.resultInfo = [];
        }
        ChallengeMobRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // resultInfo
            if (decoder_.eof())
                return true;
            var resultInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < resultInfo_count; i++) {
                this.resultInfo.push(new message.BattleImitateResult());
                if (!this.resultInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChallengeMobRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ChallengeMobRespBody;
    }());
    message.ChallengeMobRespBody = ChallengeMobRespBody;
    __reflect(ChallengeMobRespBody.prototype, "message.ChallengeMobRespBody", ["aone.AoneBody"]);
    var ChallengeMobResponse = (function () {
        function ChallengeMobResponse() {
            this.header = new aone.AoneRespHeader(ChallengeMobResponse.ID);
            this.body = new ChallengeMobRespBody();
        }
        ChallengeMobResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChallengeMobResponse.prototype.to_bytes = function (encoder) { return false; };
        ChallengeMobResponse.ID = 20001;
        return ChallengeMobResponse;
    }());
    message.ChallengeMobResponse = ChallengeMobResponse;
    __reflect(ChallengeMobResponse.prototype, "message.ChallengeMobResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本扫荡请求
    // request SweepMobs
    ////////////////////////////////////////////////////////////////////////////////
    var SweepMobsReqBody = (function () {
        function SweepMobsReqBody() {
            this.mobsId = 0; // 怪物Id
            this.sweepCount = 0; // 扫荡次数
            this.is_down = false; // (下面的按钮需要达到vip等级)
        }
        SweepMobsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SweepMobsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            // sweepCount
            encoder.write_fixuint32(this.sweepCount);
            // is_down
            encoder.write_bool(this.is_down);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SweepMobsReqBody;
    }());
    message.SweepMobsReqBody = SweepMobsReqBody;
    __reflect(SweepMobsReqBody.prototype, "message.SweepMobsReqBody", ["aone.AoneBody"]);
    var SweepMobsRequest = (function () {
        function SweepMobsRequest() {
            this.header = new aone.AoneReqHeader(SweepMobsRequest.ID);
            this.body = new SweepMobsReqBody();
        }
        SweepMobsRequest.prototype.parse_bytes = function (decoder) { return false; };
        SweepMobsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SweepMobsRequest.ID = 20002;
        return SweepMobsRequest;
    }());
    message.SweepMobsRequest = SweepMobsRequest;
    __reflect(SweepMobsRequest.prototype, "message.SweepMobsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 扫荡物品回复
    // struct SweepGoods
    ////////////////////////////////////////////////////////////////////////////////
    var SweepGoods = (function () {
        function SweepGoods() {
            this.goodsInfo = [];
        }
        SweepGoods.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // goodsInfo
            if (decoder_.eof())
                return true;
            var goodsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodsInfo_count; i++) {
                this.goodsInfo.push(new message.GoodsInfo());
                if (!this.goodsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SweepGoods.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // goodsInfo
            encoder.write_fixuint32(Object.keys(this.goodsInfo).length);
            for (var k in this.goodsInfo) {
                if (!this.goodsInfo[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SweepGoods;
    }());
    message.SweepGoods = SweepGoods;
    __reflect(SweepGoods.prototype, "message.SweepGoods", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本扫荡回复
    // response SweepMobs
    ////////////////////////////////////////////////////////////////////////////////
    var SweepMobsRespBody = (function () {
        function SweepMobsRespBody() {
            this.sweepGoods = []; // 扫荡每次获得
            this.gameInfo = new message.GameInfo();
        }
        SweepMobsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sweepGoods
            if (decoder_.eof())
                return true;
            var sweepGoods_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < sweepGoods_count; i++) {
                this.sweepGoods.push(new SweepGoods());
                if (!this.sweepGoods[i].parse_bytes(decoder_))
                    return false;
            }
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SweepMobsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SweepMobsRespBody;
    }());
    message.SweepMobsRespBody = SweepMobsRespBody;
    __reflect(SweepMobsRespBody.prototype, "message.SweepMobsRespBody", ["aone.AoneBody"]);
    var SweepMobsResponse = (function () {
        function SweepMobsResponse() {
            this.header = new aone.AoneRespHeader(SweepMobsResponse.ID);
            this.body = new SweepMobsRespBody();
        }
        SweepMobsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SweepMobsResponse.prototype.to_bytes = function (encoder) { return false; };
        SweepMobsResponse.ID = 20003;
        return SweepMobsResponse;
    }());
    message.SweepMobsResponse = SweepMobsResponse;
    __reflect(SweepMobsResponse.prototype, "message.SweepMobsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 精英副本购买次数请求
    // request BuyMobsTime
    ////////////////////////////////////////////////////////////////////////////////
    var BuyMobsTimeReqBody = (function () {
        function BuyMobsTimeReqBody() {
            this.mobsId = 0; // 怪物Id
        }
        BuyMobsTimeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuyMobsTimeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyMobsTimeReqBody;
    }());
    message.BuyMobsTimeReqBody = BuyMobsTimeReqBody;
    __reflect(BuyMobsTimeReqBody.prototype, "message.BuyMobsTimeReqBody", ["aone.AoneBody"]);
    var BuyMobsTimeRequest = (function () {
        function BuyMobsTimeRequest() {
            this.header = new aone.AoneReqHeader(BuyMobsTimeRequest.ID);
            this.body = new BuyMobsTimeReqBody();
        }
        BuyMobsTimeRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuyMobsTimeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuyMobsTimeRequest.ID = 20004;
        return BuyMobsTimeRequest;
    }());
    message.BuyMobsTimeRequest = BuyMobsTimeRequest;
    __reflect(BuyMobsTimeRequest.prototype, "message.BuyMobsTimeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 精英副本购买次数回复
    // response BuyMobsTime
    ////////////////////////////////////////////////////////////////////////////////
    var BuyMobsTimeRespBody = (function () {
        function BuyMobsTimeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuyMobsTimeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuyMobsTimeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuyMobsTimeRespBody;
    }());
    message.BuyMobsTimeRespBody = BuyMobsTimeRespBody;
    __reflect(BuyMobsTimeRespBody.prototype, "message.BuyMobsTimeRespBody", ["aone.AoneBody"]);
    var BuyMobsTimeResponse = (function () {
        function BuyMobsTimeResponse() {
            this.header = new aone.AoneRespHeader(BuyMobsTimeResponse.ID);
            this.body = new BuyMobsTimeRespBody();
        }
        BuyMobsTimeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuyMobsTimeResponse.prototype.to_bytes = function (encoder) { return false; };
        BuyMobsTimeResponse.ID = 20005;
        return BuyMobsTimeResponse;
    }());
    message.BuyMobsTimeResponse = BuyMobsTimeResponse;
    __reflect(BuyMobsTimeResponse.prototype, "message.BuyMobsTimeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取副本宝箱请求
    // request InstanceChest
    ////////////////////////////////////////////////////////////////////////////////
    var InstanceChestReqBody = (function () {
        function InstanceChestReqBody() {
            this.mobsId = 0;
        }
        InstanceChestReqBody.prototype.parse_bytes = function (decoder) { return false; };
        InstanceChestReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return InstanceChestReqBody;
    }());
    message.InstanceChestReqBody = InstanceChestReqBody;
    __reflect(InstanceChestReqBody.prototype, "message.InstanceChestReqBody", ["aone.AoneBody"]);
    var InstanceChestRequest = (function () {
        function InstanceChestRequest() {
            this.header = new aone.AoneReqHeader(InstanceChestRequest.ID);
            this.body = new InstanceChestReqBody();
        }
        InstanceChestRequest.prototype.parse_bytes = function (decoder) { return false; };
        InstanceChestRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        InstanceChestRequest.ID = 20006;
        return InstanceChestRequest;
    }());
    message.InstanceChestRequest = InstanceChestRequest;
    __reflect(InstanceChestRequest.prototype, "message.InstanceChestRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取副本宝箱回复
    // response InstanceChest
    ////////////////////////////////////////////////////////////////////////////////
    var InstanceChestRespBody = (function () {
        function InstanceChestRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        InstanceChestRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        InstanceChestRespBody.prototype.to_bytes = function (encoder) { return false; };
        return InstanceChestRespBody;
    }());
    message.InstanceChestRespBody = InstanceChestRespBody;
    __reflect(InstanceChestRespBody.prototype, "message.InstanceChestRespBody", ["aone.AoneBody"]);
    var InstanceChestResponse = (function () {
        function InstanceChestResponse() {
            this.header = new aone.AoneRespHeader(InstanceChestResponse.ID);
            this.body = new InstanceChestRespBody();
        }
        InstanceChestResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        InstanceChestResponse.prototype.to_bytes = function (encoder) { return false; };
        InstanceChestResponse.ID = 20007;
        return InstanceChestResponse;
    }());
    message.InstanceChestResponse = InstanceChestResponse;
    __reflect(InstanceChestResponse.prototype, "message.InstanceChestResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 怪物列表请求
    // request MobsList
    ////////////////////////////////////////////////////////////////////////////////
    var MobsListReqBody = (function () {
        function MobsListReqBody() {
        }
        MobsListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MobsListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MobsListReqBody;
    }());
    message.MobsListReqBody = MobsListReqBody;
    __reflect(MobsListReqBody.prototype, "message.MobsListReqBody", ["aone.AoneBody"]);
    var MobsListRequest = (function () {
        function MobsListRequest() {
            this.header = new aone.AoneReqHeader(MobsListRequest.ID);
            this.body = new MobsListReqBody();
        }
        MobsListRequest.prototype.parse_bytes = function (decoder) { return false; };
        MobsListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MobsListRequest.ID = 20010;
        return MobsListRequest;
    }());
    message.MobsListRequest = MobsListRequest;
    __reflect(MobsListRequest.prototype, "message.MobsListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 怪物列表回复
    // response MobsList
    ////////////////////////////////////////////////////////////////////////////////
    var MobsListRespBody = (function () {
        function MobsListRespBody() {
            this.mobInfos = [];
        }
        MobsListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mobInfos
            if (decoder_.eof())
                return true;
            var mobInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mobInfos_count; i++) {
                this.mobInfos.push(new message.MobInfo());
                if (!this.mobInfos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MobsListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MobsListRespBody;
    }());
    message.MobsListRespBody = MobsListRespBody;
    __reflect(MobsListRespBody.prototype, "message.MobsListRespBody", ["aone.AoneBody"]);
    var MobsListResponse = (function () {
        function MobsListResponse() {
            this.header = new aone.AoneRespHeader(MobsListResponse.ID);
            this.body = new MobsListRespBody();
        }
        MobsListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MobsListResponse.prototype.to_bytes = function (encoder) { return false; };
        MobsListResponse.ID = 20011;
        return MobsListResponse;
    }());
    message.MobsListResponse = MobsListResponse;
    __reflect(MobsListResponse.prototype, "message.MobsListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取副本星级奖励请求
    // request RewardInstance
    ////////////////////////////////////////////////////////////////////////////////
    var RewardInstanceReqBody = (function () {
        function RewardInstanceReqBody() {
            this.type = 0; // 1、普通副本 2、精英副本
            this.instanceId = 0; // 副本Id
            this.index = 0; // 索引(从1开始)
        }
        RewardInstanceReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardInstanceReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardInstanceReqBody;
    }());
    message.RewardInstanceReqBody = RewardInstanceReqBody;
    __reflect(RewardInstanceReqBody.prototype, "message.RewardInstanceReqBody", ["aone.AoneBody"]);
    var RewardInstanceRequest = (function () {
        function RewardInstanceRequest() {
            this.header = new aone.AoneReqHeader(RewardInstanceRequest.ID);
            this.body = new RewardInstanceReqBody();
        }
        RewardInstanceRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardInstanceRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardInstanceRequest.ID = 20012;
        return RewardInstanceRequest;
    }());
    message.RewardInstanceRequest = RewardInstanceRequest;
    __reflect(RewardInstanceRequest.prototype, "message.RewardInstanceRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取副本星级奖励回复
    // response RewardInstance
    ////////////////////////////////////////////////////////////////////////////////
    var RewardInstanceRespBody = (function () {
        function RewardInstanceRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardInstanceRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardInstanceRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardInstanceRespBody;
    }());
    message.RewardInstanceRespBody = RewardInstanceRespBody;
    __reflect(RewardInstanceRespBody.prototype, "message.RewardInstanceRespBody", ["aone.AoneBody"]);
    var RewardInstanceResponse = (function () {
        function RewardInstanceResponse() {
            this.header = new aone.AoneRespHeader(RewardInstanceResponse.ID);
            this.body = new RewardInstanceRespBody();
        }
        RewardInstanceResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardInstanceResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardInstanceResponse.ID = 20013;
        return RewardInstanceResponse;
    }());
    message.RewardInstanceResponse = RewardInstanceResponse;
    __reflect(RewardInstanceResponse.prototype, "message.RewardInstanceResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 伏牛寨挑战请求
    // request ChallengeVillage
    ////////////////////////////////////////////////////////////////////////////////
    var ChallengeVillageReqBody = (function () {
        function ChallengeVillageReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗数据
        }
        ChallengeVillageReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ChallengeVillageReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChallengeVillageReqBody;
    }());
    message.ChallengeVillageReqBody = ChallengeVillageReqBody;
    __reflect(ChallengeVillageReqBody.prototype, "message.ChallengeVillageReqBody", ["aone.AoneBody"]);
    var ChallengeVillageRequest = (function () {
        function ChallengeVillageRequest() {
            this.header = new aone.AoneReqHeader(ChallengeVillageRequest.ID);
            this.body = new ChallengeVillageReqBody();
        }
        ChallengeVillageRequest.prototype.parse_bytes = function (decoder) { return false; };
        ChallengeVillageRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChallengeVillageRequest.ID = 20030;
        return ChallengeVillageRequest;
    }());
    message.ChallengeVillageRequest = ChallengeVillageRequest;
    __reflect(ChallengeVillageRequest.prototype, "message.ChallengeVillageRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 伏牛寨挑战回复
    // response ChallengeVillage
    ////////////////////////////////////////////////////////////////////////////////
    var ChallengeVillageRespBody = (function () {
        function ChallengeVillageRespBody() {
            this.addPerc = 0; // 加成比例
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        ChallengeVillageRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // addPerc
            if (decoder_.eof())
                return true;
            this.addPerc = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ChallengeVillageRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ChallengeVillageRespBody;
    }());
    message.ChallengeVillageRespBody = ChallengeVillageRespBody;
    __reflect(ChallengeVillageRespBody.prototype, "message.ChallengeVillageRespBody", ["aone.AoneBody"]);
    var ChallengeVillageResponse = (function () {
        function ChallengeVillageResponse() {
            this.header = new aone.AoneRespHeader(ChallengeVillageResponse.ID);
            this.body = new ChallengeVillageRespBody();
        }
        ChallengeVillageResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChallengeVillageResponse.prototype.to_bytes = function (encoder) { return false; };
        ChallengeVillageResponse.ID = 20031;
        return ChallengeVillageResponse;
    }());
    message.ChallengeVillageResponse = ChallengeVillageResponse;
    __reflect(ChallengeVillageResponse.prototype, "message.ChallengeVillageResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 伏牛寨扫荡请求
    // request VillageSweep
    ////////////////////////////////////////////////////////////////////////////////
    var VillageSweepReqBody = (function () {
        function VillageSweepReqBody() {
            this.battle_type = 0;
        }
        VillageSweepReqBody.prototype.parse_bytes = function (decoder) { return false; };
        VillageSweepReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // battle_type
            encoder.write_fixuint32(this.battle_type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return VillageSweepReqBody;
    }());
    message.VillageSweepReqBody = VillageSweepReqBody;
    __reflect(VillageSweepReqBody.prototype, "message.VillageSweepReqBody", ["aone.AoneBody"]);
    var VillageSweepRequest = (function () {
        function VillageSweepRequest() {
            this.header = new aone.AoneReqHeader(VillageSweepRequest.ID);
            this.body = new VillageSweepReqBody();
        }
        VillageSweepRequest.prototype.parse_bytes = function (decoder) { return false; };
        VillageSweepRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        VillageSweepRequest.ID = 20032;
        return VillageSweepRequest;
    }());
    message.VillageSweepRequest = VillageSweepRequest;
    __reflect(VillageSweepRequest.prototype, "message.VillageSweepRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 伏牛寨扫荡回复
    // response VillageSweep
    ////////////////////////////////////////////////////////////////////////////////
    var VillageSweepRespBody = (function () {
        function VillageSweepRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        VillageSweepRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        VillageSweepRespBody.prototype.to_bytes = function (encoder) { return false; };
        return VillageSweepRespBody;
    }());
    message.VillageSweepRespBody = VillageSweepRespBody;
    __reflect(VillageSweepRespBody.prototype, "message.VillageSweepRespBody", ["aone.AoneBody"]);
    var VillageSweepResponse = (function () {
        function VillageSweepResponse() {
            this.header = new aone.AoneRespHeader(VillageSweepResponse.ID);
            this.body = new VillageSweepRespBody();
        }
        VillageSweepResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        VillageSweepResponse.prototype.to_bytes = function (encoder) { return false; };
        VillageSweepResponse.ID = 20033;
        return VillageSweepResponse;
    }());
    message.VillageSweepResponse = VillageSweepResponse;
    __reflect(VillageSweepResponse.prototype, "message.VillageSweepResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 特训挑战请求
    // request ChallengeTraining
    ////////////////////////////////////////////////////////////////////////////////
    var ChallengeTrainingReqBody = (function () {
        function ChallengeTrainingReqBody() {
            this.sequence = 0; // 战斗序号
            this.mobsId = 0; // 怪物Id
            this.battleInfo = new message.BattleResultInfo(); // 战斗数据
        }
        ChallengeTrainingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ChallengeTrainingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChallengeTrainingReqBody;
    }());
    message.ChallengeTrainingReqBody = ChallengeTrainingReqBody;
    __reflect(ChallengeTrainingReqBody.prototype, "message.ChallengeTrainingReqBody", ["aone.AoneBody"]);
    var ChallengeTrainingRequest = (function () {
        function ChallengeTrainingRequest() {
            this.header = new aone.AoneReqHeader(ChallengeTrainingRequest.ID);
            this.body = new ChallengeTrainingReqBody();
        }
        ChallengeTrainingRequest.prototype.parse_bytes = function (decoder) { return false; };
        ChallengeTrainingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChallengeTrainingRequest.ID = 20040;
        return ChallengeTrainingRequest;
    }());
    message.ChallengeTrainingRequest = ChallengeTrainingRequest;
    __reflect(ChallengeTrainingRequest.prototype, "message.ChallengeTrainingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 特训挑战回复
    // response ChallengeTraining
    ////////////////////////////////////////////////////////////////////////////////
    var ChallengeTrainingRespBody = (function () {
        function ChallengeTrainingRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        ChallengeTrainingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ChallengeTrainingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ChallengeTrainingRespBody;
    }());
    message.ChallengeTrainingRespBody = ChallengeTrainingRespBody;
    __reflect(ChallengeTrainingRespBody.prototype, "message.ChallengeTrainingRespBody", ["aone.AoneBody"]);
    var ChallengeTrainingResponse = (function () {
        function ChallengeTrainingResponse() {
            this.header = new aone.AoneRespHeader(ChallengeTrainingResponse.ID);
            this.body = new ChallengeTrainingRespBody();
        }
        ChallengeTrainingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChallengeTrainingResponse.prototype.to_bytes = function (encoder) { return false; };
        ChallengeTrainingResponse.ID = 20041;
        return ChallengeTrainingResponse;
    }());
    message.ChallengeTrainingResponse = ChallengeTrainingResponse;
    __reflect(ChallengeTrainingResponse.prototype, "message.ChallengeTrainingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取特训奖励请求
    // request RewardTraining
    ////////////////////////////////////////////////////////////////////////////////
    var RewardTrainingReqBody = (function () {
        function RewardTrainingReqBody() {
            this.mobsId = 0; // 怪物Id(全部通关该值为0)
        }
        RewardTrainingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardTrainingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardTrainingReqBody;
    }());
    message.RewardTrainingReqBody = RewardTrainingReqBody;
    __reflect(RewardTrainingReqBody.prototype, "message.RewardTrainingReqBody", ["aone.AoneBody"]);
    var RewardTrainingRequest = (function () {
        function RewardTrainingRequest() {
            this.header = new aone.AoneReqHeader(RewardTrainingRequest.ID);
            this.body = new RewardTrainingReqBody();
        }
        RewardTrainingRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardTrainingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardTrainingRequest.ID = 20042;
        return RewardTrainingRequest;
    }());
    message.RewardTrainingRequest = RewardTrainingRequest;
    __reflect(RewardTrainingRequest.prototype, "message.RewardTrainingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取特训奖励回复
    // response RewardTraining
    ////////////////////////////////////////////////////////////////////////////////
    var RewardTrainingRespBody = (function () {
        function RewardTrainingRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardTrainingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardTrainingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardTrainingRespBody;
    }());
    message.RewardTrainingRespBody = RewardTrainingRespBody;
    __reflect(RewardTrainingRespBody.prototype, "message.RewardTrainingRespBody", ["aone.AoneBody"]);
    var RewardTrainingResponse = (function () {
        function RewardTrainingResponse() {
            this.header = new aone.AoneRespHeader(RewardTrainingResponse.ID);
            this.body = new RewardTrainingRespBody();
        }
        RewardTrainingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardTrainingResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardTrainingResponse.ID = 20043;
        return RewardTrainingResponse;
    }());
    message.RewardTrainingResponse = RewardTrainingResponse;
    __reflect(RewardTrainingResponse.prototype, "message.RewardTrainingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 探索副本请求
    // request StartSearching
    ////////////////////////////////////////////////////////////////////////////////
    var StartSearchingReqBody = (function () {
        function StartSearchingReqBody() {
            this.id = 0;
            this.generals = []; // 上阵武将
        }
        StartSearchingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        StartSearchingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            // generals
            encoder.write_uint32_vector(this.generals);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return StartSearchingReqBody;
    }());
    message.StartSearchingReqBody = StartSearchingReqBody;
    __reflect(StartSearchingReqBody.prototype, "message.StartSearchingReqBody", ["aone.AoneBody"]);
    var StartSearchingRequest = (function () {
        function StartSearchingRequest() {
            this.header = new aone.AoneReqHeader(StartSearchingRequest.ID);
            this.body = new StartSearchingReqBody();
        }
        StartSearchingRequest.prototype.parse_bytes = function (decoder) { return false; };
        StartSearchingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        StartSearchingRequest.ID = 20044;
        return StartSearchingRequest;
    }());
    message.StartSearchingRequest = StartSearchingRequest;
    __reflect(StartSearchingRequest.prototype, "message.StartSearchingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 探索副本回复
    // response StartSearching
    ////////////////////////////////////////////////////////////////////////////////
    var StartSearchingRespBody = (function () {
        function StartSearchingRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        StartSearchingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        StartSearchingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return StartSearchingRespBody;
    }());
    message.StartSearchingRespBody = StartSearchingRespBody;
    __reflect(StartSearchingRespBody.prototype, "message.StartSearchingRespBody", ["aone.AoneBody"]);
    var StartSearchingResponse = (function () {
        function StartSearchingResponse() {
            this.header = new aone.AoneRespHeader(StartSearchingResponse.ID);
            this.body = new StartSearchingRespBody();
        }
        StartSearchingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        StartSearchingResponse.prototype.to_bytes = function (encoder) { return false; };
        StartSearchingResponse.ID = 20045;
        return StartSearchingResponse;
    }());
    message.StartSearchingResponse = StartSearchingResponse;
    __reflect(StartSearchingResponse.prototype, "message.StartSearchingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加速探索副本请求
    // request SpeedSearching
    ////////////////////////////////////////////////////////////////////////////////
    var SpeedSearchingReqBody = (function () {
        function SpeedSearchingReqBody() {
            this.id = 0;
        }
        SpeedSearchingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SpeedSearchingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SpeedSearchingReqBody;
    }());
    message.SpeedSearchingReqBody = SpeedSearchingReqBody;
    __reflect(SpeedSearchingReqBody.prototype, "message.SpeedSearchingReqBody", ["aone.AoneBody"]);
    var SpeedSearchingRequest = (function () {
        function SpeedSearchingRequest() {
            this.header = new aone.AoneReqHeader(SpeedSearchingRequest.ID);
            this.body = new SpeedSearchingReqBody();
        }
        SpeedSearchingRequest.prototype.parse_bytes = function (decoder) { return false; };
        SpeedSearchingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SpeedSearchingRequest.ID = 20046;
        return SpeedSearchingRequest;
    }());
    message.SpeedSearchingRequest = SpeedSearchingRequest;
    __reflect(SpeedSearchingRequest.prototype, "message.SpeedSearchingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加速探索副本回复
    // response SpeedSearching
    ////////////////////////////////////////////////////////////////////////////////
    var SpeedSearchingRespBody = (function () {
        function SpeedSearchingRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SpeedSearchingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SpeedSearchingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SpeedSearchingRespBody;
    }());
    message.SpeedSearchingRespBody = SpeedSearchingRespBody;
    __reflect(SpeedSearchingRespBody.prototype, "message.SpeedSearchingRespBody", ["aone.AoneBody"]);
    var SpeedSearchingResponse = (function () {
        function SpeedSearchingResponse() {
            this.header = new aone.AoneRespHeader(SpeedSearchingResponse.ID);
            this.body = new SpeedSearchingRespBody();
        }
        SpeedSearchingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SpeedSearchingResponse.prototype.to_bytes = function (encoder) { return false; };
        SpeedSearchingResponse.ID = 20047;
        return SpeedSearchingResponse;
    }());
    message.SpeedSearchingResponse = SpeedSearchingResponse;
    __reflect(SpeedSearchingResponse.prototype, "message.SpeedSearchingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取探索副本奖励请求
    // request RewardSearching
    ////////////////////////////////////////////////////////////////////////////////
    var RewardSearchingReqBody = (function () {
        function RewardSearchingReqBody() {
            this.id = 0;
        }
        RewardSearchingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardSearchingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardSearchingReqBody;
    }());
    message.RewardSearchingReqBody = RewardSearchingReqBody;
    __reflect(RewardSearchingReqBody.prototype, "message.RewardSearchingReqBody", ["aone.AoneBody"]);
    var RewardSearchingRequest = (function () {
        function RewardSearchingRequest() {
            this.header = new aone.AoneReqHeader(RewardSearchingRequest.ID);
            this.body = new RewardSearchingReqBody();
        }
        RewardSearchingRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardSearchingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardSearchingRequest.ID = 20048;
        return RewardSearchingRequest;
    }());
    message.RewardSearchingRequest = RewardSearchingRequest;
    __reflect(RewardSearchingRequest.prototype, "message.RewardSearchingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取探索副本奖励回复
    // response RewardSearching
    ////////////////////////////////////////////////////////////////////////////////
    var RewardSearchingRespBody = (function () {
        function RewardSearchingRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardSearchingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardSearchingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardSearchingRespBody;
    }());
    message.RewardSearchingRespBody = RewardSearchingRespBody;
    __reflect(RewardSearchingRespBody.prototype, "message.RewardSearchingRespBody", ["aone.AoneBody"]);
    var RewardSearchingResponse = (function () {
        function RewardSearchingResponse() {
            this.header = new aone.AoneRespHeader(RewardSearchingResponse.ID);
            this.body = new RewardSearchingRespBody();
        }
        RewardSearchingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardSearchingResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardSearchingResponse.ID = 20049;
        return RewardSearchingResponse;
    }());
    message.RewardSearchingResponse = RewardSearchingResponse;
    __reflect(RewardSearchingResponse.prototype, "message.RewardSearchingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战遗迹副本结果请求
    // request ChallengeRelicResult
    ////////////////////////////////////////////////////////////////////////////////
    var ChallengeRelicResultReqBody = (function () {
        function ChallengeRelicResultReqBody() {
            this.sequence = 0; // 战斗序号
            this.mobsId = 0; // 怪物Id
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
        }
        ChallengeRelicResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ChallengeRelicResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChallengeRelicResultReqBody;
    }());
    message.ChallengeRelicResultReqBody = ChallengeRelicResultReqBody;
    __reflect(ChallengeRelicResultReqBody.prototype, "message.ChallengeRelicResultReqBody", ["aone.AoneBody"]);
    var ChallengeRelicResultRequest = (function () {
        function ChallengeRelicResultRequest() {
            this.header = new aone.AoneReqHeader(ChallengeRelicResultRequest.ID);
            this.body = new ChallengeRelicResultReqBody();
        }
        ChallengeRelicResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        ChallengeRelicResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChallengeRelicResultRequest.ID = 20050;
        return ChallengeRelicResultRequest;
    }());
    message.ChallengeRelicResultRequest = ChallengeRelicResultRequest;
    __reflect(ChallengeRelicResultRequest.prototype, "message.ChallengeRelicResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战遗迹副本结果回复
    // response ChallengeRelicResult
    ////////////////////////////////////////////////////////////////////////////////
    var ChallengeRelicResultRespBody = (function () {
        function ChallengeRelicResultRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        ChallengeRelicResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ChallengeRelicResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ChallengeRelicResultRespBody;
    }());
    message.ChallengeRelicResultRespBody = ChallengeRelicResultRespBody;
    __reflect(ChallengeRelicResultRespBody.prototype, "message.ChallengeRelicResultRespBody", ["aone.AoneBody"]);
    var ChallengeRelicResultResponse = (function () {
        function ChallengeRelicResultResponse() {
            this.header = new aone.AoneRespHeader(ChallengeRelicResultResponse.ID);
            this.body = new ChallengeRelicResultRespBody();
        }
        ChallengeRelicResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChallengeRelicResultResponse.prototype.to_bytes = function (encoder) { return false; };
        ChallengeRelicResultResponse.ID = 20051;
        return ChallengeRelicResultResponse;
    }());
    message.ChallengeRelicResultResponse = ChallengeRelicResultResponse;
    __reflect(ChallengeRelicResultResponse.prototype, "message.ChallengeRelicResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开启遗迹宝箱请求
    // request OpenRelicChest
    ////////////////////////////////////////////////////////////////////////////////
    var OpenRelicChestReqBody = (function () {
        function OpenRelicChestReqBody() {
            this.chest_id = 0;
            this.is_open_all = false;
        }
        OpenRelicChestReqBody.prototype.parse_bytes = function (decoder) { return false; };
        OpenRelicChestReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // chest_id
            encoder.write_fixuint32(this.chest_id);
            // is_open_all
            encoder.write_bool(this.is_open_all);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return OpenRelicChestReqBody;
    }());
    message.OpenRelicChestReqBody = OpenRelicChestReqBody;
    __reflect(OpenRelicChestReqBody.prototype, "message.OpenRelicChestReqBody", ["aone.AoneBody"]);
    var OpenRelicChestRequest = (function () {
        function OpenRelicChestRequest() {
            this.header = new aone.AoneReqHeader(OpenRelicChestRequest.ID);
            this.body = new OpenRelicChestReqBody();
        }
        OpenRelicChestRequest.prototype.parse_bytes = function (decoder) { return false; };
        OpenRelicChestRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        OpenRelicChestRequest.ID = 20052;
        return OpenRelicChestRequest;
    }());
    message.OpenRelicChestRequest = OpenRelicChestRequest;
    __reflect(OpenRelicChestRequest.prototype, "message.OpenRelicChestRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开启遗迹宝箱结果回复
    // response OpenRelicChest
    ////////////////////////////////////////////////////////////////////////////////
    var OpenRelicChestRespBody = (function () {
        function OpenRelicChestRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        OpenRelicChestRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        OpenRelicChestRespBody.prototype.to_bytes = function (encoder) { return false; };
        return OpenRelicChestRespBody;
    }());
    message.OpenRelicChestRespBody = OpenRelicChestRespBody;
    __reflect(OpenRelicChestRespBody.prototype, "message.OpenRelicChestRespBody", ["aone.AoneBody"]);
    var OpenRelicChestResponse = (function () {
        function OpenRelicChestResponse() {
            this.header = new aone.AoneRespHeader(OpenRelicChestResponse.ID);
            this.body = new OpenRelicChestRespBody();
        }
        OpenRelicChestResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        OpenRelicChestResponse.prototype.to_bytes = function (encoder) { return false; };
        OpenRelicChestResponse.ID = 20053;
        return OpenRelicChestResponse;
    }());
    message.OpenRelicChestResponse = OpenRelicChestResponse;
    __reflect(OpenRelicChestResponse.prototype, "message.OpenRelicChestResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 刷新探索副本请求
    // request RefreshSearching
    ////////////////////////////////////////////////////////////////////////////////
    var RefreshSearchingReqBody = (function () {
        function RefreshSearchingReqBody() {
            this.id = []; // 要刷新的id
        }
        RefreshSearchingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RefreshSearchingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_uint32_vector(this.id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RefreshSearchingReqBody;
    }());
    message.RefreshSearchingReqBody = RefreshSearchingReqBody;
    __reflect(RefreshSearchingReqBody.prototype, "message.RefreshSearchingReqBody", ["aone.AoneBody"]);
    var RefreshSearchingRequest = (function () {
        function RefreshSearchingRequest() {
            this.header = new aone.AoneReqHeader(RefreshSearchingRequest.ID);
            this.body = new RefreshSearchingReqBody();
        }
        RefreshSearchingRequest.prototype.parse_bytes = function (decoder) { return false; };
        RefreshSearchingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RefreshSearchingRequest.ID = 20054;
        return RefreshSearchingRequest;
    }());
    message.RefreshSearchingRequest = RefreshSearchingRequest;
    __reflect(RefreshSearchingRequest.prototype, "message.RefreshSearchingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 刷新探索副本回复
    // response RefreshSearching
    ////////////////////////////////////////////////////////////////////////////////
    var RefreshSearchingRespBody = (function () {
        function RefreshSearchingRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RefreshSearchingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RefreshSearchingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RefreshSearchingRespBody;
    }());
    message.RefreshSearchingRespBody = RefreshSearchingRespBody;
    __reflect(RefreshSearchingRespBody.prototype, "message.RefreshSearchingRespBody", ["aone.AoneBody"]);
    var RefreshSearchingResponse = (function () {
        function RefreshSearchingResponse() {
            this.header = new aone.AoneRespHeader(RefreshSearchingResponse.ID);
            this.body = new RefreshSearchingRespBody();
        }
        RefreshSearchingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RefreshSearchingResponse.prototype.to_bytes = function (encoder) { return false; };
        RefreshSearchingResponse.ID = 20055;
        return RefreshSearchingResponse;
    }());
    message.RefreshSearchingResponse = RefreshSearchingResponse;
    __reflect(RefreshSearchingResponse.prototype, "message.RefreshSearchingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 锁定探索副本请求
    // request LockSearching
    ////////////////////////////////////////////////////////////////////////////////
    var LockSearchingReqBody = (function () {
        function LockSearchingReqBody() {
            this.id = 0;
            this.is_lock = false; // true锁false解
        }
        LockSearchingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LockSearchingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            // is_lock
            encoder.write_bool(this.is_lock);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LockSearchingReqBody;
    }());
    message.LockSearchingReqBody = LockSearchingReqBody;
    __reflect(LockSearchingReqBody.prototype, "message.LockSearchingReqBody", ["aone.AoneBody"]);
    var LockSearchingRequest = (function () {
        function LockSearchingRequest() {
            this.header = new aone.AoneReqHeader(LockSearchingRequest.ID);
            this.body = new LockSearchingReqBody();
        }
        LockSearchingRequest.prototype.parse_bytes = function (decoder) { return false; };
        LockSearchingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LockSearchingRequest.ID = 20056;
        return LockSearchingRequest;
    }());
    message.LockSearchingRequest = LockSearchingRequest;
    __reflect(LockSearchingRequest.prototype, "message.LockSearchingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 锁定探索副本回复
    // response LockSearching
    ////////////////////////////////////////////////////////////////////////////////
    var LockSearchingRespBody = (function () {
        function LockSearchingRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LockSearchingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LockSearchingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LockSearchingRespBody;
    }());
    message.LockSearchingRespBody = LockSearchingRespBody;
    __reflect(LockSearchingRespBody.prototype, "message.LockSearchingRespBody", ["aone.AoneBody"]);
    var LockSearchingResponse = (function () {
        function LockSearchingResponse() {
            this.header = new aone.AoneRespHeader(LockSearchingResponse.ID);
            this.body = new LockSearchingRespBody();
        }
        LockSearchingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LockSearchingResponse.prototype.to_bytes = function (encoder) { return false; };
        LockSearchingResponse.ID = 20057;
        return LockSearchingResponse;
    }());
    message.LockSearchingResponse = LockSearchingResponse;
    __reflect(LockSearchingResponse.prototype, "message.LockSearchingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(ChallengeMobRequest.ID, function () { return new ChallengeMobRequest(); });
    aone.MessageFactory.getInstance().register(ChallengeMobResponse.ID, function () { return new ChallengeMobResponse(); });
    aone.MessageFactory.getInstance().register(SweepMobsRequest.ID, function () { return new SweepMobsRequest(); });
    aone.MessageFactory.getInstance().register(SweepMobsResponse.ID, function () { return new SweepMobsResponse(); });
    aone.MessageFactory.getInstance().register(BuyMobsTimeRequest.ID, function () { return new BuyMobsTimeRequest(); });
    aone.MessageFactory.getInstance().register(BuyMobsTimeResponse.ID, function () { return new BuyMobsTimeResponse(); });
    aone.MessageFactory.getInstance().register(InstanceChestRequest.ID, function () { return new InstanceChestRequest(); });
    aone.MessageFactory.getInstance().register(InstanceChestResponse.ID, function () { return new InstanceChestResponse(); });
    aone.MessageFactory.getInstance().register(MobsListRequest.ID, function () { return new MobsListRequest(); });
    aone.MessageFactory.getInstance().register(MobsListResponse.ID, function () { return new MobsListResponse(); });
    aone.MessageFactory.getInstance().register(RewardInstanceRequest.ID, function () { return new RewardInstanceRequest(); });
    aone.MessageFactory.getInstance().register(RewardInstanceResponse.ID, function () { return new RewardInstanceResponse(); });
    aone.MessageFactory.getInstance().register(ChallengeVillageRequest.ID, function () { return new ChallengeVillageRequest(); });
    aone.MessageFactory.getInstance().register(ChallengeVillageResponse.ID, function () { return new ChallengeVillageResponse(); });
    aone.MessageFactory.getInstance().register(VillageSweepRequest.ID, function () { return new VillageSweepRequest(); });
    aone.MessageFactory.getInstance().register(VillageSweepResponse.ID, function () { return new VillageSweepResponse(); });
    aone.MessageFactory.getInstance().register(ChallengeTrainingRequest.ID, function () { return new ChallengeTrainingRequest(); });
    aone.MessageFactory.getInstance().register(ChallengeTrainingResponse.ID, function () { return new ChallengeTrainingResponse(); });
    aone.MessageFactory.getInstance().register(RewardTrainingRequest.ID, function () { return new RewardTrainingRequest(); });
    aone.MessageFactory.getInstance().register(RewardTrainingResponse.ID, function () { return new RewardTrainingResponse(); });
    aone.MessageFactory.getInstance().register(StartSearchingRequest.ID, function () { return new StartSearchingRequest(); });
    aone.MessageFactory.getInstance().register(StartSearchingResponse.ID, function () { return new StartSearchingResponse(); });
    aone.MessageFactory.getInstance().register(SpeedSearchingRequest.ID, function () { return new SpeedSearchingRequest(); });
    aone.MessageFactory.getInstance().register(SpeedSearchingResponse.ID, function () { return new SpeedSearchingResponse(); });
    aone.MessageFactory.getInstance().register(RewardSearchingRequest.ID, function () { return new RewardSearchingRequest(); });
    aone.MessageFactory.getInstance().register(RewardSearchingResponse.ID, function () { return new RewardSearchingResponse(); });
    aone.MessageFactory.getInstance().register(ChallengeRelicResultRequest.ID, function () { return new ChallengeRelicResultRequest(); });
    aone.MessageFactory.getInstance().register(ChallengeRelicResultResponse.ID, function () { return new ChallengeRelicResultResponse(); });
    aone.MessageFactory.getInstance().register(OpenRelicChestRequest.ID, function () { return new OpenRelicChestRequest(); });
    aone.MessageFactory.getInstance().register(OpenRelicChestResponse.ID, function () { return new OpenRelicChestResponse(); });
    aone.MessageFactory.getInstance().register(RefreshSearchingRequest.ID, function () { return new RefreshSearchingRequest(); });
    aone.MessageFactory.getInstance().register(RefreshSearchingResponse.ID, function () { return new RefreshSearchingResponse(); });
    aone.MessageFactory.getInstance().register(LockSearchingRequest.ID, function () { return new LockSearchingRequest(); });
    aone.MessageFactory.getInstance().register(LockSearchingResponse.ID, function () { return new LockSearchingResponse(); });
})(message || (message = {}));
//Date: 2019-12
//File: msg_cg_ladder.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯挑战列表(刷新)请求
    // request LadderList
    ////////////////////////////////////////////////////////////////////////////////
    var LadderListReqBody = (function () {
        function LadderListReqBody() {
        }
        LadderListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LadderListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LadderListReqBody;
    }());
    message.LadderListReqBody = LadderListReqBody;
    __reflect(LadderListReqBody.prototype, "message.LadderListReqBody", ["aone.AoneBody"]);
    var LadderListRequest = (function () {
        function LadderListRequest() {
            this.header = new aone.AoneReqHeader(LadderListRequest.ID);
            this.body = new LadderListReqBody();
        }
        LadderListRequest.prototype.parse_bytes = function (decoder) { return false; };
        LadderListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LadderListRequest.ID = 22000;
        return LadderListRequest;
    }());
    message.LadderListRequest = LadderListRequest;
    __reflect(LadderListRequest.prototype, "message.LadderListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯挑战列表(刷新)回复
    // response LadderList
    ////////////////////////////////////////////////////////////////////////////////
    var LadderListRespBody = (function () {
        function LadderListRespBody() {
            this.ladders = []; // 天梯列表
            this.gameInfo = new message.GameInfo();
        }
        LadderListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // ladders
            if (decoder_.eof())
                return true;
            var ladders_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < ladders_count; i++) {
                this.ladders.push(new message.SimpleRoleFormationInfo());
                if (!this.ladders[i].parse_bytes(decoder_))
                    return false;
            }
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LadderListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LadderListRespBody;
    }());
    message.LadderListRespBody = LadderListRespBody;
    __reflect(LadderListRespBody.prototype, "message.LadderListRespBody", ["aone.AoneBody"]);
    var LadderListResponse = (function () {
        function LadderListResponse() {
            this.header = new aone.AoneRespHeader(LadderListResponse.ID);
            this.body = new LadderListRespBody();
        }
        LadderListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LadderListResponse.prototype.to_bytes = function (encoder) { return false; };
        LadderListResponse.ID = 22001;
        return LadderListResponse;
    }());
    message.LadderListResponse = LadderListResponse;
    __reflect(LadderListResponse.prototype, "message.LadderListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯挑战请求
    // request LadderBattle
    ////////////////////////////////////////////////////////////////////////////////
    var LadderBattleReqBody = (function () {
        function LadderBattleReqBody() {
            this.sequence = 0; // 战斗序号
            this.roleId = 0; // 角色Id
            this.battleInfo = new message.BattleResultInfo(); // 战斗数据
        }
        LadderBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LadderBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LadderBattleReqBody;
    }());
    message.LadderBattleReqBody = LadderBattleReqBody;
    __reflect(LadderBattleReqBody.prototype, "message.LadderBattleReqBody", ["aone.AoneBody"]);
    var LadderBattleRequest = (function () {
        function LadderBattleRequest() {
            this.header = new aone.AoneReqHeader(LadderBattleRequest.ID);
            this.body = new LadderBattleReqBody();
        }
        LadderBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        LadderBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LadderBattleRequest.ID = 22002;
        return LadderBattleRequest;
    }());
    message.LadderBattleRequest = LadderBattleRequest;
    __reflect(LadderBattleRequest.prototype, "message.LadderBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯挑战回复
    // response LadderBattle
    ////////////////////////////////////////////////////////////////////////////////
    var LadderBattleRespBody = (function () {
        function LadderBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        LadderBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LadderBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LadderBattleRespBody;
    }());
    message.LadderBattleRespBody = LadderBattleRespBody;
    __reflect(LadderBattleRespBody.prototype, "message.LadderBattleRespBody", ["aone.AoneBody"]);
    var LadderBattleResponse = (function () {
        function LadderBattleResponse() {
            this.header = new aone.AoneRespHeader(LadderBattleResponse.ID);
            this.body = new LadderBattleRespBody();
        }
        LadderBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LadderBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        LadderBattleResponse.ID = 22003;
        return LadderBattleResponse;
    }());
    message.LadderBattleResponse = LadderBattleResponse;
    __reflect(LadderBattleResponse.prototype, "message.LadderBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯清除冷却请求
    // request LadderCoolingClear
    ////////////////////////////////////////////////////////////////////////////////
    var LadderCoolingClearReqBody = (function () {
        function LadderCoolingClearReqBody() {
        }
        LadderCoolingClearReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LadderCoolingClearReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LadderCoolingClearReqBody;
    }());
    message.LadderCoolingClearReqBody = LadderCoolingClearReqBody;
    __reflect(LadderCoolingClearReqBody.prototype, "message.LadderCoolingClearReqBody", ["aone.AoneBody"]);
    var LadderCoolingClearRequest = (function () {
        function LadderCoolingClearRequest() {
            this.header = new aone.AoneReqHeader(LadderCoolingClearRequest.ID);
            this.body = new LadderCoolingClearReqBody();
        }
        LadderCoolingClearRequest.prototype.parse_bytes = function (decoder) { return false; };
        LadderCoolingClearRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LadderCoolingClearRequest.ID = 22004;
        return LadderCoolingClearRequest;
    }());
    message.LadderCoolingClearRequest = LadderCoolingClearRequest;
    __reflect(LadderCoolingClearRequest.prototype, "message.LadderCoolingClearRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯清除冷却回复
    // response LadderCoolingClear
    ////////////////////////////////////////////////////////////////////////////////
    var LadderCoolingClearRespBody = (function () {
        function LadderCoolingClearRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LadderCoolingClearRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LadderCoolingClearRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LadderCoolingClearRespBody;
    }());
    message.LadderCoolingClearRespBody = LadderCoolingClearRespBody;
    __reflect(LadderCoolingClearRespBody.prototype, "message.LadderCoolingClearRespBody", ["aone.AoneBody"]);
    var LadderCoolingClearResponse = (function () {
        function LadderCoolingClearResponse() {
            this.header = new aone.AoneRespHeader(LadderCoolingClearResponse.ID);
            this.body = new LadderCoolingClearRespBody();
        }
        LadderCoolingClearResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LadderCoolingClearResponse.prototype.to_bytes = function (encoder) { return false; };
        LadderCoolingClearResponse.ID = 22005;
        return LadderCoolingClearResponse;
    }());
    message.LadderCoolingClearResponse = LadderCoolingClearResponse;
    __reflect(LadderCoolingClearResponse.prototype, "message.LadderCoolingClearResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯挑战次数增加请求
    // request LadderChallengeAdd
    ////////////////////////////////////////////////////////////////////////////////
    var LadderChallengeAddReqBody = (function () {
        function LadderChallengeAddReqBody() {
        }
        LadderChallengeAddReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LadderChallengeAddReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LadderChallengeAddReqBody;
    }());
    message.LadderChallengeAddReqBody = LadderChallengeAddReqBody;
    __reflect(LadderChallengeAddReqBody.prototype, "message.LadderChallengeAddReqBody", ["aone.AoneBody"]);
    var LadderChallengeAddRequest = (function () {
        function LadderChallengeAddRequest() {
            this.header = new aone.AoneReqHeader(LadderChallengeAddRequest.ID);
            this.body = new LadderChallengeAddReqBody();
        }
        LadderChallengeAddRequest.prototype.parse_bytes = function (decoder) { return false; };
        LadderChallengeAddRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LadderChallengeAddRequest.ID = 22006;
        return LadderChallengeAddRequest;
    }());
    message.LadderChallengeAddRequest = LadderChallengeAddRequest;
    __reflect(LadderChallengeAddRequest.prototype, "message.LadderChallengeAddRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯挑战次数增加回复
    // response LadderChallengeAdd
    ////////////////////////////////////////////////////////////////////////////////
    var LadderChallengeAddRespBody = (function () {
        function LadderChallengeAddRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LadderChallengeAddRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LadderChallengeAddRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LadderChallengeAddRespBody;
    }());
    message.LadderChallengeAddRespBody = LadderChallengeAddRespBody;
    __reflect(LadderChallengeAddRespBody.prototype, "message.LadderChallengeAddRespBody", ["aone.AoneBody"]);
    var LadderChallengeAddResponse = (function () {
        function LadderChallengeAddResponse() {
            this.header = new aone.AoneRespHeader(LadderChallengeAddResponse.ID);
            this.body = new LadderChallengeAddRespBody();
        }
        LadderChallengeAddResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LadderChallengeAddResponse.prototype.to_bytes = function (encoder) { return false; };
        LadderChallengeAddResponse.ID = 22007;
        return LadderChallengeAddResponse;
    }());
    message.LadderChallengeAddResponse = LadderChallengeAddResponse;
    __reflect(LadderChallengeAddResponse.prototype, "message.LadderChallengeAddResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯快速挑战请求
    // request LadderQuickReward
    ////////////////////////////////////////////////////////////////////////////////
    var LadderQuickRewardReqBody = (function () {
        function LadderQuickRewardReqBody() {
            this.roleId = 0; // 角色Id
        }
        LadderQuickRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LadderQuickRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LadderQuickRewardReqBody;
    }());
    message.LadderQuickRewardReqBody = LadderQuickRewardReqBody;
    __reflect(LadderQuickRewardReqBody.prototype, "message.LadderQuickRewardReqBody", ["aone.AoneBody"]);
    var LadderQuickRewardRequest = (function () {
        function LadderQuickRewardRequest() {
            this.header = new aone.AoneReqHeader(LadderQuickRewardRequest.ID);
            this.body = new LadderQuickRewardReqBody();
        }
        LadderQuickRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        LadderQuickRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LadderQuickRewardRequest.ID = 22008;
        return LadderQuickRewardRequest;
    }());
    message.LadderQuickRewardRequest = LadderQuickRewardRequest;
    __reflect(LadderQuickRewardRequest.prototype, "message.LadderQuickRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯快速挑战回复
    // response LadderQuickReward
    ////////////////////////////////////////////////////////////////////////////////
    var LadderQuickRewardRespBody = (function () {
        function LadderQuickRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LadderQuickRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LadderQuickRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LadderQuickRewardRespBody;
    }());
    message.LadderQuickRewardRespBody = LadderQuickRewardRespBody;
    __reflect(LadderQuickRewardRespBody.prototype, "message.LadderQuickRewardRespBody", ["aone.AoneBody"]);
    var LadderQuickRewardResponse = (function () {
        function LadderQuickRewardResponse() {
            this.header = new aone.AoneRespHeader(LadderQuickRewardResponse.ID);
            this.body = new LadderQuickRewardRespBody();
        }
        LadderQuickRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LadderQuickRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        LadderQuickRewardResponse.ID = 22009;
        return LadderQuickRewardResponse;
    }());
    message.LadderQuickRewardResponse = LadderQuickRewardResponse;
    __reflect(LadderQuickRewardResponse.prototype, "message.LadderQuickRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯点赞请求
    // request LadderPraiseRank
    ////////////////////////////////////////////////////////////////////////////////
    var LadderPraiseRankReqBody = (function () {
        function LadderPraiseRankReqBody() {
            this.rank = 0; // 排名(1-10)
        }
        LadderPraiseRankReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LadderPraiseRankReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // rank
            encoder.write_fixuint32(this.rank);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LadderPraiseRankReqBody;
    }());
    message.LadderPraiseRankReqBody = LadderPraiseRankReqBody;
    __reflect(LadderPraiseRankReqBody.prototype, "message.LadderPraiseRankReqBody", ["aone.AoneBody"]);
    var LadderPraiseRankRequest = (function () {
        function LadderPraiseRankRequest() {
            this.header = new aone.AoneReqHeader(LadderPraiseRankRequest.ID);
            this.body = new LadderPraiseRankReqBody();
        }
        LadderPraiseRankRequest.prototype.parse_bytes = function (decoder) { return false; };
        LadderPraiseRankRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LadderPraiseRankRequest.ID = 22010;
        return LadderPraiseRankRequest;
    }());
    message.LadderPraiseRankRequest = LadderPraiseRankRequest;
    __reflect(LadderPraiseRankRequest.prototype, "message.LadderPraiseRankRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯点赞回复
    // response LadderPraiseRank
    ////////////////////////////////////////////////////////////////////////////////
    var LadderPraiseRankRespBody = (function () {
        function LadderPraiseRankRespBody() {
            this.gameInfo = new message.GameInfo();
            this.ladder_praise = [];
        }
        LadderPraiseRankRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // ladder_praise
            if (decoder_.eof())
                return true;
            var ladder_praise_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < ladder_praise_count; i++) {
                this.ladder_praise.push(new message.IIKVPairs());
                if (!this.ladder_praise[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LadderPraiseRankRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LadderPraiseRankRespBody;
    }());
    message.LadderPraiseRankRespBody = LadderPraiseRankRespBody;
    __reflect(LadderPraiseRankRespBody.prototype, "message.LadderPraiseRankRespBody", ["aone.AoneBody"]);
    var LadderPraiseRankResponse = (function () {
        function LadderPraiseRankResponse() {
            this.header = new aone.AoneRespHeader(LadderPraiseRankResponse.ID);
            this.body = new LadderPraiseRankRespBody();
        }
        LadderPraiseRankResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LadderPraiseRankResponse.prototype.to_bytes = function (encoder) { return false; };
        LadderPraiseRankResponse.ID = 22011;
        return LadderPraiseRankResponse;
    }());
    message.LadderPraiseRankResponse = LadderPraiseRankResponse;
    __reflect(LadderPraiseRankResponse.prototype, "message.LadderPraiseRankResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(LadderListRequest.ID, function () { return new LadderListRequest(); });
    aone.MessageFactory.getInstance().register(LadderListResponse.ID, function () { return new LadderListResponse(); });
    aone.MessageFactory.getInstance().register(LadderBattleRequest.ID, function () { return new LadderBattleRequest(); });
    aone.MessageFactory.getInstance().register(LadderBattleResponse.ID, function () { return new LadderBattleResponse(); });
    aone.MessageFactory.getInstance().register(LadderCoolingClearRequest.ID, function () { return new LadderCoolingClearRequest(); });
    aone.MessageFactory.getInstance().register(LadderCoolingClearResponse.ID, function () { return new LadderCoolingClearResponse(); });
    aone.MessageFactory.getInstance().register(LadderChallengeAddRequest.ID, function () { return new LadderChallengeAddRequest(); });
    aone.MessageFactory.getInstance().register(LadderChallengeAddResponse.ID, function () { return new LadderChallengeAddResponse(); });
    aone.MessageFactory.getInstance().register(LadderQuickRewardRequest.ID, function () { return new LadderQuickRewardRequest(); });
    aone.MessageFactory.getInstance().register(LadderQuickRewardResponse.ID, function () { return new LadderQuickRewardResponse(); });
    aone.MessageFactory.getInstance().register(LadderPraiseRankRequest.ID, function () { return new LadderPraiseRankRequest(); });
    aone.MessageFactory.getInstance().register(LadderPraiseRankResponse.ID, function () { return new LadderPraiseRankResponse(); });
})(message || (message = {}));
//Date: 2019-12
//File: msg_cg_league_ex.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 本文档定义联盟协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 领养兽蛋请求
    //message LeagueAdoptAnimalReqBody = 23500
    //{
    //	uint32 animalId;
    //}
    // 领养兽蛋回复
    //message LeagueAdoptAnimalRespBody = 23501
    //{
    //	LeagueBase info;						// 联盟基本信息
    //	repeated LeagueAnimal animals;
    //}
    // 异兽投喂请求
    //message LeagueAnimalFeedReqBody = 23502
    //{
    //	uint32 animalId;				// 异兽Id
    //	uint32 type;					// 为0表示普通投喂
    //	repeated GoodsInfo goodses;
    //}
    // 异兽投喂回复
    //message LeagueAnimalFeedRespBody = 23503
    //{
    //	GameInfo gameInfo;
    //	repeated LeagueAnimal animals;
    //	repeated MemberInfo members;		// 成员信息
    //}
    // 开启困兽请求
    // request LeagueOpenBoss
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueOpenBossReqBody = (function () {
        function LeagueOpenBossReqBody() {
            this.animalId = 0; // 异兽Id
        }
        LeagueOpenBossReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueOpenBossReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // animalId
            encoder.write_fixuint32(this.animalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueOpenBossReqBody;
    }());
    message.LeagueOpenBossReqBody = LeagueOpenBossReqBody;
    __reflect(LeagueOpenBossReqBody.prototype, "message.LeagueOpenBossReqBody", ["aone.AoneBody"]);
    var LeagueOpenBossRequest = (function () {
        function LeagueOpenBossRequest() {
            this.header = new aone.AoneReqHeader(LeagueOpenBossRequest.ID);
            this.body = new LeagueOpenBossReqBody();
        }
        LeagueOpenBossRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueOpenBossRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueOpenBossRequest.ID = 23510;
        return LeagueOpenBossRequest;
    }());
    message.LeagueOpenBossRequest = LeagueOpenBossRequest;
    __reflect(LeagueOpenBossRequest.prototype, "message.LeagueOpenBossRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开启困兽回复
    // response LeagueOpenBoss
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueOpenBossRespBody = (function () {
        function LeagueOpenBossRespBody() {
            this.bossInfo = new message.ArmyStage(); // BOSS信息
            this.processes = []; // 各种倒计时
            this.members = []; // 自己的信息
        }
        LeagueOpenBossRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // bossInfo
            if (decoder_.eof())
                return true;
            if (!this.bossInfo.parse_bytes(decoder_))
                return false;
            // processes
            if (decoder_.eof())
                return true;
            var processes_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < processes_count; i++) {
                this.processes.push(new message.ProgressInfo());
                if (!this.processes[i].parse_bytes(decoder_))
                    return false;
            }
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueOpenBossRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueOpenBossRespBody;
    }());
    message.LeagueOpenBossRespBody = LeagueOpenBossRespBody;
    __reflect(LeagueOpenBossRespBody.prototype, "message.LeagueOpenBossRespBody", ["aone.AoneBody"]);
    var LeagueOpenBossResponse = (function () {
        function LeagueOpenBossResponse() {
            this.header = new aone.AoneRespHeader(LeagueOpenBossResponse.ID);
            this.body = new LeagueOpenBossRespBody();
        }
        LeagueOpenBossResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueOpenBossResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueOpenBossResponse.ID = 23511;
        return LeagueOpenBossResponse;
    }());
    message.LeagueOpenBossResponse = LeagueOpenBossResponse;
    __reflect(LeagueOpenBossResponse.prototype, "message.LeagueOpenBossResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 进入困兽场景请求
    // request LeagueBossScene
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossSceneReqBody = (function () {
        function LeagueBossSceneReqBody() {
        }
        LeagueBossSceneReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueBossSceneReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueBossSceneReqBody;
    }());
    message.LeagueBossSceneReqBody = LeagueBossSceneReqBody;
    __reflect(LeagueBossSceneReqBody.prototype, "message.LeagueBossSceneReqBody", ["aone.AoneBody"]);
    var LeagueBossSceneRequest = (function () {
        function LeagueBossSceneRequest() {
            this.header = new aone.AoneReqHeader(LeagueBossSceneRequest.ID);
            this.body = new LeagueBossSceneReqBody();
        }
        LeagueBossSceneRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueBossSceneRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueBossSceneRequest.ID = 23512;
        return LeagueBossSceneRequest;
    }());
    message.LeagueBossSceneRequest = LeagueBossSceneRequest;
    __reflect(LeagueBossSceneRequest.prototype, "message.LeagueBossSceneRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 进入困兽场景回复
    // response LeagueBossScene
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossSceneRespBody = (function () {
        function LeagueBossSceneRespBody() {
            this.bossInfo = new message.ArmyStage(); // BOSS信息
            this.roleIds = []; // 在场成员
            this.rankItems = []; // 伤害排名
            this.buffIds = [];
        }
        LeagueBossSceneRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // bossInfo
            if (decoder_.eof())
                return true;
            if (!this.bossInfo.parse_bytes(decoder_))
                return false;
            // roleIds
            if (decoder_.eof())
                return true;
            this.roleIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // rankItems
            if (decoder_.eof())
                return true;
            var rankItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rankItems_count; i++) {
                this.rankItems.push(new message.LeagueBossHurtRank());
                if (!this.rankItems[i].parse_bytes(decoder_))
                    return false;
            }
            // buffIds
            if (decoder_.eof())
                return true;
            this.buffIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueBossSceneRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueBossSceneRespBody;
    }());
    message.LeagueBossSceneRespBody = LeagueBossSceneRespBody;
    __reflect(LeagueBossSceneRespBody.prototype, "message.LeagueBossSceneRespBody", ["aone.AoneBody"]);
    var LeagueBossSceneResponse = (function () {
        function LeagueBossSceneResponse() {
            this.header = new aone.AoneRespHeader(LeagueBossSceneResponse.ID);
            this.body = new LeagueBossSceneRespBody();
        }
        LeagueBossSceneResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueBossSceneResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueBossSceneResponse.ID = 23513;
        return LeagueBossSceneResponse;
    }());
    message.LeagueBossSceneResponse = LeagueBossSceneResponse;
    __reflect(LeagueBossSceneResponse.prototype, "message.LeagueBossSceneResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟boss激励请求
    // request LeagueBossInspire
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossInspireReqBody = (function () {
        function LeagueBossInspireReqBody() {
            this.inspireType = 0; // 1为普通激励2为高级激励
        }
        LeagueBossInspireReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueBossInspireReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // inspireType
            encoder.write_fixuint32(this.inspireType);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueBossInspireReqBody;
    }());
    message.LeagueBossInspireReqBody = LeagueBossInspireReqBody;
    __reflect(LeagueBossInspireReqBody.prototype, "message.LeagueBossInspireReqBody", ["aone.AoneBody"]);
    var LeagueBossInspireRequest = (function () {
        function LeagueBossInspireRequest() {
            this.header = new aone.AoneReqHeader(LeagueBossInspireRequest.ID);
            this.body = new LeagueBossInspireReqBody();
        }
        LeagueBossInspireRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueBossInspireRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueBossInspireRequest.ID = 23514;
        return LeagueBossInspireRequest;
    }());
    message.LeagueBossInspireRequest = LeagueBossInspireRequest;
    __reflect(LeagueBossInspireRequest.prototype, "message.LeagueBossInspireRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟boss激励回复
    // response LeagueBossInspire
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossInspireRespBody = (function () {
        function LeagueBossInspireRespBody() {
            this.gameInfo = new message.GameInfo();
            this.buffIds = [];
        }
        LeagueBossInspireRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // buffIds
            if (decoder_.eof())
                return true;
            this.buffIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueBossInspireRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueBossInspireRespBody;
    }());
    message.LeagueBossInspireRespBody = LeagueBossInspireRespBody;
    __reflect(LeagueBossInspireRespBody.prototype, "message.LeagueBossInspireRespBody", ["aone.AoneBody"]);
    var LeagueBossInspireResponse = (function () {
        function LeagueBossInspireResponse() {
            this.header = new aone.AoneRespHeader(LeagueBossInspireResponse.ID);
            this.body = new LeagueBossInspireRespBody();
        }
        LeagueBossInspireResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueBossInspireResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueBossInspireResponse.ID = 23515;
        return LeagueBossInspireResponse;
    }());
    message.LeagueBossInspireResponse = LeagueBossInspireResponse;
    __reflect(LeagueBossInspireResponse.prototype, "message.LeagueBossInspireResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟boss挑战请求
    // request LeagueBossBattle
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossBattleReqBody = (function () {
        function LeagueBossBattleReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
        }
        LeagueBossBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueBossBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueBossBattleReqBody;
    }());
    message.LeagueBossBattleReqBody = LeagueBossBattleReqBody;
    __reflect(LeagueBossBattleReqBody.prototype, "message.LeagueBossBattleReqBody", ["aone.AoneBody"]);
    var LeagueBossBattleRequest = (function () {
        function LeagueBossBattleRequest() {
            this.header = new aone.AoneReqHeader(LeagueBossBattleRequest.ID);
            this.body = new LeagueBossBattleReqBody();
        }
        LeagueBossBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueBossBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueBossBattleRequest.ID = 23516;
        return LeagueBossBattleRequest;
    }());
    message.LeagueBossBattleRequest = LeagueBossBattleRequest;
    __reflect(LeagueBossBattleRequest.prototype, "message.LeagueBossBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟boss挑战回复
    // response LeagueBossBattle
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossBattleRespBody = (function () {
        function LeagueBossBattleRespBody() {
            this.gameInfo = new message.GameInfo();
            this.is_kill = false; // 是否击杀
            this.bossHp = 0; // boss挑战后血量
            this.members = []; // 成员信息
            this.progresses = []; // 进程变化
        }
        LeagueBossBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // is_kill
            if (decoder_.eof())
                return true;
            this.is_kill = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // bossHp
            if (decoder_.eof())
                return true;
            this.bossHp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            // progresses
            if (decoder_.eof())
                return true;
            var progresses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < progresses_count; i++) {
                this.progresses.push(new message.ProgressInfo());
                if (!this.progresses[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueBossBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueBossBattleRespBody;
    }());
    message.LeagueBossBattleRespBody = LeagueBossBattleRespBody;
    __reflect(LeagueBossBattleRespBody.prototype, "message.LeagueBossBattleRespBody", ["aone.AoneBody"]);
    var LeagueBossBattleResponse = (function () {
        function LeagueBossBattleResponse() {
            this.header = new aone.AoneRespHeader(LeagueBossBattleResponse.ID);
            this.body = new LeagueBossBattleRespBody();
        }
        LeagueBossBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueBossBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueBossBattleResponse.ID = 23517;
        return LeagueBossBattleResponse;
    }());
    message.LeagueBossBattleResponse = LeagueBossBattleResponse;
    __reflect(LeagueBossBattleResponse.prototype, "message.LeagueBossBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 实时同步伤害请求
    // request LeagueBossHurt
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossHurtReqBody = (function () {
        function LeagueBossHurtReqBody() {
            this.sequence = 0; // 战斗序号
            this.hurtValue = 0; // 伤害
        }
        LeagueBossHurtReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueBossHurtReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // hurtValue
            encoder.write_float64(this.hurtValue);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueBossHurtReqBody;
    }());
    message.LeagueBossHurtReqBody = LeagueBossHurtReqBody;
    __reflect(LeagueBossHurtReqBody.prototype, "message.LeagueBossHurtReqBody", ["aone.AoneBody"]);
    var LeagueBossHurtRequest = (function () {
        function LeagueBossHurtRequest() {
            this.header = new aone.AoneReqHeader(LeagueBossHurtRequest.ID);
            this.body = new LeagueBossHurtReqBody();
        }
        LeagueBossHurtRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueBossHurtRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueBossHurtRequest.ID = 23518;
        return LeagueBossHurtRequest;
    }());
    message.LeagueBossHurtRequest = LeagueBossHurtRequest;
    __reflect(LeagueBossHurtRequest.prototype, "message.LeagueBossHurtRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 实时同步伤害回复
    // response LeagueBossHurt
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossHurtRespBody = (function () {
        function LeagueBossHurtRespBody() {
            this.value = 0;
        }
        LeagueBossHurtRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueBossHurtRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueBossHurtRespBody;
    }());
    message.LeagueBossHurtRespBody = LeagueBossHurtRespBody;
    __reflect(LeagueBossHurtRespBody.prototype, "message.LeagueBossHurtRespBody", ["aone.AoneBody"]);
    var LeagueBossHurtResponse = (function () {
        function LeagueBossHurtResponse() {
            this.header = new aone.AoneRespHeader(LeagueBossHurtResponse.ID);
            this.body = new LeagueBossHurtRespBody();
        }
        LeagueBossHurtResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueBossHurtResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueBossHurtResponse.ID = 23519;
        return LeagueBossHurtResponse;
    }());
    message.LeagueBossHurtResponse = LeagueBossHurtResponse;
    __reflect(LeagueBossHurtResponse.prototype, "message.LeagueBossHurtResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加入庆功宴场景请求
    // request LeaguePartyScene
    ////////////////////////////////////////////////////////////////////////////////
    var LeaguePartySceneReqBody = (function () {
        function LeaguePartySceneReqBody() {
        }
        LeaguePartySceneReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeaguePartySceneReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeaguePartySceneReqBody;
    }());
    message.LeaguePartySceneReqBody = LeaguePartySceneReqBody;
    __reflect(LeaguePartySceneReqBody.prototype, "message.LeaguePartySceneReqBody", ["aone.AoneBody"]);
    var LeaguePartySceneRequest = (function () {
        function LeaguePartySceneRequest() {
            this.header = new aone.AoneReqHeader(LeaguePartySceneRequest.ID);
            this.body = new LeaguePartySceneReqBody();
        }
        LeaguePartySceneRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeaguePartySceneRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeaguePartySceneRequest.ID = 23530;
        return LeaguePartySceneRequest;
    }());
    message.LeaguePartySceneRequest = LeaguePartySceneRequest;
    __reflect(LeaguePartySceneRequest.prototype, "message.LeaguePartySceneRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加入庆功宴场景回复
    // response LeaguePartyScene
    ////////////////////////////////////////////////////////////////////////////////
    var LeaguePartySceneRespBody = (function () {
        function LeaguePartySceneRespBody() {
            this.gameInfo = new message.GameInfo();
            this.members = []; // 成员信息
            this.roleIds = []; // 在场成员
        }
        LeaguePartySceneRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            // roleIds
            if (decoder_.eof())
                return true;
            this.roleIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeaguePartySceneRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeaguePartySceneRespBody;
    }());
    message.LeaguePartySceneRespBody = LeaguePartySceneRespBody;
    __reflect(LeaguePartySceneRespBody.prototype, "message.LeaguePartySceneRespBody", ["aone.AoneBody"]);
    var LeaguePartySceneResponse = (function () {
        function LeaguePartySceneResponse() {
            this.header = new aone.AoneRespHeader(LeaguePartySceneResponse.ID);
            this.body = new LeaguePartySceneRespBody();
        }
        LeaguePartySceneResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeaguePartySceneResponse.prototype.to_bytes = function (encoder) { return false; };
        LeaguePartySceneResponse.ID = 23531;
        return LeaguePartySceneResponse;
    }());
    message.LeaguePartySceneResponse = LeaguePartySceneResponse;
    __reflect(LeaguePartySceneResponse.prototype, "message.LeaguePartySceneResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 庆功宴请求
    // request LeagueParty
    ////////////////////////////////////////////////////////////////////////////////
    var LeaguePartyReqBody = (function () {
        function LeaguePartyReqBody() {
            this.is_add = false; // 是否是加餐
        }
        LeaguePartyReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeaguePartyReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_add
            encoder.write_bool(this.is_add);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeaguePartyReqBody;
    }());
    message.LeaguePartyReqBody = LeaguePartyReqBody;
    __reflect(LeaguePartyReqBody.prototype, "message.LeaguePartyReqBody", ["aone.AoneBody"]);
    var LeaguePartyRequest = (function () {
        function LeaguePartyRequest() {
            this.header = new aone.AoneReqHeader(LeaguePartyRequest.ID);
            this.body = new LeaguePartyReqBody();
        }
        LeaguePartyRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeaguePartyRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeaguePartyRequest.ID = 23532;
        return LeaguePartyRequest;
    }());
    message.LeaguePartyRequest = LeaguePartyRequest;
    __reflect(LeaguePartyRequest.prototype, "message.LeaguePartyRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 庆功宴回复
    // response LeagueParty
    ////////////////////////////////////////////////////////////////////////////////
    var LeaguePartyRespBody = (function () {
        function LeaguePartyRespBody() {
            this.gameInfo = new message.GameInfo();
            this.members = []; // 返回信息
        }
        LeaguePartyRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeaguePartyRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeaguePartyRespBody;
    }());
    message.LeaguePartyRespBody = LeaguePartyRespBody;
    __reflect(LeaguePartyRespBody.prototype, "message.LeaguePartyRespBody", ["aone.AoneBody"]);
    var LeaguePartyResponse = (function () {
        function LeaguePartyResponse() {
            this.header = new aone.AoneRespHeader(LeaguePartyResponse.ID);
            this.body = new LeaguePartyRespBody();
        }
        LeaguePartyResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeaguePartyResponse.prototype.to_bytes = function (encoder) { return false; };
        LeaguePartyResponse.ID = 23533;
        return LeaguePartyResponse;
    }());
    message.LeaguePartyResponse = LeaguePartyResponse;
    __reflect(LeaguePartyResponse.prototype, "message.LeaguePartyResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加菜请求
    // request LeaguePartyAdd
    ////////////////////////////////////////////////////////////////////////////////
    var LeaguePartyAddReqBody = (function () {
        function LeaguePartyAddReqBody() {
        }
        LeaguePartyAddReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeaguePartyAddReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeaguePartyAddReqBody;
    }());
    message.LeaguePartyAddReqBody = LeaguePartyAddReqBody;
    __reflect(LeaguePartyAddReqBody.prototype, "message.LeaguePartyAddReqBody", ["aone.AoneBody"]);
    var LeaguePartyAddRequest = (function () {
        function LeaguePartyAddRequest() {
            this.header = new aone.AoneReqHeader(LeaguePartyAddRequest.ID);
            this.body = new LeaguePartyAddReqBody();
        }
        LeaguePartyAddRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeaguePartyAddRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeaguePartyAddRequest.ID = 23534;
        return LeaguePartyAddRequest;
    }());
    message.LeaguePartyAddRequest = LeaguePartyAddRequest;
    __reflect(LeaguePartyAddRequest.prototype, "message.LeaguePartyAddRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加菜回复
    // response LeaguePartyAdd
    ////////////////////////////////////////////////////////////////////////////////
    var LeaguePartyAddRespBody = (function () {
        function LeaguePartyAddRespBody() {
            this.gameInfo = new message.GameInfo();
            this.processes = []; // 各种倒计时
        }
        LeaguePartyAddRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // processes
            if (decoder_.eof())
                return true;
            var processes_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < processes_count; i++) {
                this.processes.push(new message.ProgressInfo());
                if (!this.processes[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeaguePartyAddRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeaguePartyAddRespBody;
    }());
    message.LeaguePartyAddRespBody = LeaguePartyAddRespBody;
    __reflect(LeaguePartyAddRespBody.prototype, "message.LeaguePartyAddRespBody", ["aone.AoneBody"]);
    var LeaguePartyAddResponse = (function () {
        function LeaguePartyAddResponse() {
            this.header = new aone.AoneRespHeader(LeaguePartyAddResponse.ID);
            this.body = new LeaguePartyAddRespBody();
        }
        LeaguePartyAddResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeaguePartyAddResponse.prototype.to_bytes = function (encoder) { return false; };
        LeaguePartyAddResponse.ID = 23535;
        return LeaguePartyAddResponse;
    }());
    message.LeaguePartyAddResponse = LeaguePartyAddResponse;
    __reflect(LeaguePartyAddResponse.prototype, "message.LeaguePartyAddResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 钓鱼刷新请求
    // request LeagueFishingRefresh
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueFishingRefreshReqBody = (function () {
        function LeagueFishingRefreshReqBody() {
            this.is_key = false; // 是否一键刷紫
            this.is_teach = false; // 是否新手
        }
        LeagueFishingRefreshReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueFishingRefreshReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_key
            encoder.write_bool(this.is_key);
            // is_teach
            encoder.write_bool(this.is_teach);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueFishingRefreshReqBody;
    }());
    message.LeagueFishingRefreshReqBody = LeagueFishingRefreshReqBody;
    __reflect(LeagueFishingRefreshReqBody.prototype, "message.LeagueFishingRefreshReqBody", ["aone.AoneBody"]);
    var LeagueFishingRefreshRequest = (function () {
        function LeagueFishingRefreshRequest() {
            this.header = new aone.AoneReqHeader(LeagueFishingRefreshRequest.ID);
            this.body = new LeagueFishingRefreshReqBody();
        }
        LeagueFishingRefreshRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueFishingRefreshRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueFishingRefreshRequest.ID = 23540;
        return LeagueFishingRefreshRequest;
    }());
    message.LeagueFishingRefreshRequest = LeagueFishingRefreshRequest;
    __reflect(LeagueFishingRefreshRequest.prototype, "message.LeagueFishingRefreshRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 钓鱼刷新回复
    // response LeagueFishingRefresh
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueFishingRefreshRespBody = (function () {
        function LeagueFishingRefreshRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueFishingRefreshRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueFishingRefreshRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueFishingRefreshRespBody;
    }());
    message.LeagueFishingRefreshRespBody = LeagueFishingRefreshRespBody;
    __reflect(LeagueFishingRefreshRespBody.prototype, "message.LeagueFishingRefreshRespBody", ["aone.AoneBody"]);
    var LeagueFishingRefreshResponse = (function () {
        function LeagueFishingRefreshResponse() {
            this.header = new aone.AoneRespHeader(LeagueFishingRefreshResponse.ID);
            this.body = new LeagueFishingRefreshRespBody();
        }
        LeagueFishingRefreshResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueFishingRefreshResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueFishingRefreshResponse.ID = 23541;
        return LeagueFishingRefreshResponse;
    }());
    message.LeagueFishingRefreshResponse = LeagueFishingRefreshResponse;
    __reflect(LeagueFishingRefreshResponse.prototype, "message.LeagueFishingRefreshResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开始钓鱼请求
    // request LeagueFishingStart
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueFishingStartReqBody = (function () {
        function LeagueFishingStartReqBody() {
        }
        LeagueFishingStartReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueFishingStartReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueFishingStartReqBody;
    }());
    message.LeagueFishingStartReqBody = LeagueFishingStartReqBody;
    __reflect(LeagueFishingStartReqBody.prototype, "message.LeagueFishingStartReqBody", ["aone.AoneBody"]);
    var LeagueFishingStartRequest = (function () {
        function LeagueFishingStartRequest() {
            this.header = new aone.AoneReqHeader(LeagueFishingStartRequest.ID);
            this.body = new LeagueFishingStartReqBody();
        }
        LeagueFishingStartRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueFishingStartRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueFishingStartRequest.ID = 23542;
        return LeagueFishingStartRequest;
    }());
    message.LeagueFishingStartRequest = LeagueFishingStartRequest;
    __reflect(LeagueFishingStartRequest.prototype, "message.LeagueFishingStartRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开始钓鱼回复
    // response LeagueFishingStart
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueFishingStartRespBody = (function () {
        function LeagueFishingStartRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueFishingStartRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueFishingStartRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueFishingStartRespBody;
    }());
    message.LeagueFishingStartRespBody = LeagueFishingStartRespBody;
    __reflect(LeagueFishingStartRespBody.prototype, "message.LeagueFishingStartRespBody", ["aone.AoneBody"]);
    var LeagueFishingStartResponse = (function () {
        function LeagueFishingStartResponse() {
            this.header = new aone.AoneRespHeader(LeagueFishingStartResponse.ID);
            this.body = new LeagueFishingStartRespBody();
        }
        LeagueFishingStartResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueFishingStartResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueFishingStartResponse.ID = 23543;
        return LeagueFishingStartResponse;
    }());
    message.LeagueFishingStartResponse = LeagueFishingStartResponse;
    __reflect(LeagueFishingStartResponse.prototype, "message.LeagueFishingStartResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 钓鱼结束请求
    // request LeagueFishingEnd
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueFishingEndReqBody = (function () {
        function LeagueFishingEndReqBody() {
        }
        LeagueFishingEndReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueFishingEndReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueFishingEndReqBody;
    }());
    message.LeagueFishingEndReqBody = LeagueFishingEndReqBody;
    __reflect(LeagueFishingEndReqBody.prototype, "message.LeagueFishingEndReqBody", ["aone.AoneBody"]);
    var LeagueFishingEndRequest = (function () {
        function LeagueFishingEndRequest() {
            this.header = new aone.AoneReqHeader(LeagueFishingEndRequest.ID);
            this.body = new LeagueFishingEndReqBody();
        }
        LeagueFishingEndRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueFishingEndRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueFishingEndRequest.ID = 23544;
        return LeagueFishingEndRequest;
    }());
    message.LeagueFishingEndRequest = LeagueFishingEndRequest;
    __reflect(LeagueFishingEndRequest.prototype, "message.LeagueFishingEndRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 钓鱼结束回复
    // response LeagueFishingEnd
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueFishingEndRespBody = (function () {
        function LeagueFishingEndRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueFishingEndRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueFishingEndRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueFishingEndRespBody;
    }());
    message.LeagueFishingEndRespBody = LeagueFishingEndRespBody;
    __reflect(LeagueFishingEndRespBody.prototype, "message.LeagueFishingEndRespBody", ["aone.AoneBody"]);
    var LeagueFishingEndResponse = (function () {
        function LeagueFishingEndResponse() {
            this.header = new aone.AoneRespHeader(LeagueFishingEndResponse.ID);
            this.body = new LeagueFishingEndRespBody();
        }
        LeagueFishingEndResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueFishingEndResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueFishingEndResponse.ID = 23545;
        return LeagueFishingEndResponse;
    }());
    message.LeagueFishingEndResponse = LeagueFishingEndResponse;
    __reflect(LeagueFishingEndResponse.prototype, "message.LeagueFishingEndResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取钓鱼奖励请求
    // request LeagueFishingReward
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueFishingRewardReqBody = (function () {
        function LeagueFishingRewardReqBody() {
            this.is_double = false;
        }
        LeagueFishingRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueFishingRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_double
            encoder.write_bool(this.is_double);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueFishingRewardReqBody;
    }());
    message.LeagueFishingRewardReqBody = LeagueFishingRewardReqBody;
    __reflect(LeagueFishingRewardReqBody.prototype, "message.LeagueFishingRewardReqBody", ["aone.AoneBody"]);
    var LeagueFishingRewardRequest = (function () {
        function LeagueFishingRewardRequest() {
            this.header = new aone.AoneReqHeader(LeagueFishingRewardRequest.ID);
            this.body = new LeagueFishingRewardReqBody();
        }
        LeagueFishingRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueFishingRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueFishingRewardRequest.ID = 23546;
        return LeagueFishingRewardRequest;
    }());
    message.LeagueFishingRewardRequest = LeagueFishingRewardRequest;
    __reflect(LeagueFishingRewardRequest.prototype, "message.LeagueFishingRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取钓鱼奖励回复
    // response LeagueFishingReward
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueFishingRewardRespBody = (function () {
        function LeagueFishingRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueFishingRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueFishingRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueFishingRewardRespBody;
    }());
    message.LeagueFishingRewardRespBody = LeagueFishingRewardRespBody;
    __reflect(LeagueFishingRewardRespBody.prototype, "message.LeagueFishingRewardRespBody", ["aone.AoneBody"]);
    var LeagueFishingRewardResponse = (function () {
        function LeagueFishingRewardResponse() {
            this.header = new aone.AoneRespHeader(LeagueFishingRewardResponse.ID);
            this.body = new LeagueFishingRewardRespBody();
        }
        LeagueFishingRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueFishingRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueFishingRewardResponse.ID = 23547;
        return LeagueFishingRewardResponse;
    }());
    message.LeagueFishingRewardResponse = LeagueFishingRewardResponse;
    __reflect(LeagueFishingRewardResponse.prototype, "message.LeagueFishingRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////
    // 联盟副本相关协议
    // 开启副本请求
    //message LeagueInstanceOpenReqBody = 23600
    //{
    //	uint32 instanceId;
    //}
    // 开启副本回复
    //message LeagueInstanceOpenRespBody = 23601
    //{
    //	LeagueBase info;						// 联盟基本信息
    //}
    // 副本信息请求
    // request LeagueInstanceInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceInfoReqBody = (function () {
        function LeagueInstanceInfoReqBody() {
            this.instanceId = 0; // 副本Id
        }
        LeagueInstanceInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceInfoReqBody;
    }());
    message.LeagueInstanceInfoReqBody = LeagueInstanceInfoReqBody;
    __reflect(LeagueInstanceInfoReqBody.prototype, "message.LeagueInstanceInfoReqBody", ["aone.AoneBody"]);
    var LeagueInstanceInfoRequest = (function () {
        function LeagueInstanceInfoRequest() {
            this.header = new aone.AoneReqHeader(LeagueInstanceInfoRequest.ID);
            this.body = new LeagueInstanceInfoReqBody();
        }
        LeagueInstanceInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInstanceInfoRequest.ID = 23602;
        return LeagueInstanceInfoRequest;
    }());
    message.LeagueInstanceInfoRequest = LeagueInstanceInfoRequest;
    __reflect(LeagueInstanceInfoRequest.prototype, "message.LeagueInstanceInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本信息回复
    // response LeagueInstanceInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceInfoRespBody = (function () {
        function LeagueInstanceInfoRespBody() {
            this.gameInfo = new message.GameInfo();
            this.instances = []; // 副本信息
        }
        LeagueInstanceInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // instances
            if (decoder_.eof())
                return true;
            var instances_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < instances_count; i++) {
                this.instances.push(new message.LeagueInstanceSimple());
                if (!this.instances[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueInstanceInfoRespBody;
    }());
    message.LeagueInstanceInfoRespBody = LeagueInstanceInfoRespBody;
    __reflect(LeagueInstanceInfoRespBody.prototype, "message.LeagueInstanceInfoRespBody", ["aone.AoneBody"]);
    var LeagueInstanceInfoResponse = (function () {
        function LeagueInstanceInfoResponse() {
            this.header = new aone.AoneRespHeader(LeagueInstanceInfoResponse.ID);
            this.body = new LeagueInstanceInfoRespBody();
        }
        LeagueInstanceInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueInstanceInfoResponse.ID = 23603;
        return LeagueInstanceInfoResponse;
    }());
    message.LeagueInstanceInfoResponse = LeagueInstanceInfoResponse;
    __reflect(LeagueInstanceInfoResponse.prototype, "message.LeagueInstanceInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买挑战次数请求
    // request LeagueInstanceBuyTime
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceBuyTimeReqBody = (function () {
        function LeagueInstanceBuyTimeReqBody() {
        }
        LeagueInstanceBuyTimeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceBuyTimeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceBuyTimeReqBody;
    }());
    message.LeagueInstanceBuyTimeReqBody = LeagueInstanceBuyTimeReqBody;
    __reflect(LeagueInstanceBuyTimeReqBody.prototype, "message.LeagueInstanceBuyTimeReqBody", ["aone.AoneBody"]);
    var LeagueInstanceBuyTimeRequest = (function () {
        function LeagueInstanceBuyTimeRequest() {
            this.header = new aone.AoneReqHeader(LeagueInstanceBuyTimeRequest.ID);
            this.body = new LeagueInstanceBuyTimeReqBody();
        }
        LeagueInstanceBuyTimeRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceBuyTimeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInstanceBuyTimeRequest.ID = 23604;
        return LeagueInstanceBuyTimeRequest;
    }());
    message.LeagueInstanceBuyTimeRequest = LeagueInstanceBuyTimeRequest;
    __reflect(LeagueInstanceBuyTimeRequest.prototype, "message.LeagueInstanceBuyTimeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买挑战次数回复
    // response LeagueInstanceBuyTime
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceBuyTimeRespBody = (function () {
        function LeagueInstanceBuyTimeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueInstanceBuyTimeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueInstanceBuyTimeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueInstanceBuyTimeRespBody;
    }());
    message.LeagueInstanceBuyTimeRespBody = LeagueInstanceBuyTimeRespBody;
    __reflect(LeagueInstanceBuyTimeRespBody.prototype, "message.LeagueInstanceBuyTimeRespBody", ["aone.AoneBody"]);
    var LeagueInstanceBuyTimeResponse = (function () {
        function LeagueInstanceBuyTimeResponse() {
            this.header = new aone.AoneRespHeader(LeagueInstanceBuyTimeResponse.ID);
            this.body = new LeagueInstanceBuyTimeRespBody();
        }
        LeagueInstanceBuyTimeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceBuyTimeResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueInstanceBuyTimeResponse.ID = 23605;
        return LeagueInstanceBuyTimeResponse;
    }());
    message.LeagueInstanceBuyTimeResponse = LeagueInstanceBuyTimeResponse;
    __reflect(LeagueInstanceBuyTimeResponse.prototype, "message.LeagueInstanceBuyTimeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战副本请求
    // request LeagueInstanceBattle
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceBattleReqBody = (function () {
        function LeagueInstanceBattleReqBody() {
            this.instanceId = 0; // 副本Id
            this.pos = 0; // 位置
            this.sequence = 0; // 战斗序号
            this.monstersCur = []; // 敌方当前信息
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
        }
        LeagueInstanceBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // pos
            encoder.write_fixuint32(this.pos);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // monstersCur
            encoder.write_fixuint32(Object.keys(this.monstersCur).length);
            for (var k in this.monstersCur) {
                if (!this.monstersCur[k].to_bytes(encoder))
                    return false;
            }
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceBattleReqBody;
    }());
    message.LeagueInstanceBattleReqBody = LeagueInstanceBattleReqBody;
    __reflect(LeagueInstanceBattleReqBody.prototype, "message.LeagueInstanceBattleReqBody", ["aone.AoneBody"]);
    var LeagueInstanceBattleRequest = (function () {
        function LeagueInstanceBattleRequest() {
            this.header = new aone.AoneReqHeader(LeagueInstanceBattleRequest.ID);
            this.body = new LeagueInstanceBattleReqBody();
        }
        LeagueInstanceBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInstanceBattleRequest.ID = 23606;
        return LeagueInstanceBattleRequest;
    }());
    message.LeagueInstanceBattleRequest = LeagueInstanceBattleRequest;
    __reflect(LeagueInstanceBattleRequest.prototype, "message.LeagueInstanceBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战副本回复
    // response LeagueInstanceBattle
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceBattleRespBody = (function () {
        function LeagueInstanceBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
            this.stageInfos = []; // 副本信息 LeagueInstanceStageInfo
        }
        LeagueInstanceBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // stageInfos
            if (decoder_.eof())
                return true;
            this.stageInfos = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueInstanceBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueInstanceBattleRespBody;
    }());
    message.LeagueInstanceBattleRespBody = LeagueInstanceBattleRespBody;
    __reflect(LeagueInstanceBattleRespBody.prototype, "message.LeagueInstanceBattleRespBody", ["aone.AoneBody"]);
    var LeagueInstanceBattleResponse = (function () {
        function LeagueInstanceBattleResponse() {
            this.header = new aone.AoneRespHeader(LeagueInstanceBattleResponse.ID);
            this.body = new LeagueInstanceBattleRespBody();
        }
        LeagueInstanceBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueInstanceBattleResponse.ID = 23607;
        return LeagueInstanceBattleResponse;
    }());
    message.LeagueInstanceBattleResponse = LeagueInstanceBattleResponse;
    __reflect(LeagueInstanceBattleResponse.prototype, "message.LeagueInstanceBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取怪物奖励请求
    // request LeagueInstanceMobReward
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceMobRewardReqBody = (function () {
        function LeagueInstanceMobRewardReqBody() {
            this.instanceId = 0; // 副本Id
            this.pos = 0; // 位置
        }
        LeagueInstanceMobRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceMobRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // pos
            encoder.write_fixuint32(this.pos);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceMobRewardReqBody;
    }());
    message.LeagueInstanceMobRewardReqBody = LeagueInstanceMobRewardReqBody;
    __reflect(LeagueInstanceMobRewardReqBody.prototype, "message.LeagueInstanceMobRewardReqBody", ["aone.AoneBody"]);
    var LeagueInstanceMobRewardRequest = (function () {
        function LeagueInstanceMobRewardRequest() {
            this.header = new aone.AoneReqHeader(LeagueInstanceMobRewardRequest.ID);
            this.body = new LeagueInstanceMobRewardReqBody();
        }
        LeagueInstanceMobRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceMobRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInstanceMobRewardRequest.ID = 23608;
        return LeagueInstanceMobRewardRequest;
    }());
    message.LeagueInstanceMobRewardRequest = LeagueInstanceMobRewardRequest;
    __reflect(LeagueInstanceMobRewardRequest.prototype, "message.LeagueInstanceMobRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取怪物奖励回复
    // response LeagueInstanceMobReward
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceMobRewardRespBody = (function () {
        function LeagueInstanceMobRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueInstanceMobRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueInstanceMobRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueInstanceMobRewardRespBody;
    }());
    message.LeagueInstanceMobRewardRespBody = LeagueInstanceMobRewardRespBody;
    __reflect(LeagueInstanceMobRewardRespBody.prototype, "message.LeagueInstanceMobRewardRespBody", ["aone.AoneBody"]);
    var LeagueInstanceMobRewardResponse = (function () {
        function LeagueInstanceMobRewardResponse() {
            this.header = new aone.AoneRespHeader(LeagueInstanceMobRewardResponse.ID);
            this.body = new LeagueInstanceMobRewardRespBody();
        }
        LeagueInstanceMobRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceMobRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueInstanceMobRewardResponse.ID = 23609;
        return LeagueInstanceMobRewardResponse;
    }());
    message.LeagueInstanceMobRewardResponse = LeagueInstanceMobRewardResponse;
    __reflect(LeagueInstanceMobRewardResponse.prototype, "message.LeagueInstanceMobRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 奖励补领请求
    //message LeagueInstanceSupplyReqBody = 23610
    //{
    //	uint32 instanceId;						// 领取全部传0过来
    //}
    // 奖励补领回复
    //message LeagueInstanceSupplyRespBody = 23611
    //{
    //	GameInfo gameInfo;
    //}
    // 副本日志请求
    // request LeagueInstanceRecord
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceRecordReqBody = (function () {
        function LeagueInstanceRecordReqBody() {
            this.instanceId = 0;
        }
        LeagueInstanceRecordReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceRecordReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceRecordReqBody;
    }());
    message.LeagueInstanceRecordReqBody = LeagueInstanceRecordReqBody;
    __reflect(LeagueInstanceRecordReqBody.prototype, "message.LeagueInstanceRecordReqBody", ["aone.AoneBody"]);
    var LeagueInstanceRecordRequest = (function () {
        function LeagueInstanceRecordRequest() {
            this.header = new aone.AoneReqHeader(LeagueInstanceRecordRequest.ID);
            this.body = new LeagueInstanceRecordReqBody();
        }
        LeagueInstanceRecordRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceRecordRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInstanceRecordRequest.ID = 23612;
        return LeagueInstanceRecordRequest;
    }());
    message.LeagueInstanceRecordRequest = LeagueInstanceRecordRequest;
    __reflect(LeagueInstanceRecordRequest.prototype, "message.LeagueInstanceRecordRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本日志回复
    // response LeagueInstanceRecord
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceRecordRespBody = (function () {
        function LeagueInstanceRecordRespBody() {
            this.records = [];
        }
        LeagueInstanceRecordRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // records
            if (decoder_.eof())
                return true;
            var records_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < records_count; i++) {
                this.records.push(new message.LeagueRecord());
                if (!this.records[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceRecordRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueInstanceRecordRespBody;
    }());
    message.LeagueInstanceRecordRespBody = LeagueInstanceRecordRespBody;
    __reflect(LeagueInstanceRecordRespBody.prototype, "message.LeagueInstanceRecordRespBody", ["aone.AoneBody"]);
    var LeagueInstanceRecordResponse = (function () {
        function LeagueInstanceRecordResponse() {
            this.header = new aone.AoneRespHeader(LeagueInstanceRecordResponse.ID);
            this.body = new LeagueInstanceRecordRespBody();
        }
        LeagueInstanceRecordResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceRecordResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueInstanceRecordResponse.ID = 23613;
        return LeagueInstanceRecordResponse;
    }());
    message.LeagueInstanceRecordResponse = LeagueInstanceRecordResponse;
    __reflect(LeagueInstanceRecordResponse.prototype, "message.LeagueInstanceRecordResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本伤害排行请求
    // request LeagueInstanceHurtRank
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceHurtRankReqBody = (function () {
        function LeagueInstanceHurtRankReqBody() {
            this.instanceId = 0;
        }
        LeagueInstanceHurtRankReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceHurtRankReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceHurtRankReqBody;
    }());
    message.LeagueInstanceHurtRankReqBody = LeagueInstanceHurtRankReqBody;
    __reflect(LeagueInstanceHurtRankReqBody.prototype, "message.LeagueInstanceHurtRankReqBody", ["aone.AoneBody"]);
    var LeagueInstanceHurtRankRequest = (function () {
        function LeagueInstanceHurtRankRequest() {
            this.header = new aone.AoneReqHeader(LeagueInstanceHurtRankRequest.ID);
            this.body = new LeagueInstanceHurtRankReqBody();
        }
        LeagueInstanceHurtRankRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceHurtRankRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInstanceHurtRankRequest.ID = 23614;
        return LeagueInstanceHurtRankRequest;
    }());
    message.LeagueInstanceHurtRankRequest = LeagueInstanceHurtRankRequest;
    __reflect(LeagueInstanceHurtRankRequest.prototype, "message.LeagueInstanceHurtRankRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本伤害排行回复
    // response LeagueInstanceHurtRank
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceHurtRankRespBody = (function () {
        function LeagueInstanceHurtRankRespBody() {
            this.items = [];
        }
        LeagueInstanceHurtRankRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.LeagueInstanceRankItem());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceHurtRankRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueInstanceHurtRankRespBody;
    }());
    message.LeagueInstanceHurtRankRespBody = LeagueInstanceHurtRankRespBody;
    __reflect(LeagueInstanceHurtRankRespBody.prototype, "message.LeagueInstanceHurtRankRespBody", ["aone.AoneBody"]);
    var LeagueInstanceHurtRankResponse = (function () {
        function LeagueInstanceHurtRankResponse() {
            this.header = new aone.AoneRespHeader(LeagueInstanceHurtRankResponse.ID);
            this.body = new LeagueInstanceHurtRankRespBody();
        }
        LeagueInstanceHurtRankResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceHurtRankResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueInstanceHurtRankResponse.ID = 23615;
        return LeagueInstanceHurtRankResponse;
    }());
    message.LeagueInstanceHurtRankResponse = LeagueInstanceHurtRankResponse;
    __reflect(LeagueInstanceHurtRankResponse.prototype, "message.LeagueInstanceHurtRankResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本列表请求
    // request LeagueInstanceList
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceListReqBody = (function () {
        function LeagueInstanceListReqBody() {
        }
        LeagueInstanceListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceListReqBody;
    }());
    message.LeagueInstanceListReqBody = LeagueInstanceListReqBody;
    __reflect(LeagueInstanceListReqBody.prototype, "message.LeagueInstanceListReqBody", ["aone.AoneBody"]);
    var LeagueInstanceListRequest = (function () {
        function LeagueInstanceListRequest() {
            this.header = new aone.AoneReqHeader(LeagueInstanceListRequest.ID);
            this.body = new LeagueInstanceListReqBody();
        }
        LeagueInstanceListRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInstanceListRequest.ID = 23618;
        return LeagueInstanceListRequest;
    }());
    message.LeagueInstanceListRequest = LeagueInstanceListRequest;
    __reflect(LeagueInstanceListRequest.prototype, "message.LeagueInstanceListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 副本列表回复
    // response LeagueInstanceList
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceListRespBody = (function () {
        function LeagueInstanceListRespBody() {
            this.instances = []; // 副本信息
        }
        LeagueInstanceListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // instances
            if (decoder_.eof())
                return true;
            var instances_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < instances_count; i++) {
                this.instances.push(new message.LeagueInstanceSimple());
                if (!this.instances[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueInstanceListRespBody;
    }());
    message.LeagueInstanceListRespBody = LeagueInstanceListRespBody;
    __reflect(LeagueInstanceListRespBody.prototype, "message.LeagueInstanceListRespBody", ["aone.AoneBody"]);
    var LeagueInstanceListResponse = (function () {
        function LeagueInstanceListResponse() {
            this.header = new aone.AoneRespHeader(LeagueInstanceListResponse.ID);
            this.body = new LeagueInstanceListRespBody();
        }
        LeagueInstanceListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceListResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueInstanceListResponse.ID = 23619;
        return LeagueInstanceListResponse;
    }());
    message.LeagueInstanceListResponse = LeagueInstanceListResponse;
    __reflect(LeagueInstanceListResponse.prototype, "message.LeagueInstanceListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取副本怪物请求
    // request LeagueInstanceStageInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceStageInfoReqBody = (function () {
        function LeagueInstanceStageInfoReqBody() {
            this.instanceId = 0; // 副本Id
            this.pos = 0; // 位置
        }
        LeagueInstanceStageInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceStageInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // pos
            encoder.write_fixuint32(this.pos);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceStageInfoReqBody;
    }());
    message.LeagueInstanceStageInfoReqBody = LeagueInstanceStageInfoReqBody;
    __reflect(LeagueInstanceStageInfoReqBody.prototype, "message.LeagueInstanceStageInfoReqBody", ["aone.AoneBody"]);
    var LeagueInstanceStageInfoRequest = (function () {
        function LeagueInstanceStageInfoRequest() {
            this.header = new aone.AoneReqHeader(LeagueInstanceStageInfoRequest.ID);
            this.body = new LeagueInstanceStageInfoReqBody();
        }
        LeagueInstanceStageInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInstanceStageInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInstanceStageInfoRequest.ID = 23620;
        return LeagueInstanceStageInfoRequest;
    }());
    message.LeagueInstanceStageInfoRequest = LeagueInstanceStageInfoRequest;
    __reflect(LeagueInstanceStageInfoRequest.prototype, "message.LeagueInstanceStageInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取副本怪物回复
    // response LeagueInstanceStageInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceStageInfoRespBody = (function () {
        function LeagueInstanceStageInfoRespBody() {
            this.stageInfos = []; // 副本信息 LeagueInstanceStageInfo
        }
        LeagueInstanceStageInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // stageInfos
            if (decoder_.eof())
                return true;
            this.stageInfos = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueInstanceStageInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueInstanceStageInfoRespBody;
    }());
    message.LeagueInstanceStageInfoRespBody = LeagueInstanceStageInfoRespBody;
    __reflect(LeagueInstanceStageInfoRespBody.prototype, "message.LeagueInstanceStageInfoRespBody", ["aone.AoneBody"]);
    var LeagueInstanceStageInfoResponse = (function () {
        function LeagueInstanceStageInfoResponse() {
            this.header = new aone.AoneRespHeader(LeagueInstanceStageInfoResponse.ID);
            this.body = new LeagueInstanceStageInfoRespBody();
        }
        LeagueInstanceStageInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceStageInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueInstanceStageInfoResponse.ID = 23621;
        return LeagueInstanceStageInfoResponse;
    }());
    message.LeagueInstanceStageInfoResponse = LeagueInstanceStageInfoResponse;
    __reflect(LeagueInstanceStageInfoResponse.prototype, "message.LeagueInstanceStageInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(LeagueOpenBossRequest.ID, function () { return new LeagueOpenBossRequest(); });
    aone.MessageFactory.getInstance().register(LeagueOpenBossResponse.ID, function () { return new LeagueOpenBossResponse(); });
    aone.MessageFactory.getInstance().register(LeagueBossSceneRequest.ID, function () { return new LeagueBossSceneRequest(); });
    aone.MessageFactory.getInstance().register(LeagueBossSceneResponse.ID, function () { return new LeagueBossSceneResponse(); });
    aone.MessageFactory.getInstance().register(LeagueBossInspireRequest.ID, function () { return new LeagueBossInspireRequest(); });
    aone.MessageFactory.getInstance().register(LeagueBossInspireResponse.ID, function () { return new LeagueBossInspireResponse(); });
    aone.MessageFactory.getInstance().register(LeagueBossBattleRequest.ID, function () { return new LeagueBossBattleRequest(); });
    aone.MessageFactory.getInstance().register(LeagueBossBattleResponse.ID, function () { return new LeagueBossBattleResponse(); });
    aone.MessageFactory.getInstance().register(LeagueBossHurtRequest.ID, function () { return new LeagueBossHurtRequest(); });
    aone.MessageFactory.getInstance().register(LeagueBossHurtResponse.ID, function () { return new LeagueBossHurtResponse(); });
    aone.MessageFactory.getInstance().register(LeaguePartySceneRequest.ID, function () { return new LeaguePartySceneRequest(); });
    aone.MessageFactory.getInstance().register(LeaguePartySceneResponse.ID, function () { return new LeaguePartySceneResponse(); });
    aone.MessageFactory.getInstance().register(LeaguePartyRequest.ID, function () { return new LeaguePartyRequest(); });
    aone.MessageFactory.getInstance().register(LeaguePartyResponse.ID, function () { return new LeaguePartyResponse(); });
    aone.MessageFactory.getInstance().register(LeaguePartyAddRequest.ID, function () { return new LeaguePartyAddRequest(); });
    aone.MessageFactory.getInstance().register(LeaguePartyAddResponse.ID, function () { return new LeaguePartyAddResponse(); });
    aone.MessageFactory.getInstance().register(LeagueFishingRefreshRequest.ID, function () { return new LeagueFishingRefreshRequest(); });
    aone.MessageFactory.getInstance().register(LeagueFishingRefreshResponse.ID, function () { return new LeagueFishingRefreshResponse(); });
    aone.MessageFactory.getInstance().register(LeagueFishingStartRequest.ID, function () { return new LeagueFishingStartRequest(); });
    aone.MessageFactory.getInstance().register(LeagueFishingStartResponse.ID, function () { return new LeagueFishingStartResponse(); });
    aone.MessageFactory.getInstance().register(LeagueFishingEndRequest.ID, function () { return new LeagueFishingEndRequest(); });
    aone.MessageFactory.getInstance().register(LeagueFishingEndResponse.ID, function () { return new LeagueFishingEndResponse(); });
    aone.MessageFactory.getInstance().register(LeagueFishingRewardRequest.ID, function () { return new LeagueFishingRewardRequest(); });
    aone.MessageFactory.getInstance().register(LeagueFishingRewardResponse.ID, function () { return new LeagueFishingRewardResponse(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceInfoRequest.ID, function () { return new LeagueInstanceInfoRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceInfoResponse.ID, function () { return new LeagueInstanceInfoResponse(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceBuyTimeRequest.ID, function () { return new LeagueInstanceBuyTimeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceBuyTimeResponse.ID, function () { return new LeagueInstanceBuyTimeResponse(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceBattleRequest.ID, function () { return new LeagueInstanceBattleRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceBattleResponse.ID, function () { return new LeagueInstanceBattleResponse(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceMobRewardRequest.ID, function () { return new LeagueInstanceMobRewardRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceMobRewardResponse.ID, function () { return new LeagueInstanceMobRewardResponse(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceRecordRequest.ID, function () { return new LeagueInstanceRecordRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceRecordResponse.ID, function () { return new LeagueInstanceRecordResponse(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceHurtRankRequest.ID, function () { return new LeagueInstanceHurtRankRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceHurtRankResponse.ID, function () { return new LeagueInstanceHurtRankResponse(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceListRequest.ID, function () { return new LeagueInstanceListRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceListResponse.ID, function () { return new LeagueInstanceListResponse(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceStageInfoRequest.ID, function () { return new LeagueInstanceStageInfoRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceStageInfoResponse.ID, function () { return new LeagueInstanceStageInfoResponse(); });
})(message || (message = {}));
//Date: 2019-2
//File: msg_cg_league_match.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 本文档定义联盟协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////
    // 联赛查看据点请求
    // request LeagueMatchFortress
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFortressReqBody = (function () {
        function LeagueMatchFortressReqBody() {
            this.type = 0;
            this.get_member = false; // 是否拉取成员信息
        }
        LeagueMatchFortressReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFortressReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // get_member
            encoder.write_bool(this.get_member);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchFortressReqBody;
    }());
    message.LeagueMatchFortressReqBody = LeagueMatchFortressReqBody;
    __reflect(LeagueMatchFortressReqBody.prototype, "message.LeagueMatchFortressReqBody", ["aone.AoneBody"]);
    var LeagueMatchFortressRequest = (function () {
        function LeagueMatchFortressRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchFortressRequest.ID);
            this.body = new LeagueMatchFortressReqBody();
        }
        LeagueMatchFortressRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFortressRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchFortressRequest.ID = 23800;
        return LeagueMatchFortressRequest;
    }());
    message.LeagueMatchFortressRequest = LeagueMatchFortressRequest;
    __reflect(LeagueMatchFortressRequest.prototype, "message.LeagueMatchFortressRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct SimpleMemberFormationZip
    ////////////////////////////////////////////////////////////////////////////////
    var SimpleMemberFormationZip = (function () {
        function SimpleMemberFormationZip() {
            this.formations = []; // 所有成员信息阵型
        }
        SimpleMemberFormationZip.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            var formations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formations_count; i++) {
                this.formations.push(new message.SimpleMemberFormationInfo());
                if (!this.formations[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimpleMemberFormationZip.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // formations
            encoder.write_fixuint32(Object.keys(this.formations).length);
            for (var k in this.formations) {
                if (!this.formations[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimpleMemberFormationZip;
    }());
    message.SimpleMemberFormationZip = SimpleMemberFormationZip;
    __reflect(SimpleMemberFormationZip.prototype, "message.SimpleMemberFormationZip", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛查看据点回复
    // response LeagueMatchFortress
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFortressRespBody = (function () {
        function LeagueMatchFortressRespBody() {
            this.leagueFortress = new message.LeagueMatchInfo(); // 联盟据点信息
            this.member_formations = []; // SimpleMemberFormationZip
        }
        LeagueMatchFortressRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // leagueFortress
            if (decoder_.eof())
                return true;
            if (!this.leagueFortress.parse_bytes(decoder_))
                return false;
            // member_formations
            if (decoder_.eof())
                return true;
            this.member_formations = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueMatchFortressRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchFortressRespBody;
    }());
    message.LeagueMatchFortressRespBody = LeagueMatchFortressRespBody;
    __reflect(LeagueMatchFortressRespBody.prototype, "message.LeagueMatchFortressRespBody", ["aone.AoneBody"]);
    var LeagueMatchFortressResponse = (function () {
        function LeagueMatchFortressResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchFortressResponse.ID);
            this.body = new LeagueMatchFortressRespBody();
        }
        LeagueMatchFortressResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchFortressResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchFortressResponse.ID = 23801;
        return LeagueMatchFortressResponse;
    }());
    message.LeagueMatchFortressResponse = LeagueMatchFortressResponse;
    __reflect(LeagueMatchFortressResponse.prototype, "message.LeagueMatchFortressResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛设置据点请求
    // request LeagueMatchSetFortress
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchSetFortressReqBody = (function () {
        function LeagueMatchSetFortressReqBody() {
            this.type = 0;
            this.member_id = [];
            this.formationIndex = [];
            this.index = [];
        }
        LeagueMatchSetFortressReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchSetFortressReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // member_id
            encoder.write_uint32_vector(this.member_id);
            // formationIndex
            encoder.write_uint32_vector(this.formationIndex);
            // index
            encoder.write_uint32_vector(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchSetFortressReqBody;
    }());
    message.LeagueMatchSetFortressReqBody = LeagueMatchSetFortressReqBody;
    __reflect(LeagueMatchSetFortressReqBody.prototype, "message.LeagueMatchSetFortressReqBody", ["aone.AoneBody"]);
    var LeagueMatchSetFortressRequest = (function () {
        function LeagueMatchSetFortressRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchSetFortressRequest.ID);
            this.body = new LeagueMatchSetFortressReqBody();
        }
        LeagueMatchSetFortressRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchSetFortressRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchSetFortressRequest.ID = 23802;
        return LeagueMatchSetFortressRequest;
    }());
    message.LeagueMatchSetFortressRequest = LeagueMatchSetFortressRequest;
    __reflect(LeagueMatchSetFortressRequest.prototype, "message.LeagueMatchSetFortressRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛设置据点回复
    // response LeagueMatchSetFortress
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchSetFortressRespBody = (function () {
        function LeagueMatchSetFortressRespBody() {
        }
        LeagueMatchSetFortressRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        LeagueMatchSetFortressRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchSetFortressRespBody;
    }());
    message.LeagueMatchSetFortressRespBody = LeagueMatchSetFortressRespBody;
    __reflect(LeagueMatchSetFortressRespBody.prototype, "message.LeagueMatchSetFortressRespBody", ["aone.AoneBody"]);
    var LeagueMatchSetFortressResponse = (function () {
        function LeagueMatchSetFortressResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchSetFortressResponse.ID);
            this.body = new LeagueMatchSetFortressRespBody();
        }
        LeagueMatchSetFortressResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchSetFortressResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchSetFortressResponse.ID = 23803;
        return LeagueMatchSetFortressResponse;
    }());
    message.LeagueMatchSetFortressResponse = LeagueMatchSetFortressResponse;
    __reflect(LeagueMatchSetFortressResponse.prototype, "message.LeagueMatchSetFortressResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛报名请求
    // request LeagueMatchSign
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchSignReqBody = (function () {
        function LeagueMatchSignReqBody() {
        }
        LeagueMatchSignReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchSignReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchSignReqBody;
    }());
    message.LeagueMatchSignReqBody = LeagueMatchSignReqBody;
    __reflect(LeagueMatchSignReqBody.prototype, "message.LeagueMatchSignReqBody", ["aone.AoneBody"]);
    var LeagueMatchSignRequest = (function () {
        function LeagueMatchSignRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchSignRequest.ID);
            this.body = new LeagueMatchSignReqBody();
        }
        LeagueMatchSignRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchSignRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchSignRequest.ID = 23804;
        return LeagueMatchSignRequest;
    }());
    message.LeagueMatchSignRequest = LeagueMatchSignRequest;
    __reflect(LeagueMatchSignRequest.prototype, "message.LeagueMatchSignRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛报名回复
    // response LeagueMatchSign
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchSignRespBody = (function () {
        function LeagueMatchSignRespBody() {
            this.info = new message.LeagueBase(); // 联盟基本信息
        }
        LeagueMatchSignRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            if (!this.info.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueMatchSignRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchSignRespBody;
    }());
    message.LeagueMatchSignRespBody = LeagueMatchSignRespBody;
    __reflect(LeagueMatchSignRespBody.prototype, "message.LeagueMatchSignRespBody", ["aone.AoneBody"]);
    var LeagueMatchSignResponse = (function () {
        function LeagueMatchSignResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchSignResponse.ID);
            this.body = new LeagueMatchSignRespBody();
        }
        LeagueMatchSignResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchSignResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchSignResponse.ID = 23805;
        return LeagueMatchSignResponse;
    }());
    message.LeagueMatchSignResponse = LeagueMatchSignResponse;
    __reflect(LeagueMatchSignResponse.prototype, "message.LeagueMatchSignResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取对手请求
    // request LeagueMatchOpponentInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchOpponentInfoReqBody = (function () {
        function LeagueMatchOpponentInfoReqBody() {
        }
        LeagueMatchOpponentInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchOpponentInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchOpponentInfoReqBody;
    }());
    message.LeagueMatchOpponentInfoReqBody = LeagueMatchOpponentInfoReqBody;
    __reflect(LeagueMatchOpponentInfoReqBody.prototype, "message.LeagueMatchOpponentInfoReqBody", ["aone.AoneBody"]);
    var LeagueMatchOpponentInfoRequest = (function () {
        function LeagueMatchOpponentInfoRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchOpponentInfoRequest.ID);
            this.body = new LeagueMatchOpponentInfoReqBody();
        }
        LeagueMatchOpponentInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchOpponentInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchOpponentInfoRequest.ID = 23806;
        return LeagueMatchOpponentInfoRequest;
    }());
    message.LeagueMatchOpponentInfoRequest = LeagueMatchOpponentInfoRequest;
    __reflect(LeagueMatchOpponentInfoRequest.prototype, "message.LeagueMatchOpponentInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取对手回复
    // response LeagueMatchOpponentInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchOpponentInfoRespBody = (function () {
        function LeagueMatchOpponentInfoRespBody() {
            this.opponentInfo = new message.CraftLeagueInfo(); // 敌方信息
            this.is_air = false; // 是否轮空
        }
        LeagueMatchOpponentInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // opponentInfo
            if (decoder_.eof())
                return true;
            if (!this.opponentInfo.parse_bytes(decoder_))
                return false;
            // is_air
            if (decoder_.eof())
                return true;
            this.is_air = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueMatchOpponentInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchOpponentInfoRespBody;
    }());
    message.LeagueMatchOpponentInfoRespBody = LeagueMatchOpponentInfoRespBody;
    __reflect(LeagueMatchOpponentInfoRespBody.prototype, "message.LeagueMatchOpponentInfoRespBody", ["aone.AoneBody"]);
    var LeagueMatchOpponentInfoResponse = (function () {
        function LeagueMatchOpponentInfoResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchOpponentInfoResponse.ID);
            this.body = new LeagueMatchOpponentInfoRespBody();
        }
        LeagueMatchOpponentInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchOpponentInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchOpponentInfoResponse.ID = 23807;
        return LeagueMatchOpponentInfoResponse;
    }());
    message.LeagueMatchOpponentInfoResponse = LeagueMatchOpponentInfoResponse;
    __reflect(LeagueMatchOpponentInfoResponse.prototype, "message.LeagueMatchOpponentInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取对手飞艇请求
    // request LeagueMatchOpponentFortress
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchOpponentFortressReqBody = (function () {
        function LeagueMatchOpponentFortressReqBody() {
            this.league_id = 0; // 对方联盟
            this.type = 0; // (0积分信息、1-5据点和积分信息）
            this.get_self = false; //	是否拉取自己全部据点信息
        }
        LeagueMatchOpponentFortressReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchOpponentFortressReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // league_id
            encoder.write_fixuint32(this.league_id);
            // type
            encoder.write_fixuint32(this.type);
            // get_self
            encoder.write_bool(this.get_self);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchOpponentFortressReqBody;
    }());
    message.LeagueMatchOpponentFortressReqBody = LeagueMatchOpponentFortressReqBody;
    __reflect(LeagueMatchOpponentFortressReqBody.prototype, "message.LeagueMatchOpponentFortressReqBody", ["aone.AoneBody"]);
    var LeagueMatchOpponentFortressRequest = (function () {
        function LeagueMatchOpponentFortressRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchOpponentFortressRequest.ID);
            this.body = new LeagueMatchOpponentFortressReqBody();
        }
        LeagueMatchOpponentFortressRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchOpponentFortressRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchOpponentFortressRequest.ID = 23808;
        return LeagueMatchOpponentFortressRequest;
    }());
    message.LeagueMatchOpponentFortressRequest = LeagueMatchOpponentFortressRequest;
    __reflect(LeagueMatchOpponentFortressRequest.prototype, "message.LeagueMatchOpponentFortressRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct leagueBattleName
    ////////////////////////////////////////////////////////////////////////////////
    var leagueBattleName = (function () {
        function leagueBattleName() {
            this.index = 0;
            this.name = "";
        }
        leagueBattleName.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        leagueBattleName.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // name
            encoder.write_string(this.name);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return leagueBattleName;
    }());
    message.leagueBattleName = leagueBattleName;
    __reflect(leagueBattleName.prototype, "message.leagueBattleName", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取对手飞艇回复
    // response LeagueMatchOpponentFortress
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchOpponentFortressRespBody = (function () {
        function LeagueMatchOpponentFortressRespBody() {
            this.matchInfo = new message.LeagueMatchInfo(); // 对方联盟据点信息
            this.battleInfo = new message.LeagueMatchBattleFortressInfo(); // 自己战斗相关信息
            this.selfInfo = new message.LeagueMatchInfo(); // 自己联盟信息
            this.leagueBattles = []; // 正在攻击的成员
        }
        LeagueMatchOpponentFortressRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // matchInfo
            if (decoder_.eof())
                return true;
            if (!this.matchInfo.parse_bytes(decoder_))
                return false;
            // battleInfo
            if (decoder_.eof())
                return true;
            if (!this.battleInfo.parse_bytes(decoder_))
                return false;
            // selfInfo
            if (decoder_.eof())
                return true;
            if (!this.selfInfo.parse_bytes(decoder_))
                return false;
            // leagueBattles
            if (decoder_.eof())
                return true;
            var leagueBattles_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < leagueBattles_count; i++) {
                this.leagueBattles.push(new leagueBattleName());
                if (!this.leagueBattles[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchOpponentFortressRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchOpponentFortressRespBody;
    }());
    message.LeagueMatchOpponentFortressRespBody = LeagueMatchOpponentFortressRespBody;
    __reflect(LeagueMatchOpponentFortressRespBody.prototype, "message.LeagueMatchOpponentFortressRespBody", ["aone.AoneBody"]);
    var LeagueMatchOpponentFortressResponse = (function () {
        function LeagueMatchOpponentFortressResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchOpponentFortressResponse.ID);
            this.body = new LeagueMatchOpponentFortressRespBody();
        }
        LeagueMatchOpponentFortressResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchOpponentFortressResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchOpponentFortressResponse.ID = 23809;
        return LeagueMatchOpponentFortressResponse;
    }());
    message.LeagueMatchOpponentFortressResponse = LeagueMatchOpponentFortressResponse;
    __reflect(LeagueMatchOpponentFortressResponse.prototype, "message.LeagueMatchOpponentFortressResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取对手详细据点信息请求
    // request LeagueMatchFortressTeam
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFortressTeamReqBody = (function () {
        function LeagueMatchFortressTeamReqBody() {
            this.league_id = 0; // 对方联盟
            this.type = 0; // 据点类型
            this.index = 0; // 据点索引
        }
        LeagueMatchFortressTeamReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFortressTeamReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // league_id
            encoder.write_fixuint32(this.league_id);
            // type
            encoder.write_fixuint32(this.type);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchFortressTeamReqBody;
    }());
    message.LeagueMatchFortressTeamReqBody = LeagueMatchFortressTeamReqBody;
    __reflect(LeagueMatchFortressTeamReqBody.prototype, "message.LeagueMatchFortressTeamReqBody", ["aone.AoneBody"]);
    var LeagueMatchFortressTeamRequest = (function () {
        function LeagueMatchFortressTeamRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchFortressTeamRequest.ID);
            this.body = new LeagueMatchFortressTeamReqBody();
        }
        LeagueMatchFortressTeamRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFortressTeamRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchFortressTeamRequest.ID = 23810;
        return LeagueMatchFortressTeamRequest;
    }());
    message.LeagueMatchFortressTeamRequest = LeagueMatchFortressTeamRequest;
    __reflect(LeagueMatchFortressTeamRequest.prototype, "message.LeagueMatchFortressTeamRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取对手详细据点信息回复
    // response LeagueMatchFortressTeam
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFortressTeamRespBody = (function () {
        function LeagueMatchFortressTeamRespBody() {
            this.datailRoleFormation = new message.DetailRoleFormationInfo(); // 对方详细信息
        }
        LeagueMatchFortressTeamRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // datailRoleFormation
            if (decoder_.eof())
                return true;
            if (!this.datailRoleFormation.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueMatchFortressTeamRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchFortressTeamRespBody;
    }());
    message.LeagueMatchFortressTeamRespBody = LeagueMatchFortressTeamRespBody;
    __reflect(LeagueMatchFortressTeamRespBody.prototype, "message.LeagueMatchFortressTeamRespBody", ["aone.AoneBody"]);
    var LeagueMatchFortressTeamResponse = (function () {
        function LeagueMatchFortressTeamResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchFortressTeamResponse.ID);
            this.body = new LeagueMatchFortressTeamRespBody();
        }
        LeagueMatchFortressTeamResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchFortressTeamResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchFortressTeamResponse.ID = 23811;
        return LeagueMatchFortressTeamResponse;
    }());
    message.LeagueMatchFortressTeamResponse = LeagueMatchFortressTeamResponse;
    __reflect(LeagueMatchFortressTeamResponse.prototype, "message.LeagueMatchFortressTeamResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战对方据点结果请求
    // request LeagueMatchFortressBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFortressBattleResultReqBody = (function () {
        function LeagueMatchFortressBattleResultReqBody() {
            this.type = 0; // 据点类型
            this.index = 0; // 据点索引
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
            this.extraStr = ""; // 客户端额外记录数据（名字索引）
        }
        LeagueMatchFortressBattleResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFortressBattleResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // index
            encoder.write_fixuint32(this.index);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            // extraStr
            encoder.write_string(this.extraStr);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchFortressBattleResultReqBody;
    }());
    message.LeagueMatchFortressBattleResultReqBody = LeagueMatchFortressBattleResultReqBody;
    __reflect(LeagueMatchFortressBattleResultReqBody.prototype, "message.LeagueMatchFortressBattleResultReqBody", ["aone.AoneBody"]);
    var LeagueMatchFortressBattleResultRequest = (function () {
        function LeagueMatchFortressBattleResultRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchFortressBattleResultRequest.ID);
            this.body = new LeagueMatchFortressBattleResultReqBody();
        }
        LeagueMatchFortressBattleResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFortressBattleResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchFortressBattleResultRequest.ID = 23812;
        return LeagueMatchFortressBattleResultRequest;
    }());
    message.LeagueMatchFortressBattleResultRequest = LeagueMatchFortressBattleResultRequest;
    __reflect(LeagueMatchFortressBattleResultRequest.prototype, "message.LeagueMatchFortressBattleResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战对方据点结果回复
    // response LeagueMatchFortressBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFortressBattleResultRespBody = (function () {
        function LeagueMatchFortressBattleResultRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
            this.battleInfo = new message.LeagueMatchBattleFortressInfo(); // 自己战斗相关信息
        }
        LeagueMatchFortressBattleResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // battleInfo
            if (decoder_.eof())
                return true;
            if (!this.battleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueMatchFortressBattleResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchFortressBattleResultRespBody;
    }());
    message.LeagueMatchFortressBattleResultRespBody = LeagueMatchFortressBattleResultRespBody;
    __reflect(LeagueMatchFortressBattleResultRespBody.prototype, "message.LeagueMatchFortressBattleResultRespBody", ["aone.AoneBody"]);
    var LeagueMatchFortressBattleResultResponse = (function () {
        function LeagueMatchFortressBattleResultResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchFortressBattleResultResponse.ID);
            this.body = new LeagueMatchFortressBattleResultRespBody();
        }
        LeagueMatchFortressBattleResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchFortressBattleResultResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchFortressBattleResultResponse.ID = 23813;
        return LeagueMatchFortressBattleResultResponse;
    }());
    message.LeagueMatchFortressBattleResultResponse = LeagueMatchFortressBattleResultResponse;
    __reflect(LeagueMatchFortressBattleResultResponse.prototype, "message.LeagueMatchFortressBattleResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛战斗日志请求
    // request LeagueMatchFortressRecord
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFortressRecordReqBody = (function () {
        function LeagueMatchFortressRecordReqBody() {
            this.is_self = false;
            this.self_type = 0; // 34战斗日志35历史记录
            this.league_id = 0; // 对方联盟
        }
        LeagueMatchFortressRecordReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFortressRecordReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_self
            encoder.write_bool(this.is_self);
            // self_type
            encoder.write_fixuint32(this.self_type);
            // league_id
            encoder.write_fixuint32(this.league_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchFortressRecordReqBody;
    }());
    message.LeagueMatchFortressRecordReqBody = LeagueMatchFortressRecordReqBody;
    __reflect(LeagueMatchFortressRecordReqBody.prototype, "message.LeagueMatchFortressRecordReqBody", ["aone.AoneBody"]);
    var LeagueMatchFortressRecordRequest = (function () {
        function LeagueMatchFortressRecordRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchFortressRecordRequest.ID);
            this.body = new LeagueMatchFortressRecordReqBody();
        }
        LeagueMatchFortressRecordRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFortressRecordRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchFortressRecordRequest.ID = 23814;
        return LeagueMatchFortressRecordRequest;
    }());
    message.LeagueMatchFortressRecordRequest = LeagueMatchFortressRecordRequest;
    __reflect(LeagueMatchFortressRecordRequest.prototype, "message.LeagueMatchFortressRecordRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛战斗日志回复
    // response LeagueMatchFortressRecord
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFortressRecordRespBody = (function () {
        function LeagueMatchFortressRecordRespBody() {
            this.records = [];
        }
        LeagueMatchFortressRecordRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // records
            if (decoder_.eof())
                return true;
            var records_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < records_count; i++) {
                this.records.push(new message.LeagueRecord());
                if (!this.records[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchFortressRecordRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchFortressRecordRespBody;
    }());
    message.LeagueMatchFortressRecordRespBody = LeagueMatchFortressRecordRespBody;
    __reflect(LeagueMatchFortressRecordRespBody.prototype, "message.LeagueMatchFortressRecordRespBody", ["aone.AoneBody"]);
    var LeagueMatchFortressRecordResponse = (function () {
        function LeagueMatchFortressRecordResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchFortressRecordResponse.ID);
            this.body = new LeagueMatchFortressRecordRespBody();
        }
        LeagueMatchFortressRecordResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchFortressRecordResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchFortressRecordResponse.ID = 23815;
        return LeagueMatchFortressRecordResponse;
    }());
    message.LeagueMatchFortressRecordResponse = LeagueMatchFortressRecordResponse;
    __reflect(LeagueMatchFortressRecordResponse.prototype, "message.LeagueMatchFortressRecordResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取四强对决请求
    // request LeagueMatchFinalList
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFinalListReqBody = (function () {
        function LeagueMatchFinalListReqBody() {
        }
        LeagueMatchFinalListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFinalListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchFinalListReqBody;
    }());
    message.LeagueMatchFinalListReqBody = LeagueMatchFinalListReqBody;
    __reflect(LeagueMatchFinalListReqBody.prototype, "message.LeagueMatchFinalListReqBody", ["aone.AoneBody"]);
    var LeagueMatchFinalListRequest = (function () {
        function LeagueMatchFinalListRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchFinalListRequest.ID);
            this.body = new LeagueMatchFinalListReqBody();
        }
        LeagueMatchFinalListRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchFinalListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchFinalListRequest.ID = 23816;
        return LeagueMatchFinalListRequest;
    }());
    message.LeagueMatchFinalListRequest = LeagueMatchFinalListRequest;
    __reflect(LeagueMatchFinalListRequest.prototype, "message.LeagueMatchFinalListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取四强对决回复
    // response LeagueMatchFinalList
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchFinalListRespBody = (function () {
        function LeagueMatchFinalListRespBody() {
            this.firstRound = []; // 周六对决
            this.winBattle = []; // 周日胜者对决
            this.lostBattle = []; // 周六败者对决
        }
        LeagueMatchFinalListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // firstRound
            if (decoder_.eof())
                return true;
            var firstRound_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < firstRound_count; i++) {
                this.firstRound.push(new message.CraftLeagueInfo());
                if (!this.firstRound[i].parse_bytes(decoder_))
                    return false;
            }
            // winBattle
            if (decoder_.eof())
                return true;
            var winBattle_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < winBattle_count; i++) {
                this.winBattle.push(new message.CraftLeagueInfo());
                if (!this.winBattle[i].parse_bytes(decoder_))
                    return false;
            }
            // lostBattle
            if (decoder_.eof())
                return true;
            var lostBattle_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < lostBattle_count; i++) {
                this.lostBattle.push(new message.CraftLeagueInfo());
                if (!this.lostBattle[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchFinalListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchFinalListRespBody;
    }());
    message.LeagueMatchFinalListRespBody = LeagueMatchFinalListRespBody;
    __reflect(LeagueMatchFinalListRespBody.prototype, "message.LeagueMatchFinalListRespBody", ["aone.AoneBody"]);
    var LeagueMatchFinalListResponse = (function () {
        function LeagueMatchFinalListResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchFinalListResponse.ID);
            this.body = new LeagueMatchFinalListRespBody();
        }
        LeagueMatchFinalListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchFinalListResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchFinalListResponse.ID = 23817;
        return LeagueMatchFinalListResponse;
    }());
    message.LeagueMatchFinalListResponse = LeagueMatchFinalListResponse;
    __reflect(LeagueMatchFinalListResponse.prototype, "message.LeagueMatchFinalListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取排行请求
    // request LeagueMatchQueryRank
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchQueryRankReqBody = (function () {
        function LeagueMatchQueryRankReqBody() {
            this.type = 0; //	1本服排行2本服四强3四服四强4全区服前三
        }
        LeagueMatchQueryRankReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchQueryRankReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchQueryRankReqBody;
    }());
    message.LeagueMatchQueryRankReqBody = LeagueMatchQueryRankReqBody;
    __reflect(LeagueMatchQueryRankReqBody.prototype, "message.LeagueMatchQueryRankReqBody", ["aone.AoneBody"]);
    var LeagueMatchQueryRankRequest = (function () {
        function LeagueMatchQueryRankRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchQueryRankRequest.ID);
            this.body = new LeagueMatchQueryRankReqBody();
        }
        LeagueMatchQueryRankRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchQueryRankRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchQueryRankRequest.ID = 23818;
        return LeagueMatchQueryRankRequest;
    }());
    message.LeagueMatchQueryRankRequest = LeagueMatchQueryRankRequest;
    __reflect(LeagueMatchQueryRankRequest.prototype, "message.LeagueMatchQueryRankRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取排行回复
    // response LeagueMatchQueryRank
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchQueryRankRespBody = (function () {
        function LeagueMatchQueryRankRespBody() {
            this.ranks = [];
        }
        LeagueMatchQueryRankRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // ranks
            if (decoder_.eof())
                return true;
            var ranks_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < ranks_count; i++) {
                this.ranks.push(new message.CraftLeagueRankInfo());
                if (!this.ranks[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchQueryRankRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchQueryRankRespBody;
    }());
    message.LeagueMatchQueryRankRespBody = LeagueMatchQueryRankRespBody;
    __reflect(LeagueMatchQueryRankRespBody.prototype, "message.LeagueMatchQueryRankRespBody", ["aone.AoneBody"]);
    var LeagueMatchQueryRankResponse = (function () {
        function LeagueMatchQueryRankResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchQueryRankResponse.ID);
            this.body = new LeagueMatchQueryRankRespBody();
        }
        LeagueMatchQueryRankResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchQueryRankResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchQueryRankResponse.ID = 23819;
        return LeagueMatchQueryRankResponse;
    }());
    message.LeagueMatchQueryRankResponse = LeagueMatchQueryRankResponse;
    __reflect(LeagueMatchQueryRankResponse.prototype, "message.LeagueMatchQueryRankResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取战斗结果请求
    // request LeagueMatchBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchBattleResultReqBody = (function () {
        function LeagueMatchBattleResultReqBody() {
            this.battle_id = 0; // 0拉上一场的
        }
        LeagueMatchBattleResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchBattleResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // battle_id
            encoder.write_fixuint32(this.battle_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchBattleResultReqBody;
    }());
    message.LeagueMatchBattleResultReqBody = LeagueMatchBattleResultReqBody;
    __reflect(LeagueMatchBattleResultReqBody.prototype, "message.LeagueMatchBattleResultReqBody", ["aone.AoneBody"]);
    var LeagueMatchBattleResultRequest = (function () {
        function LeagueMatchBattleResultRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchBattleResultRequest.ID);
            this.body = new LeagueMatchBattleResultReqBody();
        }
        LeagueMatchBattleResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchBattleResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchBattleResultRequest.ID = 23820;
        return LeagueMatchBattleResultRequest;
    }());
    message.LeagueMatchBattleResultRequest = LeagueMatchBattleResultRequest;
    __reflect(LeagueMatchBattleResultRequest.prototype, "message.LeagueMatchBattleResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛拉取战斗结果回复
    // response LeagueMatchBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchBattleResultRespBody = (function () {
        function LeagueMatchBattleResultRespBody() {
            this.battleResult = new message.CraftLeagueBattleResultInfo();
        }
        LeagueMatchBattleResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battleResult
            if (decoder_.eof())
                return true;
            if (!this.battleResult.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueMatchBattleResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchBattleResultRespBody;
    }());
    message.LeagueMatchBattleResultRespBody = LeagueMatchBattleResultRespBody;
    __reflect(LeagueMatchBattleResultRespBody.prototype, "message.LeagueMatchBattleResultRespBody", ["aone.AoneBody"]);
    var LeagueMatchBattleResultResponse = (function () {
        function LeagueMatchBattleResultResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchBattleResultResponse.ID);
            this.body = new LeagueMatchBattleResultRespBody();
        }
        LeagueMatchBattleResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchBattleResultResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchBattleResultResponse.ID = 23821;
        return LeagueMatchBattleResultResponse;
    }());
    message.LeagueMatchBattleResultResponse = LeagueMatchBattleResultResponse;
    __reflect(LeagueMatchBattleResultResponse.prototype, "message.LeagueMatchBattleResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛获取成员是否在据点请求
    // request LeagueMatchQueryFormation
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchQueryFormationReqBody = (function () {
        function LeagueMatchQueryFormationReqBody() {
        }
        LeagueMatchQueryFormationReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchQueryFormationReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchQueryFormationReqBody;
    }());
    message.LeagueMatchQueryFormationReqBody = LeagueMatchQueryFormationReqBody;
    __reflect(LeagueMatchQueryFormationReqBody.prototype, "message.LeagueMatchQueryFormationReqBody", ["aone.AoneBody"]);
    var LeagueMatchQueryFormationRequest = (function () {
        function LeagueMatchQueryFormationRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchQueryFormationRequest.ID);
            this.body = new LeagueMatchQueryFormationReqBody();
        }
        LeagueMatchQueryFormationRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMatchQueryFormationRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchQueryFormationRequest.ID = 23822;
        return LeagueMatchQueryFormationRequest;
    }());
    message.LeagueMatchQueryFormationRequest = LeagueMatchQueryFormationRequest;
    __reflect(LeagueMatchQueryFormationRequest.prototype, "message.LeagueMatchQueryFormationRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联赛获取成员是否在据点回复
    // response LeagueMatchQueryFormation
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchQueryFormationRespBody = (function () {
        function LeagueMatchQueryFormationRespBody() {
            this.formationIndex = []; // k:index v:formationIndexma
        }
        LeagueMatchQueryFormationRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formationIndex
            if (decoder_.eof())
                return true;
            var formationIndex_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formationIndex_count; i++) {
                this.formationIndex.push(new message.IIKVPairs());
                if (!this.formationIndex[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchQueryFormationRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMatchQueryFormationRespBody;
    }());
    message.LeagueMatchQueryFormationRespBody = LeagueMatchQueryFormationRespBody;
    __reflect(LeagueMatchQueryFormationRespBody.prototype, "message.LeagueMatchQueryFormationRespBody", ["aone.AoneBody"]);
    var LeagueMatchQueryFormationResponse = (function () {
        function LeagueMatchQueryFormationResponse() {
            this.header = new aone.AoneRespHeader(LeagueMatchQueryFormationResponse.ID);
            this.body = new LeagueMatchQueryFormationRespBody();
        }
        LeagueMatchQueryFormationResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMatchQueryFormationResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMatchQueryFormationResponse.ID = 23823;
        return LeagueMatchQueryFormationResponse;
    }());
    message.LeagueMatchQueryFormationResponse = LeagueMatchQueryFormationResponse;
    __reflect(LeagueMatchQueryFormationResponse.prototype, "message.LeagueMatchQueryFormationResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(LeagueMatchFortressRequest.ID, function () { return new LeagueMatchFortressRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchFortressResponse.ID, function () { return new LeagueMatchFortressResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchSetFortressRequest.ID, function () { return new LeagueMatchSetFortressRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchSetFortressResponse.ID, function () { return new LeagueMatchSetFortressResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchSignRequest.ID, function () { return new LeagueMatchSignRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchSignResponse.ID, function () { return new LeagueMatchSignResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchOpponentInfoRequest.ID, function () { return new LeagueMatchOpponentInfoRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchOpponentInfoResponse.ID, function () { return new LeagueMatchOpponentInfoResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchOpponentFortressRequest.ID, function () { return new LeagueMatchOpponentFortressRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchOpponentFortressResponse.ID, function () { return new LeagueMatchOpponentFortressResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchFortressTeamRequest.ID, function () { return new LeagueMatchFortressTeamRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchFortressTeamResponse.ID, function () { return new LeagueMatchFortressTeamResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchFortressBattleResultRequest.ID, function () { return new LeagueMatchFortressBattleResultRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchFortressBattleResultResponse.ID, function () { return new LeagueMatchFortressBattleResultResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchFortressRecordRequest.ID, function () { return new LeagueMatchFortressRecordRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchFortressRecordResponse.ID, function () { return new LeagueMatchFortressRecordResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchFinalListRequest.ID, function () { return new LeagueMatchFinalListRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchFinalListResponse.ID, function () { return new LeagueMatchFinalListResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchQueryRankRequest.ID, function () { return new LeagueMatchQueryRankRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchQueryRankResponse.ID, function () { return new LeagueMatchQueryRankResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchBattleResultRequest.ID, function () { return new LeagueMatchBattleResultRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchBattleResultResponse.ID, function () { return new LeagueMatchBattleResultResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMatchQueryFormationRequest.ID, function () { return new LeagueMatchQueryFormationRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchQueryFormationResponse.ID, function () { return new LeagueMatchQueryFormationResponse(); });
})(message || (message = {}));
//Date: 2019-11
//File: msg_cg_league.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 本文档定义联盟协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟创建请求协议
    // request LeagueCreate
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueCreateReqBody = (function () {
        function LeagueCreateReqBody() {
            this.name = ""; // 联盟名
            this.introduce = ""; // 联盟简介
        }
        LeagueCreateReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueCreateReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // name
            encoder.write_string(this.name);
            // introduce
            encoder.write_string(this.introduce);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueCreateReqBody;
    }());
    message.LeagueCreateReqBody = LeagueCreateReqBody;
    __reflect(LeagueCreateReqBody.prototype, "message.LeagueCreateReqBody", ["aone.AoneBody"]);
    var LeagueCreateRequest = (function () {
        function LeagueCreateRequest() {
            this.header = new aone.AoneReqHeader(LeagueCreateRequest.ID);
            this.body = new LeagueCreateReqBody();
        }
        LeagueCreateRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueCreateRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueCreateRequest.ID = 23000;
        return LeagueCreateRequest;
    }());
    message.LeagueCreateRequest = LeagueCreateRequest;
    __reflect(LeagueCreateRequest.prototype, "message.LeagueCreateRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟创建响应协议
    // response LeagueCreate
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueCreateRespBody = (function () {
        function LeagueCreateRespBody() {
            this.gameInfo = new message.GameInfo();
            this.info = new message.LeagueInfo(); // 联盟所有信息
        }
        LeagueCreateRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // info
            if (decoder_.eof())
                return true;
            if (!this.info.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueCreateRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueCreateRespBody;
    }());
    message.LeagueCreateRespBody = LeagueCreateRespBody;
    __reflect(LeagueCreateRespBody.prototype, "message.LeagueCreateRespBody", ["aone.AoneBody"]);
    var LeagueCreateResponse = (function () {
        function LeagueCreateResponse() {
            this.header = new aone.AoneRespHeader(LeagueCreateResponse.ID);
            this.body = new LeagueCreateRespBody();
        }
        LeagueCreateResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueCreateResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueCreateResponse.ID = 23001;
        return LeagueCreateResponse;
    }());
    message.LeagueCreateResponse = LeagueCreateResponse;
    __reflect(LeagueCreateResponse.prototype, "message.LeagueCreateResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟搜索请求协议
    // request LeagueSearch
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSearchReqBody = (function () {
        function LeagueSearchReqBody() {
            this.leagueId = 0; // 联盟Id(该值不为0则以下字段失效)
            this.key = ""; // 搜索关键字(该字段为空表示随机10个联盟)
            this.start = 0; // 搜索结果起始下标
            this.num = 0; // 搜索结果返回数量
            this.is_batch = false; // 是否换一批
        }
        LeagueSearchReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueSearchReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // leagueId
            encoder.write_fixuint32(this.leagueId);
            // key
            encoder.write_string(this.key);
            // start
            encoder.write_fixuint32(this.start);
            // num
            encoder.write_fixuint32(this.num);
            // is_batch
            encoder.write_bool(this.is_batch);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueSearchReqBody;
    }());
    message.LeagueSearchReqBody = LeagueSearchReqBody;
    __reflect(LeagueSearchReqBody.prototype, "message.LeagueSearchReqBody", ["aone.AoneBody"]);
    var LeagueSearchRequest = (function () {
        function LeagueSearchRequest() {
            this.header = new aone.AoneReqHeader(LeagueSearchRequest.ID);
            this.body = new LeagueSearchReqBody();
        }
        LeagueSearchRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueSearchRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueSearchRequest.ID = 23002;
        return LeagueSearchRequest;
    }());
    message.LeagueSearchRequest = LeagueSearchRequest;
    __reflect(LeagueSearchRequest.prototype, "message.LeagueSearchRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟搜索响应协议
    // response LeagueSearch
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSearchRespBody = (function () {
        function LeagueSearchRespBody() {
            this.info = []; // 联盟基本信息
        }
        LeagueSearchRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            var info_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < info_count; i++) {
                this.info.push(new message.LeagueBase());
                if (!this.info[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueSearchRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueSearchRespBody;
    }());
    message.LeagueSearchRespBody = LeagueSearchRespBody;
    __reflect(LeagueSearchRespBody.prototype, "message.LeagueSearchRespBody", ["aone.AoneBody"]);
    var LeagueSearchResponse = (function () {
        function LeagueSearchResponse() {
            this.header = new aone.AoneRespHeader(LeagueSearchResponse.ID);
            this.body = new LeagueSearchRespBody();
        }
        LeagueSearchResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueSearchResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueSearchResponse.ID = 23003;
        return LeagueSearchResponse;
    }());
    message.LeagueSearchResponse = LeagueSearchResponse;
    __reflect(LeagueSearchResponse.prototype, "message.LeagueSearchResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加入联盟请求
    // request LeagueApply
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueApplyReqBody = (function () {
        function LeagueApplyReqBody() {
            this.leagueid = 0; // 加入联盟ID
        }
        LeagueApplyReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueApplyReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // leagueid
            encoder.write_fixuint32(this.leagueid);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueApplyReqBody;
    }());
    message.LeagueApplyReqBody = LeagueApplyReqBody;
    __reflect(LeagueApplyReqBody.prototype, "message.LeagueApplyReqBody", ["aone.AoneBody"]);
    var LeagueApplyRequest = (function () {
        function LeagueApplyRequest() {
            this.header = new aone.AoneReqHeader(LeagueApplyRequest.ID);
            this.body = new LeagueApplyReqBody();
        }
        LeagueApplyRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueApplyRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueApplyRequest.ID = 23006;
        return LeagueApplyRequest;
    }());
    message.LeagueApplyRequest = LeagueApplyRequest;
    __reflect(LeagueApplyRequest.prototype, "message.LeagueApplyRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加入联盟响应
    // response LeagueApply
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueApplyRespBody = (function () {
        function LeagueApplyRespBody() {
            this.gameInfo = new message.GameInfo();
            this.info = []; // 没有联盟该字段返回空否 LeagueInfo
        }
        LeagueApplyRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // info
            if (decoder_.eof())
                return true;
            this.info = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueApplyRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueApplyRespBody;
    }());
    message.LeagueApplyRespBody = LeagueApplyRespBody;
    __reflect(LeagueApplyRespBody.prototype, "message.LeagueApplyRespBody", ["aone.AoneBody"]);
    var LeagueApplyResponse = (function () {
        function LeagueApplyResponse() {
            this.header = new aone.AoneRespHeader(LeagueApplyResponse.ID);
            this.body = new LeagueApplyRespBody();
        }
        LeagueApplyResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueApplyResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueApplyResponse.ID = 23007;
        return LeagueApplyResponse;
    }());
    message.LeagueApplyResponse = LeagueApplyResponse;
    __reflect(LeagueApplyResponse.prototype, "message.LeagueApplyResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟申请处理请求
    // request LeagueApplyDeal
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueApplyDealReqBody = (function () {
        function LeagueApplyDealReqBody() {
            this.roleId = []; // 申请君主ID
            this.pass = false; // 是否通过请求
        }
        LeagueApplyDealReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueApplyDealReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_uint32_vector(this.roleId);
            // pass
            encoder.write_bool(this.pass);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueApplyDealReqBody;
    }());
    message.LeagueApplyDealReqBody = LeagueApplyDealReqBody;
    __reflect(LeagueApplyDealReqBody.prototype, "message.LeagueApplyDealReqBody", ["aone.AoneBody"]);
    var LeagueApplyDealRequest = (function () {
        function LeagueApplyDealRequest() {
            this.header = new aone.AoneReqHeader(LeagueApplyDealRequest.ID);
            this.body = new LeagueApplyDealReqBody();
        }
        LeagueApplyDealRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueApplyDealRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueApplyDealRequest.ID = 23008;
        return LeagueApplyDealRequest;
    }());
    message.LeagueApplyDealRequest = LeagueApplyDealRequest;
    __reflect(LeagueApplyDealRequest.prototype, "message.LeagueApplyDealRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟申请处理响应
    // response LeagueApplyDeal
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueApplyDealRespBody = (function () {
        function LeagueApplyDealRespBody() {
            this.info = []; // LeagueInfo
        }
        LeagueApplyDealRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            this.info = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueApplyDealRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueApplyDealRespBody;
    }());
    message.LeagueApplyDealRespBody = LeagueApplyDealRespBody;
    __reflect(LeagueApplyDealRespBody.prototype, "message.LeagueApplyDealRespBody", ["aone.AoneBody"]);
    var LeagueApplyDealResponse = (function () {
        function LeagueApplyDealResponse() {
            this.header = new aone.AoneRespHeader(LeagueApplyDealResponse.ID);
            this.body = new LeagueApplyDealRespBody();
        }
        LeagueApplyDealResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueApplyDealResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueApplyDealResponse.ID = 23009;
        return LeagueApplyDealResponse;
    }());
    message.LeagueApplyDealResponse = LeagueApplyDealResponse;
    __reflect(LeagueApplyDealResponse.prototype, "message.LeagueApplyDealResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 我的联盟请求
    // request LeagueInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInfoReqBody = (function () {
        function LeagueInfoReqBody() {
        }
        LeagueInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInfoReqBody;
    }());
    message.LeagueInfoReqBody = LeagueInfoReqBody;
    __reflect(LeagueInfoReqBody.prototype, "message.LeagueInfoReqBody", ["aone.AoneBody"]);
    var LeagueInfoRequest = (function () {
        function LeagueInfoRequest() {
            this.header = new aone.AoneReqHeader(LeagueInfoRequest.ID);
            this.body = new LeagueInfoReqBody();
        }
        LeagueInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInfoRequest.ID = 23010;
        return LeagueInfoRequest;
    }());
    message.LeagueInfoRequest = LeagueInfoRequest;
    __reflect(LeagueInfoRequest.prototype, "message.LeagueInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 我的联盟响应
    // response LeagueInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInfoRespBody = (function () {
        function LeagueInfoRespBody() {
            this.gameInfo = new message.GameInfo();
            this.info = []; // 没有联盟该字段返回空否则取第一个元素 LeagueInfo
        }
        LeagueInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // info
            if (decoder_.eof())
                return true;
            this.info = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueInfoRespBody;
    }());
    message.LeagueInfoRespBody = LeagueInfoRespBody;
    __reflect(LeagueInfoRespBody.prototype, "message.LeagueInfoRespBody", ["aone.AoneBody"]);
    var LeagueInfoResponse = (function () {
        function LeagueInfoResponse() {
            this.header = new aone.AoneRespHeader(LeagueInfoResponse.ID);
            this.body = new LeagueInfoRespBody();
        }
        LeagueInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueInfoResponse.ID = 23011;
        return LeagueInfoResponse;
    }());
    message.LeagueInfoResponse = LeagueInfoResponse;
    __reflect(LeagueInfoResponse.prototype, "message.LeagueInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟日志请求
    // request LeagueLog
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueLogReqBody = (function () {
        function LeagueLogReqBody() {
            this.type = 0; //1.表示联盟日志2.表示副本日志
        }
        LeagueLogReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueLogReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueLogReqBody;
    }());
    message.LeagueLogReqBody = LeagueLogReqBody;
    __reflect(LeagueLogReqBody.prototype, "message.LeagueLogReqBody", ["aone.AoneBody"]);
    var LeagueLogRequest = (function () {
        function LeagueLogRequest() {
            this.header = new aone.AoneReqHeader(LeagueLogRequest.ID);
            this.body = new LeagueLogReqBody();
        }
        LeagueLogRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueLogRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueLogRequest.ID = 23012;
        return LeagueLogRequest;
    }());
    message.LeagueLogRequest = LeagueLogRequest;
    __reflect(LeagueLogRequest.prototype, "message.LeagueLogRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟日志回复
    // response LeagueLog
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueLogRespBody = (function () {
        function LeagueLogRespBody() {
            this.records = [];
        }
        LeagueLogRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // records
            if (decoder_.eof())
                return true;
            var records_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < records_count; i++) {
                this.records.push(new message.LeagueRecord());
                if (!this.records[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueLogRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueLogRespBody;
    }());
    message.LeagueLogRespBody = LeagueLogRespBody;
    __reflect(LeagueLogRespBody.prototype, "message.LeagueLogRespBody", ["aone.AoneBody"]);
    var LeagueLogResponse = (function () {
        function LeagueLogResponse() {
            this.header = new aone.AoneRespHeader(LeagueLogResponse.ID);
            this.body = new LeagueLogRespBody();
        }
        LeagueLogResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueLogResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueLogResponse.ID = 23013;
        return LeagueLogResponse;
    }());
    message.LeagueLogResponse = LeagueLogResponse;
    __reflect(LeagueLogResponse.prototype, "message.LeagueLogResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟捐献请求
    // request LeagueDonate
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueDonateReqBody = (function () {
        function LeagueDonateReqBody() {
            this.type = 0; // 捐献类型
        }
        LeagueDonateReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueDonateReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueDonateReqBody;
    }());
    message.LeagueDonateReqBody = LeagueDonateReqBody;
    __reflect(LeagueDonateReqBody.prototype, "message.LeagueDonateReqBody", ["aone.AoneBody"]);
    var LeagueDonateRequest = (function () {
        function LeagueDonateRequest() {
            this.header = new aone.AoneReqHeader(LeagueDonateRequest.ID);
            this.body = new LeagueDonateReqBody();
        }
        LeagueDonateRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueDonateRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueDonateRequest.ID = 23014;
        return LeagueDonateRequest;
    }());
    message.LeagueDonateRequest = LeagueDonateRequest;
    __reflect(LeagueDonateRequest.prototype, "message.LeagueDonateRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟捐献回复
    // response LeagueDonate
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueDonateRespBody = (function () {
        function LeagueDonateRespBody() {
            this.baseInfo = new message.LeagueBase(); // 联盟基本信息
            this.members = []; // 成员信息(部分)
            this.gameInfo = new message.GameInfo(); // 玩家信息
        }
        LeagueDonateRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            if (!this.baseInfo.parse_bytes(decoder_))
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueDonateRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueDonateRespBody;
    }());
    message.LeagueDonateRespBody = LeagueDonateRespBody;
    __reflect(LeagueDonateRespBody.prototype, "message.LeagueDonateRespBody", ["aone.AoneBody"]);
    var LeagueDonateResponse = (function () {
        function LeagueDonateResponse() {
            this.header = new aone.AoneRespHeader(LeagueDonateResponse.ID);
            this.body = new LeagueDonateRespBody();
        }
        LeagueDonateResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueDonateResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueDonateResponse.ID = 23015;
        return LeagueDonateResponse;
    }());
    message.LeagueDonateResponse = LeagueDonateResponse;
    __reflect(LeagueDonateResponse.prototype, "message.LeagueDonateResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟技能升级请求
    // request LeagueSkillUp
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSkillUpReqBody = (function () {
        function LeagueSkillUpReqBody() {
            this.type = 0;
        }
        LeagueSkillUpReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueSkillUpReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueSkillUpReqBody;
    }());
    message.LeagueSkillUpReqBody = LeagueSkillUpReqBody;
    __reflect(LeagueSkillUpReqBody.prototype, "message.LeagueSkillUpReqBody", ["aone.AoneBody"]);
    var LeagueSkillUpRequest = (function () {
        function LeagueSkillUpRequest() {
            this.header = new aone.AoneReqHeader(LeagueSkillUpRequest.ID);
            this.body = new LeagueSkillUpReqBody();
        }
        LeagueSkillUpRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueSkillUpRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueSkillUpRequest.ID = 23016;
        return LeagueSkillUpRequest;
    }());
    message.LeagueSkillUpRequest = LeagueSkillUpRequest;
    __reflect(LeagueSkillUpRequest.prototype, "message.LeagueSkillUpRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟技能升级回复
    // response LeagueSkillUp
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSkillUpRespBody = (function () {
        function LeagueSkillUpRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueSkillUpRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueSkillUpRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueSkillUpRespBody;
    }());
    message.LeagueSkillUpRespBody = LeagueSkillUpRespBody;
    __reflect(LeagueSkillUpRespBody.prototype, "message.LeagueSkillUpRespBody", ["aone.AoneBody"]);
    var LeagueSkillUpResponse = (function () {
        function LeagueSkillUpResponse() {
            this.header = new aone.AoneRespHeader(LeagueSkillUpResponse.ID);
            this.body = new LeagueSkillUpRespBody();
        }
        LeagueSkillUpResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueSkillUpResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueSkillUpResponse.ID = 23017;
        return LeagueSkillUpResponse;
    }());
    message.LeagueSkillUpResponse = LeagueSkillUpResponse;
    __reflect(LeagueSkillUpResponse.prototype, "message.LeagueSkillUpResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟技能重置请求
    // request LeagueSkillReset
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSkillResetReqBody = (function () {
        function LeagueSkillResetReqBody() {
            this.types = [];
        }
        LeagueSkillResetReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueSkillResetReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // types
            encoder.write_uint32_vector(this.types);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueSkillResetReqBody;
    }());
    message.LeagueSkillResetReqBody = LeagueSkillResetReqBody;
    __reflect(LeagueSkillResetReqBody.prototype, "message.LeagueSkillResetReqBody", ["aone.AoneBody"]);
    var LeagueSkillResetRequest = (function () {
        function LeagueSkillResetRequest() {
            this.header = new aone.AoneReqHeader(LeagueSkillResetRequest.ID);
            this.body = new LeagueSkillResetReqBody();
        }
        LeagueSkillResetRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueSkillResetRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueSkillResetRequest.ID = 23018;
        return LeagueSkillResetRequest;
    }());
    message.LeagueSkillResetRequest = LeagueSkillResetRequest;
    __reflect(LeagueSkillResetRequest.prototype, "message.LeagueSkillResetRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟技能重置回复
    // response LeagueSkillReset
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSkillResetRespBody = (function () {
        function LeagueSkillResetRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueSkillResetRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueSkillResetRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueSkillResetRespBody;
    }());
    message.LeagueSkillResetRespBody = LeagueSkillResetRespBody;
    __reflect(LeagueSkillResetRespBody.prototype, "message.LeagueSkillResetRespBody", ["aone.AoneBody"]);
    var LeagueSkillResetResponse = (function () {
        function LeagueSkillResetResponse() {
            this.header = new aone.AoneRespHeader(LeagueSkillResetResponse.ID);
            this.body = new LeagueSkillResetRespBody();
        }
        LeagueSkillResetResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueSkillResetResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueSkillResetResponse.ID = 23019;
        return LeagueSkillResetResponse;
    }());
    message.LeagueSkillResetResponse = LeagueSkillResetResponse;
    __reflect(LeagueSkillResetResponse.prototype, "message.LeagueSkillResetResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟技能选择请求(废)
    // request LeagueSkillSelect
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSkillSelectReqBody = (function () {
        function LeagueSkillSelectReqBody() {
            this.type = 0;
        }
        LeagueSkillSelectReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueSkillSelectReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueSkillSelectReqBody;
    }());
    message.LeagueSkillSelectReqBody = LeagueSkillSelectReqBody;
    __reflect(LeagueSkillSelectReqBody.prototype, "message.LeagueSkillSelectReqBody", ["aone.AoneBody"]);
    var LeagueSkillSelectRequest = (function () {
        function LeagueSkillSelectRequest() {
            this.header = new aone.AoneReqHeader(LeagueSkillSelectRequest.ID);
            this.body = new LeagueSkillSelectReqBody();
        }
        LeagueSkillSelectRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueSkillSelectRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueSkillSelectRequest.ID = 23020;
        return LeagueSkillSelectRequest;
    }());
    message.LeagueSkillSelectRequest = LeagueSkillSelectRequest;
    __reflect(LeagueSkillSelectRequest.prototype, "message.LeagueSkillSelectRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟技能选择回复(废)
    // response LeagueSkillSelect
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSkillSelectRespBody = (function () {
        function LeagueSkillSelectRespBody() {
        }
        LeagueSkillSelectRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        LeagueSkillSelectRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueSkillSelectRespBody;
    }());
    message.LeagueSkillSelectRespBody = LeagueSkillSelectRespBody;
    __reflect(LeagueSkillSelectRespBody.prototype, "message.LeagueSkillSelectRespBody", ["aone.AoneBody"]);
    var LeagueSkillSelectResponse = (function () {
        function LeagueSkillSelectResponse() {
            this.header = new aone.AoneRespHeader(LeagueSkillSelectResponse.ID);
            this.body = new LeagueSkillSelectRespBody();
        }
        LeagueSkillSelectResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueSkillSelectResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueSkillSelectResponse.ID = 23021;
        return LeagueSkillSelectResponse;
    }());
    message.LeagueSkillSelectResponse = LeagueSkillSelectResponse;
    __reflect(LeagueSkillSelectResponse.prototype, "message.LeagueSkillSelectResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟设置头像请求
    // request LeaguePic
    ////////////////////////////////////////////////////////////////////////////////
    var LeaguePicReqBody = (function () {
        function LeaguePicReqBody() {
            this.picId = 0; // 头像设置
            this.picFrame = 0; // 头像框设置
        }
        LeaguePicReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeaguePicReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // picId
            encoder.write_fixuint32(this.picId);
            // picFrame
            encoder.write_fixuint32(this.picFrame);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeaguePicReqBody;
    }());
    message.LeaguePicReqBody = LeaguePicReqBody;
    __reflect(LeaguePicReqBody.prototype, "message.LeaguePicReqBody", ["aone.AoneBody"]);
    var LeaguePicRequest = (function () {
        function LeaguePicRequest() {
            this.header = new aone.AoneReqHeader(LeaguePicRequest.ID);
            this.body = new LeaguePicReqBody();
        }
        LeaguePicRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeaguePicRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeaguePicRequest.ID = 23030;
        return LeaguePicRequest;
    }());
    message.LeaguePicRequest = LeaguePicRequest;
    __reflect(LeaguePicRequest.prototype, "message.LeaguePicRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟设置头像回复
    // response LeaguePic
    ////////////////////////////////////////////////////////////////////////////////
    var LeaguePicRespBody = (function () {
        function LeaguePicRespBody() {
        }
        LeaguePicRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        LeaguePicRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeaguePicRespBody;
    }());
    message.LeaguePicRespBody = LeaguePicRespBody;
    __reflect(LeaguePicRespBody.prototype, "message.LeaguePicRespBody", ["aone.AoneBody"]);
    var LeaguePicResponse = (function () {
        function LeaguePicResponse() {
            this.header = new aone.AoneRespHeader(LeaguePicResponse.ID);
            this.body = new LeaguePicRespBody();
        }
        LeaguePicResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeaguePicResponse.prototype.to_bytes = function (encoder) { return false; };
        LeaguePicResponse.ID = 23031;
        return LeaguePicResponse;
    }());
    message.LeaguePicResponse = LeaguePicResponse;
    __reflect(LeaguePicResponse.prototype, "message.LeaguePicResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟设置加入条件请求
    // request LeagueJoinCondition
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueJoinConditionReqBody = (function () {
        function LeagueJoinConditionReqBody() {
            this.join_condition = 0; // 加入条件
            this.join_level = 0; // 加入等级
        }
        LeagueJoinConditionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueJoinConditionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // join_condition
            encoder.write_fixuint32(this.join_condition);
            // join_level
            encoder.write_fixuint32(this.join_level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueJoinConditionReqBody;
    }());
    message.LeagueJoinConditionReqBody = LeagueJoinConditionReqBody;
    __reflect(LeagueJoinConditionReqBody.prototype, "message.LeagueJoinConditionReqBody", ["aone.AoneBody"]);
    var LeagueJoinConditionRequest = (function () {
        function LeagueJoinConditionRequest() {
            this.header = new aone.AoneReqHeader(LeagueJoinConditionRequest.ID);
            this.body = new LeagueJoinConditionReqBody();
        }
        LeagueJoinConditionRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueJoinConditionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueJoinConditionRequest.ID = 23032;
        return LeagueJoinConditionRequest;
    }());
    message.LeagueJoinConditionRequest = LeagueJoinConditionRequest;
    __reflect(LeagueJoinConditionRequest.prototype, "message.LeagueJoinConditionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟设置加入条件回复
    // response LeagueJoinCondition
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueJoinConditionRespBody = (function () {
        function LeagueJoinConditionRespBody() {
        }
        LeagueJoinConditionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        LeagueJoinConditionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueJoinConditionRespBody;
    }());
    message.LeagueJoinConditionRespBody = LeagueJoinConditionRespBody;
    __reflect(LeagueJoinConditionRespBody.prototype, "message.LeagueJoinConditionRespBody", ["aone.AoneBody"]);
    var LeagueJoinConditionResponse = (function () {
        function LeagueJoinConditionResponse() {
            this.header = new aone.AoneRespHeader(LeagueJoinConditionResponse.ID);
            this.body = new LeagueJoinConditionRespBody();
        }
        LeagueJoinConditionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueJoinConditionResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueJoinConditionResponse.ID = 23033;
        return LeagueJoinConditionResponse;
    }());
    message.LeagueJoinConditionResponse = LeagueJoinConditionResponse;
    __reflect(LeagueJoinConditionResponse.prototype, "message.LeagueJoinConditionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改联盟公告请求
    // request LeagueNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueNoticeReqBody = (function () {
        function LeagueNoticeReqBody() {
            this.notice = ""; // 新公告
        }
        LeagueNoticeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueNoticeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // notice
            encoder.write_string(this.notice);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueNoticeReqBody;
    }());
    message.LeagueNoticeReqBody = LeagueNoticeReqBody;
    __reflect(LeagueNoticeReqBody.prototype, "message.LeagueNoticeReqBody", ["aone.AoneBody"]);
    var LeagueNoticeRequest = (function () {
        function LeagueNoticeRequest() {
            this.header = new aone.AoneReqHeader(LeagueNoticeRequest.ID);
            this.body = new LeagueNoticeReqBody();
        }
        LeagueNoticeRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueNoticeRequest.ID = 23034;
        return LeagueNoticeRequest;
    }());
    message.LeagueNoticeRequest = LeagueNoticeRequest;
    __reflect(LeagueNoticeRequest.prototype, "message.LeagueNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改联盟公告响应
    // response LeagueNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueNoticeRespBody = (function () {
        function LeagueNoticeRespBody() {
        }
        LeagueNoticeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        LeagueNoticeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueNoticeRespBody;
    }());
    message.LeagueNoticeRespBody = LeagueNoticeRespBody;
    __reflect(LeagueNoticeRespBody.prototype, "message.LeagueNoticeRespBody", ["aone.AoneBody"]);
    var LeagueNoticeResponse = (function () {
        function LeagueNoticeResponse() {
            this.header = new aone.AoneRespHeader(LeagueNoticeResponse.ID);
            this.body = new LeagueNoticeRespBody();
        }
        LeagueNoticeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueNoticeResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueNoticeResponse.ID = 23035;
        return LeagueNoticeResponse;
    }());
    message.LeagueNoticeResponse = LeagueNoticeResponse;
    __reflect(LeagueNoticeResponse.prototype, "message.LeagueNoticeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改联盟简介请求
    // request LeagueIntroduce
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueIntroduceReqBody = (function () {
        function LeagueIntroduceReqBody() {
            this.introduce = ""; // 简介
        }
        LeagueIntroduceReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueIntroduceReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // introduce
            encoder.write_string(this.introduce);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueIntroduceReqBody;
    }());
    message.LeagueIntroduceReqBody = LeagueIntroduceReqBody;
    __reflect(LeagueIntroduceReqBody.prototype, "message.LeagueIntroduceReqBody", ["aone.AoneBody"]);
    var LeagueIntroduceRequest = (function () {
        function LeagueIntroduceRequest() {
            this.header = new aone.AoneReqHeader(LeagueIntroduceRequest.ID);
            this.body = new LeagueIntroduceReqBody();
        }
        LeagueIntroduceRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueIntroduceRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueIntroduceRequest.ID = 23036;
        return LeagueIntroduceRequest;
    }());
    message.LeagueIntroduceRequest = LeagueIntroduceRequest;
    __reflect(LeagueIntroduceRequest.prototype, "message.LeagueIntroduceRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改联盟简介响应
    // response LeagueIntroduce
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueIntroduceRespBody = (function () {
        function LeagueIntroduceRespBody() {
        }
        LeagueIntroduceRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        LeagueIntroduceRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueIntroduceRespBody;
    }());
    message.LeagueIntroduceRespBody = LeagueIntroduceRespBody;
    __reflect(LeagueIntroduceRespBody.prototype, "message.LeagueIntroduceRespBody", ["aone.AoneBody"]);
    var LeagueIntroduceResponse = (function () {
        function LeagueIntroduceResponse() {
            this.header = new aone.AoneRespHeader(LeagueIntroduceResponse.ID);
            this.body = new LeagueIntroduceRespBody();
        }
        LeagueIntroduceResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueIntroduceResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueIntroduceResponse.ID = 23037;
        return LeagueIntroduceResponse;
    }());
    message.LeagueIntroduceResponse = LeagueIntroduceResponse;
    __reflect(LeagueIntroduceResponse.prototype, "message.LeagueIntroduceResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 调整联盟成员官职请求
    // request LeagueOfficial
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueOfficialReqBody = (function () {
        function LeagueOfficialReqBody() {
            this.roleId = 0; // 君主ID
            this.official = 0; // 新职位
        }
        LeagueOfficialReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueOfficialReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // official
            encoder.write_fixuint32(this.official);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueOfficialReqBody;
    }());
    message.LeagueOfficialReqBody = LeagueOfficialReqBody;
    __reflect(LeagueOfficialReqBody.prototype, "message.LeagueOfficialReqBody", ["aone.AoneBody"]);
    var LeagueOfficialRequest = (function () {
        function LeagueOfficialRequest() {
            this.header = new aone.AoneReqHeader(LeagueOfficialRequest.ID);
            this.body = new LeagueOfficialReqBody();
        }
        LeagueOfficialRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueOfficialRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueOfficialRequest.ID = 23038;
        return LeagueOfficialRequest;
    }());
    message.LeagueOfficialRequest = LeagueOfficialRequest;
    __reflect(LeagueOfficialRequest.prototype, "message.LeagueOfficialRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 调整联盟成员官职响应
    // response LeagueOfficial
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueOfficialRespBody = (function () {
        function LeagueOfficialRespBody() {
            this.members = []; // 部分信息
        }
        LeagueOfficialRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueOfficialRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueOfficialRespBody;
    }());
    message.LeagueOfficialRespBody = LeagueOfficialRespBody;
    __reflect(LeagueOfficialRespBody.prototype, "message.LeagueOfficialRespBody", ["aone.AoneBody"]);
    var LeagueOfficialResponse = (function () {
        function LeagueOfficialResponse() {
            this.header = new aone.AoneRespHeader(LeagueOfficialResponse.ID);
            this.body = new LeagueOfficialRespBody();
        }
        LeagueOfficialResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueOfficialResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueOfficialResponse.ID = 23039;
        return LeagueOfficialResponse;
    }());
    message.LeagueOfficialResponse = LeagueOfficialResponse;
    __reflect(LeagueOfficialResponse.prototype, "message.LeagueOfficialResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 更改联盟名称请求
    // request LeagueModifyName
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueModifyNameReqBody = (function () {
        function LeagueModifyNameReqBody() {
            this.name = "";
        }
        LeagueModifyNameReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueModifyNameReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // name
            encoder.write_string(this.name);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueModifyNameReqBody;
    }());
    message.LeagueModifyNameReqBody = LeagueModifyNameReqBody;
    __reflect(LeagueModifyNameReqBody.prototype, "message.LeagueModifyNameReqBody", ["aone.AoneBody"]);
    var LeagueModifyNameRequest = (function () {
        function LeagueModifyNameRequest() {
            this.header = new aone.AoneReqHeader(LeagueModifyNameRequest.ID);
            this.body = new LeagueModifyNameReqBody();
        }
        LeagueModifyNameRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueModifyNameRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueModifyNameRequest.ID = 23040;
        return LeagueModifyNameRequest;
    }());
    message.LeagueModifyNameRequest = LeagueModifyNameRequest;
    __reflect(LeagueModifyNameRequest.prototype, "message.LeagueModifyNameRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 更改联盟名称回复
    // response LeagueModifyName
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueModifyNameRespBody = (function () {
        function LeagueModifyNameRespBody() {
            this.gameInfo = new message.GameInfo();
            this.info = new message.LeagueBase();
        }
        LeagueModifyNameRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // info
            if (decoder_.eof())
                return true;
            if (!this.info.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueModifyNameRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueModifyNameRespBody;
    }());
    message.LeagueModifyNameRespBody = LeagueModifyNameRespBody;
    __reflect(LeagueModifyNameRespBody.prototype, "message.LeagueModifyNameRespBody", ["aone.AoneBody"]);
    var LeagueModifyNameResponse = (function () {
        function LeagueModifyNameResponse() {
            this.header = new aone.AoneRespHeader(LeagueModifyNameResponse.ID);
            this.body = new LeagueModifyNameRespBody();
        }
        LeagueModifyNameResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueModifyNameResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueModifyNameResponse.ID = 23041;
        return LeagueModifyNameResponse;
    }());
    message.LeagueModifyNameResponse = LeagueModifyNameResponse;
    __reflect(LeagueModifyNameResponse.prototype, "message.LeagueModifyNameResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 成员统计请求
    // request LeagueMemberStatic
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMemberStaticReqBody = (function () {
        function LeagueMemberStaticReqBody() {
        }
        LeagueMemberStaticReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMemberStaticReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMemberStaticReqBody;
    }());
    message.LeagueMemberStaticReqBody = LeagueMemberStaticReqBody;
    __reflect(LeagueMemberStaticReqBody.prototype, "message.LeagueMemberStaticReqBody", ["aone.AoneBody"]);
    var LeagueMemberStaticRequest = (function () {
        function LeagueMemberStaticRequest() {
            this.header = new aone.AoneReqHeader(LeagueMemberStaticRequest.ID);
            this.body = new LeagueMemberStaticReqBody();
        }
        LeagueMemberStaticRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueMemberStaticRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMemberStaticRequest.ID = 23042;
        return LeagueMemberStaticRequest;
    }());
    message.LeagueMemberStaticRequest = LeagueMemberStaticRequest;
    __reflect(LeagueMemberStaticRequest.prototype, "message.LeagueMemberStaticRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 成员统计回复
    // response LeagueMemberStatic
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMemberStaticRespBody = (function () {
        function LeagueMemberStaticRespBody() {
            this.members = [];
        }
        LeagueMemberStaticRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberStatic());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMemberStaticRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueMemberStaticRespBody;
    }());
    message.LeagueMemberStaticRespBody = LeagueMemberStaticRespBody;
    __reflect(LeagueMemberStaticRespBody.prototype, "message.LeagueMemberStaticRespBody", ["aone.AoneBody"]);
    var LeagueMemberStaticResponse = (function () {
        function LeagueMemberStaticResponse() {
            this.header = new aone.AoneRespHeader(LeagueMemberStaticResponse.ID);
            this.body = new LeagueMemberStaticRespBody();
        }
        LeagueMemberStaticResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueMemberStaticResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueMemberStaticResponse.ID = 23043;
        return LeagueMemberStaticResponse;
    }());
    message.LeagueMemberStaticResponse = LeagueMemberStaticResponse;
    __reflect(LeagueMemberStaticResponse.prototype, "message.LeagueMemberStaticResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 转让盟主请求
    // request LeagueTransfer
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueTransferReqBody = (function () {
        function LeagueTransferReqBody() {
            this.roleId = 0; // 君主ID
        }
        LeagueTransferReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueTransferReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueTransferReqBody;
    }());
    message.LeagueTransferReqBody = LeagueTransferReqBody;
    __reflect(LeagueTransferReqBody.prototype, "message.LeagueTransferReqBody", ["aone.AoneBody"]);
    var LeagueTransferRequest = (function () {
        function LeagueTransferRequest() {
            this.header = new aone.AoneReqHeader(LeagueTransferRequest.ID);
            this.body = new LeagueTransferReqBody();
        }
        LeagueTransferRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueTransferRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueTransferRequest.ID = 23050;
        return LeagueTransferRequest;
    }());
    message.LeagueTransferRequest = LeagueTransferRequest;
    __reflect(LeagueTransferRequest.prototype, "message.LeagueTransferRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 转让盟主响应
    // response LeagueTransfer
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueTransferRespBody = (function () {
        function LeagueTransferRespBody() {
            this.info = new message.LeagueBase(); // 联盟基本信息
            this.members = []; // 联盟部分成员
        }
        LeagueTransferRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            if (!this.info.parse_bytes(decoder_))
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueTransferRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueTransferRespBody;
    }());
    message.LeagueTransferRespBody = LeagueTransferRespBody;
    __reflect(LeagueTransferRespBody.prototype, "message.LeagueTransferRespBody", ["aone.AoneBody"]);
    var LeagueTransferResponse = (function () {
        function LeagueTransferResponse() {
            this.header = new aone.AoneRespHeader(LeagueTransferResponse.ID);
            this.body = new LeagueTransferRespBody();
        }
        LeagueTransferResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueTransferResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueTransferResponse.ID = 23051;
        return LeagueTransferResponse;
    }());
    message.LeagueTransferResponse = LeagueTransferResponse;
    __reflect(LeagueTransferResponse.prototype, "message.LeagueTransferResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 解散联盟请求
    // request LeagueDisband
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueDisbandReqBody = (function () {
        function LeagueDisbandReqBody() {
        }
        LeagueDisbandReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueDisbandReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueDisbandReqBody;
    }());
    message.LeagueDisbandReqBody = LeagueDisbandReqBody;
    __reflect(LeagueDisbandReqBody.prototype, "message.LeagueDisbandReqBody", ["aone.AoneBody"]);
    var LeagueDisbandRequest = (function () {
        function LeagueDisbandRequest() {
            this.header = new aone.AoneReqHeader(LeagueDisbandRequest.ID);
            this.body = new LeagueDisbandReqBody();
        }
        LeagueDisbandRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueDisbandRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueDisbandRequest.ID = 23052;
        return LeagueDisbandRequest;
    }());
    message.LeagueDisbandRequest = LeagueDisbandRequest;
    __reflect(LeagueDisbandRequest.prototype, "message.LeagueDisbandRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 解散联盟响应
    // response LeagueDisband
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueDisbandRespBody = (function () {
        function LeagueDisbandRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueDisbandRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueDisbandRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueDisbandRespBody;
    }());
    message.LeagueDisbandRespBody = LeagueDisbandRespBody;
    __reflect(LeagueDisbandRespBody.prototype, "message.LeagueDisbandRespBody", ["aone.AoneBody"]);
    var LeagueDisbandResponse = (function () {
        function LeagueDisbandResponse() {
            this.header = new aone.AoneRespHeader(LeagueDisbandResponse.ID);
            this.body = new LeagueDisbandRespBody();
        }
        LeagueDisbandResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueDisbandResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueDisbandResponse.ID = 23053;
        return LeagueDisbandResponse;
    }());
    message.LeagueDisbandResponse = LeagueDisbandResponse;
    __reflect(LeagueDisbandResponse.prototype, "message.LeagueDisbandResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 踢出联盟请求
    // request LeagueKickOut
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueKickOutReqBody = (function () {
        function LeagueKickOutReqBody() {
            this.roleId = 0; // 君主ID
        }
        LeagueKickOutReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueKickOutReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueKickOutReqBody;
    }());
    message.LeagueKickOutReqBody = LeagueKickOutReqBody;
    __reflect(LeagueKickOutReqBody.prototype, "message.LeagueKickOutReqBody", ["aone.AoneBody"]);
    var LeagueKickOutRequest = (function () {
        function LeagueKickOutRequest() {
            this.header = new aone.AoneReqHeader(LeagueKickOutRequest.ID);
            this.body = new LeagueKickOutReqBody();
        }
        LeagueKickOutRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueKickOutRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueKickOutRequest.ID = 23054;
        return LeagueKickOutRequest;
    }());
    message.LeagueKickOutRequest = LeagueKickOutRequest;
    __reflect(LeagueKickOutRequest.prototype, "message.LeagueKickOutRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 踢出联盟响应
    // response LeagueKickOut
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueKickOutRespBody = (function () {
        function LeagueKickOutRespBody() {
        }
        LeagueKickOutRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        LeagueKickOutRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueKickOutRespBody;
    }());
    message.LeagueKickOutRespBody = LeagueKickOutRespBody;
    __reflect(LeagueKickOutRespBody.prototype, "message.LeagueKickOutRespBody", ["aone.AoneBody"]);
    var LeagueKickOutResponse = (function () {
        function LeagueKickOutResponse() {
            this.header = new aone.AoneRespHeader(LeagueKickOutResponse.ID);
            this.body = new LeagueKickOutRespBody();
        }
        LeagueKickOutResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueKickOutResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueKickOutResponse.ID = 23055;
        return LeagueKickOutResponse;
    }());
    message.LeagueKickOutResponse = LeagueKickOutResponse;
    __reflect(LeagueKickOutResponse.prototype, "message.LeagueKickOutResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 退出联盟请求
    // request LeagueQuit
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueQuitReqBody = (function () {
        function LeagueQuitReqBody() {
        }
        LeagueQuitReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueQuitReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueQuitReqBody;
    }());
    message.LeagueQuitReqBody = LeagueQuitReqBody;
    __reflect(LeagueQuitReqBody.prototype, "message.LeagueQuitReqBody", ["aone.AoneBody"]);
    var LeagueQuitRequest = (function () {
        function LeagueQuitRequest() {
            this.header = new aone.AoneReqHeader(LeagueQuitRequest.ID);
            this.body = new LeagueQuitReqBody();
        }
        LeagueQuitRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueQuitRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueQuitRequest.ID = 23056;
        return LeagueQuitRequest;
    }());
    message.LeagueQuitRequest = LeagueQuitRequest;
    __reflect(LeagueQuitRequest.prototype, "message.LeagueQuitRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 退出联盟响应
    // response LeagueQuit
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueQuitRespBody = (function () {
        function LeagueQuitRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LeagueQuitRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueQuitRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueQuitRespBody;
    }());
    message.LeagueQuitRespBody = LeagueQuitRespBody;
    __reflect(LeagueQuitRespBody.prototype, "message.LeagueQuitRespBody", ["aone.AoneBody"]);
    var LeagueQuitResponse = (function () {
        function LeagueQuitResponse() {
            this.header = new aone.AoneRespHeader(LeagueQuitResponse.ID);
            this.body = new LeagueQuitRespBody();
        }
        LeagueQuitResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueQuitResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueQuitResponse.ID = 23057;
        return LeagueQuitResponse;
    }());
    message.LeagueQuitResponse = LeagueQuitResponse;
    __reflect(LeagueQuitResponse.prototype, "message.LeagueQuitResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 快速入帮请求
    // request LeagueApplyQuick
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueApplyQuickReqBody = (function () {
        function LeagueApplyQuickReqBody() {
        }
        LeagueApplyQuickReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueApplyQuickReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueApplyQuickReqBody;
    }());
    message.LeagueApplyQuickReqBody = LeagueApplyQuickReqBody;
    __reflect(LeagueApplyQuickReqBody.prototype, "message.LeagueApplyQuickReqBody", ["aone.AoneBody"]);
    var LeagueApplyQuickRequest = (function () {
        function LeagueApplyQuickRequest() {
            this.header = new aone.AoneReqHeader(LeagueApplyQuickRequest.ID);
            this.body = new LeagueApplyQuickReqBody();
        }
        LeagueApplyQuickRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueApplyQuickRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueApplyQuickRequest.ID = 23064;
        return LeagueApplyQuickRequest;
    }());
    message.LeagueApplyQuickRequest = LeagueApplyQuickRequest;
    __reflect(LeagueApplyQuickRequest.prototype, "message.LeagueApplyQuickRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 快速入帮响应
    // response LeagueApplyQuick
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueApplyQuickRespBody = (function () {
        function LeagueApplyQuickRespBody() {
            this.gameInfo = new message.GameInfo();
            this.info = []; // 没有联盟该字段返回空 LeagueInfo
        }
        LeagueApplyQuickRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // info
            if (decoder_.eof())
                return true;
            this.info = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueApplyQuickRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueApplyQuickRespBody;
    }());
    message.LeagueApplyQuickRespBody = LeagueApplyQuickRespBody;
    __reflect(LeagueApplyQuickRespBody.prototype, "message.LeagueApplyQuickRespBody", ["aone.AoneBody"]);
    var LeagueApplyQuickResponse = (function () {
        function LeagueApplyQuickResponse() {
            this.header = new aone.AoneRespHeader(LeagueApplyQuickResponse.ID);
            this.body = new LeagueApplyQuickRespBody();
        }
        LeagueApplyQuickResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueApplyQuickResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueApplyQuickResponse.ID = 23065;
        return LeagueApplyQuickResponse;
    }());
    message.LeagueApplyQuickResponse = LeagueApplyQuickResponse;
    __reflect(LeagueApplyQuickResponse.prototype, "message.LeagueApplyQuickResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查看工会详情请求
    // request QueryLeagueInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryLeagueInfoReqBody = (function () {
        function QueryLeagueInfoReqBody() {
            this.leagueId = 0;
            this.groupId = 0; // 目标玩家的区号
            this.roleId = 0;
        }
        QueryLeagueInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryLeagueInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // leagueId
            encoder.write_fixuint32(this.leagueId);
            // groupId
            encoder.write_fixuint32(this.groupId);
            // roleId
            encoder.write_fixuint32(this.roleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryLeagueInfoReqBody;
    }());
    message.QueryLeagueInfoReqBody = QueryLeagueInfoReqBody;
    __reflect(QueryLeagueInfoReqBody.prototype, "message.QueryLeagueInfoReqBody", ["aone.AoneBody"]);
    var QueryLeagueInfoRequest = (function () {
        function QueryLeagueInfoRequest() {
            this.header = new aone.AoneReqHeader(QueryLeagueInfoRequest.ID);
            this.body = new QueryLeagueInfoReqBody();
        }
        QueryLeagueInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryLeagueInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryLeagueInfoRequest.ID = 23066;
        return QueryLeagueInfoRequest;
    }());
    message.QueryLeagueInfoRequest = QueryLeagueInfoRequest;
    __reflect(QueryLeagueInfoRequest.prototype, "message.QueryLeagueInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查看工会详情回复
    // response QueryLeagueInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryLeagueInfoRespBody = (function () {
        function QueryLeagueInfoRespBody() {
            this.info = []; // 联盟基本信息
        }
        QueryLeagueInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            var info_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < info_count; i++) {
                this.info.push(new message.LeagueBase());
                if (!this.info[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryLeagueInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryLeagueInfoRespBody;
    }());
    message.QueryLeagueInfoRespBody = QueryLeagueInfoRespBody;
    __reflect(QueryLeagueInfoRespBody.prototype, "message.QueryLeagueInfoRespBody", ["aone.AoneBody"]);
    var QueryLeagueInfoResponse = (function () {
        function QueryLeagueInfoResponse() {
            this.header = new aone.AoneRespHeader(QueryLeagueInfoResponse.ID);
            this.body = new QueryLeagueInfoRespBody();
        }
        QueryLeagueInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryLeagueInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryLeagueInfoResponse.ID = 23067;
        return QueryLeagueInfoResponse;
    }());
    message.QueryLeagueInfoResponse = QueryLeagueInfoResponse;
    __reflect(QueryLeagueInfoResponse.prototype, "message.QueryLeagueInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 工会发布招募信息请求
    // request LeagueRecruitInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueRecruitInfoReqBody = (function () {
        function LeagueRecruitInfoReqBody() {
            this.recruitInfo = ""; // 招募信息
        }
        LeagueRecruitInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueRecruitInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // recruitInfo
            encoder.write_string(this.recruitInfo);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueRecruitInfoReqBody;
    }());
    message.LeagueRecruitInfoReqBody = LeagueRecruitInfoReqBody;
    __reflect(LeagueRecruitInfoReqBody.prototype, "message.LeagueRecruitInfoReqBody", ["aone.AoneBody"]);
    var LeagueRecruitInfoRequest = (function () {
        function LeagueRecruitInfoRequest() {
            this.header = new aone.AoneReqHeader(LeagueRecruitInfoRequest.ID);
            this.body = new LeagueRecruitInfoReqBody();
        }
        LeagueRecruitInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueRecruitInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueRecruitInfoRequest.ID = 23068;
        return LeagueRecruitInfoRequest;
    }());
    message.LeagueRecruitInfoRequest = LeagueRecruitInfoRequest;
    __reflect(LeagueRecruitInfoRequest.prototype, "message.LeagueRecruitInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 工会发布招募信息回复
    // response LeagueRecruitInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueRecruitInfoRespBody = (function () {
        function LeagueRecruitInfoRespBody() {
            this.info = new message.LeagueBase();
        }
        LeagueRecruitInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            if (!this.info.parse_bytes(decoder_))
                return false;
            return true;
        };
        LeagueRecruitInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueRecruitInfoRespBody;
    }());
    message.LeagueRecruitInfoRespBody = LeagueRecruitInfoRespBody;
    __reflect(LeagueRecruitInfoRespBody.prototype, "message.LeagueRecruitInfoRespBody", ["aone.AoneBody"]);
    var LeagueRecruitInfoResponse = (function () {
        function LeagueRecruitInfoResponse() {
            this.header = new aone.AoneRespHeader(LeagueRecruitInfoResponse.ID);
            this.body = new LeagueRecruitInfoRespBody();
        }
        LeagueRecruitInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueRecruitInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueRecruitInfoResponse.ID = 23069;
        return LeagueRecruitInfoResponse;
    }());
    message.LeagueRecruitInfoResponse = LeagueRecruitInfoResponse;
    __reflect(LeagueRecruitInfoResponse.prototype, "message.LeagueRecruitInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(LeagueCreateRequest.ID, function () { return new LeagueCreateRequest(); });
    aone.MessageFactory.getInstance().register(LeagueCreateResponse.ID, function () { return new LeagueCreateResponse(); });
    aone.MessageFactory.getInstance().register(LeagueSearchRequest.ID, function () { return new LeagueSearchRequest(); });
    aone.MessageFactory.getInstance().register(LeagueSearchResponse.ID, function () { return new LeagueSearchResponse(); });
    aone.MessageFactory.getInstance().register(LeagueApplyRequest.ID, function () { return new LeagueApplyRequest(); });
    aone.MessageFactory.getInstance().register(LeagueApplyResponse.ID, function () { return new LeagueApplyResponse(); });
    aone.MessageFactory.getInstance().register(LeagueApplyDealRequest.ID, function () { return new LeagueApplyDealRequest(); });
    aone.MessageFactory.getInstance().register(LeagueApplyDealResponse.ID, function () { return new LeagueApplyDealResponse(); });
    aone.MessageFactory.getInstance().register(LeagueInfoRequest.ID, function () { return new LeagueInfoRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInfoResponse.ID, function () { return new LeagueInfoResponse(); });
    aone.MessageFactory.getInstance().register(LeagueLogRequest.ID, function () { return new LeagueLogRequest(); });
    aone.MessageFactory.getInstance().register(LeagueLogResponse.ID, function () { return new LeagueLogResponse(); });
    aone.MessageFactory.getInstance().register(LeagueDonateRequest.ID, function () { return new LeagueDonateRequest(); });
    aone.MessageFactory.getInstance().register(LeagueDonateResponse.ID, function () { return new LeagueDonateResponse(); });
    aone.MessageFactory.getInstance().register(LeagueSkillUpRequest.ID, function () { return new LeagueSkillUpRequest(); });
    aone.MessageFactory.getInstance().register(LeagueSkillUpResponse.ID, function () { return new LeagueSkillUpResponse(); });
    aone.MessageFactory.getInstance().register(LeagueSkillResetRequest.ID, function () { return new LeagueSkillResetRequest(); });
    aone.MessageFactory.getInstance().register(LeagueSkillResetResponse.ID, function () { return new LeagueSkillResetResponse(); });
    aone.MessageFactory.getInstance().register(LeagueSkillSelectRequest.ID, function () { return new LeagueSkillSelectRequest(); });
    aone.MessageFactory.getInstance().register(LeagueSkillSelectResponse.ID, function () { return new LeagueSkillSelectResponse(); });
    aone.MessageFactory.getInstance().register(LeaguePicRequest.ID, function () { return new LeaguePicRequest(); });
    aone.MessageFactory.getInstance().register(LeaguePicResponse.ID, function () { return new LeaguePicResponse(); });
    aone.MessageFactory.getInstance().register(LeagueJoinConditionRequest.ID, function () { return new LeagueJoinConditionRequest(); });
    aone.MessageFactory.getInstance().register(LeagueJoinConditionResponse.ID, function () { return new LeagueJoinConditionResponse(); });
    aone.MessageFactory.getInstance().register(LeagueNoticeRequest.ID, function () { return new LeagueNoticeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueNoticeResponse.ID, function () { return new LeagueNoticeResponse(); });
    aone.MessageFactory.getInstance().register(LeagueIntroduceRequest.ID, function () { return new LeagueIntroduceRequest(); });
    aone.MessageFactory.getInstance().register(LeagueIntroduceResponse.ID, function () { return new LeagueIntroduceResponse(); });
    aone.MessageFactory.getInstance().register(LeagueOfficialRequest.ID, function () { return new LeagueOfficialRequest(); });
    aone.MessageFactory.getInstance().register(LeagueOfficialResponse.ID, function () { return new LeagueOfficialResponse(); });
    aone.MessageFactory.getInstance().register(LeagueModifyNameRequest.ID, function () { return new LeagueModifyNameRequest(); });
    aone.MessageFactory.getInstance().register(LeagueModifyNameResponse.ID, function () { return new LeagueModifyNameResponse(); });
    aone.MessageFactory.getInstance().register(LeagueMemberStaticRequest.ID, function () { return new LeagueMemberStaticRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMemberStaticResponse.ID, function () { return new LeagueMemberStaticResponse(); });
    aone.MessageFactory.getInstance().register(LeagueTransferRequest.ID, function () { return new LeagueTransferRequest(); });
    aone.MessageFactory.getInstance().register(LeagueTransferResponse.ID, function () { return new LeagueTransferResponse(); });
    aone.MessageFactory.getInstance().register(LeagueDisbandRequest.ID, function () { return new LeagueDisbandRequest(); });
    aone.MessageFactory.getInstance().register(LeagueDisbandResponse.ID, function () { return new LeagueDisbandResponse(); });
    aone.MessageFactory.getInstance().register(LeagueKickOutRequest.ID, function () { return new LeagueKickOutRequest(); });
    aone.MessageFactory.getInstance().register(LeagueKickOutResponse.ID, function () { return new LeagueKickOutResponse(); });
    aone.MessageFactory.getInstance().register(LeagueQuitRequest.ID, function () { return new LeagueQuitRequest(); });
    aone.MessageFactory.getInstance().register(LeagueQuitResponse.ID, function () { return new LeagueQuitResponse(); });
    aone.MessageFactory.getInstance().register(LeagueApplyQuickRequest.ID, function () { return new LeagueApplyQuickRequest(); });
    aone.MessageFactory.getInstance().register(LeagueApplyQuickResponse.ID, function () { return new LeagueApplyQuickResponse(); });
    aone.MessageFactory.getInstance().register(QueryLeagueInfoRequest.ID, function () { return new QueryLeagueInfoRequest(); });
    aone.MessageFactory.getInstance().register(QueryLeagueInfoResponse.ID, function () { return new QueryLeagueInfoResponse(); });
    aone.MessageFactory.getInstance().register(LeagueRecruitInfoRequest.ID, function () { return new LeagueRecruitInfoRequest(); });
    aone.MessageFactory.getInstance().register(LeagueRecruitInfoResponse.ID, function () { return new LeagueRecruitInfoResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_login.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了系统协议，包括请求服务器，心跳等。
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 登陆游戏请求
    // request LoginGameserver
    ////////////////////////////////////////////////////////////////////////////////
    var LoginGameserverReqBody = (function () {
        function LoginGameserverReqBody() {
            this.token = 0; // 序列码
            this.roleId = 0; // 角色Id
            this.userId = 0; // 账户id
            this.screen_w = 0; // 屏幕宽
            this.screen_h = 0; // 屏幕高
            this.login_channel = ""; // 当前登录渠道
            this.push_channel = ""; // 推送渠道(ios,baidu,....见推送渠道编码定义)
            this.push_token = ""; // 推送验证码
            this.local_language = ""; // 本地语言
        }
        LoginGameserverReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LoginGameserverReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // token
            encoder.write_fixuint32(this.token);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // userId
            encoder.write_fixuint32(this.userId);
            // screen_w
            encoder.write_fixuint32(this.screen_w);
            // screen_h
            encoder.write_fixuint32(this.screen_h);
            // login_channel
            encoder.write_string(this.login_channel);
            // push_channel
            encoder.write_string(this.push_channel);
            // push_token
            encoder.write_string(this.push_token);
            // local_language
            encoder.write_string(this.local_language);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LoginGameserverReqBody;
    }());
    message.LoginGameserverReqBody = LoginGameserverReqBody;
    __reflect(LoginGameserverReqBody.prototype, "message.LoginGameserverReqBody", ["aone.AoneBody"]);
    var LoginGameserverRequest = (function () {
        function LoginGameserverRequest() {
            this.header = new aone.AoneReqHeader(LoginGameserverRequest.ID);
            this.body = new LoginGameserverReqBody();
        }
        LoginGameserverRequest.prototype.parse_bytes = function (decoder) { return false; };
        LoginGameserverRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LoginGameserverRequest.ID = 32000;
        return LoginGameserverRequest;
    }());
    message.LoginGameserverRequest = LoginGameserverRequest;
    __reflect(LoginGameserverRequest.prototype, "message.LoginGameserverRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 登陆游戏响应
    // response LoginGameserver
    ////////////////////////////////////////////////////////////////////////////////
    var LoginGameserverRespBody = (function () {
        function LoginGameserverRespBody() {
            this.sessionId = 0; // session
            this.close_vip = false; // vip功能显示是否关闭
            this.close_func = false; // 尽请期待是否关闭
            this.preload = false; // 预加载开关
            this.auth_type = 0; // 认证开关
            this.gameInfo = []; // GameInfo
            this.loginInterval = 0; // 角色累计在线时间
            this.web_pay = ""; // 网页充值地址(强制替换)
            this.customer_name = ""; // 客服名字(为空表示取消)
            this.customer_qq = ""; // 客服qq号
            this.customer_weichat = ""; // 客服微信号
            this.customer_web_pay = ""; // 玩家特有网页充值
            this.web_pay_sea = ""; // 支付地址
            this.pay_types = []; // 支付类型显示
            this.pay_rebate = false; // 是否返利
            this.is_bindphone = false; // 是否参与绑定
            this.share_roleId = 0; // 是否有分享关系
            this.is_share = false; // 是否参与分享
        }
        LoginGameserverRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sessionId
            if (decoder_.eof())
                return true;
            this.sessionId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // close_vip
            if (decoder_.eof())
                return true;
            this.close_vip = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // close_func
            if (decoder_.eof())
                return true;
            this.close_func = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // preload
            if (decoder_.eof())
                return true;
            this.preload = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // auth_type
            if (decoder_.eof())
                return true;
            this.auth_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            this.gameInfo = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // loginInterval
            if (decoder_.eof())
                return true;
            this.loginInterval = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // web_pay
            if (decoder_.eof())
                return true;
            this.web_pay = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_name
            if (decoder_.eof())
                return true;
            this.customer_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_qq
            if (decoder_.eof())
                return true;
            this.customer_qq = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_weichat
            if (decoder_.eof())
                return true;
            this.customer_weichat = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_web_pay
            if (decoder_.eof())
                return true;
            this.customer_web_pay = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // web_pay_sea
            if (decoder_.eof())
                return true;
            this.web_pay_sea = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_types
            if (decoder_.eof())
                return true;
            this.pay_types = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // pay_rebate
            if (decoder_.eof())
                return true;
            this.pay_rebate = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_bindphone
            if (decoder_.eof())
                return true;
            this.is_bindphone = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // share_roleId
            if (decoder_.eof())
                return true;
            this.share_roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_share
            if (decoder_.eof())
                return true;
            this.is_share = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LoginGameserverRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LoginGameserverRespBody;
    }());
    message.LoginGameserverRespBody = LoginGameserverRespBody;
    __reflect(LoginGameserverRespBody.prototype, "message.LoginGameserverRespBody", ["aone.AoneBody"]);
    var LoginGameserverResponse = (function () {
        function LoginGameserverResponse() {
            this.header = new aone.AoneRespHeader(LoginGameserverResponse.ID);
            this.body = new LoginGameserverRespBody();
        }
        LoginGameserverResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LoginGameserverResponse.prototype.to_bytes = function (encoder) { return false; };
        LoginGameserverResponse.ID = 32001;
        return LoginGameserverResponse;
    }());
    message.LoginGameserverResponse = LoginGameserverResponse;
    __reflect(LoginGameserverResponse.prototype, "message.LoginGameserverResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 登陆游戏请求
    // request LoginByName
    ////////////////////////////////////////////////////////////////////////////////
    var LoginByNameReqBody = (function () {
        function LoginByNameReqBody() {
            this.roleName = ""; // 角色名
            this.passwd = ""; // 密码
            this.deviceId = ""; // 客户端设备信息
            this.screen_w = 0; // 屏幕宽
            this.screen_h = 0; // 屏幕高
            this.login_channel = ""; // 当前登录渠道
            this.push_channel = ""; // 推送渠道(ios,baidu,....见推送渠道编码定义)
            this.push_token = ""; // 推送验证码
            this.local_language = ""; // 本地语言
        }
        LoginByNameReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LoginByNameReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleName
            encoder.write_string(this.roleName);
            // passwd
            encoder.write_string(this.passwd);
            // deviceId
            encoder.write_string(this.deviceId);
            // screen_w
            encoder.write_fixuint32(this.screen_w);
            // screen_h
            encoder.write_fixuint32(this.screen_h);
            // login_channel
            encoder.write_string(this.login_channel);
            // push_channel
            encoder.write_string(this.push_channel);
            // push_token
            encoder.write_string(this.push_token);
            // local_language
            encoder.write_string(this.local_language);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LoginByNameReqBody;
    }());
    message.LoginByNameReqBody = LoginByNameReqBody;
    __reflect(LoginByNameReqBody.prototype, "message.LoginByNameReqBody", ["aone.AoneBody"]);
    var LoginByNameRequest = (function () {
        function LoginByNameRequest() {
            this.header = new aone.AoneReqHeader(LoginByNameRequest.ID);
            this.body = new LoginByNameReqBody();
        }
        LoginByNameRequest.prototype.parse_bytes = function (decoder) { return false; };
        LoginByNameRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LoginByNameRequest.ID = 32002;
        return LoginByNameRequest;
    }());
    message.LoginByNameRequest = LoginByNameRequest;
    __reflect(LoginByNameRequest.prototype, "message.LoginByNameRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 登陆游戏响应
    // response LoginByName
    ////////////////////////////////////////////////////////////////////////////////
    var LoginByNameRespBody = (function () {
        function LoginByNameRespBody() {
            this.sessionId = 0; // session
            this.close_vip = false; // vip功能显示是否关闭
            this.close_func = false; // 尽请期待是否关闭
            this.preload = false; // 预加载开关
            this.auth_type = 0; // 认证开关
            this.userid = 0; // 用户uid
            this.gameInfo = []; // GameInfo
            this.loginInterval = 0; // 角色累计在线时间
            this.web_pay = ""; // 网页充值地址(强制替换)
            this.customer_name = ""; // 客服名字(为空表示取消)
            this.customer_qq = ""; // 客服qq号
            this.customer_weichat = ""; // 客服微信号
            this.customer_web_pay = ""; // 玩家特有网页充值
            this.web_pay_sea = ""; // 支付地址
            this.pay_types = []; // 支付类型显示
            this.pay_rebate = false; // 是否返利
            this.is_bindphone = false; // 是否参与绑定
            this.share_roleId = 0; // 是否有分享关系
            this.is_share = false; // 是否参与分享
        }
        LoginByNameRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sessionId
            if (decoder_.eof())
                return true;
            this.sessionId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // close_vip
            if (decoder_.eof())
                return true;
            this.close_vip = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // close_func
            if (decoder_.eof())
                return true;
            this.close_func = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // preload
            if (decoder_.eof())
                return true;
            this.preload = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // auth_type
            if (decoder_.eof())
                return true;
            this.auth_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // userid
            if (decoder_.eof())
                return true;
            this.userid = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            this.gameInfo = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // loginInterval
            if (decoder_.eof())
                return true;
            this.loginInterval = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // web_pay
            if (decoder_.eof())
                return true;
            this.web_pay = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_name
            if (decoder_.eof())
                return true;
            this.customer_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_qq
            if (decoder_.eof())
                return true;
            this.customer_qq = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_weichat
            if (decoder_.eof())
                return true;
            this.customer_weichat = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_web_pay
            if (decoder_.eof())
                return true;
            this.customer_web_pay = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // web_pay_sea
            if (decoder_.eof())
                return true;
            this.web_pay_sea = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_types
            if (decoder_.eof())
                return true;
            this.pay_types = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // pay_rebate
            if (decoder_.eof())
                return true;
            this.pay_rebate = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_bindphone
            if (decoder_.eof())
                return true;
            this.is_bindphone = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // share_roleId
            if (decoder_.eof())
                return true;
            this.share_roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_share
            if (decoder_.eof())
                return true;
            this.is_share = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LoginByNameRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LoginByNameRespBody;
    }());
    message.LoginByNameRespBody = LoginByNameRespBody;
    __reflect(LoginByNameRespBody.prototype, "message.LoginByNameRespBody", ["aone.AoneBody"]);
    var LoginByNameResponse = (function () {
        function LoginByNameResponse() {
            this.header = new aone.AoneRespHeader(LoginByNameResponse.ID);
            this.body = new LoginByNameRespBody();
        }
        LoginByNameResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LoginByNameResponse.prototype.to_bytes = function (encoder) { return false; };
        LoginByNameResponse.ID = 32003;
        return LoginByNameResponse;
    }());
    message.LoginByNameResponse = LoginByNameResponse;
    __reflect(LoginByNameResponse.prototype, "message.LoginByNameResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 断线重连请求
    // request Reconnect
    ////////////////////////////////////////////////////////////////////////////////
    var ReconnectReqBody = (function () {
        function ReconnectReqBody() {
            this.sessionId = 0;
        }
        ReconnectReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ReconnectReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sessionId
            encoder.write_fixuint32(this.sessionId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ReconnectReqBody;
    }());
    message.ReconnectReqBody = ReconnectReqBody;
    __reflect(ReconnectReqBody.prototype, "message.ReconnectReqBody", ["aone.AoneBody"]);
    var ReconnectRequest = (function () {
        function ReconnectRequest() {
            this.header = new aone.AoneReqHeader(ReconnectRequest.ID);
            this.body = new ReconnectReqBody();
        }
        ReconnectRequest.prototype.parse_bytes = function (decoder) { return false; };
        ReconnectRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ReconnectRequest.ID = 32004;
        return ReconnectRequest;
    }());
    message.ReconnectRequest = ReconnectRequest;
    __reflect(ReconnectRequest.prototype, "message.ReconnectRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 断线重连回复
    // response Reconnect
    ////////////////////////////////////////////////////////////////////////////////
    var ReconnectRespBody = (function () {
        function ReconnectRespBody() {
            this.messageSeq = 0; // 上次消息序号
            this.lastResponse = ""; // 内容
            this.is_monitor = false; // 是否开启监测功能
            this.openTime = 0; // 开服时间
            this.serverTime = 0; // 当前服务器时间
            this.week = 0; // 当前服务器星期
            this.lastPower = 0; // 上次体力刷新时间
            this.lastGoldPlate = 0; // 上次盘子刷新时间
            this.loginInterval = 0; // 角色累计在线时间
            this.version = 0; // 当前服务端热更版本
            this.gameInfo = []; // GameInfo
            this.web_pay = ""; // 网页充值地址(强制替换)
            this.customer_name = ""; // 客服名字(为空表示取消)
            this.customer_qq = ""; // 客服qq号
            this.customer_weichat = ""; // 客服微信号
            this.customer_web_pay = ""; // 玩家特有网页充值
            this.web_pay_sea = ""; // 支付地址
            this.pay_types = []; // 支付类型显示
            this.pay_rebate = false; // 是否返利
            this.is_bindphone = false; // 是否参与绑定
            this.share_roleId = 0; // 是否有分享关系
            this.is_share = false; // 是否参与分享
        }
        ReconnectRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // messageSeq
            if (decoder_.eof())
                return true;
            this.messageSeq = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lastResponse
            if (decoder_.eof())
                return true;
            this.lastResponse = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // is_monitor
            if (decoder_.eof())
                return true;
            this.is_monitor = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // openTime
            if (decoder_.eof())
                return true;
            this.openTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // serverTime
            if (decoder_.eof())
                return true;
            this.serverTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // week
            if (decoder_.eof())
                return true;
            this.week = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lastPower
            if (decoder_.eof())
                return true;
            this.lastPower = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lastGoldPlate
            if (decoder_.eof())
                return true;
            this.lastGoldPlate = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // loginInterval
            if (decoder_.eof())
                return true;
            this.loginInterval = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // version
            if (decoder_.eof())
                return true;
            this.version = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            this.gameInfo = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // web_pay
            if (decoder_.eof())
                return true;
            this.web_pay = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_name
            if (decoder_.eof())
                return true;
            this.customer_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_qq
            if (decoder_.eof())
                return true;
            this.customer_qq = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_weichat
            if (decoder_.eof())
                return true;
            this.customer_weichat = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_web_pay
            if (decoder_.eof())
                return true;
            this.customer_web_pay = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // web_pay_sea
            if (decoder_.eof())
                return true;
            this.web_pay_sea = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_types
            if (decoder_.eof())
                return true;
            this.pay_types = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // pay_rebate
            if (decoder_.eof())
                return true;
            this.pay_rebate = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_bindphone
            if (decoder_.eof())
                return true;
            this.is_bindphone = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // share_roleId
            if (decoder_.eof())
                return true;
            this.share_roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_share
            if (decoder_.eof())
                return true;
            this.is_share = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ReconnectRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ReconnectRespBody;
    }());
    message.ReconnectRespBody = ReconnectRespBody;
    __reflect(ReconnectRespBody.prototype, "message.ReconnectRespBody", ["aone.AoneBody"]);
    var ReconnectResponse = (function () {
        function ReconnectResponse() {
            this.header = new aone.AoneRespHeader(ReconnectResponse.ID);
            this.body = new ReconnectRespBody();
        }
        ReconnectResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ReconnectResponse.prototype.to_bytes = function (encoder) { return false; };
        ReconnectResponse.ID = 32005;
        return ReconnectResponse;
    }());
    message.ReconnectResponse = ReconnectResponse;
    __reflect(ReconnectResponse.prototype, "message.ReconnectResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉去角色其他信息请求
    // request QueryRoleOtherInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryRoleOtherInfoReqBody = (function () {
        function QueryRoleOtherInfoReqBody() {
        }
        QueryRoleOtherInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryRoleOtherInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryRoleOtherInfoReqBody;
    }());
    message.QueryRoleOtherInfoReqBody = QueryRoleOtherInfoReqBody;
    __reflect(QueryRoleOtherInfoReqBody.prototype, "message.QueryRoleOtherInfoReqBody", ["aone.AoneBody"]);
    var QueryRoleOtherInfoRequest = (function () {
        function QueryRoleOtherInfoRequest() {
            this.header = new aone.AoneReqHeader(QueryRoleOtherInfoRequest.ID);
            this.body = new QueryRoleOtherInfoReqBody();
        }
        QueryRoleOtherInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryRoleOtherInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryRoleOtherInfoRequest.ID = 32020;
        return QueryRoleOtherInfoRequest;
    }());
    message.QueryRoleOtherInfoRequest = QueryRoleOtherInfoRequest;
    __reflect(QueryRoleOtherInfoRequest.prototype, "message.QueryRoleOtherInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉去角色其他信息回复
    // response QueryRoleOtherInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryRoleOtherInfoRespBody = (function () {
        function QueryRoleOtherInfoRespBody() {
            this.otherInfo = []; // OtherGameInfo
        }
        QueryRoleOtherInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // otherInfo
            if (decoder_.eof())
                return true;
            this.otherInfo = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryRoleOtherInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryRoleOtherInfoRespBody;
    }());
    message.QueryRoleOtherInfoRespBody = QueryRoleOtherInfoRespBody;
    __reflect(QueryRoleOtherInfoRespBody.prototype, "message.QueryRoleOtherInfoRespBody", ["aone.AoneBody"]);
    var QueryRoleOtherInfoResponse = (function () {
        function QueryRoleOtherInfoResponse() {
            this.header = new aone.AoneRespHeader(QueryRoleOtherInfoResponse.ID);
            this.body = new QueryRoleOtherInfoRespBody();
        }
        QueryRoleOtherInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryRoleOtherInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryRoleOtherInfoResponse.ID = 32021;
        return QueryRoleOtherInfoResponse;
    }());
    message.QueryRoleOtherInfoResponse = QueryRoleOtherInfoResponse;
    __reflect(QueryRoleOtherInfoResponse.prototype, "message.QueryRoleOtherInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 登陆游戏请求
    // request LoginPay
    ////////////////////////////////////////////////////////////////////////////////
    var LoginPayReqBody = (function () {
        function LoginPayReqBody() {
            this.token = 0; // 序列码
            this.roleId = 0; // 角色Id
            this.userId = 0; // 账户id
            this.screen_w = 0; // 屏幕宽
            this.screen_h = 0; // 屏幕高
            this.login_channel = ""; // 当前登录渠道
            this.auto_type = 0; // 角色类型
            this.push_channel = ""; // 推送渠道(ios,baidu,....见推送渠道编码定义)
            this.push_token = ""; // 推送验证码
            this.local_language = ""; // 本地语言
            this.account_name = ""; // 账号
        }
        LoginPayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LoginPayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // token
            encoder.write_fixuint32(this.token);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // userId
            encoder.write_fixuint32(this.userId);
            // screen_w
            encoder.write_fixuint32(this.screen_w);
            // screen_h
            encoder.write_fixuint32(this.screen_h);
            // login_channel
            encoder.write_string(this.login_channel);
            // auto_type
            encoder.write_fixuint32(this.auto_type);
            // push_channel
            encoder.write_string(this.push_channel);
            // push_token
            encoder.write_string(this.push_token);
            // local_language
            encoder.write_string(this.local_language);
            // account_name
            encoder.write_string(this.account_name);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LoginPayReqBody;
    }());
    message.LoginPayReqBody = LoginPayReqBody;
    __reflect(LoginPayReqBody.prototype, "message.LoginPayReqBody", ["aone.AoneBody"]);
    var LoginPayRequest = (function () {
        function LoginPayRequest() {
            this.header = new aone.AoneReqHeader(LoginPayRequest.ID);
            this.body = new LoginPayReqBody();
        }
        LoginPayRequest.prototype.parse_bytes = function (decoder) { return false; };
        LoginPayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LoginPayRequest.ID = 32100;
        return LoginPayRequest;
    }());
    message.LoginPayRequest = LoginPayRequest;
    __reflect(LoginPayRequest.prototype, "message.LoginPayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 登陆游戏响应
    // response LoginPay
    ////////////////////////////////////////////////////////////////////////////////
    var LoginPayRespBody = (function () {
        function LoginPayRespBody() {
            this.sessionId = 0; // session
            this.close_vip = false; // vip功能显示是否关闭
            this.close_func = false; // 尽请期待是否关闭
            this.preload = false; // 预加载开关
            this.auth_type = 0; // 认证开关
            this.gameInfo = []; // GameInfo
            this.web_pay = ""; // 网页充值地址(强制替换)
            this.customer_name = ""; // 客服名字(为空表示取消)
            this.customer_qq = ""; // 客服qq号
            this.customer_weichat = ""; // 客服微信号
            this.customer_web_pay = ""; // 玩家特有网页充值
            this.web_pay_sea = ""; // 支付地址
            this.pay_types = []; // 支付类型显示
            this.pay_rebate = false; // 是否返利
            this.is_bindphone = false; // 是否参与绑定
            this.share_roleId = 0; // 是否有分享关系
            this.is_share = false; // 是否参与分享
        }
        LoginPayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sessionId
            if (decoder_.eof())
                return true;
            this.sessionId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // close_vip
            if (decoder_.eof())
                return true;
            this.close_vip = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // close_func
            if (decoder_.eof())
                return true;
            this.close_func = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // preload
            if (decoder_.eof())
                return true;
            this.preload = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // auth_type
            if (decoder_.eof())
                return true;
            this.auth_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            this.gameInfo = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // web_pay
            if (decoder_.eof())
                return true;
            this.web_pay = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_name
            if (decoder_.eof())
                return true;
            this.customer_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_qq
            if (decoder_.eof())
                return true;
            this.customer_qq = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_weichat
            if (decoder_.eof())
                return true;
            this.customer_weichat = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // customer_web_pay
            if (decoder_.eof())
                return true;
            this.customer_web_pay = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // web_pay_sea
            if (decoder_.eof())
                return true;
            this.web_pay_sea = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_types
            if (decoder_.eof())
                return true;
            this.pay_types = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // pay_rebate
            if (decoder_.eof())
                return true;
            this.pay_rebate = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_bindphone
            if (decoder_.eof())
                return true;
            this.is_bindphone = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // share_roleId
            if (decoder_.eof())
                return true;
            this.share_roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_share
            if (decoder_.eof())
                return true;
            this.is_share = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LoginPayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LoginPayRespBody;
    }());
    message.LoginPayRespBody = LoginPayRespBody;
    __reflect(LoginPayRespBody.prototype, "message.LoginPayRespBody", ["aone.AoneBody"]);
    var LoginPayResponse = (function () {
        function LoginPayResponse() {
            this.header = new aone.AoneRespHeader(LoginPayResponse.ID);
            this.body = new LoginPayRespBody();
        }
        LoginPayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LoginPayResponse.prototype.to_bytes = function (encoder) { return false; };
        LoginPayResponse.ID = 32101;
        return LoginPayResponse;
    }());
    message.LoginPayResponse = LoginPayResponse;
    __reflect(LoginPayResponse.prototype, "message.LoginPayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(LoginGameserverRequest.ID, function () { return new LoginGameserverRequest(); });
    aone.MessageFactory.getInstance().register(LoginGameserverResponse.ID, function () { return new LoginGameserverResponse(); });
    aone.MessageFactory.getInstance().register(LoginByNameRequest.ID, function () { return new LoginByNameRequest(); });
    aone.MessageFactory.getInstance().register(LoginByNameResponse.ID, function () { return new LoginByNameResponse(); });
    aone.MessageFactory.getInstance().register(ReconnectRequest.ID, function () { return new ReconnectRequest(); });
    aone.MessageFactory.getInstance().register(ReconnectResponse.ID, function () { return new ReconnectResponse(); });
    aone.MessageFactory.getInstance().register(QueryRoleOtherInfoRequest.ID, function () { return new QueryRoleOtherInfoRequest(); });
    aone.MessageFactory.getInstance().register(QueryRoleOtherInfoResponse.ID, function () { return new QueryRoleOtherInfoResponse(); });
    aone.MessageFactory.getInstance().register(LoginPayRequest.ID, function () { return new LoginPayRequest(); });
    aone.MessageFactory.getInstance().register(LoginPayResponse.ID, function () { return new LoginPayResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_mail.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了邮件功能以及情报功能
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 获取邮件列表长度请求
    // request GetMailCount
    ////////////////////////////////////////////////////////////////////////////////
    var GetMailCountReqBody = (function () {
        function GetMailCountReqBody() {
            this.type = 0; // 邮箱类别
        }
        GetMailCountReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GetMailCountReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_enum(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GetMailCountReqBody;
    }());
    message.GetMailCountReqBody = GetMailCountReqBody;
    __reflect(GetMailCountReqBody.prototype, "message.GetMailCountReqBody", ["aone.AoneBody"]);
    var GetMailCountRequest = (function () {
        function GetMailCountRequest() {
            this.header = new aone.AoneReqHeader(GetMailCountRequest.ID);
            this.body = new GetMailCountReqBody();
        }
        GetMailCountRequest.prototype.parse_bytes = function (decoder) { return false; };
        GetMailCountRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GetMailCountRequest.ID = 25000;
        return GetMailCountRequest;
    }());
    message.GetMailCountRequest = GetMailCountRequest;
    __reflect(GetMailCountRequest.prototype, "message.GetMailCountRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取邮件列表长度回复
    // response GetMailCount
    ////////////////////////////////////////////////////////////////////////////////
    var GetMailCountRespBody = (function () {
        function GetMailCountRespBody() {
            this.count = 0; // 邮件列表总长度
        }
        GetMailCountRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // count
            if (decoder_.eof())
                return true;
            this.count = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GetMailCountRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GetMailCountRespBody;
    }());
    message.GetMailCountRespBody = GetMailCountRespBody;
    __reflect(GetMailCountRespBody.prototype, "message.GetMailCountRespBody", ["aone.AoneBody"]);
    var GetMailCountResponse = (function () {
        function GetMailCountResponse() {
            this.header = new aone.AoneRespHeader(GetMailCountResponse.ID);
            this.body = new GetMailCountRespBody();
        }
        GetMailCountResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GetMailCountResponse.prototype.to_bytes = function (encoder) { return false; };
        GetMailCountResponse.ID = 25001;
        return GetMailCountResponse;
    }());
    message.GetMailCountResponse = GetMailCountResponse;
    __reflect(GetMailCountResponse.prototype, "message.GetMailCountResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取邮件列表请求
    // request GetMailList
    ////////////////////////////////////////////////////////////////////////////////
    var GetMailListReqBody = (function () {
        function GetMailListReqBody() {
            this.box_type = 0; // 邮件类别
        }
        GetMailListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GetMailListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // box_type
            encoder.write_enum(this.box_type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GetMailListReqBody;
    }());
    message.GetMailListReqBody = GetMailListReqBody;
    __reflect(GetMailListReqBody.prototype, "message.GetMailListReqBody", ["aone.AoneBody"]);
    var GetMailListRequest = (function () {
        function GetMailListRequest() {
            this.header = new aone.AoneReqHeader(GetMailListRequest.ID);
            this.body = new GetMailListReqBody();
        }
        GetMailListRequest.prototype.parse_bytes = function (decoder) { return false; };
        GetMailListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GetMailListRequest.ID = 25002;
        return GetMailListRequest;
    }());
    message.GetMailListRequest = GetMailListRequest;
    __reflect(GetMailListRequest.prototype, "message.GetMailListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct MailInfoZip
    ////////////////////////////////////////////////////////////////////////////////
    var MailInfoZip = (function () {
        function MailInfoZip() {
            this.mails = []; // 邮件列表
        }
        MailInfoZip.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mails
            if (decoder_.eof())
                return true;
            var mails_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mails_count; i++) {
                this.mails.push(new message.MailInfo());
                if (!this.mails[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MailInfoZip.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mails
            encoder.write_fixuint32(Object.keys(this.mails).length);
            for (var k in this.mails) {
                if (!this.mails[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MailInfoZip;
    }());
    message.MailInfoZip = MailInfoZip;
    __reflect(MailInfoZip.prototype, "message.MailInfoZip", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取邮件列表回复
    // response GetMailList
    ////////////////////////////////////////////////////////////////////////////////
    var GetMailListRespBody = (function () {
        function GetMailListRespBody() {
            this.mailBoxs = []; // 邮箱信息
            this.mails = []; // 邮件列表 MailInfoZip
        }
        GetMailListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mailBoxs
            if (decoder_.eof())
                return true;
            var mailBoxs_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mailBoxs_count; i++) {
                this.mailBoxs.push(new message.MailBoxInfo());
                if (!this.mailBoxs[i].parse_bytes(decoder_))
                    return false;
            }
            // mails
            if (decoder_.eof())
                return true;
            this.mails = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GetMailListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GetMailListRespBody;
    }());
    message.GetMailListRespBody = GetMailListRespBody;
    __reflect(GetMailListRespBody.prototype, "message.GetMailListRespBody", ["aone.AoneBody"]);
    var GetMailListResponse = (function () {
        function GetMailListResponse() {
            this.header = new aone.AoneRespHeader(GetMailListResponse.ID);
            this.body = new GetMailListRespBody();
        }
        GetMailListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GetMailListResponse.prototype.to_bytes = function (encoder) { return false; };
        GetMailListResponse.ID = 25003;
        return GetMailListResponse;
    }());
    message.GetMailListResponse = GetMailListResponse;
    __reflect(GetMailListResponse.prototype, "message.GetMailListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取邮件详情请求
    // 同时把邮件置为已读
    // request GetMailDetail
    ////////////////////////////////////////////////////////////////////////////////
    var GetMailDetailReqBody = (function () {
        function GetMailDetailReqBody() {
            this.box_type = 0; // 邮件类别
            this.mailIds = []; // 邮件ID
        }
        GetMailDetailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GetMailDetailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // box_type
            encoder.write_enum(this.box_type);
            // mailIds
            encoder.write_string_vector(this.mailIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GetMailDetailReqBody;
    }());
    message.GetMailDetailReqBody = GetMailDetailReqBody;
    __reflect(GetMailDetailReqBody.prototype, "message.GetMailDetailReqBody", ["aone.AoneBody"]);
    var GetMailDetailRequest = (function () {
        function GetMailDetailRequest() {
            this.header = new aone.AoneReqHeader(GetMailDetailRequest.ID);
            this.body = new GetMailDetailReqBody();
        }
        GetMailDetailRequest.prototype.parse_bytes = function (decoder) { return false; };
        GetMailDetailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GetMailDetailRequest.ID = 25004;
        return GetMailDetailRequest;
    }());
    message.GetMailDetailRequest = GetMailDetailRequest;
    __reflect(GetMailDetailRequest.prototype, "message.GetMailDetailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取邮件详情回复
    // response GetMailDetail
    ////////////////////////////////////////////////////////////////////////////////
    var GetMailDetailRespBody = (function () {
        function GetMailDetailRespBody() {
        }
        GetMailDetailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        GetMailDetailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GetMailDetailRespBody;
    }());
    message.GetMailDetailRespBody = GetMailDetailRespBody;
    __reflect(GetMailDetailRespBody.prototype, "message.GetMailDetailRespBody", ["aone.AoneBody"]);
    var GetMailDetailResponse = (function () {
        function GetMailDetailResponse() {
            this.header = new aone.AoneRespHeader(GetMailDetailResponse.ID);
            this.body = new GetMailDetailRespBody();
        }
        GetMailDetailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GetMailDetailResponse.prototype.to_bytes = function (encoder) { return false; };
        GetMailDetailResponse.ID = 25005;
        return GetMailDetailResponse;
    }());
    message.GetMailDetailResponse = GetMailDetailResponse;
    __reflect(GetMailDetailResponse.prototype, "message.GetMailDetailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 发送邮件请求
    // 给系统、黑名单内玩家、自己发邮件或者对方不存在，返回错误码 todo
    // request SendRoleMail
    ////////////////////////////////////////////////////////////////////////////////
    var SendRoleMailReqBody = (function () {
        function SendRoleMailReqBody() {
            this.type = 0; // 邮件类型(普通邮件或联盟邮件)
            this.to_id = 0; // 接收者角色ID
            this.to_name = ""; // 接收者名称
            this.title = ""; // 邮件标题
            this.content = ""; // 邮件内容
        }
        SendRoleMailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SendRoleMailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_enum(this.type);
            // to_id
            encoder.write_fixuint32(this.to_id);
            // to_name
            encoder.write_string(this.to_name);
            // title
            encoder.write_string(this.title);
            // content
            encoder.write_string(this.content);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SendRoleMailReqBody;
    }());
    message.SendRoleMailReqBody = SendRoleMailReqBody;
    __reflect(SendRoleMailReqBody.prototype, "message.SendRoleMailReqBody", ["aone.AoneBody"]);
    var SendRoleMailRequest = (function () {
        function SendRoleMailRequest() {
            this.header = new aone.AoneReqHeader(SendRoleMailRequest.ID);
            this.body = new SendRoleMailReqBody();
        }
        SendRoleMailRequest.prototype.parse_bytes = function (decoder) { return false; };
        SendRoleMailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SendRoleMailRequest.ID = 25006;
        return SendRoleMailRequest;
    }());
    message.SendRoleMailRequest = SendRoleMailRequest;
    __reflect(SendRoleMailRequest.prototype, "message.SendRoleMailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 发送邮件回复
    // response SendRoleMail
    ////////////////////////////////////////////////////////////////////////////////
    var SendRoleMailRespBody = (function () {
        function SendRoleMailRespBody() {
        }
        SendRoleMailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SendRoleMailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SendRoleMailRespBody;
    }());
    message.SendRoleMailRespBody = SendRoleMailRespBody;
    __reflect(SendRoleMailRespBody.prototype, "message.SendRoleMailRespBody", ["aone.AoneBody"]);
    var SendRoleMailResponse = (function () {
        function SendRoleMailResponse() {
            this.header = new aone.AoneRespHeader(SendRoleMailResponse.ID);
            this.body = new SendRoleMailRespBody();
        }
        SendRoleMailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SendRoleMailResponse.prototype.to_bytes = function (encoder) { return false; };
        SendRoleMailResponse.ID = 25007;
        return SendRoleMailResponse;
    }());
    message.SendRoleMailResponse = SendRoleMailResponse;
    __reflect(SendRoleMailResponse.prototype, "message.SendRoleMailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除(多个)邮件请求
    // see enum MAX_DEL_MAILS
    // request RemoveMails
    ////////////////////////////////////////////////////////////////////////////////
    var RemoveMailsReqBody = (function () {
        function RemoveMailsReqBody() {
            this.type = 0; // 邮件类型
            this.mailIds = []; // 被删除的(多个)邮件ID
        }
        RemoveMailsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RemoveMailsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_enum(this.type);
            // mailIds
            encoder.write_string_vector(this.mailIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RemoveMailsReqBody;
    }());
    message.RemoveMailsReqBody = RemoveMailsReqBody;
    __reflect(RemoveMailsReqBody.prototype, "message.RemoveMailsReqBody", ["aone.AoneBody"]);
    var RemoveMailsRequest = (function () {
        function RemoveMailsRequest() {
            this.header = new aone.AoneReqHeader(RemoveMailsRequest.ID);
            this.body = new RemoveMailsReqBody();
        }
        RemoveMailsRequest.prototype.parse_bytes = function (decoder) { return false; };
        RemoveMailsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RemoveMailsRequest.ID = 25008;
        return RemoveMailsRequest;
    }());
    message.RemoveMailsRequest = RemoveMailsRequest;
    __reflect(RemoveMailsRequest.prototype, "message.RemoveMailsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除(多个)邮件回复
    // response RemoveMails
    ////////////////////////////////////////////////////////////////////////////////
    var RemoveMailsRespBody = (function () {
        function RemoveMailsRespBody() {
        }
        RemoveMailsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        RemoveMailsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RemoveMailsRespBody;
    }());
    message.RemoveMailsRespBody = RemoveMailsRespBody;
    __reflect(RemoveMailsRespBody.prototype, "message.RemoveMailsRespBody", ["aone.AoneBody"]);
    var RemoveMailsResponse = (function () {
        function RemoveMailsResponse() {
            this.header = new aone.AoneRespHeader(RemoveMailsResponse.ID);
            this.body = new RemoveMailsRespBody();
        }
        RemoveMailsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RemoveMailsResponse.prototype.to_bytes = function (encoder) { return false; };
        RemoveMailsResponse.ID = 25009;
        return RemoveMailsResponse;
    }());
    message.RemoveMailsResponse = RemoveMailsResponse;
    __reflect(RemoveMailsResponse.prototype, "message.RemoveMailsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除所有邮件请求
    // request RemoveAllMails
    ////////////////////////////////////////////////////////////////////////////////
    var RemoveAllMailsReqBody = (function () {
        function RemoveAllMailsReqBody() {
            this.type = 0; // 邮件类别
        }
        RemoveAllMailsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RemoveAllMailsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_enum(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RemoveAllMailsReqBody;
    }());
    message.RemoveAllMailsReqBody = RemoveAllMailsReqBody;
    __reflect(RemoveAllMailsReqBody.prototype, "message.RemoveAllMailsReqBody", ["aone.AoneBody"]);
    var RemoveAllMailsRequest = (function () {
        function RemoveAllMailsRequest() {
            this.header = new aone.AoneReqHeader(RemoveAllMailsRequest.ID);
            this.body = new RemoveAllMailsReqBody();
        }
        RemoveAllMailsRequest.prototype.parse_bytes = function (decoder) { return false; };
        RemoveAllMailsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RemoveAllMailsRequest.ID = 25010;
        return RemoveAllMailsRequest;
    }());
    message.RemoveAllMailsRequest = RemoveAllMailsRequest;
    __reflect(RemoveAllMailsRequest.prototype, "message.RemoveAllMailsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除所有邮件回复
    // response RemoveAllMails
    ////////////////////////////////////////////////////////////////////////////////
    var RemoveAllMailsRespBody = (function () {
        function RemoveAllMailsRespBody() {
        }
        RemoveAllMailsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        RemoveAllMailsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RemoveAllMailsRespBody;
    }());
    message.RemoveAllMailsRespBody = RemoveAllMailsRespBody;
    __reflect(RemoveAllMailsRespBody.prototype, "message.RemoveAllMailsRespBody", ["aone.AoneBody"]);
    var RemoveAllMailsResponse = (function () {
        function RemoveAllMailsResponse() {
            this.header = new aone.AoneRespHeader(RemoveAllMailsResponse.ID);
            this.body = new RemoveAllMailsRespBody();
        }
        RemoveAllMailsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RemoveAllMailsResponse.prototype.to_bytes = function (encoder) { return false; };
        RemoveAllMailsResponse.ID = 25011;
        return RemoveAllMailsResponse;
    }());
    message.RemoveAllMailsResponse = RemoveAllMailsResponse;
    __reflect(RemoveAllMailsResponse.prototype, "message.RemoveAllMailsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 存储附件请求
    // todo : 附件类型要修改成大礼包类型
    // request SaveAttachment
    ////////////////////////////////////////////////////////////////////////////////
    var SaveAttachmentReqBody = (function () {
        function SaveAttachmentReqBody() {
            this.type = 0; // 邮件类型
            this.mailIds = []; // 邮件ID
        }
        SaveAttachmentReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SaveAttachmentReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_enum(this.type);
            // mailIds
            encoder.write_string_vector(this.mailIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SaveAttachmentReqBody;
    }());
    message.SaveAttachmentReqBody = SaveAttachmentReqBody;
    __reflect(SaveAttachmentReqBody.prototype, "message.SaveAttachmentReqBody", ["aone.AoneBody"]);
    var SaveAttachmentRequest = (function () {
        function SaveAttachmentRequest() {
            this.header = new aone.AoneReqHeader(SaveAttachmentRequest.ID);
            this.body = new SaveAttachmentReqBody();
        }
        SaveAttachmentRequest.prototype.parse_bytes = function (decoder) { return false; };
        SaveAttachmentRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SaveAttachmentRequest.ID = 25012;
        return SaveAttachmentRequest;
    }());
    message.SaveAttachmentRequest = SaveAttachmentRequest;
    __reflect(SaveAttachmentRequest.prototype, "message.SaveAttachmentRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 存储附件回复
    // response SaveAttachment
    ////////////////////////////////////////////////////////////////////////////////
    var SaveAttachmentRespBody = (function () {
        function SaveAttachmentRespBody() {
            this.gameInfo = new message.GameInfo(); // 玩家游戏数据
        }
        SaveAttachmentRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SaveAttachmentRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SaveAttachmentRespBody;
    }());
    message.SaveAttachmentRespBody = SaveAttachmentRespBody;
    __reflect(SaveAttachmentRespBody.prototype, "message.SaveAttachmentRespBody", ["aone.AoneBody"]);
    var SaveAttachmentResponse = (function () {
        function SaveAttachmentResponse() {
            this.header = new aone.AoneRespHeader(SaveAttachmentResponse.ID);
            this.body = new SaveAttachmentRespBody();
        }
        SaveAttachmentResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SaveAttachmentResponse.prototype.to_bytes = function (encoder) { return false; };
        SaveAttachmentResponse.ID = 25013;
        return SaveAttachmentResponse;
    }());
    message.SaveAttachmentResponse = SaveAttachmentResponse;
    __reflect(SaveAttachmentResponse.prototype, "message.SaveAttachmentResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取邮箱信息请求
    // request QueryMailBoxs
    ////////////////////////////////////////////////////////////////////////////////
    var QueryMailBoxsReqBody = (function () {
        function QueryMailBoxsReqBody() {
        }
        QueryMailBoxsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryMailBoxsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryMailBoxsReqBody;
    }());
    message.QueryMailBoxsReqBody = QueryMailBoxsReqBody;
    __reflect(QueryMailBoxsReqBody.prototype, "message.QueryMailBoxsReqBody", ["aone.AoneBody"]);
    var QueryMailBoxsRequest = (function () {
        function QueryMailBoxsRequest() {
            this.header = new aone.AoneReqHeader(QueryMailBoxsRequest.ID);
            this.body = new QueryMailBoxsReqBody();
        }
        QueryMailBoxsRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryMailBoxsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryMailBoxsRequest.ID = 25014;
        return QueryMailBoxsRequest;
    }());
    message.QueryMailBoxsRequest = QueryMailBoxsRequest;
    __reflect(QueryMailBoxsRequest.prototype, "message.QueryMailBoxsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取邮箱信息回复
    // response QueryMailBoxs
    ////////////////////////////////////////////////////////////////////////////////
    var QueryMailBoxsRespBody = (function () {
        function QueryMailBoxsRespBody() {
            this.mailBoxs = []; // 邮箱信息
        }
        QueryMailBoxsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mailBoxs
            if (decoder_.eof())
                return true;
            var mailBoxs_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mailBoxs_count; i++) {
                this.mailBoxs.push(new message.MailBoxInfo());
                if (!this.mailBoxs[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryMailBoxsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryMailBoxsRespBody;
    }());
    message.QueryMailBoxsRespBody = QueryMailBoxsRespBody;
    __reflect(QueryMailBoxsRespBody.prototype, "message.QueryMailBoxsRespBody", ["aone.AoneBody"]);
    var QueryMailBoxsResponse = (function () {
        function QueryMailBoxsResponse() {
            this.header = new aone.AoneRespHeader(QueryMailBoxsResponse.ID);
            this.body = new QueryMailBoxsRespBody();
        }
        QueryMailBoxsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryMailBoxsResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryMailBoxsResponse.ID = 25015;
        return QueryMailBoxsResponse;
    }());
    message.QueryMailBoxsResponse = QueryMailBoxsResponse;
    __reflect(QueryMailBoxsResponse.prototype, "message.QueryMailBoxsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(GetMailCountRequest.ID, function () { return new GetMailCountRequest(); });
    aone.MessageFactory.getInstance().register(GetMailCountResponse.ID, function () { return new GetMailCountResponse(); });
    aone.MessageFactory.getInstance().register(GetMailListRequest.ID, function () { return new GetMailListRequest(); });
    aone.MessageFactory.getInstance().register(GetMailListResponse.ID, function () { return new GetMailListResponse(); });
    aone.MessageFactory.getInstance().register(GetMailDetailRequest.ID, function () { return new GetMailDetailRequest(); });
    aone.MessageFactory.getInstance().register(GetMailDetailResponse.ID, function () { return new GetMailDetailResponse(); });
    aone.MessageFactory.getInstance().register(SendRoleMailRequest.ID, function () { return new SendRoleMailRequest(); });
    aone.MessageFactory.getInstance().register(SendRoleMailResponse.ID, function () { return new SendRoleMailResponse(); });
    aone.MessageFactory.getInstance().register(RemoveMailsRequest.ID, function () { return new RemoveMailsRequest(); });
    aone.MessageFactory.getInstance().register(RemoveMailsResponse.ID, function () { return new RemoveMailsResponse(); });
    aone.MessageFactory.getInstance().register(RemoveAllMailsRequest.ID, function () { return new RemoveAllMailsRequest(); });
    aone.MessageFactory.getInstance().register(RemoveAllMailsResponse.ID, function () { return new RemoveAllMailsResponse(); });
    aone.MessageFactory.getInstance().register(SaveAttachmentRequest.ID, function () { return new SaveAttachmentRequest(); });
    aone.MessageFactory.getInstance().register(SaveAttachmentResponse.ID, function () { return new SaveAttachmentResponse(); });
    aone.MessageFactory.getInstance().register(QueryMailBoxsRequest.ID, function () { return new QueryMailBoxsRequest(); });
    aone.MessageFactory.getInstance().register(QueryMailBoxsResponse.ID, function () { return new QueryMailBoxsResponse(); });
})(message || (message = {}));
// TypeScript file
var aone;
(function (aone) {
    function assert(value) {
        if (!value)
            console.log(value);
    }
    // aone协议二进制编码器
    var BinaryEncoder = (function () {
        function BinaryEncoder() {
            this.bytes_ = new Uint8Array(1024); // 序列化缓存区
            this.cursor_ = 0; // 当前指针
        }
        BinaryEncoder.prototype.grow = function (need_length) {
            while (this.cursor_ + need_length > this.bytes_.byteLength) {
                var buf = new Uint8Array(this.bytes_.byteLength * 2); // 缓存空间不够，扩大一倍
                if (buf.byteLength != this.bytes_.byteLength * 2)
                    return; // 申请失败
                buf.set(this.bytes_, 0); // 拷贝原数据到新的缓存区
                this.bytes_ = buf; // 使用新的缓存区
            }
        };
        Object.defineProperty(BinaryEncoder.prototype, "buffer", {
            get: function () {
                return this.bytes_.buffer;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BinaryEncoder.prototype, "length", {
            get: function () {
                return this.cursor_;
            },
            enumerable: true,
            configurable: true
        });
        // 固定4字节整数
        // position < 0: 从当前位置开始写入，指针后移
        // positon >= 0: 从指定的位置开始写入，指针不动
        BinaryEncoder.prototype.write_fixuint32 = function (value, position) {
            if (position === void 0) { position = -1; }
            assert(value == Math.floor(value));
            assert((value >= 0) && (value < 4294967296));
            if (position < 0) {
                this.grow(4);
                this.bytes_[this.cursor_++] = ((value >>> 0) & 0xFF);
                this.bytes_[this.cursor_++] = ((value >>> 8) & 0xFF);
                this.bytes_[this.cursor_++] = ((value >>> 16) & 0xFF);
                this.bytes_[this.cursor_++] = ((value >>> 24) & 0xFF);
            }
            else {
                if (position + 4 > this.bytes_.length) {
                    this.grow(position + 4 - this.bytes_.length);
                }
                this.bytes_[position++] = ((value >>> 0) & 0xFF);
                this.bytes_[position++] = ((value >>> 8) & 0xFF);
                this.bytes_[position++] = ((value >>> 16) & 0xFF);
                this.bytes_[position++] = ((value >>> 24) & 0xFF);
                if (position > this.cursor_)
                    this.cursor_ = position;
            }
        };
        BinaryEncoder.prototype.write_bool = function (value) {
            this.grow(1);
            this.bytes_[this.cursor_++] = value ? 1 : 0;
        };
        BinaryEncoder.prototype.write_byte = function (value) {
            this.write_uint8(value);
        };
        BinaryEncoder.prototype.write_int8 = function (value) {
            assert(value == Math.floor(value));
            assert((value > -128) && (value < 128));
            this.grow(1);
            this.bytes_[this.cursor_++] = ((value >>> 0) & 0xFF);
        };
        BinaryEncoder.prototype.write_uint8 = function (value) {
            assert(value == Math.floor(value));
            assert((value >= 0) && (value < 256));
            this.grow(1);
            this.bytes_[this.cursor_++] = ((value >>> 0) & 0xFF);
        };
        BinaryEncoder.prototype.write_int16 = function (value) {
            assert(value == Math.floor(value));
            assert((value >= -32768) && (value < 32768));
            this.grow(2);
            this.bytes_[this.cursor_++] = ((value >>> 0) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 8) & 0xFF);
        };
        BinaryEncoder.prototype.write_uint16 = function (value) {
            assert(value == Math.floor(value));
            assert((value >= 0) && (value < 65536));
            this.grow(2);
            this.bytes_[this.cursor_++] = ((value >>> 0) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 8) & 0xFF);
        };
        BinaryEncoder.prototype.write_int32 = function (value) {
            assert(value == Math.floor(value));
            assert((value >= -2147483648) && (value < 2147483648));
            this.grow(4);
            this.bytes_[this.cursor_++] = ((value >>> 0) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 8) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 16) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 24) & 0xFF);
        };
        BinaryEncoder.prototype.write_uint32 = function (value) {
            assert(value == Math.floor(value));
            assert((value >= 0) && (value < 4294967296));
            this.grow(4);
            this.bytes_[this.cursor_++] = ((value >>> 0) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 8) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 16) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 24) & 0xFF);
        };
        BinaryEncoder.prototype.write_int64 = function (value) {
            assert(value == Math.floor(value));
            assert((value >= -2147483648) && (value < 2147483648));
            this.grow(8);
            this.bytes_[this.cursor_++] = ((value >>> 0) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 8) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 16) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 24) & 0xFF);
            this.bytes_[this.cursor_++] = (value >= 0 ? 0 : 0xFF);
            this.bytes_[this.cursor_++] = (value >= 0 ? 0 : 0xFF);
            this.bytes_[this.cursor_++] = (value >= 0 ? 0 : 0xFF);
            this.bytes_[this.cursor_++] = (value >= 0 ? 0 : 0xFF);
        };
        BinaryEncoder.prototype.write_uint64 = function (value) {
            assert(value == Math.floor(value));
            assert((value >= 0) && (value < 4294967296));
            this.grow(8);
            this.bytes_[this.cursor_++] = ((value >>> 0) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 8) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 16) & 0xFF);
            this.bytes_[this.cursor_++] = ((value >>> 24) & 0xFF);
            this.bytes_[this.cursor_++] = (0);
            this.bytes_[this.cursor_++] = (0);
            this.bytes_[this.cursor_++] = (0);
            this.bytes_[this.cursor_++] = (0);
        };
        BinaryEncoder.prototype.write_float32 = function (value) {
            this.grow(4);
            var tmp = new Uint8Array(4);
            new Float32Array(tmp.buffer)[0] = value;
            this.bytes_.set(tmp, this.cursor_);
            this.cursor_ += 4;
        };
        BinaryEncoder.prototype.write_float64 = function (value) {
            this.grow(8);
            var tmp = new Uint8Array(8);
            new Float64Array(tmp.buffer)[0] = value;
            this.bytes_.set(tmp, this.cursor_);
            this.cursor_ += 8;
        };
        BinaryEncoder.prototype.write_enum = function (value) {
            this.write_int32(value);
        };
        BinaryEncoder.prototype.write_string = function (value) {
            var buffer = new Uint8Array(value.length * 4);
            var length = 0;
            for (var i = 0; i < value.length; i++) {
                var c = value.charCodeAt(i);
                if (c < 128) {
                    buffer[length++] = c;
                }
                else if (c < 2048) {
                    buffer[length++] = ((c >> 6) | 192);
                    buffer[length++] = ((c & 63) | 128);
                }
                else if (c < 65536) {
                    // Look for surrogates
                    if (c >= 0xD800 && c <= 0xDBFF && i + 1 < value.length) {
                        var second = value.charCodeAt(i + 1);
                        if (second >= 0xDC00 && second <= 0xDFFF) {
                            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                            c = (c - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                            buffer[length++] = ((c >> 18) | 240);
                            buffer[length++] = (((c >> 12) & 63) | 128);
                            buffer[length++] = (((c >> 6) & 63) | 128);
                            buffer[length++] = ((c & 63) | 128);
                            i++;
                        }
                    }
                    else {
                        buffer[length++] = ((c >> 12) | 224);
                        buffer[length++] = (((c >> 6) & 63) | 128);
                        buffer[length++] = ((c & 63) | 128);
                    }
                }
            }
            this.write_fixuint32(length); // 字符串长度
            this.grow(length);
            this.bytes_.set(buffer.subarray(0, length), this.cursor_); // 拷贝字符串
            this.cursor_ += length;
        };
        BinaryEncoder.prototype.write_bool_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_bool(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_bool(false);
            }
        };
        BinaryEncoder.prototype.write_byte_array = function (value, len) {
            return this.write_uint8_array(value, len);
        };
        BinaryEncoder.prototype.write_int8_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_int8(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_int8(0);
            }
        };
        BinaryEncoder.prototype.write_uint8_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_uint8(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_uint8(0);
            }
        };
        BinaryEncoder.prototype.write_int16_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_int16(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_int16(0);
            }
        };
        BinaryEncoder.prototype.write_uint16_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_uint16(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_uint16(0);
            }
        };
        BinaryEncoder.prototype.write_int32_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_int32(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_int32(0);
            }
        };
        BinaryEncoder.prototype.write_uint32_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_fixuint32(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_fixuint32(0);
            }
        };
        BinaryEncoder.prototype.write_int64_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_int64(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_int64(0);
            }
        };
        BinaryEncoder.prototype.write_uint64_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_uint64(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_uint64(0);
            }
        };
        BinaryEncoder.prototype.write_float32_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_float32(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_float32(0);
            }
        };
        BinaryEncoder.prototype.write_float64_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_float64(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_float64(0);
            }
        };
        BinaryEncoder.prototype.write_enum_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_enum(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_enum(0);
            }
        };
        BinaryEncoder.prototype.write_string_array = function (value, len) {
            assert(value != null && value != undefined);
            assert(len == Math.floor(len));
            assert((len >= 0) && (len < 4294967296));
            for (var i = 0; i < value.length && i < len; i++) {
                this.write_string(value[i]);
            }
            for (var i = value.length; i < len; i++) {
                this.write_string("");
            }
        };
        BinaryEncoder.prototype.write_bool_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_bool(value[i]);
            }
        };
        BinaryEncoder.prototype.write_byte_vector = function (value) {
            return this.write_uint8_vector(value);
        };
        BinaryEncoder.prototype.write_int8_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_int8(value[i]);
            }
        };
        BinaryEncoder.prototype.write_uint8_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_uint8(value[i]);
            }
        };
        BinaryEncoder.prototype.write_int16_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_int16(value[i]);
            }
        };
        BinaryEncoder.prototype.write_uint16_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_uint16(value[i]);
            }
        };
        BinaryEncoder.prototype.write_int32_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_int32(value[i]);
            }
        };
        BinaryEncoder.prototype.write_uint32_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_fixuint32(value[i]);
            }
        };
        BinaryEncoder.prototype.write_int64_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_int64(value[i]);
            }
        };
        BinaryEncoder.prototype.write_uint64_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_uint64(value[i]);
            }
        };
        BinaryEncoder.prototype.write_float32_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_float32(value[i]);
            }
        };
        BinaryEncoder.prototype.write_float64_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_float64(value[i]);
            }
        };
        BinaryEncoder.prototype.write_enum_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_enum(value[i]);
            }
        };
        BinaryEncoder.prototype.write_string_vector = function (value) {
            assert(value != null && value != undefined);
            this.write_fixuint32(value.length);
            for (var i = 0; i < value.length; i++) {
                this.write_string(value[i]);
            }
        };
        return BinaryEncoder;
    }());
    aone.BinaryEncoder = BinaryEncoder;
    __reflect(BinaryEncoder.prototype, "aone.BinaryEncoder");
})(aone || (aone = {}));
//Date: 2019-11
//File: msg_cg_mission.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了任务功能
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 任务列表请求
    // request MissionList
    ////////////////////////////////////////////////////////////////////////////////
    var MissionListReqBody = (function () {
        function MissionListReqBody() {
            this.type = 0; // MissionType::MISSION_TYPE_NONE返回所有类型任务列表
        }
        MissionListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MissionListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionListReqBody;
    }());
    message.MissionListReqBody = MissionListReqBody;
    __reflect(MissionListReqBody.prototype, "message.MissionListReqBody", ["aone.AoneBody"]);
    var MissionListRequest = (function () {
        function MissionListRequest() {
            this.header = new aone.AoneReqHeader(MissionListRequest.ID);
            this.body = new MissionListReqBody();
        }
        MissionListRequest.prototype.parse_bytes = function (decoder) { return false; };
        MissionListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MissionListRequest.ID = 26000;
        return MissionListRequest;
    }());
    message.MissionListRequest = MissionListRequest;
    __reflect(MissionListRequest.prototype, "message.MissionListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 任务列表回复
    // response MissionList
    ////////////////////////////////////////////////////////////////////////////////
    var MissionListRespBody = (function () {
        function MissionListRespBody() {
            this.infos = []; // 任务列表
        }
        MissionListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // infos
            if (decoder_.eof())
                return true;
            var infos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < infos_count; i++) {
                this.infos.push(new message.MissionInfo());
                if (!this.infos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MissionListRespBody;
    }());
    message.MissionListRespBody = MissionListRespBody;
    __reflect(MissionListRespBody.prototype, "message.MissionListRespBody", ["aone.AoneBody"]);
    var MissionListResponse = (function () {
        function MissionListResponse() {
            this.header = new aone.AoneRespHeader(MissionListResponse.ID);
            this.body = new MissionListRespBody();
        }
        MissionListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionListResponse.prototype.to_bytes = function (encoder) { return false; };
        MissionListResponse.ID = 26001;
        return MissionListResponse;
    }());
    message.MissionListResponse = MissionListResponse;
    __reflect(MissionListResponse.prototype, "message.MissionListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取任务奖励请求
    // request MissionReward
    ////////////////////////////////////////////////////////////////////////////////
    var MissionRewardReqBody = (function () {
        function MissionRewardReqBody() {
            this.type = 0; // 任务类型
            this.subType = 0; // 任务子类型
        }
        MissionRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MissionRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // subType
            encoder.write_fixuint32(this.subType);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionRewardReqBody;
    }());
    message.MissionRewardReqBody = MissionRewardReqBody;
    __reflect(MissionRewardReqBody.prototype, "message.MissionRewardReqBody", ["aone.AoneBody"]);
    var MissionRewardRequest = (function () {
        function MissionRewardRequest() {
            this.header = new aone.AoneReqHeader(MissionRewardRequest.ID);
            this.body = new MissionRewardReqBody();
        }
        MissionRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        MissionRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MissionRewardRequest.ID = 26002;
        return MissionRewardRequest;
    }());
    message.MissionRewardRequest = MissionRewardRequest;
    __reflect(MissionRewardRequest.prototype, "message.MissionRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取任务奖励回复
    // response MissionReward
    ////////////////////////////////////////////////////////////////////////////////
    var MissionRewardRespBody = (function () {
        function MissionRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        MissionRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MissionRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MissionRewardRespBody;
    }());
    message.MissionRewardRespBody = MissionRewardRespBody;
    __reflect(MissionRewardRespBody.prototype, "message.MissionRewardRespBody", ["aone.AoneBody"]);
    var MissionRewardResponse = (function () {
        function MissionRewardResponse() {
            this.header = new aone.AoneRespHeader(MissionRewardResponse.ID);
            this.body = new MissionRewardRespBody();
        }
        MissionRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        MissionRewardResponse.ID = 26003;
        return MissionRewardResponse;
    }());
    message.MissionRewardResponse = MissionRewardResponse;
    __reflect(MissionRewardResponse.prototype, "message.MissionRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取活跃度奖励请求
    // request MissionActive
    ////////////////////////////////////////////////////////////////////////////////
    var MissionActiveReqBody = (function () {
        function MissionActiveReqBody() {
            this.index = 0; // 第几档索引
        }
        MissionActiveReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MissionActiveReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionActiveReqBody;
    }());
    message.MissionActiveReqBody = MissionActiveReqBody;
    __reflect(MissionActiveReqBody.prototype, "message.MissionActiveReqBody", ["aone.AoneBody"]);
    var MissionActiveRequest = (function () {
        function MissionActiveRequest() {
            this.header = new aone.AoneReqHeader(MissionActiveRequest.ID);
            this.body = new MissionActiveReqBody();
        }
        MissionActiveRequest.prototype.parse_bytes = function (decoder) { return false; };
        MissionActiveRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MissionActiveRequest.ID = 26004;
        return MissionActiveRequest;
    }());
    message.MissionActiveRequest = MissionActiveRequest;
    __reflect(MissionActiveRequest.prototype, "message.MissionActiveRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取活跃度奖励回复
    // response MissionActive
    ////////////////////////////////////////////////////////////////////////////////
    var MissionActiveRespBody = (function () {
        function MissionActiveRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        MissionActiveRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MissionActiveRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MissionActiveRespBody;
    }());
    message.MissionActiveRespBody = MissionActiveRespBody;
    __reflect(MissionActiveRespBody.prototype, "message.MissionActiveRespBody", ["aone.AoneBody"]);
    var MissionActiveResponse = (function () {
        function MissionActiveResponse() {
            this.header = new aone.AoneRespHeader(MissionActiveResponse.ID);
            this.body = new MissionActiveRespBody();
        }
        MissionActiveResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionActiveResponse.prototype.to_bytes = function (encoder) { return false; };
        MissionActiveResponse.ID = 26005;
        return MissionActiveResponse;
    }());
    message.MissionActiveResponse = MissionActiveResponse;
    __reflect(MissionActiveResponse.prototype, "message.MissionActiveResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取嘉年华奖励请求
    // request MissionNew
    ////////////////////////////////////////////////////////////////////////////////
    var MissionNewReqBody = (function () {
        function MissionNewReqBody() {
            this.mission_type = 0; // 任务类型（4/8/9）
            this.index = 0; // 领取索引
        }
        MissionNewReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MissionNewReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mission_type
            encoder.write_fixuint32(this.mission_type);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionNewReqBody;
    }());
    message.MissionNewReqBody = MissionNewReqBody;
    __reflect(MissionNewReqBody.prototype, "message.MissionNewReqBody", ["aone.AoneBody"]);
    var MissionNewRequest = (function () {
        function MissionNewRequest() {
            this.header = new aone.AoneReqHeader(MissionNewRequest.ID);
            this.body = new MissionNewReqBody();
        }
        MissionNewRequest.prototype.parse_bytes = function (decoder) { return false; };
        MissionNewRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MissionNewRequest.ID = 26006;
        return MissionNewRequest;
    }());
    message.MissionNewRequest = MissionNewRequest;
    __reflect(MissionNewRequest.prototype, "message.MissionNewRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取嘉年华奖励回复
    // response MissionNew
    ////////////////////////////////////////////////////////////////////////////////
    var MissionNewRespBody = (function () {
        function MissionNewRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        MissionNewRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MissionNewRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MissionNewRespBody;
    }());
    message.MissionNewRespBody = MissionNewRespBody;
    __reflect(MissionNewRespBody.prototype, "message.MissionNewRespBody", ["aone.AoneBody"]);
    var MissionNewResponse = (function () {
        function MissionNewResponse() {
            this.header = new aone.AoneRespHeader(MissionNewResponse.ID);
            this.body = new MissionNewRespBody();
        }
        MissionNewResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionNewResponse.prototype.to_bytes = function (encoder) { return false; };
        MissionNewResponse.ID = 26007;
        return MissionNewResponse;
    }());
    message.MissionNewResponse = MissionNewResponse;
    __reflect(MissionNewResponse.prototype, "message.MissionNewResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 猎人执照考试请求
    // request MissionLicenceTest
    ////////////////////////////////////////////////////////////////////////////////
    var MissionLicenceTestReqBody = (function () {
        function MissionLicenceTestReqBody() {
            this.licenceId = 0;
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
        }
        MissionLicenceTestReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MissionLicenceTestReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // licenceId
            encoder.write_fixuint32(this.licenceId);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionLicenceTestReqBody;
    }());
    message.MissionLicenceTestReqBody = MissionLicenceTestReqBody;
    __reflect(MissionLicenceTestReqBody.prototype, "message.MissionLicenceTestReqBody", ["aone.AoneBody"]);
    var MissionLicenceTestRequest = (function () {
        function MissionLicenceTestRequest() {
            this.header = new aone.AoneReqHeader(MissionLicenceTestRequest.ID);
            this.body = new MissionLicenceTestReqBody();
        }
        MissionLicenceTestRequest.prototype.parse_bytes = function (decoder) { return false; };
        MissionLicenceTestRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MissionLicenceTestRequest.ID = 26008;
        return MissionLicenceTestRequest;
    }());
    message.MissionLicenceTestRequest = MissionLicenceTestRequest;
    __reflect(MissionLicenceTestRequest.prototype, "message.MissionLicenceTestRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 猎人执照考试回复
    // response MissionLicenceTest
    ////////////////////////////////////////////////////////////////////////////////
    var MissionLicenceTestRespBody = (function () {
        function MissionLicenceTestRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        MissionLicenceTestRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MissionLicenceTestRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MissionLicenceTestRespBody;
    }());
    message.MissionLicenceTestRespBody = MissionLicenceTestRespBody;
    __reflect(MissionLicenceTestRespBody.prototype, "message.MissionLicenceTestRespBody", ["aone.AoneBody"]);
    var MissionLicenceTestResponse = (function () {
        function MissionLicenceTestResponse() {
            this.header = new aone.AoneRespHeader(MissionLicenceTestResponse.ID);
            this.body = new MissionLicenceTestRespBody();
        }
        MissionLicenceTestResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionLicenceTestResponse.prototype.to_bytes = function (encoder) { return false; };
        MissionLicenceTestResponse.ID = 26009;
        return MissionLicenceTestResponse;
    }());
    message.MissionLicenceTestResponse = MissionLicenceTestResponse;
    __reflect(MissionLicenceTestResponse.prototype, "message.MissionLicenceTestResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取执照奖励请求
    // request MissionRewardLicence
    ////////////////////////////////////////////////////////////////////////////////
    var MissionRewardLicenceReqBody = (function () {
        function MissionRewardLicenceReqBody() {
            this.licenceId = 0;
        }
        MissionRewardLicenceReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MissionRewardLicenceReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // licenceId
            encoder.write_fixuint32(this.licenceId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionRewardLicenceReqBody;
    }());
    message.MissionRewardLicenceReqBody = MissionRewardLicenceReqBody;
    __reflect(MissionRewardLicenceReqBody.prototype, "message.MissionRewardLicenceReqBody", ["aone.AoneBody"]);
    var MissionRewardLicenceRequest = (function () {
        function MissionRewardLicenceRequest() {
            this.header = new aone.AoneReqHeader(MissionRewardLicenceRequest.ID);
            this.body = new MissionRewardLicenceReqBody();
        }
        MissionRewardLicenceRequest.prototype.parse_bytes = function (decoder) { return false; };
        MissionRewardLicenceRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MissionRewardLicenceRequest.ID = 26010;
        return MissionRewardLicenceRequest;
    }());
    message.MissionRewardLicenceRequest = MissionRewardLicenceRequest;
    __reflect(MissionRewardLicenceRequest.prototype, "message.MissionRewardLicenceRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取执照奖总奖励回复
    // response MissionRewardLicence
    ////////////////////////////////////////////////////////////////////////////////
    var MissionRewardLicenceRespBody = (function () {
        function MissionRewardLicenceRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        MissionRewardLicenceRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MissionRewardLicenceRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MissionRewardLicenceRespBody;
    }());
    message.MissionRewardLicenceRespBody = MissionRewardLicenceRespBody;
    __reflect(MissionRewardLicenceRespBody.prototype, "message.MissionRewardLicenceRespBody", ["aone.AoneBody"]);
    var MissionRewardLicenceResponse = (function () {
        function MissionRewardLicenceResponse() {
            this.header = new aone.AoneRespHeader(MissionRewardLicenceResponse.ID);
            this.body = new MissionRewardLicenceRespBody();
        }
        MissionRewardLicenceResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionRewardLicenceResponse.prototype.to_bytes = function (encoder) { return false; };
        MissionRewardLicenceResponse.ID = 26011;
        return MissionRewardLicenceResponse;
    }());
    message.MissionRewardLicenceResponse = MissionRewardLicenceResponse;
    __reflect(MissionRewardLicenceResponse.prototype, "message.MissionRewardLicenceResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取与时间赛跑奖励请求
    // request MissionRaceReward
    ////////////////////////////////////////////////////////////////////////////////
    var MissionRaceRewardReqBody = (function () {
        function MissionRaceRewardReqBody() {
            this.index = 0;
        }
        MissionRaceRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MissionRaceRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionRaceRewardReqBody;
    }());
    message.MissionRaceRewardReqBody = MissionRaceRewardReqBody;
    __reflect(MissionRaceRewardReqBody.prototype, "message.MissionRaceRewardReqBody", ["aone.AoneBody"]);
    var MissionRaceRewardRequest = (function () {
        function MissionRaceRewardRequest() {
            this.header = new aone.AoneReqHeader(MissionRaceRewardRequest.ID);
            this.body = new MissionRaceRewardReqBody();
        }
        MissionRaceRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        MissionRaceRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MissionRaceRewardRequest.ID = 26012;
        return MissionRaceRewardRequest;
    }());
    message.MissionRaceRewardRequest = MissionRaceRewardRequest;
    __reflect(MissionRaceRewardRequest.prototype, "message.MissionRaceRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取与时间赛跑奖励回复
    // response MissionRaceReward
    ////////////////////////////////////////////////////////////////////////////////
    var MissionRaceRewardRespBody = (function () {
        function MissionRaceRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        MissionRaceRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MissionRaceRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MissionRaceRewardRespBody;
    }());
    message.MissionRaceRewardRespBody = MissionRaceRewardRespBody;
    __reflect(MissionRaceRewardRespBody.prototype, "message.MissionRaceRewardRespBody", ["aone.AoneBody"]);
    var MissionRaceRewardResponse = (function () {
        function MissionRaceRewardResponse() {
            this.header = new aone.AoneRespHeader(MissionRaceRewardResponse.ID);
            this.body = new MissionRaceRewardRespBody();
        }
        MissionRaceRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionRaceRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        MissionRaceRewardResponse.ID = 26013;
        return MissionRaceRewardResponse;
    }());
    message.MissionRaceRewardResponse = MissionRaceRewardResponse;
    __reflect(MissionRaceRewardResponse.prototype, "message.MissionRaceRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 兑换宝石商店奖励请求
    // request MissionJewelExchange
    ////////////////////////////////////////////////////////////////////////////////
    var MissionJewelExchangeReqBody = (function () {
        function MissionJewelExchangeReqBody() {
            this.index = 0; // 从1开始
            this.num = 0; // 兑换数量
        }
        MissionJewelExchangeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MissionJewelExchangeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // num
            encoder.write_fixuint32(this.num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionJewelExchangeReqBody;
    }());
    message.MissionJewelExchangeReqBody = MissionJewelExchangeReqBody;
    __reflect(MissionJewelExchangeReqBody.prototype, "message.MissionJewelExchangeReqBody", ["aone.AoneBody"]);
    var MissionJewelExchangeRequest = (function () {
        function MissionJewelExchangeRequest() {
            this.header = new aone.AoneReqHeader(MissionJewelExchangeRequest.ID);
            this.body = new MissionJewelExchangeReqBody();
        }
        MissionJewelExchangeRequest.prototype.parse_bytes = function (decoder) { return false; };
        MissionJewelExchangeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MissionJewelExchangeRequest.ID = 26014;
        return MissionJewelExchangeRequest;
    }());
    message.MissionJewelExchangeRequest = MissionJewelExchangeRequest;
    __reflect(MissionJewelExchangeRequest.prototype, "message.MissionJewelExchangeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 兑换宝石商店奖励回复
    // response MissionJewelExchange
    ////////////////////////////////////////////////////////////////////////////////
    var MissionJewelExchangeRespBody = (function () {
        function MissionJewelExchangeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        MissionJewelExchangeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MissionJewelExchangeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MissionJewelExchangeRespBody;
    }());
    message.MissionJewelExchangeRespBody = MissionJewelExchangeRespBody;
    __reflect(MissionJewelExchangeRespBody.prototype, "message.MissionJewelExchangeRespBody", ["aone.AoneBody"]);
    var MissionJewelExchangeResponse = (function () {
        function MissionJewelExchangeResponse() {
            this.header = new aone.AoneRespHeader(MissionJewelExchangeResponse.ID);
            this.body = new MissionJewelExchangeRespBody();
        }
        MissionJewelExchangeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionJewelExchangeResponse.prototype.to_bytes = function (encoder) { return false; };
        MissionJewelExchangeResponse.ID = 26015;
        return MissionJewelExchangeResponse;
    }());
    message.MissionJewelExchangeResponse = MissionJewelExchangeResponse;
    __reflect(MissionJewelExchangeResponse.prototype, "message.MissionJewelExchangeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买周常任务的商店请求
    // request MissionWeekMall
    ////////////////////////////////////////////////////////////////////////////////
    var MissionWeekMallReqBody = (function () {
        function MissionWeekMallReqBody() {
            this.index = 0; // 从1开始
        }
        MissionWeekMallReqBody.prototype.parse_bytes = function (decoder) { return false; };
        MissionWeekMallReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MissionWeekMallReqBody;
    }());
    message.MissionWeekMallReqBody = MissionWeekMallReqBody;
    __reflect(MissionWeekMallReqBody.prototype, "message.MissionWeekMallReqBody", ["aone.AoneBody"]);
    var MissionWeekMallRequest = (function () {
        function MissionWeekMallRequest() {
            this.header = new aone.AoneReqHeader(MissionWeekMallRequest.ID);
            this.body = new MissionWeekMallReqBody();
        }
        MissionWeekMallRequest.prototype.parse_bytes = function (decoder) { return false; };
        MissionWeekMallRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MissionWeekMallRequest.ID = 26016;
        return MissionWeekMallRequest;
    }());
    message.MissionWeekMallRequest = MissionWeekMallRequest;
    __reflect(MissionWeekMallRequest.prototype, "message.MissionWeekMallRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买周常任务的商店回复
    // response MissionWeekMall
    ////////////////////////////////////////////////////////////////////////////////
    var MissionWeekMallRespBody = (function () {
        function MissionWeekMallRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        MissionWeekMallRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        MissionWeekMallRespBody.prototype.to_bytes = function (encoder) { return false; };
        return MissionWeekMallRespBody;
    }());
    message.MissionWeekMallRespBody = MissionWeekMallRespBody;
    __reflect(MissionWeekMallRespBody.prototype, "message.MissionWeekMallRespBody", ["aone.AoneBody"]);
    var MissionWeekMallResponse = (function () {
        function MissionWeekMallResponse() {
            this.header = new aone.AoneRespHeader(MissionWeekMallResponse.ID);
            this.body = new MissionWeekMallRespBody();
        }
        MissionWeekMallResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MissionWeekMallResponse.prototype.to_bytes = function (encoder) { return false; };
        MissionWeekMallResponse.ID = 26017;
        return MissionWeekMallResponse;
    }());
    message.MissionWeekMallResponse = MissionWeekMallResponse;
    __reflect(MissionWeekMallResponse.prototype, "message.MissionWeekMallResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(MissionListRequest.ID, function () { return new MissionListRequest(); });
    aone.MessageFactory.getInstance().register(MissionListResponse.ID, function () { return new MissionListResponse(); });
    aone.MessageFactory.getInstance().register(MissionRewardRequest.ID, function () { return new MissionRewardRequest(); });
    aone.MessageFactory.getInstance().register(MissionRewardResponse.ID, function () { return new MissionRewardResponse(); });
    aone.MessageFactory.getInstance().register(MissionActiveRequest.ID, function () { return new MissionActiveRequest(); });
    aone.MessageFactory.getInstance().register(MissionActiveResponse.ID, function () { return new MissionActiveResponse(); });
    aone.MessageFactory.getInstance().register(MissionNewRequest.ID, function () { return new MissionNewRequest(); });
    aone.MessageFactory.getInstance().register(MissionNewResponse.ID, function () { return new MissionNewResponse(); });
    aone.MessageFactory.getInstance().register(MissionLicenceTestRequest.ID, function () { return new MissionLicenceTestRequest(); });
    aone.MessageFactory.getInstance().register(MissionLicenceTestResponse.ID, function () { return new MissionLicenceTestResponse(); });
    aone.MessageFactory.getInstance().register(MissionRewardLicenceRequest.ID, function () { return new MissionRewardLicenceRequest(); });
    aone.MessageFactory.getInstance().register(MissionRewardLicenceResponse.ID, function () { return new MissionRewardLicenceResponse(); });
    aone.MessageFactory.getInstance().register(MissionRaceRewardRequest.ID, function () { return new MissionRaceRewardRequest(); });
    aone.MessageFactory.getInstance().register(MissionRaceRewardResponse.ID, function () { return new MissionRaceRewardResponse(); });
    aone.MessageFactory.getInstance().register(MissionJewelExchangeRequest.ID, function () { return new MissionJewelExchangeRequest(); });
    aone.MessageFactory.getInstance().register(MissionJewelExchangeResponse.ID, function () { return new MissionJewelExchangeResponse(); });
    aone.MessageFactory.getInstance().register(MissionWeekMallRequest.ID, function () { return new MissionWeekMallRequest(); });
    aone.MessageFactory.getInstance().register(MissionWeekMallResponse.ID, function () { return new MissionWeekMallResponse(); });
})(message || (message = {}));
//Date: 2019-11
//File: msg_cg_notice.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// �����˿ͻ�������Ϸ�����Ĳ���Э��
// ��Ҫ�������������Э��
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // ֪ͨ������ݱ仯
    // request RoleInfoNotice
    ////////////////////////////////////////////////////////////////////////////////
    var RoleInfoNotice = (function () {
        function RoleInfoNotice() {
            this.gameInfo = new message.GameInfo(); // �����Ϣ
            this.is_pay = false; // �Ƿ��ǳ�ֵ�ɹ�
        }
        RoleInfoNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // is_pay
            if (decoder_.eof())
                return true;
            this.is_pay = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RoleInfoNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // gameInfo
            this.gameInfo.to_bytes(encoder);
            // is_pay
            encoder.write_bool(this.is_pay);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RoleInfoNotice;
    }());
    message.RoleInfoNotice = RoleInfoNotice;
    __reflect(RoleInfoNotice.prototype, "message.RoleInfoNotice", ["aone.AoneBody"]);
    var RoleInfoNoticeRequest = (function () {
        function RoleInfoNoticeRequest() {
            this.header = new aone.AoneReqHeader(RoleInfoNoticeRequest.ID);
            this.body = new RoleInfoNotice();
        }
        RoleInfoNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        RoleInfoNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RoleInfoNoticeRequest.ID = 36000;
        return RoleInfoNoticeRequest;
    }());
    message.RoleInfoNoticeRequest = RoleInfoNoticeRequest;
    __reflect(RoleInfoNoticeRequest.prototype, "message.RoleInfoNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ֪ͨ������ݱ仯
    // request RoleOtherInfoNotice
    ////////////////////////////////////////////////////////////////////////////////
    var RoleOtherInfoNotice = (function () {
        function RoleOtherInfoNotice() {
            this.serverTime = 0; // ��ǰ������ʱ��
            this.week = 0; // ��ǰ����������
            this.otherGameInfo = new message.OtherGameInfo(); // �����Ϣ
        }
        RoleOtherInfoNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // serverTime
            if (decoder_.eof())
                return true;
            this.serverTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // week
            if (decoder_.eof())
                return true;
            this.week = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // otherGameInfo
            if (decoder_.eof())
                return true;
            if (!this.otherGameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RoleOtherInfoNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // serverTime
            encoder.write_fixuint32(this.serverTime);
            // week
            encoder.write_fixuint32(this.week);
            // otherGameInfo
            this.otherGameInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RoleOtherInfoNotice;
    }());
    message.RoleOtherInfoNotice = RoleOtherInfoNotice;
    __reflect(RoleOtherInfoNotice.prototype, "message.RoleOtherInfoNotice", ["aone.AoneBody"]);
    var RoleOtherInfoNoticeRequest = (function () {
        function RoleOtherInfoNoticeRequest() {
            this.header = new aone.AoneReqHeader(RoleOtherInfoNoticeRequest.ID);
            this.body = new RoleOtherInfoNotice();
        }
        RoleOtherInfoNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        RoleOtherInfoNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RoleOtherInfoNoticeRequest.ID = 36002;
        return RoleOtherInfoNoticeRequest;
    }());
    message.RoleOtherInfoNoticeRequest = RoleOtherInfoNoticeRequest;
    __reflect(RoleOtherInfoNoticeRequest.prototype, "message.RoleOtherInfoNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���Ƶ���仯֪ͨ
    // request ChatChannelChangeNotice
    ////////////////////////////////////////////////////////////////////////////////
    var ChatChannelChangeNotice = (function () {
        function ChatChannelChangeNotice() {
            this.channel_id = 0;
            this.channel_count = 0;
        }
        ChatChannelChangeNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // channel_id
            if (decoder_.eof())
                return true;
            this.channel_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // channel_count
            if (decoder_.eof())
                return true;
            this.channel_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ChatChannelChangeNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // channel_id
            encoder.write_fixuint32(this.channel_id);
            // channel_count
            encoder.write_fixuint32(this.channel_count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChatChannelChangeNotice;
    }());
    message.ChatChannelChangeNotice = ChatChannelChangeNotice;
    __reflect(ChatChannelChangeNotice.prototype, "message.ChatChannelChangeNotice", ["aone.AoneBody"]);
    var ChatChannelChangeNoticeRequest = (function () {
        function ChatChannelChangeNoticeRequest() {
            this.header = new aone.AoneReqHeader(ChatChannelChangeNoticeRequest.ID);
            this.body = new ChatChannelChangeNotice();
        }
        ChatChannelChangeNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        ChatChannelChangeNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChatChannelChangeNoticeRequest.ID = 36004;
        return ChatChannelChangeNoticeRequest;
    }());
    message.ChatChannelChangeNoticeRequest = ChatChannelChangeNoticeRequest;
    __reflect(ChatChannelChangeNoticeRequest.prototype, "message.ChatChannelChangeNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �Ƿ����Ipɸѡ
    // request IPCheckResultNotice
    ////////////////////////////////////////////////////////////////////////////////
    var IPCheckResultNotice = (function () {
        function IPCheckResultNotice() {
            this.result = 0;
        }
        IPCheckResultNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // result
            if (decoder_.eof())
                return true;
            this.result = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        IPCheckResultNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // result
            encoder.write_fixuint32(this.result);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IPCheckResultNotice;
    }());
    message.IPCheckResultNotice = IPCheckResultNotice;
    __reflect(IPCheckResultNotice.prototype, "message.IPCheckResultNotice", ["aone.AoneBody"]);
    var IPCheckResultNoticeRequest = (function () {
        function IPCheckResultNoticeRequest() {
            this.header = new aone.AoneReqHeader(IPCheckResultNoticeRequest.ID);
            this.body = new IPCheckResultNotice();
        }
        IPCheckResultNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        IPCheckResultNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IPCheckResultNoticeRequest.ID = 36006;
        return IPCheckResultNoticeRequest;
    }());
    message.IPCheckResultNoticeRequest = IPCheckResultNoticeRequest;
    __reflect(IPCheckResultNoticeRequest.prototype, "message.IPCheckResultNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ����������Ϣ
    // request ChatMessageNotice
    ////////////////////////////////////////////////////////////////////////////////
    var ChatMessageNotice = (function () {
        function ChatMessageNotice() {
            this.chatinfos = [];
        }
        ChatMessageNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // chatinfos
            if (decoder_.eof())
                return true;
            var chatinfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < chatinfos_count; i++) {
                this.chatinfos.push(new message.ChatMessage());
                if (!this.chatinfos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChatMessageNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // chatinfos
            encoder.write_fixuint32(Object.keys(this.chatinfos).length);
            for (var k in this.chatinfos) {
                if (!this.chatinfos[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChatMessageNotice;
    }());
    message.ChatMessageNotice = ChatMessageNotice;
    __reflect(ChatMessageNotice.prototype, "message.ChatMessageNotice", ["aone.AoneBody"]);
    var ChatMessageNoticeRequest = (function () {
        function ChatMessageNoticeRequest() {
            this.header = new aone.AoneReqHeader(ChatMessageNoticeRequest.ID);
            this.body = new ChatMessageNotice();
        }
        ChatMessageNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        ChatMessageNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChatMessageNoticeRequest.ID = 36010;
        return ChatMessageNoticeRequest;
    }());
    message.ChatMessageNoticeRequest = ChatMessageNoticeRequest;
    __reflect(ChatMessageNoticeRequest.prototype, "message.ChatMessageNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���ʼ�֪ͨ
    // request MailStateNotice
    ////////////////////////////////////////////////////////////////////////////////
    var MailStateNotice = (function () {
        function MailStateNotice() {
            this.mailBoxs = []; // ������Ϣ
        }
        MailStateNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mailBoxs
            if (decoder_.eof())
                return true;
            var mailBoxs_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mailBoxs_count; i++) {
                this.mailBoxs.push(new message.MailBoxInfo());
                if (!this.mailBoxs[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        MailStateNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mailBoxs
            encoder.write_fixuint32(Object.keys(this.mailBoxs).length);
            for (var k in this.mailBoxs) {
                if (!this.mailBoxs[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MailStateNotice;
    }());
    message.MailStateNotice = MailStateNotice;
    __reflect(MailStateNotice.prototype, "message.MailStateNotice", ["aone.AoneBody"]);
    var MailStateNoticeRequest = (function () {
        function MailStateNoticeRequest() {
            this.header = new aone.AoneReqHeader(MailStateNoticeRequest.ID);
            this.body = new MailStateNotice();
        }
        MailStateNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        MailStateNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MailStateNoticeRequest.ID = 36012;
        return MailStateNoticeRequest;
    }());
    message.MailStateNoticeRequest = MailStateNoticeRequest;
    __reflect(MailStateNoticeRequest.prototype, "message.MailStateNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �³�ֵ֪ͨ
    // request ChargeNotice
    ////////////////////////////////////////////////////////////////////////////////
    var ChargeNotice = (function () {
        function ChargeNotice() {
            this.token = 0; // ����
            this.chargeToken = 0; // ��ֵ�ۻ�
            this.chargeCount = 0; // ��ֵ����
            this.vipLevel = 0; // vip�ȼ�
            this.vipExp = 0; // vip����
        }
        ChargeNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // chargeToken
            if (decoder_.eof())
                return true;
            this.chargeToken = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // chargeCount
            if (decoder_.eof())
                return true;
            this.chargeCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // vipLevel
            if (decoder_.eof())
                return true;
            this.vipLevel = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // vipExp
            if (decoder_.eof())
                return true;
            this.vipExp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ChargeNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // token
            encoder.write_fixuint32(this.token);
            // chargeToken
            encoder.write_fixuint32(this.chargeToken);
            // chargeCount
            encoder.write_fixuint32(this.chargeCount);
            // vipLevel
            encoder.write_fixuint32(this.vipLevel);
            // vipExp
            encoder.write_fixuint32(this.vipExp);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChargeNotice;
    }());
    message.ChargeNotice = ChargeNotice;
    __reflect(ChargeNotice.prototype, "message.ChargeNotice", ["aone.AoneBody"]);
    var ChargeNoticeRequest = (function () {
        function ChargeNoticeRequest() {
            this.header = new aone.AoneReqHeader(ChargeNoticeRequest.ID);
            this.body = new ChargeNotice();
        }
        ChargeNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        ChargeNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChargeNoticeRequest.ID = 36014;
        return ChargeNoticeRequest;
    }());
    message.ChargeNoticeRequest = ChargeNoticeRequest;
    __reflect(ChargeNoticeRequest.prototype, "message.ChargeNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��������֪ͨ
    // request LeagueApplyNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueApplyNotice = (function () {
        function LeagueApplyNotice() {
            this.applyInfo = []; // ��������
        }
        LeagueApplyNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // applyInfo
            if (decoder_.eof())
                return true;
            var applyInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < applyInfo_count; i++) {
                this.applyInfo.push(new message.MemberApply());
                if (!this.applyInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueApplyNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // applyInfo
            encoder.write_fixuint32(Object.keys(this.applyInfo).length);
            for (var k in this.applyInfo) {
                if (!this.applyInfo[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueApplyNotice;
    }());
    message.LeagueApplyNotice = LeagueApplyNotice;
    __reflect(LeagueApplyNotice.prototype, "message.LeagueApplyNotice", ["aone.AoneBody"]);
    var LeagueApplyNoticeRequest = (function () {
        function LeagueApplyNoticeRequest() {
            this.header = new aone.AoneReqHeader(LeagueApplyNoticeRequest.ID);
            this.body = new LeagueApplyNotice();
        }
        LeagueApplyNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        LeagueApplyNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueApplyNoticeRequest.ID = 36016;
        return LeagueApplyNoticeRequest;
    }());
    message.LeagueApplyNoticeRequest = LeagueApplyNoticeRequest;
    __reflect(LeagueApplyNoticeRequest.prototype, "message.LeagueApplyNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��������֪ͨ
    // request FriendApplyNotice
    ////////////////////////////////////////////////////////////////////////////////
    var FriendApplyNotice = (function () {
        function FriendApplyNotice() {
            this.roleId = 0;
            this.roleName = "";
        }
        FriendApplyNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleId
            if (decoder_.eof())
                return true;
            this.roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roleName
            if (decoder_.eof())
                return true;
            this.roleName = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        FriendApplyNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // roleName
            encoder.write_string(this.roleName);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return FriendApplyNotice;
    }());
    message.FriendApplyNotice = FriendApplyNotice;
    __reflect(FriendApplyNotice.prototype, "message.FriendApplyNotice", ["aone.AoneBody"]);
    var FriendApplyNoticeRequest = (function () {
        function FriendApplyNoticeRequest() {
            this.header = new aone.AoneReqHeader(FriendApplyNoticeRequest.ID);
            this.body = new FriendApplyNotice();
        }
        FriendApplyNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        FriendApplyNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        FriendApplyNoticeRequest.ID = 36018;
        return FriendApplyNoticeRequest;
    }());
    message.FriendApplyNoticeRequest = FriendApplyNoticeRequest;
    __reflect(FriendApplyNoticeRequest.prototype, "message.FriendApplyNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ɾ������֪ͨ
    // request RemoveFormationNotice
    ////////////////////////////////////////////////////////////////////////////////
    var RemoveFormationNotice = (function () {
        function RemoveFormationNotice() {
            this.type = 0; // ��������
            this.index = 0; // ��������
        }
        RemoveFormationNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RemoveFormationNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RemoveFormationNotice;
    }());
    message.RemoveFormationNotice = RemoveFormationNotice;
    __reflect(RemoveFormationNotice.prototype, "message.RemoveFormationNotice", ["aone.AoneBody"]);
    var RemoveFormationNoticeRequest = (function () {
        function RemoveFormationNoticeRequest() {
            this.header = new aone.AoneReqHeader(RemoveFormationNoticeRequest.ID);
            this.body = new RemoveFormationNotice();
        }
        RemoveFormationNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        RemoveFormationNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RemoveFormationNoticeRequest.ID = 36054;
        return RemoveFormationNoticeRequest;
    }());
    message.RemoveFormationNoticeRequest = RemoveFormationNoticeRequest;
    __reflect(RemoveFormationNoticeRequest.prototype, "message.RemoveFormationNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��������֪ͨ
    // request TeachStepNotice
    ////////////////////////////////////////////////////////////////////////////////
    var TeachStepNotice = (function () {
        function TeachStepNotice() {
            this.items = []; // �����иı�
        }
        TeachStepNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.TeachItem());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        TeachStepNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // items
            encoder.write_fixuint32(Object.keys(this.items).length);
            for (var k in this.items) {
                if (!this.items[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return TeachStepNotice;
    }());
    message.TeachStepNotice = TeachStepNotice;
    __reflect(TeachStepNotice.prototype, "message.TeachStepNotice", ["aone.AoneBody"]);
    var TeachStepNoticeRequest = (function () {
        function TeachStepNoticeRequest() {
            this.header = new aone.AoneReqHeader(TeachStepNoticeRequest.ID);
            this.body = new TeachStepNotice();
        }
        TeachStepNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        TeachStepNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        TeachStepNoticeRequest.ID = 36056;
        return TeachStepNoticeRequest;
    }());
    message.TeachStepNoticeRequest = TeachStepNoticeRequest;
    __reflect(TeachStepNoticeRequest.prototype, "message.TeachStepNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////
    // ��Ա���볡��֪ͨ
    // request LeagueSceneJoinNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueSceneJoinNotice = (function () {
        function LeagueSceneJoinNotice() {
            this.roleIds = [];
        }
        LeagueSceneJoinNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleIds
            if (decoder_.eof())
                return true;
            this.roleIds = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueSceneJoinNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleIds
            encoder.write_uint32_vector(this.roleIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueSceneJoinNotice;
    }());
    message.LeagueSceneJoinNotice = LeagueSceneJoinNotice;
    __reflect(LeagueSceneJoinNotice.prototype, "message.LeagueSceneJoinNotice", ["aone.AoneBody"]);
    var LeagueSceneJoinNoticeRequest = (function () {
        function LeagueSceneJoinNoticeRequest() {
            this.header = new aone.AoneReqHeader(LeagueSceneJoinNoticeRequest.ID);
            this.body = new LeagueSceneJoinNotice();
        }
        LeagueSceneJoinNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        LeagueSceneJoinNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueSceneJoinNoticeRequest.ID = 36102;
        return LeagueSceneJoinNoticeRequest;
    }());
    message.LeagueSceneJoinNoticeRequest = LeagueSceneJoinNoticeRequest;
    __reflect(LeagueSceneJoinNoticeRequest.prototype, "message.LeagueSceneJoinNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // BOSS�仯֪ͨ
    // request LeagueBossNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossNotice = (function () {
        function LeagueBossNotice() {
            this.type = 0; // 1����֪ͨ2Ѫ���仯3ɾ��
            this.value = 0; // Ѫ��
            this.progresses = []; // ���̱仯
            this.is_win = false; // �Ƿ��ɱ�ɹ�
            this.rankItems = []; // �˺�����
            this.kill_name = ""; // ��ɱ������
        }
        LeagueBossNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // progresses
            if (decoder_.eof())
                return true;
            var progresses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < progresses_count; i++) {
                this.progresses.push(new message.ProgressInfo());
                if (!this.progresses[i].parse_bytes(decoder_))
                    return false;
            }
            // is_win
            if (decoder_.eof())
                return true;
            this.is_win = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // rankItems
            if (decoder_.eof())
                return true;
            var rankItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rankItems_count; i++) {
                this.rankItems.push(new message.LeagueBossHurtRank());
                if (!this.rankItems[i].parse_bytes(decoder_))
                    return false;
            }
            // kill_name
            if (decoder_.eof())
                return true;
            this.kill_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueBossNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // value
            encoder.write_fixuint32(this.value);
            // progresses
            encoder.write_fixuint32(Object.keys(this.progresses).length);
            for (var k in this.progresses) {
                if (!this.progresses[k].to_bytes(encoder))
                    return false;
            }
            // is_win
            encoder.write_bool(this.is_win);
            // rankItems
            encoder.write_fixuint32(Object.keys(this.rankItems).length);
            for (var k in this.rankItems) {
                if (!this.rankItems[k].to_bytes(encoder))
                    return false;
            }
            // kill_name
            encoder.write_string(this.kill_name);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueBossNotice;
    }());
    message.LeagueBossNotice = LeagueBossNotice;
    __reflect(LeagueBossNotice.prototype, "message.LeagueBossNotice", ["aone.AoneBody"]);
    var LeagueBossNoticeRequest = (function () {
        function LeagueBossNoticeRequest() {
            this.header = new aone.AoneReqHeader(LeagueBossNoticeRequest.ID);
            this.body = new LeagueBossNotice();
        }
        LeagueBossNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        LeagueBossNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueBossNoticeRequest.ID = 36106;
        return LeagueBossNoticeRequest;
    }());
    message.LeagueBossNoticeRequest = LeagueBossNoticeRequest;
    __reflect(LeagueBossNoticeRequest.prototype, "message.LeagueBossNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // BOSS�˺����а�֪ͨ
    // request LeagueBossRankNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossRankNotice = (function () {
        function LeagueBossRankNotice() {
            this.rankItems = []; // �˺�����
        }
        LeagueBossRankNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // rankItems
            if (decoder_.eof())
                return true;
            var rankItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rankItems_count; i++) {
                this.rankItems.push(new message.LeagueBossHurtRank());
                if (!this.rankItems[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueBossRankNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // rankItems
            encoder.write_fixuint32(Object.keys(this.rankItems).length);
            for (var k in this.rankItems) {
                if (!this.rankItems[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueBossRankNotice;
    }());
    message.LeagueBossRankNotice = LeagueBossRankNotice;
    __reflect(LeagueBossRankNotice.prototype, "message.LeagueBossRankNotice", ["aone.AoneBody"]);
    var LeagueBossRankNoticeRequest = (function () {
        function LeagueBossRankNoticeRequest() {
            this.header = new aone.AoneReqHeader(LeagueBossRankNoticeRequest.ID);
            this.body = new LeagueBossRankNotice();
        }
        LeagueBossRankNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        LeagueBossRankNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueBossRankNoticeRequest.ID = 36108;
        return LeagueBossRankNoticeRequest;
    }());
    message.LeagueBossRankNoticeRequest = LeagueBossRankNoticeRequest;
    __reflect(LeagueBossRankNoticeRequest.prototype, "message.LeagueBossRankNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ֪ͨ��Ա��Ϣ�仯
    // request LeagueMemberNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMemberNotice = (function () {
        function LeagueMemberNotice() {
            this.noticeType = 0; // ��������(��LeagueNoticeType)
            this.value = 0; // ֵ(1\2\5\7\9)
            this.valueEx = 0; // �ڶ���ֵ(1\2\5)
            this.strValue = ""; // ������ֵ(3\4\6)
            this.members = []; // ��Ա��Ϣ(8)
            this.memberCount = 0; // ��Ա����
        }
        LeagueMemberNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // noticeType
            if (decoder_.eof())
                return true;
            this.noticeType = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // valueEx
            if (decoder_.eof())
                return true;
            this.valueEx = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // strValue
            if (decoder_.eof())
                return true;
            this.strValue = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            // memberCount
            if (decoder_.eof())
                return true;
            this.memberCount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueMemberNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // noticeType
            encoder.write_fixuint32(this.noticeType);
            // value
            encoder.write_fixuint32(this.value);
            // valueEx
            encoder.write_fixuint32(this.valueEx);
            // strValue
            encoder.write_string(this.strValue);
            // members
            encoder.write_fixuint32(Object.keys(this.members).length);
            for (var k in this.members) {
                if (!this.members[k].to_bytes(encoder))
                    return false;
            }
            // memberCount
            encoder.write_fixuint32(this.memberCount);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMemberNotice;
    }());
    message.LeagueMemberNotice = LeagueMemberNotice;
    __reflect(LeagueMemberNotice.prototype, "message.LeagueMemberNotice", ["aone.AoneBody"]);
    var LeagueMemberNoticeRequest = (function () {
        function LeagueMemberNoticeRequest() {
            this.header = new aone.AoneReqHeader(LeagueMemberNoticeRequest.ID);
            this.body = new LeagueMemberNotice();
        }
        LeagueMemberNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        LeagueMemberNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMemberNoticeRequest.ID = 36110;
        return LeagueMemberNoticeRequest;
    }());
    message.LeagueMemberNoticeRequest = LeagueMemberNoticeRequest;
    __reflect(LeagueMemberNoticeRequest.prototype, "message.LeagueMemberNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �Ӳ�֪ͨ
    // request LeagueBossPartyNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueBossPartyNotice = (function () {
        function LeagueBossPartyNotice() {
            this.progresses = []; // ���̱仯
        }
        LeagueBossPartyNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // progresses
            if (decoder_.eof())
                return true;
            var progresses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < progresses_count; i++) {
                this.progresses.push(new message.ProgressInfo());
                if (!this.progresses[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueBossPartyNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // progresses
            encoder.write_fixuint32(Object.keys(this.progresses).length);
            for (var k in this.progresses) {
                if (!this.progresses[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueBossPartyNotice;
    }());
    message.LeagueBossPartyNotice = LeagueBossPartyNotice;
    __reflect(LeagueBossPartyNotice.prototype, "message.LeagueBossPartyNotice", ["aone.AoneBody"]);
    var LeagueBossPartyNoticeRequest = (function () {
        function LeagueBossPartyNoticeRequest() {
            this.header = new aone.AoneReqHeader(LeagueBossPartyNoticeRequest.ID);
            this.body = new LeagueBossPartyNotice();
        }
        LeagueBossPartyNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        LeagueBossPartyNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueBossPartyNoticeRequest.ID = 36112;
        return LeagueBossPartyNoticeRequest;
    }());
    message.LeagueBossPartyNoticeRequest = LeagueBossPartyNoticeRequest;
    __reflect(LeagueBossPartyNoticeRequest.prototype, "message.LeagueBossPartyNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���˸����仯֪ͨ
    // request LeagueInstanceNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueInstanceNotice = (function () {
        function LeagueInstanceNotice() {
            this.instances = [];
        }
        LeagueInstanceNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // instances
            if (decoder_.eof())
                return true;
            var instances_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < instances_count; i++) {
                this.instances.push(new message.LeagueInstanceSimple());
                if (!this.instances[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueInstanceNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instances
            encoder.write_fixuint32(Object.keys(this.instances).length);
            for (var k in this.instances) {
                if (!this.instances[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueInstanceNotice;
    }());
    message.LeagueInstanceNotice = LeagueInstanceNotice;
    __reflect(LeagueInstanceNotice.prototype, "message.LeagueInstanceNotice", ["aone.AoneBody"]);
    var LeagueInstanceNoticeRequest = (function () {
        function LeagueInstanceNoticeRequest() {
            this.header = new aone.AoneReqHeader(LeagueInstanceNoticeRequest.ID);
            this.body = new LeagueInstanceNotice();
        }
        LeagueInstanceNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        LeagueInstanceNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueInstanceNoticeRequest.ID = 36114;
        return LeagueInstanceNoticeRequest;
    }());
    message.LeagueInstanceNoticeRequest = LeagueInstanceNoticeRequest;
    __reflect(LeagueInstanceNoticeRequest.prototype, "message.LeagueInstanceNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ����������Ϣ�仯
    // request LeagueMatchBattleNotice
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueMatchBattleNotice = (function () {
        function LeagueMatchBattleNotice() {
            this.matchInfo = new message.LeagueMatchInfo();
            this.is_sign = false;
        }
        LeagueMatchBattleNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // matchInfo
            if (decoder_.eof())
                return true;
            if (!this.matchInfo.parse_bytes(decoder_))
                return false;
            // is_sign
            if (decoder_.eof())
                return true;
            this.is_sign = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueMatchBattleNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // matchInfo
            this.matchInfo.to_bytes(encoder);
            // is_sign
            encoder.write_bool(this.is_sign);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueMatchBattleNotice;
    }());
    message.LeagueMatchBattleNotice = LeagueMatchBattleNotice;
    __reflect(LeagueMatchBattleNotice.prototype, "message.LeagueMatchBattleNotice", ["aone.AoneBody"]);
    var LeagueMatchBattleNoticeRequest = (function () {
        function LeagueMatchBattleNoticeRequest() {
            this.header = new aone.AoneReqHeader(LeagueMatchBattleNoticeRequest.ID);
            this.body = new LeagueMatchBattleNotice();
        }
        LeagueMatchBattleNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        LeagueMatchBattleNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueMatchBattleNoticeRequest.ID = 36116;
        return LeagueMatchBattleNoticeRequest;
    }());
    message.LeagueMatchBattleNoticeRequest = LeagueMatchBattleNoticeRequest;
    __reflect(LeagueMatchBattleNoticeRequest.prototype, "message.LeagueMatchBattleNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////
    // �����������
    // �����������λ��
    // request SceneItemPosInfoNotice
    ////////////////////////////////////////////////////////////////////////////////
    var SceneItemPosInfoNotice = (function () {
        function SceneItemPosInfoNotice() {
            this.posInfos = [];
        }
        SceneItemPosInfoNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // posInfos
            if (decoder_.eof())
                return true;
            var posInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < posInfos_count; i++) {
                this.posInfos.push(new message.ScenePosInfo());
                if (!this.posInfos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneItemPosInfoNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // posInfos
            encoder.write_fixuint32(Object.keys(this.posInfos).length);
            for (var k in this.posInfos) {
                if (!this.posInfos[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneItemPosInfoNotice;
    }());
    message.SceneItemPosInfoNotice = SceneItemPosInfoNotice;
    __reflect(SceneItemPosInfoNotice.prototype, "message.SceneItemPosInfoNotice", ["aone.AoneBody"]);
    var SceneItemPosInfoNoticeRequest = (function () {
        function SceneItemPosInfoNoticeRequest() {
            this.header = new aone.AoneReqHeader(SceneItemPosInfoNoticeRequest.ID);
            this.body = new SceneItemPosInfoNotice();
        }
        SceneItemPosInfoNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        SceneItemPosInfoNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneItemPosInfoNoticeRequest.ID = 36200;
        return SceneItemPosInfoNoticeRequest;
    }());
    message.SceneItemPosInfoNoticeRequest = SceneItemPosInfoNoticeRequest;
    __reflect(SceneItemPosInfoNoticeRequest.prototype, "message.SceneItemPosInfoNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���ͶԷ�ս�����
    // request BattleImitateResultNotice
    ////////////////////////////////////////////////////////////////////////////////
    var BattleImitateResultNotice = (function () {
        function BattleImitateResultNotice() {
            this.battleResult = []; // BattleImitateResult
            this.posInfos = []; // ���ͷ�����Ϣ
            this.goodsInfo = []; // py����
        }
        BattleImitateResultNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battleResult
            if (decoder_.eof())
                return true;
            this.battleResult = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // posInfos
            if (decoder_.eof())
                return true;
            var posInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < posInfos_count; i++) {
                this.posInfos.push(new message.ScenePosInfo());
                if (!this.posInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // goodsInfo
            if (decoder_.eof())
                return true;
            var goodsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodsInfo_count; i++) {
                this.goodsInfo.push(new message.GoodsInfo());
                if (!this.goodsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BattleImitateResultNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // battleResult
            encoder.write_byte_vector(this.battleResult);
            // posInfos
            encoder.write_fixuint32(Object.keys(this.posInfos).length);
            for (var k in this.posInfos) {
                if (!this.posInfos[k].to_bytes(encoder))
                    return false;
            }
            // goodsInfo
            encoder.write_fixuint32(Object.keys(this.goodsInfo).length);
            for (var k in this.goodsInfo) {
                if (!this.goodsInfo[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BattleImitateResultNotice;
    }());
    message.BattleImitateResultNotice = BattleImitateResultNotice;
    __reflect(BattleImitateResultNotice.prototype, "message.BattleImitateResultNotice", ["aone.AoneBody"]);
    var BattleImitateResultNoticeRequest = (function () {
        function BattleImitateResultNoticeRequest() {
            this.header = new aone.AoneReqHeader(BattleImitateResultNoticeRequest.ID);
            this.body = new BattleImitateResultNotice();
        }
        BattleImitateResultNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        BattleImitateResultNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BattleImitateResultNoticeRequest.ID = 36202;
        return BattleImitateResultNoticeRequest;
    }());
    message.BattleImitateResultNoticeRequest = BattleImitateResultNoticeRequest;
    __reflect(BattleImitateResultNoticeRequest.prototype, "message.BattleImitateResultNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����������λ��
    // request SceneItemPosNotice
    ////////////////////////////////////////////////////////////////////////////////
    var SceneItemPosNotice = (function () {
        function SceneItemPosNotice() {
            this.posInfos = [];
        }
        SceneItemPosNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // posInfos
            if (decoder_.eof())
                return true;
            var posInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < posInfos_count; i++) {
                this.posInfos.push(new message.ScenePosItem());
                if (!this.posInfos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneItemPosNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // posInfos
            encoder.write_fixuint32(Object.keys(this.posInfos).length);
            for (var k in this.posInfos) {
                if (!this.posInfos[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneItemPosNotice;
    }());
    message.SceneItemPosNotice = SceneItemPosNotice;
    __reflect(SceneItemPosNotice.prototype, "message.SceneItemPosNotice", ["aone.AoneBody"]);
    var SceneItemPosNoticeRequest = (function () {
        function SceneItemPosNoticeRequest() {
            this.header = new aone.AoneReqHeader(SceneItemPosNoticeRequest.ID);
            this.body = new SceneItemPosNotice();
        }
        SceneItemPosNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        SceneItemPosNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneItemPosNoticeRequest.ID = 36204;
        return SceneItemPosNoticeRequest;
    }());
    message.SceneItemPosNoticeRequest = SceneItemPosNoticeRequest;
    __reflect(SceneItemPosNoticeRequest.prototype, "message.SceneItemPosNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ɾ������Ϣ
    // request WonderlandRoleInfoNotice
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandRoleInfoNotice = (function () {
        function WonderlandRoleInfoNotice() {
            this.roleInfo = new message.WonderlandRoleInfo();
        }
        WonderlandRoleInfoNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WonderlandRoleInfoNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleInfo
            this.roleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandRoleInfoNotice;
    }());
    message.WonderlandRoleInfoNotice = WonderlandRoleInfoNotice;
    __reflect(WonderlandRoleInfoNotice.prototype, "message.WonderlandRoleInfoNotice", ["aone.AoneBody"]);
    var WonderlandRoleInfoNoticeRequest = (function () {
        function WonderlandRoleInfoNoticeRequest() {
            this.header = new aone.AoneReqHeader(WonderlandRoleInfoNoticeRequest.ID);
            this.body = new WonderlandRoleInfoNotice();
        }
        WonderlandRoleInfoNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        WonderlandRoleInfoNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandRoleInfoNoticeRequest.ID = 36208;
        return WonderlandRoleInfoNoticeRequest;
    }());
    message.WonderlandRoleInfoNoticeRequest = WonderlandRoleInfoNoticeRequest;
    __reflect(WonderlandRoleInfoNoticeRequest.prototype, "message.WonderlandRoleInfoNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ɾ�bossѪ���仯
    // request BossHpChangeNotice
    ////////////////////////////////////////////////////////////////////////////////
    var BossHpChangeNotice = (function () {
        function BossHpChangeNotice() {
            this.joiner_id = 0;
            this.cur_hp = 0;
        }
        BossHpChangeNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // joiner_id
            if (decoder_.eof())
                return true;
            this.joiner_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // cur_hp
            if (decoder_.eof())
                return true;
            this.cur_hp = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BossHpChangeNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // joiner_id
            encoder.write_fixuint32(this.joiner_id);
            // cur_hp
            encoder.write_float64(this.cur_hp);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossHpChangeNotice;
    }());
    message.BossHpChangeNotice = BossHpChangeNotice;
    __reflect(BossHpChangeNotice.prototype, "message.BossHpChangeNotice", ["aone.AoneBody"]);
    var BossHpChangeNoticeRequest = (function () {
        function BossHpChangeNoticeRequest() {
            this.header = new aone.AoneReqHeader(BossHpChangeNoticeRequest.ID);
            this.body = new BossHpChangeNotice();
        }
        BossHpChangeNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        BossHpChangeNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossHpChangeNoticeRequest.ID = 36210;
        return BossHpChangeNoticeRequest;
    }());
    message.BossHpChangeNoticeRequest = BossHpChangeNoticeRequest;
    __reflect(BossHpChangeNoticeRequest.prototype, "message.BossHpChangeNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ɾ�BOSS�����Ϣ
    // request BossRoleInfoNotice
    ////////////////////////////////////////////////////////////////////////////////
    var BossRoleInfoNotice = (function () {
        function BossRoleInfoNotice() {
            this.roleInfo = new message.BossRoleInfo();
        }
        BossRoleInfoNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BossRoleInfoNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleInfo
            this.roleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BossRoleInfoNotice;
    }());
    message.BossRoleInfoNotice = BossRoleInfoNotice;
    __reflect(BossRoleInfoNotice.prototype, "message.BossRoleInfoNotice", ["aone.AoneBody"]);
    var BossRoleInfoNoticeRequest = (function () {
        function BossRoleInfoNoticeRequest() {
            this.header = new aone.AoneReqHeader(BossRoleInfoNoticeRequest.ID);
            this.body = new BossRoleInfoNotice();
        }
        BossRoleInfoNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        BossRoleInfoNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BossRoleInfoNoticeRequest.ID = 36212;
        return BossRoleInfoNoticeRequest;
    }());
    message.BossRoleInfoNoticeRequest = BossRoleInfoNoticeRequest;
    __reflect(BossRoleInfoNoticeRequest.prototype, "message.BossRoleInfoNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ɾ�boss������Ϣ
    // request SceneBossResultNotice
    ////////////////////////////////////////////////////////////////////////////////
    var SceneBossResultNotice = (function () {
        function SceneBossResultNotice() {
            this.cur_hp = 0; // ʣ��Ѫ��
            this.max_hp = 0; // ���Ѫ��
            this.is_kill = false; // �Ƿ��ɱ�ɹ�
            this.kill_name = ""; // ��ɱ������
            this.items = []; // �˺�����
            this.progresses = []; // ���̱仯
        }
        SceneBossResultNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // cur_hp
            if (decoder_.eof())
                return true;
            this.cur_hp = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // max_hp
            if (decoder_.eof())
                return true;
            this.max_hp = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // is_kill
            if (decoder_.eof())
                return true;
            this.is_kill = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // kill_name
            if (decoder_.eof())
                return true;
            this.kill_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.RankBaseItemInfo());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            // progresses
            if (decoder_.eof())
                return true;
            var progresses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < progresses_count; i++) {
                this.progresses.push(new message.ProgressInfo());
                if (!this.progresses[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SceneBossResultNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // cur_hp
            encoder.write_float64(this.cur_hp);
            // max_hp
            encoder.write_float64(this.max_hp);
            // is_kill
            encoder.write_bool(this.is_kill);
            // kill_name
            encoder.write_string(this.kill_name);
            // items
            encoder.write_fixuint32(Object.keys(this.items).length);
            for (var k in this.items) {
                if (!this.items[k].to_bytes(encoder))
                    return false;
            }
            // progresses
            encoder.write_fixuint32(Object.keys(this.progresses).length);
            for (var k in this.progresses) {
                if (!this.progresses[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SceneBossResultNotice;
    }());
    message.SceneBossResultNotice = SceneBossResultNotice;
    __reflect(SceneBossResultNotice.prototype, "message.SceneBossResultNotice", ["aone.AoneBody"]);
    var SceneBossResultNoticeRequest = (function () {
        function SceneBossResultNoticeRequest() {
            this.header = new aone.AoneReqHeader(SceneBossResultNoticeRequest.ID);
            this.body = new SceneBossResultNotice();
        }
        SceneBossResultNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        SceneBossResultNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SceneBossResultNoticeRequest.ID = 36214;
        return SceneBossResultNoticeRequest;
    }());
    message.SceneBossResultNoticeRequest = SceneBossResultNoticeRequest;
    __reflect(SceneBossResultNoticeRequest.prototype, "message.SceneBossResultNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////
    // ����ƥ��ɹ���Ϣ
    // request MatchingResultNotice
    ////////////////////////////////////////////////////////////////////////////////
    var MatchingResultNotice = (function () {
        function MatchingResultNotice() {
            this.serverId = 0; // ����Id
            this.serverName = 0; // ��������
            this.serverHost = ""; // ����ip
            this.serverPort = 0; // ����˿�
            this.roleId = 0; // ��ɫ��Ϣ
            this.sessionId = 0; // �ػ�id
        }
        MatchingResultNotice.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // serverId
            if (decoder_.eof())
                return true;
            this.serverId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // serverName
            if (decoder_.eof())
                return true;
            this.serverName = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // serverHost
            if (decoder_.eof())
                return true;
            this.serverHost = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // serverPort
            if (decoder_.eof())
                return true;
            this.serverPort = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roleId
            if (decoder_.eof())
                return true;
            this.roleId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // sessionId
            if (decoder_.eof())
                return true;
            this.sessionId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MatchingResultNotice.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // serverId
            encoder.write_fixuint32(this.serverId);
            // serverName
            encoder.write_fixuint32(this.serverName);
            // serverHost
            encoder.write_string(this.serverHost);
            // serverPort
            encoder.write_fixuint32(this.serverPort);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // sessionId
            encoder.write_fixuint32(this.sessionId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MatchingResultNotice;
    }());
    message.MatchingResultNotice = MatchingResultNotice;
    __reflect(MatchingResultNotice.prototype, "message.MatchingResultNotice", ["aone.AoneBody"]);
    var MatchingResultNoticeRequest = (function () {
        function MatchingResultNoticeRequest() {
            this.header = new aone.AoneReqHeader(MatchingResultNoticeRequest.ID);
            this.body = new MatchingResultNotice();
        }
        MatchingResultNoticeRequest.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (!this.body.parse_bytes(decoder_))
                return false;
            return !decoder_.has_error();
        };
        MatchingResultNoticeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        MatchingResultNoticeRequest.ID = 36900;
        return MatchingResultNoticeRequest;
    }());
    message.MatchingResultNoticeRequest = MatchingResultNoticeRequest;
    __reflect(MatchingResultNoticeRequest.prototype, "message.MatchingResultNoticeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(RoleInfoNoticeRequest.ID, function () { return new RoleInfoNoticeRequest(); });
    aone.MessageFactory.getInstance().register(RoleOtherInfoNoticeRequest.ID, function () { return new RoleOtherInfoNoticeRequest(); });
    aone.MessageFactory.getInstance().register(ChatChannelChangeNoticeRequest.ID, function () { return new ChatChannelChangeNoticeRequest(); });
    aone.MessageFactory.getInstance().register(IPCheckResultNoticeRequest.ID, function () { return new IPCheckResultNoticeRequest(); });
    aone.MessageFactory.getInstance().register(ChatMessageNoticeRequest.ID, function () { return new ChatMessageNoticeRequest(); });
    aone.MessageFactory.getInstance().register(MailStateNoticeRequest.ID, function () { return new MailStateNoticeRequest(); });
    aone.MessageFactory.getInstance().register(ChargeNoticeRequest.ID, function () { return new ChargeNoticeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueApplyNoticeRequest.ID, function () { return new LeagueApplyNoticeRequest(); });
    aone.MessageFactory.getInstance().register(FriendApplyNoticeRequest.ID, function () { return new FriendApplyNoticeRequest(); });
    aone.MessageFactory.getInstance().register(RemoveFormationNoticeRequest.ID, function () { return new RemoveFormationNoticeRequest(); });
    aone.MessageFactory.getInstance().register(TeachStepNoticeRequest.ID, function () { return new TeachStepNoticeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueSceneJoinNoticeRequest.ID, function () { return new LeagueSceneJoinNoticeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueBossNoticeRequest.ID, function () { return new LeagueBossNoticeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueBossRankNoticeRequest.ID, function () { return new LeagueBossRankNoticeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMemberNoticeRequest.ID, function () { return new LeagueMemberNoticeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueBossPartyNoticeRequest.ID, function () { return new LeagueBossPartyNoticeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueInstanceNoticeRequest.ID, function () { return new LeagueInstanceNoticeRequest(); });
    aone.MessageFactory.getInstance().register(LeagueMatchBattleNoticeRequest.ID, function () { return new LeagueMatchBattleNoticeRequest(); });
    aone.MessageFactory.getInstance().register(SceneItemPosInfoNoticeRequest.ID, function () { return new SceneItemPosInfoNoticeRequest(); });
    aone.MessageFactory.getInstance().register(BattleImitateResultNoticeRequest.ID, function () { return new BattleImitateResultNoticeRequest(); });
    aone.MessageFactory.getInstance().register(SceneItemPosNoticeRequest.ID, function () { return new SceneItemPosNoticeRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandRoleInfoNoticeRequest.ID, function () { return new WonderlandRoleInfoNoticeRequest(); });
    aone.MessageFactory.getInstance().register(BossHpChangeNoticeRequest.ID, function () { return new BossHpChangeNoticeRequest(); });
    aone.MessageFactory.getInstance().register(BossRoleInfoNoticeRequest.ID, function () { return new BossRoleInfoNoticeRequest(); });
    aone.MessageFactory.getInstance().register(SceneBossResultNoticeRequest.ID, function () { return new SceneBossResultNoticeRequest(); });
    aone.MessageFactory.getInstance().register(MatchingResultNoticeRequest.ID, function () { return new MatchingResultNoticeRequest(); });
})(message || (message = {}));
//Date: 2019-7
//File: msg_cg_pet.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 宠物召唤请求
    // request PetGet
    ////////////////////////////////////////////////////////////////////////////////
    var PetGetReqBody = (function () {
        function PetGetReqBody() {
            this.pet_id = 0; // 召唤宠物id
        }
        PetGetReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PetGetReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pet_id
            encoder.write_fixuint32(this.pet_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PetGetReqBody;
    }());
    message.PetGetReqBody = PetGetReqBody;
    __reflect(PetGetReqBody.prototype, "message.PetGetReqBody", ["aone.AoneBody"]);
    var PetGetRequest = (function () {
        function PetGetRequest() {
            this.header = new aone.AoneReqHeader(PetGetRequest.ID);
            this.body = new PetGetReqBody();
        }
        PetGetRequest.prototype.parse_bytes = function (decoder) { return false; };
        PetGetRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PetGetRequest.ID = 25600;
        return PetGetRequest;
    }());
    message.PetGetRequest = PetGetRequest;
    __reflect(PetGetRequest.prototype, "message.PetGetRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宠物召唤回复
    // response PetGet
    ////////////////////////////////////////////////////////////////////////////////
    var PetGetRespBody = (function () {
        function PetGetRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PetGetRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PetGetRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PetGetRespBody;
    }());
    message.PetGetRespBody = PetGetRespBody;
    __reflect(PetGetRespBody.prototype, "message.PetGetRespBody", ["aone.AoneBody"]);
    var PetGetResponse = (function () {
        function PetGetResponse() {
            this.header = new aone.AoneRespHeader(PetGetResponse.ID);
            this.body = new PetGetRespBody();
        }
        PetGetResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PetGetResponse.prototype.to_bytes = function (encoder) { return false; };
        PetGetResponse.ID = 25601;
        return PetGetResponse;
    }());
    message.PetGetResponse = PetGetResponse;
    __reflect(PetGetResponse.prototype, "message.PetGetResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宠物升星请求
    // request PetLevelUp
    ////////////////////////////////////////////////////////////////////////////////
    var PetLevelUpReqBody = (function () {
        function PetLevelUpReqBody() {
            this.pet_id = 0;
        }
        PetLevelUpReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PetLevelUpReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pet_id
            encoder.write_fixuint32(this.pet_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PetLevelUpReqBody;
    }());
    message.PetLevelUpReqBody = PetLevelUpReqBody;
    __reflect(PetLevelUpReqBody.prototype, "message.PetLevelUpReqBody", ["aone.AoneBody"]);
    var PetLevelUpRequest = (function () {
        function PetLevelUpRequest() {
            this.header = new aone.AoneReqHeader(PetLevelUpRequest.ID);
            this.body = new PetLevelUpReqBody();
        }
        PetLevelUpRequest.prototype.parse_bytes = function (decoder) { return false; };
        PetLevelUpRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PetLevelUpRequest.ID = 25602;
        return PetLevelUpRequest;
    }());
    message.PetLevelUpRequest = PetLevelUpRequest;
    __reflect(PetLevelUpRequest.prototype, "message.PetLevelUpRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宠物升星回复
    // response PetLevelUp
    ////////////////////////////////////////////////////////////////////////////////
    var PetLevelUpRespBody = (function () {
        function PetLevelUpRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PetLevelUpRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PetLevelUpRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PetLevelUpRespBody;
    }());
    message.PetLevelUpRespBody = PetLevelUpRespBody;
    __reflect(PetLevelUpRespBody.prototype, "message.PetLevelUpRespBody", ["aone.AoneBody"]);
    var PetLevelUpResponse = (function () {
        function PetLevelUpResponse() {
            this.header = new aone.AoneRespHeader(PetLevelUpResponse.ID);
            this.body = new PetLevelUpRespBody();
        }
        PetLevelUpResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PetLevelUpResponse.prototype.to_bytes = function (encoder) { return false; };
        PetLevelUpResponse.ID = 25603;
        return PetLevelUpResponse;
    }());
    message.PetLevelUpResponse = PetLevelUpResponse;
    __reflect(PetLevelUpResponse.prototype, "message.PetLevelUpResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宠物进化请求
    // request PetEvolution
    ////////////////////////////////////////////////////////////////////////////////
    var PetEvolutionReqBody = (function () {
        function PetEvolutionReqBody() {
            this.pet_id = 0;
        }
        PetEvolutionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PetEvolutionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pet_id
            encoder.write_fixuint32(this.pet_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PetEvolutionReqBody;
    }());
    message.PetEvolutionReqBody = PetEvolutionReqBody;
    __reflect(PetEvolutionReqBody.prototype, "message.PetEvolutionReqBody", ["aone.AoneBody"]);
    var PetEvolutionRequest = (function () {
        function PetEvolutionRequest() {
            this.header = new aone.AoneReqHeader(PetEvolutionRequest.ID);
            this.body = new PetEvolutionReqBody();
        }
        PetEvolutionRequest.prototype.parse_bytes = function (decoder) { return false; };
        PetEvolutionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PetEvolutionRequest.ID = 25604;
        return PetEvolutionRequest;
    }());
    message.PetEvolutionRequest = PetEvolutionRequest;
    __reflect(PetEvolutionRequest.prototype, "message.PetEvolutionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宠物进化回复
    // response PetEvolution
    ////////////////////////////////////////////////////////////////////////////////
    var PetEvolutionRespBody = (function () {
        function PetEvolutionRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PetEvolutionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PetEvolutionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PetEvolutionRespBody;
    }());
    message.PetEvolutionRespBody = PetEvolutionRespBody;
    __reflect(PetEvolutionRespBody.prototype, "message.PetEvolutionRespBody", ["aone.AoneBody"]);
    var PetEvolutionResponse = (function () {
        function PetEvolutionResponse() {
            this.header = new aone.AoneRespHeader(PetEvolutionResponse.ID);
            this.body = new PetEvolutionRespBody();
        }
        PetEvolutionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PetEvolutionResponse.prototype.to_bytes = function (encoder) { return false; };
        PetEvolutionResponse.ID = 25605;
        return PetEvolutionResponse;
    }());
    message.PetEvolutionResponse = PetEvolutionResponse;
    __reflect(PetEvolutionResponse.prototype, "message.PetEvolutionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宠物出战请求
    // request PetPlaying
    ////////////////////////////////////////////////////////////////////////////////
    var PetPlayingReqBody = (function () {
        function PetPlayingReqBody() {
            this.pet_id = 0;
        }
        PetPlayingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PetPlayingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pet_id
            encoder.write_fixuint32(this.pet_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PetPlayingReqBody;
    }());
    message.PetPlayingReqBody = PetPlayingReqBody;
    __reflect(PetPlayingReqBody.prototype, "message.PetPlayingReqBody", ["aone.AoneBody"]);
    var PetPlayingRequest = (function () {
        function PetPlayingRequest() {
            this.header = new aone.AoneReqHeader(PetPlayingRequest.ID);
            this.body = new PetPlayingReqBody();
        }
        PetPlayingRequest.prototype.parse_bytes = function (decoder) { return false; };
        PetPlayingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PetPlayingRequest.ID = 25606;
        return PetPlayingRequest;
    }());
    message.PetPlayingRequest = PetPlayingRequest;
    __reflect(PetPlayingRequest.prototype, "message.PetPlayingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宠物出战回复
    // response PetPlaying
    ////////////////////////////////////////////////////////////////////////////////
    var PetPlayingRespBody = (function () {
        function PetPlayingRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PetPlayingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PetPlayingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PetPlayingRespBody;
    }());
    message.PetPlayingRespBody = PetPlayingRespBody;
    __reflect(PetPlayingRespBody.prototype, "message.PetPlayingRespBody", ["aone.AoneBody"]);
    var PetPlayingResponse = (function () {
        function PetPlayingResponse() {
            this.header = new aone.AoneRespHeader(PetPlayingResponse.ID);
            this.body = new PetPlayingRespBody();
        }
        PetPlayingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PetPlayingResponse.prototype.to_bytes = function (encoder) { return false; };
        PetPlayingResponse.ID = 25607;
        return PetPlayingResponse;
    }());
    message.PetPlayingResponse = PetPlayingResponse;
    __reflect(PetPlayingResponse.prototype, "message.PetPlayingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置宠物帽请求
    // request SetPetHat
    ////////////////////////////////////////////////////////////////////////////////
    var SetPetHatReqBody = (function () {
        function SetPetHatReqBody() {
            this.pet_id = 0;
            this.is_hidden = false;
        }
        SetPetHatReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SetPetHatReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pet_id
            encoder.write_fixuint32(this.pet_id);
            // is_hidden
            encoder.write_bool(this.is_hidden);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SetPetHatReqBody;
    }());
    message.SetPetHatReqBody = SetPetHatReqBody;
    __reflect(SetPetHatReqBody.prototype, "message.SetPetHatReqBody", ["aone.AoneBody"]);
    var SetPetHatRequest = (function () {
        function SetPetHatRequest() {
            this.header = new aone.AoneReqHeader(SetPetHatRequest.ID);
            this.body = new SetPetHatReqBody();
        }
        SetPetHatRequest.prototype.parse_bytes = function (decoder) { return false; };
        SetPetHatRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SetPetHatRequest.ID = 25608;
        return SetPetHatRequest;
    }());
    message.SetPetHatRequest = SetPetHatRequest;
    __reflect(SetPetHatRequest.prototype, "message.SetPetHatRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置宠物帽回复
    // response SetPetHat
    ////////////////////////////////////////////////////////////////////////////////
    var SetPetHatRespBody = (function () {
        function SetPetHatRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SetPetHatRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SetPetHatRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SetPetHatRespBody;
    }());
    message.SetPetHatRespBody = SetPetHatRespBody;
    __reflect(SetPetHatRespBody.prototype, "message.SetPetHatRespBody", ["aone.AoneBody"]);
    var SetPetHatResponse = (function () {
        function SetPetHatResponse() {
            this.header = new aone.AoneRespHeader(SetPetHatResponse.ID);
            this.body = new SetPetHatRespBody();
        }
        SetPetHatResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SetPetHatResponse.prototype.to_bytes = function (encoder) { return false; };
        SetPetHatResponse.ID = 25609;
        return SetPetHatResponse;
    }());
    message.SetPetHatResponse = SetPetHatResponse;
    __reflect(SetPetHatResponse.prototype, "message.SetPetHatResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(PetGetRequest.ID, function () { return new PetGetRequest(); });
    aone.MessageFactory.getInstance().register(PetGetResponse.ID, function () { return new PetGetResponse(); });
    aone.MessageFactory.getInstance().register(PetLevelUpRequest.ID, function () { return new PetLevelUpRequest(); });
    aone.MessageFactory.getInstance().register(PetLevelUpResponse.ID, function () { return new PetLevelUpResponse(); });
    aone.MessageFactory.getInstance().register(PetEvolutionRequest.ID, function () { return new PetEvolutionRequest(); });
    aone.MessageFactory.getInstance().register(PetEvolutionResponse.ID, function () { return new PetEvolutionResponse(); });
    aone.MessageFactory.getInstance().register(PetPlayingRequest.ID, function () { return new PetPlayingRequest(); });
    aone.MessageFactory.getInstance().register(PetPlayingResponse.ID, function () { return new PetPlayingResponse(); });
    aone.MessageFactory.getInstance().register(SetPetHatRequest.ID, function () { return new SetPetHatRequest(); });
    aone.MessageFactory.getInstance().register(SetPetHatResponse.ID, function () { return new SetPetHatResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_potato.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物鉴定请求
    // message PotatoAppraiseReqBody = 19100
    // {
    // 	uint32 potatoId;				// 物品Id
    // 	uint32 appraiseId;				// 鉴定符（没有为0）
    // }
    // 宝物鉴定回复
    // message PotatoAppraiseRespBody = 19101
    // {
    // 	GameInfo gameInfo;
    // }
    // 宝物合成请求
    // request PotatoCompose
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoComposeReqBody = (function () {
        function PotatoComposeReqBody() {
            this.itemId = 0; // 消耗物品的id
        }
        PotatoComposeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PotatoComposeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // itemId
            encoder.write_fixuint32(this.itemId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoComposeReqBody;
    }());
    message.PotatoComposeReqBody = PotatoComposeReqBody;
    __reflect(PotatoComposeReqBody.prototype, "message.PotatoComposeReqBody", ["aone.AoneBody"]);
    var PotatoComposeRequest = (function () {
        function PotatoComposeRequest() {
            this.header = new aone.AoneReqHeader(PotatoComposeRequest.ID);
            this.body = new PotatoComposeReqBody();
        }
        PotatoComposeRequest.prototype.parse_bytes = function (decoder) { return false; };
        PotatoComposeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PotatoComposeRequest.ID = 19102;
        return PotatoComposeRequest;
    }());
    message.PotatoComposeRequest = PotatoComposeRequest;
    __reflect(PotatoComposeRequest.prototype, "message.PotatoComposeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物合成回复
    // response PotatoCompose
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoComposeRespBody = (function () {
        function PotatoComposeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PotatoComposeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PotatoComposeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PotatoComposeRespBody;
    }());
    message.PotatoComposeRespBody = PotatoComposeRespBody;
    __reflect(PotatoComposeRespBody.prototype, "message.PotatoComposeRespBody", ["aone.AoneBody"]);
    var PotatoComposeResponse = (function () {
        function PotatoComposeResponse() {
            this.header = new aone.AoneRespHeader(PotatoComposeResponse.ID);
            this.body = new PotatoComposeRespBody();
        }
        PotatoComposeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PotatoComposeResponse.prototype.to_bytes = function (encoder) { return false; };
        PotatoComposeResponse.ID = 19103;
        return PotatoComposeResponse;
    }());
    message.PotatoComposeResponse = PotatoComposeResponse;
    __reflect(PotatoComposeResponse.prototype, "message.PotatoComposeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物升星请求
    // request PotatoBreak
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoBreakReqBody = (function () {
        function PotatoBreakReqBody() {
            this.index = 0; // 宝物索引
            this.generalId = 0; // 在武将身上的宝物
            this.potatoPos = 0; // 在武将身上的位子
            this.otherIndex = []; // 另一些宝物索引
        }
        PotatoBreakReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PotatoBreakReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // potatoPos
            encoder.write_fixuint32(this.potatoPos);
            // otherIndex
            encoder.write_uint32_vector(this.otherIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoBreakReqBody;
    }());
    message.PotatoBreakReqBody = PotatoBreakReqBody;
    __reflect(PotatoBreakReqBody.prototype, "message.PotatoBreakReqBody", ["aone.AoneBody"]);
    var PotatoBreakRequest = (function () {
        function PotatoBreakRequest() {
            this.header = new aone.AoneReqHeader(PotatoBreakRequest.ID);
            this.body = new PotatoBreakReqBody();
        }
        PotatoBreakRequest.prototype.parse_bytes = function (decoder) { return false; };
        PotatoBreakRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PotatoBreakRequest.ID = 19104;
        return PotatoBreakRequest;
    }());
    message.PotatoBreakRequest = PotatoBreakRequest;
    __reflect(PotatoBreakRequest.prototype, "message.PotatoBreakRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物升星回复
    // response PotatoBreak
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoBreakRespBody = (function () {
        function PotatoBreakRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PotatoBreakRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PotatoBreakRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PotatoBreakRespBody;
    }());
    message.PotatoBreakRespBody = PotatoBreakRespBody;
    __reflect(PotatoBreakRespBody.prototype, "message.PotatoBreakRespBody", ["aone.AoneBody"]);
    var PotatoBreakResponse = (function () {
        function PotatoBreakResponse() {
            this.header = new aone.AoneRespHeader(PotatoBreakResponse.ID);
            this.body = new PotatoBreakRespBody();
        }
        PotatoBreakResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PotatoBreakResponse.prototype.to_bytes = function (encoder) { return false; };
        PotatoBreakResponse.ID = 19105;
        return PotatoBreakResponse;
    }());
    message.PotatoBreakResponse = PotatoBreakResponse;
    __reflect(PotatoBreakResponse.prototype, "message.PotatoBreakResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物分解请求
    // message PotatoResolveReqBody = 19106
    // {
    // 	repeated uint32 index;			// 宝物索引
    // }
    // 宝物分解回复
    // message PotatoResolveRespBody = 19107
    // {
    // 	GameInfo gameInfo;
    // }
    // 宝物重生请求
    // message PotatoResetReqBody = 19108
    // {
    // 	uint32 index;				// 宝物索引
    // }
    // 宝物重生回复
    // message PotatoResetRespBody = 19109
    // {
    // 	GameInfo gameInfo;
    // }
    // 宝物刷新请求
    // message PotatoRefreshReqBody = 19110
    // {
    // 	uint32 index;					// 宝物索引
    // 	uint32 generalId;				// 在武将身上的宝物
    // 	uint32 potatoPos;				// 在武将身上的位子
    // 	uint32 appraiseId;				// 鉴定符（没有为0）
    // }
    // 宝物刷新回复
    // message PotatoRefreshRespBody = 19111
    // {
    // 	GameInfo gameInfo;
    // }
    // 宝物替换属性请求
    // message PotatoChangeAttriReqBody = 19112
    // {
    // 	uint32 index;					// 宝物索引
    // 	uint32 generalId;				// 在武将身上的宝物
    // 	uint32 potatoPos;				// 在武将身上的位子
    // 	bool is_change;
    // }
    // 宝物替换属性回复
    // message PotatoChangeAttriRespBody = 19113
    // {
    // 	GameInfo gameInfo;
    // }
    // 宝物升级请求
    // request PotatoUplevel
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoUplevelReqBody = (function () {
        function PotatoUplevelReqBody() {
            this.index = 0; // 宝物索引
            this.generalId = 0; // 在武将身上的宝物
            this.potatoPos = 0; // 在武将身上的位子
            this.upLevel = 0; // 升多少级
        }
        PotatoUplevelReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PotatoUplevelReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // potatoPos
            encoder.write_fixuint32(this.potatoPos);
            // upLevel
            encoder.write_fixuint32(this.upLevel);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoUplevelReqBody;
    }());
    message.PotatoUplevelReqBody = PotatoUplevelReqBody;
    __reflect(PotatoUplevelReqBody.prototype, "message.PotatoUplevelReqBody", ["aone.AoneBody"]);
    var PotatoUplevelRequest = (function () {
        function PotatoUplevelRequest() {
            this.header = new aone.AoneReqHeader(PotatoUplevelRequest.ID);
            this.body = new PotatoUplevelReqBody();
        }
        PotatoUplevelRequest.prototype.parse_bytes = function (decoder) { return false; };
        PotatoUplevelRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PotatoUplevelRequest.ID = 19114;
        return PotatoUplevelRequest;
    }());
    message.PotatoUplevelRequest = PotatoUplevelRequest;
    __reflect(PotatoUplevelRequest.prototype, "message.PotatoUplevelRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物升级回复
    // response PotatoUplevel
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoUplevelRespBody = (function () {
        function PotatoUplevelRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PotatoUplevelRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PotatoUplevelRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PotatoUplevelRespBody;
    }());
    message.PotatoUplevelRespBody = PotatoUplevelRespBody;
    __reflect(PotatoUplevelRespBody.prototype, "message.PotatoUplevelRespBody", ["aone.AoneBody"]);
    var PotatoUplevelResponse = (function () {
        function PotatoUplevelResponse() {
            this.header = new aone.AoneRespHeader(PotatoUplevelResponse.ID);
            this.body = new PotatoUplevelRespBody();
        }
        PotatoUplevelResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PotatoUplevelResponse.prototype.to_bytes = function (encoder) { return false; };
        PotatoUplevelResponse.ID = 19115;
        return PotatoUplevelResponse;
    }());
    message.PotatoUplevelResponse = PotatoUplevelResponse;
    __reflect(PotatoUplevelResponse.prototype, "message.PotatoUplevelResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物回收请求
    // request PotatoSold
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoSoldReqBody = (function () {
        function PotatoSoldReqBody() {
            this.index = []; // 宝物索引
        }
        PotatoSoldReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PotatoSoldReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_uint32_vector(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoSoldReqBody;
    }());
    message.PotatoSoldReqBody = PotatoSoldReqBody;
    __reflect(PotatoSoldReqBody.prototype, "message.PotatoSoldReqBody", ["aone.AoneBody"]);
    var PotatoSoldRequest = (function () {
        function PotatoSoldRequest() {
            this.header = new aone.AoneReqHeader(PotatoSoldRequest.ID);
            this.body = new PotatoSoldReqBody();
        }
        PotatoSoldRequest.prototype.parse_bytes = function (decoder) { return false; };
        PotatoSoldRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PotatoSoldRequest.ID = 19116;
        return PotatoSoldRequest;
    }());
    message.PotatoSoldRequest = PotatoSoldRequest;
    __reflect(PotatoSoldRequest.prototype, "message.PotatoSoldRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物回收回复
    // response PotatoSold
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoSoldRespBody = (function () {
        function PotatoSoldRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PotatoSoldRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PotatoSoldRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PotatoSoldRespBody;
    }());
    message.PotatoSoldRespBody = PotatoSoldRespBody;
    __reflect(PotatoSoldRespBody.prototype, "message.PotatoSoldRespBody", ["aone.AoneBody"]);
    var PotatoSoldResponse = (function () {
        function PotatoSoldResponse() {
            this.header = new aone.AoneRespHeader(PotatoSoldResponse.ID);
            this.body = new PotatoSoldRespBody();
        }
        PotatoSoldResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PotatoSoldResponse.prototype.to_bytes = function (encoder) { return false; };
        PotatoSoldResponse.ID = 19117;
        return PotatoSoldResponse;
    }());
    message.PotatoSoldResponse = PotatoSoldResponse;
    __reflect(PotatoSoldResponse.prototype, "message.PotatoSoldResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物锁定请求
    // request PotatoLock
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoLockReqBody = (function () {
        function PotatoLockReqBody() {
            this.index = 0; // 宝物索引
            this.generalId = 0; // 在武将身上的宝物
            this.potatoPos = 0; // 在武将身上的位子
            this.is_lock = false; // true锁定；false解锁
        }
        PotatoLockReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PotatoLockReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // potatoPos
            encoder.write_fixuint32(this.potatoPos);
            // is_lock
            encoder.write_bool(this.is_lock);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoLockReqBody;
    }());
    message.PotatoLockReqBody = PotatoLockReqBody;
    __reflect(PotatoLockReqBody.prototype, "message.PotatoLockReqBody", ["aone.AoneBody"]);
    var PotatoLockRequest = (function () {
        function PotatoLockRequest() {
            this.header = new aone.AoneReqHeader(PotatoLockRequest.ID);
            this.body = new PotatoLockReqBody();
        }
        PotatoLockRequest.prototype.parse_bytes = function (decoder) { return false; };
        PotatoLockRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PotatoLockRequest.ID = 19118;
        return PotatoLockRequest;
    }());
    message.PotatoLockRequest = PotatoLockRequest;
    __reflect(PotatoLockRequest.prototype, "message.PotatoLockRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物锁定回复
    // response PotatoLock
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoLockRespBody = (function () {
        function PotatoLockRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PotatoLockRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PotatoLockRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PotatoLockRespBody;
    }());
    message.PotatoLockRespBody = PotatoLockRespBody;
    __reflect(PotatoLockRespBody.prototype, "message.PotatoLockRespBody", ["aone.AoneBody"]);
    var PotatoLockResponse = (function () {
        function PotatoLockResponse() {
            this.header = new aone.AoneRespHeader(PotatoLockResponse.ID);
            this.body = new PotatoLockRespBody();
        }
        PotatoLockResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PotatoLockResponse.prototype.to_bytes = function (encoder) { return false; };
        PotatoLockResponse.ID = 19119;
        return PotatoLockResponse;
    }());
    message.PotatoLockResponse = PotatoLockResponse;
    __reflect(PotatoLockResponse.prototype, "message.PotatoLockResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝石镶嵌请求
    // message PotatoMountReqBody = 19120
    // {
    // 	uint32 index;
    // 	uint32 generalId;		// 在武将身上的宝物
    // 	uint32 potatoPos;		// 在武将身上的位子
    // 	uint32 pos;
    // 	uint32 jadeId;			// jadeId为0表示卸下
    // }
    // 宝石镶嵌回复
    // message PotatoMountRespBody = 19121
    // {
    // 	GameInfo gameInfo;
    // }
    // 一键镶嵌请求
    // message PotatoMountQuickReqBody = 19122
    // {
    // 	uint32 index;
    // 	uint32 generalId;		// 在武将身上的宝物
    // 	uint32 potatoPos;		// 在武将身上的位子
    // }
    // 一键镶嵌回复
    // message PotatoMountQuickRespBody = 19123
    // {
    // 	GameInfo gameInfo;
    // }
    // 装备宝物请求
    // request PotatoWear
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoWearReqBody = (function () {
        function PotatoWearReqBody() {
            this.generalId = 0; // 武将Id
            this.index = 0; // 宝物索引(为0表示卸下)
            this.potatoPos = 0; // 在武将身上的位子
            this.replaceJade = false; // 是否替换宝石
        }
        PotatoWearReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PotatoWearReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // index
            encoder.write_fixuint32(this.index);
            // potatoPos
            encoder.write_fixuint32(this.potatoPos);
            // replaceJade
            encoder.write_bool(this.replaceJade);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoWearReqBody;
    }());
    message.PotatoWearReqBody = PotatoWearReqBody;
    __reflect(PotatoWearReqBody.prototype, "message.PotatoWearReqBody", ["aone.AoneBody"]);
    var PotatoWearRequest = (function () {
        function PotatoWearRequest() {
            this.header = new aone.AoneReqHeader(PotatoWearRequest.ID);
            this.body = new PotatoWearReqBody();
        }
        PotatoWearRequest.prototype.parse_bytes = function (decoder) { return false; };
        PotatoWearRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PotatoWearRequest.ID = 19124;
        return PotatoWearRequest;
    }());
    message.PotatoWearRequest = PotatoWearRequest;
    __reflect(PotatoWearRequest.prototype, "message.PotatoWearRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 装备宝物回复
    // response PotatoWear
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoWearRespBody = (function () {
        function PotatoWearRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PotatoWearRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PotatoWearRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PotatoWearRespBody;
    }());
    message.PotatoWearRespBody = PotatoWearRespBody;
    __reflect(PotatoWearRespBody.prototype, "message.PotatoWearRespBody", ["aone.AoneBody"]);
    var PotatoWearResponse = (function () {
        function PotatoWearResponse() {
            this.header = new aone.AoneRespHeader(PotatoWearResponse.ID);
            this.body = new PotatoWearRespBody();
        }
        PotatoWearResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PotatoWearResponse.prototype.to_bytes = function (encoder) { return false; };
        PotatoWearResponse.ID = 19125;
        return PotatoWearResponse;
    }());
    message.PotatoWearResponse = PotatoWearResponse;
    __reflect(PotatoWearResponse.prototype, "message.PotatoWearResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物突破请求
    // request PotatoBreakthrough
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoBreakthroughReqBody = (function () {
        function PotatoBreakthroughReqBody() {
            this.index = 0; // 宝物索引
            this.generalId = 0; // 在武将身上的宝物
            this.potatoPos = 0; // 在武将身上的位子
            this.otherIndex = []; // 另一些宝物索引
        }
        PotatoBreakthroughReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PotatoBreakthroughReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // potatoPos
            encoder.write_fixuint32(this.potatoPos);
            // otherIndex
            encoder.write_uint32_vector(this.otherIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoBreakthroughReqBody;
    }());
    message.PotatoBreakthroughReqBody = PotatoBreakthroughReqBody;
    __reflect(PotatoBreakthroughReqBody.prototype, "message.PotatoBreakthroughReqBody", ["aone.AoneBody"]);
    var PotatoBreakthroughRequest = (function () {
        function PotatoBreakthroughRequest() {
            this.header = new aone.AoneReqHeader(PotatoBreakthroughRequest.ID);
            this.body = new PotatoBreakthroughReqBody();
        }
        PotatoBreakthroughRequest.prototype.parse_bytes = function (decoder) { return false; };
        PotatoBreakthroughRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PotatoBreakthroughRequest.ID = 19126;
        return PotatoBreakthroughRequest;
    }());
    message.PotatoBreakthroughRequest = PotatoBreakthroughRequest;
    __reflect(PotatoBreakthroughRequest.prototype, "message.PotatoBreakthroughRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 宝物突破回复
    // response PotatoBreakthrough
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoBreakthroughRespBody = (function () {
        function PotatoBreakthroughRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PotatoBreakthroughRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PotatoBreakthroughRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PotatoBreakthroughRespBody;
    }());
    message.PotatoBreakthroughRespBody = PotatoBreakthroughRespBody;
    __reflect(PotatoBreakthroughRespBody.prototype, "message.PotatoBreakthroughRespBody", ["aone.AoneBody"]);
    var PotatoBreakthroughResponse = (function () {
        function PotatoBreakthroughResponse() {
            this.header = new aone.AoneRespHeader(PotatoBreakthroughResponse.ID);
            this.body = new PotatoBreakthroughRespBody();
        }
        PotatoBreakthroughResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PotatoBreakthroughResponse.prototype.to_bytes = function (encoder) { return false; };
        PotatoBreakthroughResponse.ID = 19127;
        return PotatoBreakthroughResponse;
    }());
    message.PotatoBreakthroughResponse = PotatoBreakthroughResponse;
    __reflect(PotatoBreakthroughResponse.prototype, "message.PotatoBreakthroughResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 一键卸下卡片请求
    // request PotatoUnloadAll
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoUnloadAllReqBody = (function () {
        function PotatoUnloadAllReqBody() {
            this.generalId = 0; // 武将id
        }
        PotatoUnloadAllReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PotatoUnloadAllReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoUnloadAllReqBody;
    }());
    message.PotatoUnloadAllReqBody = PotatoUnloadAllReqBody;
    __reflect(PotatoUnloadAllReqBody.prototype, "message.PotatoUnloadAllReqBody", ["aone.AoneBody"]);
    var PotatoUnloadAllRequest = (function () {
        function PotatoUnloadAllRequest() {
            this.header = new aone.AoneReqHeader(PotatoUnloadAllRequest.ID);
            this.body = new PotatoUnloadAllReqBody();
        }
        PotatoUnloadAllRequest.prototype.parse_bytes = function (decoder) { return false; };
        PotatoUnloadAllRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PotatoUnloadAllRequest.ID = 19128;
        return PotatoUnloadAllRequest;
    }());
    message.PotatoUnloadAllRequest = PotatoUnloadAllRequest;
    __reflect(PotatoUnloadAllRequest.prototype, "message.PotatoUnloadAllRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 一键卸下卡片回复
    // response PotatoUnloadAll
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoUnloadAllRespBody = (function () {
        function PotatoUnloadAllRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PotatoUnloadAllRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PotatoUnloadAllRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PotatoUnloadAllRespBody;
    }());
    message.PotatoUnloadAllRespBody = PotatoUnloadAllRespBody;
    __reflect(PotatoUnloadAllRespBody.prototype, "message.PotatoUnloadAllRespBody", ["aone.AoneBody"]);
    var PotatoUnloadAllResponse = (function () {
        function PotatoUnloadAllResponse() {
            this.header = new aone.AoneRespHeader(PotatoUnloadAllResponse.ID);
            this.body = new PotatoUnloadAllRespBody();
        }
        PotatoUnloadAllResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PotatoUnloadAllResponse.prototype.to_bytes = function (encoder) { return false; };
        PotatoUnloadAllResponse.ID = 19129;
        return PotatoUnloadAllResponse;
    }());
    message.PotatoUnloadAllResponse = PotatoUnloadAllResponse;
    __reflect(PotatoUnloadAllResponse.prototype, "message.PotatoUnloadAllResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 附属性增幅请求
    // request PotatoGrowth
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoGrowthReqBody = (function () {
        function PotatoGrowthReqBody() {
            this.index = 0;
            this.generalId = 0; // 在武将身上的宝物
            this.potatoPos = 0; // 在武将身上的位子
            this.attriId = 0;
            this.range = 0; // 增幅选项（1，2，3）
        }
        PotatoGrowthReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PotatoGrowthReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // potatoPos
            encoder.write_fixuint32(this.potatoPos);
            // attriId
            encoder.write_fixuint32(this.attriId);
            // range
            encoder.write_fixuint32(this.range);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PotatoGrowthReqBody;
    }());
    message.PotatoGrowthReqBody = PotatoGrowthReqBody;
    __reflect(PotatoGrowthReqBody.prototype, "message.PotatoGrowthReqBody", ["aone.AoneBody"]);
    var PotatoGrowthRequest = (function () {
        function PotatoGrowthRequest() {
            this.header = new aone.AoneReqHeader(PotatoGrowthRequest.ID);
            this.body = new PotatoGrowthReqBody();
        }
        PotatoGrowthRequest.prototype.parse_bytes = function (decoder) { return false; };
        PotatoGrowthRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PotatoGrowthRequest.ID = 19130;
        return PotatoGrowthRequest;
    }());
    message.PotatoGrowthRequest = PotatoGrowthRequest;
    __reflect(PotatoGrowthRequest.prototype, "message.PotatoGrowthRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 附属性增幅回复
    // response PotatoGrowth
    ////////////////////////////////////////////////////////////////////////////////
    var PotatoGrowthRespBody = (function () {
        function PotatoGrowthRespBody() {
            this.gameInfo = new message.GameInfo();
            this.rangeResult = 0; // 增幅效果
        }
        PotatoGrowthRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // rangeResult
            if (decoder_.eof())
                return true;
            this.rangeResult = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PotatoGrowthRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PotatoGrowthRespBody;
    }());
    message.PotatoGrowthRespBody = PotatoGrowthRespBody;
    __reflect(PotatoGrowthRespBody.prototype, "message.PotatoGrowthRespBody", ["aone.AoneBody"]);
    var PotatoGrowthResponse = (function () {
        function PotatoGrowthResponse() {
            this.header = new aone.AoneRespHeader(PotatoGrowthResponse.ID);
            this.body = new PotatoGrowthRespBody();
        }
        PotatoGrowthResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PotatoGrowthResponse.prototype.to_bytes = function (encoder) { return false; };
        PotatoGrowthResponse.ID = 19131;
        return PotatoGrowthResponse;
    }());
    message.PotatoGrowthResponse = PotatoGrowthResponse;
    __reflect(PotatoGrowthResponse.prototype, "message.PotatoGrowthResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(PotatoComposeRequest.ID, function () { return new PotatoComposeRequest(); });
    aone.MessageFactory.getInstance().register(PotatoComposeResponse.ID, function () { return new PotatoComposeResponse(); });
    aone.MessageFactory.getInstance().register(PotatoBreakRequest.ID, function () { return new PotatoBreakRequest(); });
    aone.MessageFactory.getInstance().register(PotatoBreakResponse.ID, function () { return new PotatoBreakResponse(); });
    aone.MessageFactory.getInstance().register(PotatoUplevelRequest.ID, function () { return new PotatoUplevelRequest(); });
    aone.MessageFactory.getInstance().register(PotatoUplevelResponse.ID, function () { return new PotatoUplevelResponse(); });
    aone.MessageFactory.getInstance().register(PotatoSoldRequest.ID, function () { return new PotatoSoldRequest(); });
    aone.MessageFactory.getInstance().register(PotatoSoldResponse.ID, function () { return new PotatoSoldResponse(); });
    aone.MessageFactory.getInstance().register(PotatoLockRequest.ID, function () { return new PotatoLockRequest(); });
    aone.MessageFactory.getInstance().register(PotatoLockResponse.ID, function () { return new PotatoLockResponse(); });
    aone.MessageFactory.getInstance().register(PotatoWearRequest.ID, function () { return new PotatoWearRequest(); });
    aone.MessageFactory.getInstance().register(PotatoWearResponse.ID, function () { return new PotatoWearResponse(); });
    aone.MessageFactory.getInstance().register(PotatoBreakthroughRequest.ID, function () { return new PotatoBreakthroughRequest(); });
    aone.MessageFactory.getInstance().register(PotatoBreakthroughResponse.ID, function () { return new PotatoBreakthroughResponse(); });
    aone.MessageFactory.getInstance().register(PotatoUnloadAllRequest.ID, function () { return new PotatoUnloadAllRequest(); });
    aone.MessageFactory.getInstance().register(PotatoUnloadAllResponse.ID, function () { return new PotatoUnloadAllResponse(); });
    aone.MessageFactory.getInstance().register(PotatoGrowthRequest.ID, function () { return new PotatoGrowthRequest(); });
    aone.MessageFactory.getInstance().register(PotatoGrowthResponse.ID, function () { return new PotatoGrowthResponse(); });
})(message || (message = {}));
//Date: 2019-12
//File: msg_cg_rank.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 排名协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 排行结构体
    // struct RankLeagueItemInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RankLeagueItemInfo = (function () {
        function RankLeagueItemInfo() {
            this.rank = 0; // 排名
            this.value = 0; // 值
            this.leagueInfo = new message.LeagueBase(); // 联盟信息
        }
        RankLeagueItemInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // leagueInfo
            if (decoder_.eof())
                return true;
            if (!this.leagueInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RankLeagueItemInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // rank
            encoder.write_fixuint32(this.rank);
            // value
            encoder.write_fixuint32(this.value);
            // leagueInfo
            this.leagueInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RankLeagueItemInfo;
    }());
    message.RankLeagueItemInfo = RankLeagueItemInfo;
    __reflect(RankLeagueItemInfo.prototype, "message.RankLeagueItemInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 排行信息请求
    // request RankItemInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RankItemInfoReqBody = (function () {
        function RankItemInfoReqBody() {
            this.type = 0; // 排行类型
            this.start = 0; // 排名起始下标
            this.num = 0; // 请求数量(最多rank_list_max个)
        }
        RankItemInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RankItemInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // start
            encoder.write_fixuint32(this.start);
            // num
            encoder.write_fixuint32(this.num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RankItemInfoReqBody;
    }());
    message.RankItemInfoReqBody = RankItemInfoReqBody;
    __reflect(RankItemInfoReqBody.prototype, "message.RankItemInfoReqBody", ["aone.AoneBody"]);
    var RankItemInfoRequest = (function () {
        function RankItemInfoRequest() {
            this.header = new aone.AoneReqHeader(RankItemInfoRequest.ID);
            this.body = new RankItemInfoReqBody();
        }
        RankItemInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        RankItemInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RankItemInfoRequest.ID = 29000;
        return RankItemInfoRequest;
    }());
    message.RankItemInfoRequest = RankItemInfoRequest;
    __reflect(RankItemInfoRequest.prototype, "message.RankItemInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct RankItemsZip
    ////////////////////////////////////////////////////////////////////////////////
    var RankItemsZip = (function () {
        function RankItemsZip() {
            this.rankItemsInfo = []; // 排行项信息
            this.itemsInfo = []; // 排行项信息
            this.praiseInfo = []; // 点赞情况（k:rank v:count）
        }
        RankItemsZip.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // rankItemsInfo
            if (decoder_.eof())
                return true;
            var rankItemsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rankItemsInfo_count; i++) {
                this.rankItemsInfo.push(new message.RankBaseItemInfo());
                if (!this.rankItemsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // itemsInfo
            if (decoder_.eof())
                return true;
            var itemsInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < itemsInfo_count; i++) {
                this.itemsInfo.push(new RankLeagueItemInfo());
                if (!this.itemsInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // praiseInfo
            if (decoder_.eof())
                return true;
            var praiseInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < praiseInfo_count; i++) {
                this.praiseInfo.push(new message.IIKVPairs());
                if (!this.praiseInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RankItemsZip.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // rankItemsInfo
            encoder.write_fixuint32(Object.keys(this.rankItemsInfo).length);
            for (var k in this.rankItemsInfo) {
                if (!this.rankItemsInfo[k].to_bytes(encoder))
                    return false;
            }
            // itemsInfo
            encoder.write_fixuint32(Object.keys(this.itemsInfo).length);
            for (var k in this.itemsInfo) {
                if (!this.itemsInfo[k].to_bytes(encoder))
                    return false;
            }
            // praiseInfo
            encoder.write_fixuint32(Object.keys(this.praiseInfo).length);
            for (var k in this.praiseInfo) {
                if (!this.praiseInfo[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RankItemsZip;
    }());
    message.RankItemsZip = RankItemsZip;
    __reflect(RankItemsZip.prototype, "message.RankItemsZip", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 排行信息响应
    // response RankItemInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RankItemInfoRespBody = (function () {
        function RankItemInfoRespBody() {
            this.itemsZip = []; // RankItemsZip
        }
        RankItemInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // itemsZip
            if (decoder_.eof())
                return true;
            this.itemsZip = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RankItemInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RankItemInfoRespBody;
    }());
    message.RankItemInfoRespBody = RankItemInfoRespBody;
    __reflect(RankItemInfoRespBody.prototype, "message.RankItemInfoRespBody", ["aone.AoneBody"]);
    var RankItemInfoResponse = (function () {
        function RankItemInfoResponse() {
            this.header = new aone.AoneRespHeader(RankItemInfoResponse.ID);
            this.body = new RankItemInfoRespBody();
        }
        RankItemInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RankItemInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        RankItemInfoResponse.ID = 29001;
        return RankItemInfoResponse;
    }());
    message.RankItemInfoResponse = RankItemInfoResponse;
    __reflect(RankItemInfoResponse.prototype, "message.RankItemInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 遗迹排行榜请求
    // request RelicRankInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RelicRankInfoReqBody = (function () {
        function RelicRankInfoReqBody() {
            this.instead_type = 0; // 副本类型
            this.rank_type = 0; // 排行类型(2本服排行，1世界排行)
            this.start = 0; // 排名起始下标
            this.num = 0; // 请求数量(最多rank_list_max个)
        }
        RelicRankInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelicRankInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instead_type
            encoder.write_fixuint32(this.instead_type);
            // rank_type
            encoder.write_fixuint32(this.rank_type);
            // start
            encoder.write_fixuint32(this.start);
            // num
            encoder.write_fixuint32(this.num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelicRankInfoReqBody;
    }());
    message.RelicRankInfoReqBody = RelicRankInfoReqBody;
    __reflect(RelicRankInfoReqBody.prototype, "message.RelicRankInfoReqBody", ["aone.AoneBody"]);
    var RelicRankInfoRequest = (function () {
        function RelicRankInfoRequest() {
            this.header = new aone.AoneReqHeader(RelicRankInfoRequest.ID);
            this.body = new RelicRankInfoReqBody();
        }
        RelicRankInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelicRankInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelicRankInfoRequest.ID = 29002;
        return RelicRankInfoRequest;
    }());
    message.RelicRankInfoRequest = RelicRankInfoRequest;
    __reflect(RelicRankInfoRequest.prototype, "message.RelicRankInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 遗迹排行榜回复
    // response RelicRankInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RelicRankInfoRespBody = (function () {
        function RelicRankInfoRespBody() {
            this.rankInfo = [];
            this.sign = 0;
        }
        RelicRankInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // rankInfo
            if (decoder_.eof())
                return true;
            var rankInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rankInfo_count; i++) {
                this.rankInfo.push(new message.RankBaseItemInfo());
                if (!this.rankInfo[i].parse_bytes(decoder_))
                    return false;
            }
            // sign
            if (decoder_.eof())
                return true;
            this.sign = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RelicRankInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelicRankInfoRespBody;
    }());
    message.RelicRankInfoRespBody = RelicRankInfoRespBody;
    __reflect(RelicRankInfoRespBody.prototype, "message.RelicRankInfoRespBody", ["aone.AoneBody"]);
    var RelicRankInfoResponse = (function () {
        function RelicRankInfoResponse() {
            this.header = new aone.AoneRespHeader(RelicRankInfoResponse.ID);
            this.body = new RelicRankInfoRespBody();
        }
        RelicRankInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelicRankInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        RelicRankInfoResponse.ID = 29003;
        return RelicRankInfoResponse;
    }());
    message.RelicRankInfoResponse = RelicRankInfoResponse;
    __reflect(RelicRankInfoResponse.prototype, "message.RelicRankInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 工会排行信息查询请求
    // request LeagueRankInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueRankInfoReqBody = (function () {
        function LeagueRankInfoReqBody() {
            this.rank_type = 0;
            this.start = 0;
            this.num = 0;
        }
        LeagueRankInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LeagueRankInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // rank_type
            encoder.write_fixuint32(this.rank_type);
            // start
            encoder.write_fixuint32(this.start);
            // num
            encoder.write_fixuint32(this.num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeagueRankInfoReqBody;
    }());
    message.LeagueRankInfoReqBody = LeagueRankInfoReqBody;
    __reflect(LeagueRankInfoReqBody.prototype, "message.LeagueRankInfoReqBody", ["aone.AoneBody"]);
    var LeagueRankInfoRequest = (function () {
        function LeagueRankInfoRequest() {
            this.header = new aone.AoneReqHeader(LeagueRankInfoRequest.ID);
            this.body = new LeagueRankInfoReqBody();
        }
        LeagueRankInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        LeagueRankInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LeagueRankInfoRequest.ID = 29004;
        return LeagueRankInfoRequest;
    }());
    message.LeagueRankInfoRequest = LeagueRankInfoRequest;
    __reflect(LeagueRankInfoRequest.prototype, "message.LeagueRankInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 工会排行信息查询回复
    // response LeagueRankInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeagueRankInfoRespBody = (function () {
        function LeagueRankInfoRespBody() {
            this.info = []; // 联盟基本信息
            this.league_rank = 0; // 本公会排名
        }
        LeagueRankInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            var info_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < info_count; i++) {
                this.info.push(new message.LeagueBase());
                if (!this.info[i].parse_bytes(decoder_))
                    return false;
            }
            // league_rank
            if (decoder_.eof())
                return true;
            this.league_rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeagueRankInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LeagueRankInfoRespBody;
    }());
    message.LeagueRankInfoRespBody = LeagueRankInfoRespBody;
    __reflect(LeagueRankInfoRespBody.prototype, "message.LeagueRankInfoRespBody", ["aone.AoneBody"]);
    var LeagueRankInfoResponse = (function () {
        function LeagueRankInfoResponse() {
            this.header = new aone.AoneRespHeader(LeagueRankInfoResponse.ID);
            this.body = new LeagueRankInfoRespBody();
        }
        LeagueRankInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LeagueRankInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        LeagueRankInfoResponse.ID = 29005;
        return LeagueRankInfoResponse;
    }());
    message.LeagueRankInfoResponse = LeagueRankInfoResponse;
    __reflect(LeagueRankInfoResponse.prototype, "message.LeagueRankInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(RankItemInfoRequest.ID, function () { return new RankItemInfoRequest(); });
    aone.MessageFactory.getInstance().register(RankItemInfoResponse.ID, function () { return new RankItemInfoResponse(); });
    aone.MessageFactory.getInstance().register(RelicRankInfoRequest.ID, function () { return new RelicRankInfoRequest(); });
    aone.MessageFactory.getInstance().register(RelicRankInfoResponse.ID, function () { return new RelicRankInfoResponse(); });
    aone.MessageFactory.getInstance().register(LeagueRankInfoRequest.ID, function () { return new LeagueRankInfoRequest(); });
    aone.MessageFactory.getInstance().register(LeagueRankInfoResponse.ID, function () { return new LeagueRankInfoResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_relation.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了好友与黑名单功能
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 添加关系请求
    // request RelationAdd
    ////////////////////////////////////////////////////////////////////////////////
    var RelationAddReqBody = (function () {
        function RelationAddReqBody() {
            this.type = 0; // 操作类型
            this.roleId = 0; // 好友角色ID
        }
        RelationAddReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelationAddReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // roleId
            encoder.write_fixuint32(this.roleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationAddReqBody;
    }());
    message.RelationAddReqBody = RelationAddReqBody;
    __reflect(RelationAddReqBody.prototype, "message.RelationAddReqBody", ["aone.AoneBody"]);
    var RelationAddRequest = (function () {
        function RelationAddRequest() {
            this.header = new aone.AoneReqHeader(RelationAddRequest.ID);
            this.body = new RelationAddReqBody();
        }
        RelationAddRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelationAddRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelationAddRequest.ID = 18000;
        return RelationAddRequest;
    }());
    message.RelationAddRequest = RelationAddRequest;
    __reflect(RelationAddRequest.prototype, "message.RelationAddRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 添加好友回复
    // response RelationAdd
    ////////////////////////////////////////////////////////////////////////////////
    var RelationAddRespBody = (function () {
        function RelationAddRespBody() {
            this.relations = [];
            this.applying = []; // 返回全部，将之前的覆盖
        }
        RelationAddRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // relations
            if (decoder_.eof())
                return true;
            var relations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < relations_count; i++) {
                this.relations.push(new message.RelationInfo());
                if (!this.relations[i].parse_bytes(decoder_))
                    return false;
            }
            // applying
            if (decoder_.eof())
                return true;
            this.applying = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RelationAddRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelationAddRespBody;
    }());
    message.RelationAddRespBody = RelationAddRespBody;
    __reflect(RelationAddRespBody.prototype, "message.RelationAddRespBody", ["aone.AoneBody"]);
    var RelationAddResponse = (function () {
        function RelationAddResponse() {
            this.header = new aone.AoneRespHeader(RelationAddResponse.ID);
            this.body = new RelationAddRespBody();
        }
        RelationAddResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationAddResponse.prototype.to_bytes = function (encoder) { return false; };
        RelationAddResponse.ID = 18001;
        return RelationAddResponse;
    }());
    message.RelationAddResponse = RelationAddResponse;
    __reflect(RelationAddResponse.prototype, "message.RelationAddResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回应好友邀请请求
    // request RelationAnswerFriend
    ////////////////////////////////////////////////////////////////////////////////
    var RelationAnswerFriendReqBody = (function () {
        function RelationAnswerFriendReqBody() {
            this.roleIds = []; // 邀请人ID
            this.is_agree = false; // 同意被添加为好友为true，否则为false
        }
        RelationAnswerFriendReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelationAnswerFriendReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleIds
            encoder.write_uint32_vector(this.roleIds);
            // is_agree
            encoder.write_bool(this.is_agree);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationAnswerFriendReqBody;
    }());
    message.RelationAnswerFriendReqBody = RelationAnswerFriendReqBody;
    __reflect(RelationAnswerFriendReqBody.prototype, "message.RelationAnswerFriendReqBody", ["aone.AoneBody"]);
    var RelationAnswerFriendRequest = (function () {
        function RelationAnswerFriendRequest() {
            this.header = new aone.AoneReqHeader(RelationAnswerFriendRequest.ID);
            this.body = new RelationAnswerFriendReqBody();
        }
        RelationAnswerFriendRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelationAnswerFriendRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelationAnswerFriendRequest.ID = 18002;
        return RelationAnswerFriendRequest;
    }());
    message.RelationAnswerFriendRequest = RelationAnswerFriendRequest;
    __reflect(RelationAnswerFriendRequest.prototype, "message.RelationAnswerFriendRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 回应添加好友回复
    // response RelationAnswerFriend
    ////////////////////////////////////////////////////////////////////////////////
    var RelationAnswerFriendRespBody = (function () {
        function RelationAnswerFriendRespBody() {
            this.relations = []; // 更新部分信息
            this.applys = []; // 好友申请列表
        }
        RelationAnswerFriendRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // relations
            if (decoder_.eof())
                return true;
            var relations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < relations_count; i++) {
                this.relations.push(new message.RelationInfo());
                if (!this.relations[i].parse_bytes(decoder_))
                    return false;
            }
            // applys
            if (decoder_.eof())
                return true;
            var applys_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < applys_count; i++) {
                this.applys.push(new message.RoleApply());
                if (!this.applys[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationAnswerFriendRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelationAnswerFriendRespBody;
    }());
    message.RelationAnswerFriendRespBody = RelationAnswerFriendRespBody;
    __reflect(RelationAnswerFriendRespBody.prototype, "message.RelationAnswerFriendRespBody", ["aone.AoneBody"]);
    var RelationAnswerFriendResponse = (function () {
        function RelationAnswerFriendResponse() {
            this.header = new aone.AoneRespHeader(RelationAnswerFriendResponse.ID);
            this.body = new RelationAnswerFriendRespBody();
        }
        RelationAnswerFriendResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationAnswerFriendResponse.prototype.to_bytes = function (encoder) { return false; };
        RelationAnswerFriendResponse.ID = 18003;
        return RelationAnswerFriendResponse;
    }());
    message.RelationAnswerFriendResponse = RelationAnswerFriendResponse;
    __reflect(RelationAnswerFriendResponse.prototype, "message.RelationAnswerFriendResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除关系请求
    // request RelationDelete
    ////////////////////////////////////////////////////////////////////////////////
    var RelationDeleteReqBody = (function () {
        function RelationDeleteReqBody() {
            this.type = 0;
            this.roleId = 0; // 被删除的好友角色ID
        }
        RelationDeleteReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelationDeleteReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // roleId
            encoder.write_fixuint32(this.roleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationDeleteReqBody;
    }());
    message.RelationDeleteReqBody = RelationDeleteReqBody;
    __reflect(RelationDeleteReqBody.prototype, "message.RelationDeleteReqBody", ["aone.AoneBody"]);
    var RelationDeleteRequest = (function () {
        function RelationDeleteRequest() {
            this.header = new aone.AoneReqHeader(RelationDeleteRequest.ID);
            this.body = new RelationDeleteReqBody();
        }
        RelationDeleteRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelationDeleteRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelationDeleteRequest.ID = 18004;
        return RelationDeleteRequest;
    }());
    message.RelationDeleteRequest = RelationDeleteRequest;
    __reflect(RelationDeleteRequest.prototype, "message.RelationDeleteRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除好友回复
    // response RelationDelete
    ////////////////////////////////////////////////////////////////////////////////
    var RelationDeleteRespBody = (function () {
        function RelationDeleteRespBody() {
        }
        RelationDeleteRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        RelationDeleteRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelationDeleteRespBody;
    }());
    message.RelationDeleteRespBody = RelationDeleteRespBody;
    __reflect(RelationDeleteRespBody.prototype, "message.RelationDeleteRespBody", ["aone.AoneBody"]);
    var RelationDeleteResponse = (function () {
        function RelationDeleteResponse() {
            this.header = new aone.AoneRespHeader(RelationDeleteResponse.ID);
            this.body = new RelationDeleteRespBody();
        }
        RelationDeleteResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationDeleteResponse.prototype.to_bytes = function (encoder) { return false; };
        RelationDeleteResponse.ID = 18005;
        return RelationDeleteResponse;
    }());
    message.RelationDeleteResponse = RelationDeleteResponse;
    __reflect(RelationDeleteResponse.prototype, "message.RelationDeleteResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取我的关系列表请求
    // request RelationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RelationInfoReqBody = (function () {
        function RelationInfoReqBody() {
        }
        RelationInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelationInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationInfoReqBody;
    }());
    message.RelationInfoReqBody = RelationInfoReqBody;
    __reflect(RelationInfoReqBody.prototype, "message.RelationInfoReqBody", ["aone.AoneBody"]);
    var RelationInfoRequest = (function () {
        function RelationInfoRequest() {
            this.header = new aone.AoneReqHeader(RelationInfoRequest.ID);
            this.body = new RelationInfoReqBody();
        }
        RelationInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelationInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelationInfoRequest.ID = 18006;
        return RelationInfoRequest;
    }());
    message.RelationInfoRequest = RelationInfoRequest;
    __reflect(RelationInfoRequest.prototype, "message.RelationInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct RelationInfoZip
    ////////////////////////////////////////////////////////////////////////////////
    var RelationInfoZip = (function () {
        function RelationInfoZip() {
            this.relationApplying = []; // 好友申请列表(覆盖)
            this.applys = []; // 好友申请列表
            this.relations = []; // 关系列表
            this.givepower = []; // 赠送体力
        }
        RelationInfoZip.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // relationApplying
            if (decoder_.eof())
                return true;
            this.relationApplying = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // applys
            if (decoder_.eof())
                return true;
            var applys_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < applys_count; i++) {
                this.applys.push(new message.RoleApply());
                if (!this.applys[i].parse_bytes(decoder_))
                    return false;
            }
            // relations
            if (decoder_.eof())
                return true;
            var relations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < relations_count; i++) {
                this.relations.push(new message.RelationInfo());
                if (!this.relations[i].parse_bytes(decoder_))
                    return false;
            }
            // givepower
            if (decoder_.eof())
                return true;
            this.givepower = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RelationInfoZip.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // relationApplying
            encoder.write_uint32_vector(this.relationApplying);
            // applys
            encoder.write_fixuint32(Object.keys(this.applys).length);
            for (var k in this.applys) {
                if (!this.applys[k].to_bytes(encoder))
                    return false;
            }
            // relations
            encoder.write_fixuint32(Object.keys(this.relations).length);
            for (var k in this.relations) {
                if (!this.relations[k].to_bytes(encoder))
                    return false;
            }
            // givepower
            encoder.write_uint32_vector(this.givepower);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationInfoZip;
    }());
    message.RelationInfoZip = RelationInfoZip;
    __reflect(RelationInfoZip.prototype, "message.RelationInfoZip", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取我的关系列表回复
    // response RelationInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RelationInfoRespBody = (function () {
        function RelationInfoRespBody() {
            this.relationInfo = []; // RelationInfoZip
        }
        RelationInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // relationInfo
            if (decoder_.eof())
                return true;
            this.relationInfo = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RelationInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelationInfoRespBody;
    }());
    message.RelationInfoRespBody = RelationInfoRespBody;
    __reflect(RelationInfoRespBody.prototype, "message.RelationInfoRespBody", ["aone.AoneBody"]);
    var RelationInfoResponse = (function () {
        function RelationInfoResponse() {
            this.header = new aone.AoneRespHeader(RelationInfoResponse.ID);
            this.body = new RelationInfoRespBody();
        }
        RelationInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        RelationInfoResponse.ID = 18007;
        return RelationInfoResponse;
    }());
    message.RelationInfoResponse = RelationInfoResponse;
    __reflect(RelationInfoResponse.prototype, "message.RelationInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取关系列表请求
    // request RelationList
    ////////////////////////////////////////////////////////////////////////////////
    var RelationListReqBody = (function () {
        function RelationListReqBody() {
            this.type = 0;
        }
        RelationListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelationListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationListReqBody;
    }());
    message.RelationListReqBody = RelationListReqBody;
    __reflect(RelationListReqBody.prototype, "message.RelationListReqBody", ["aone.AoneBody"]);
    var RelationListRequest = (function () {
        function RelationListRequest() {
            this.header = new aone.AoneReqHeader(RelationListRequest.ID);
            this.body = new RelationListReqBody();
        }
        RelationListRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelationListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelationListRequest.ID = 18010;
        return RelationListRequest;
    }());
    message.RelationListRequest = RelationListRequest;
    __reflect(RelationListRequest.prototype, "message.RelationListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取关系列表回复
    // response RelationList
    ////////////////////////////////////////////////////////////////////////////////
    var RelationListRespBody = (function () {
        function RelationListRespBody() {
            this.relations = []; // 好友列表(返回所有信息)
        }
        RelationListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // relations
            if (decoder_.eof())
                return true;
            var relations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < relations_count; i++) {
                this.relations.push(new message.RelationInfo());
                if (!this.relations[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelationListRespBody;
    }());
    message.RelationListRespBody = RelationListRespBody;
    __reflect(RelationListRespBody.prototype, "message.RelationListRespBody", ["aone.AoneBody"]);
    var RelationListResponse = (function () {
        function RelationListResponse() {
            this.header = new aone.AoneRespHeader(RelationListResponse.ID);
            this.body = new RelationListRespBody();
        }
        RelationListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationListResponse.prototype.to_bytes = function (encoder) { return false; };
        RelationListResponse.ID = 18011;
        return RelationListResponse;
    }());
    message.RelationListResponse = RelationListResponse;
    __reflect(RelationListResponse.prototype, "message.RelationListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获得好友申请列表请求
    // request RelationApplyList
    ////////////////////////////////////////////////////////////////////////////////
    var RelationApplyListReqBody = (function () {
        function RelationApplyListReqBody() {
        }
        RelationApplyListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelationApplyListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationApplyListReqBody;
    }());
    message.RelationApplyListReqBody = RelationApplyListReqBody;
    __reflect(RelationApplyListReqBody.prototype, "message.RelationApplyListReqBody", ["aone.AoneBody"]);
    var RelationApplyListRequest = (function () {
        function RelationApplyListRequest() {
            this.header = new aone.AoneReqHeader(RelationApplyListRequest.ID);
            this.body = new RelationApplyListReqBody();
        }
        RelationApplyListRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelationApplyListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelationApplyListRequest.ID = 18012;
        return RelationApplyListRequest;
    }());
    message.RelationApplyListRequest = RelationApplyListRequest;
    __reflect(RelationApplyListRequest.prototype, "message.RelationApplyListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获得好友申请列表回复
    // response RelationApplyList
    ////////////////////////////////////////////////////////////////////////////////
    var RelationApplyListRespBody = (function () {
        function RelationApplyListRespBody() {
            this.applys = []; // 好友申请列表(返回所有信息)
        }
        RelationApplyListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // applys
            if (decoder_.eof())
                return true;
            var applys_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < applys_count; i++) {
                this.applys.push(new message.RoleApply());
                if (!this.applys[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationApplyListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelationApplyListRespBody;
    }());
    message.RelationApplyListRespBody = RelationApplyListRespBody;
    __reflect(RelationApplyListRespBody.prototype, "message.RelationApplyListRespBody", ["aone.AoneBody"]);
    var RelationApplyListResponse = (function () {
        function RelationApplyListResponse() {
            this.header = new aone.AoneRespHeader(RelationApplyListResponse.ID);
            this.body = new RelationApplyListRespBody();
        }
        RelationApplyListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationApplyListResponse.prototype.to_bytes = function (encoder) { return false; };
        RelationApplyListResponse.ID = 18013;
        return RelationApplyListResponse;
    }());
    message.RelationApplyListResponse = RelationApplyListResponse;
    __reflect(RelationApplyListResponse.prototype, "message.RelationApplyListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获得搜索列表请求
    // request RelationSearchList
    ////////////////////////////////////////////////////////////////////////////////
    var RelationSearchListReqBody = (function () {
        function RelationSearchListReqBody() {
            this.roleId = 0; // 角色Id(该字段不为0则一下字段失效)
            this.roleName = ""; // 模糊搜索字段
            this.beginPos = 0; // 起始位置
            this.num = 0; // 请求数量
        }
        RelationSearchListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelationSearchListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // roleName
            encoder.write_string(this.roleName);
            // beginPos
            encoder.write_uint16(this.beginPos);
            // num
            encoder.write_uint16(this.num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationSearchListReqBody;
    }());
    message.RelationSearchListReqBody = RelationSearchListReqBody;
    __reflect(RelationSearchListReqBody.prototype, "message.RelationSearchListReqBody", ["aone.AoneBody"]);
    var RelationSearchListRequest = (function () {
        function RelationSearchListRequest() {
            this.header = new aone.AoneReqHeader(RelationSearchListRequest.ID);
            this.body = new RelationSearchListReqBody();
        }
        RelationSearchListRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelationSearchListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelationSearchListRequest.ID = 18020;
        return RelationSearchListRequest;
    }());
    message.RelationSearchListRequest = RelationSearchListRequest;
    __reflect(RelationSearchListRequest.prototype, "message.RelationSearchListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获得搜索列表回复
    // response RelationSearchList
    ////////////////////////////////////////////////////////////////////////////////
    var RelationSearchListRespBody = (function () {
        function RelationSearchListRespBody() {
            this.srhs = []; // 搜索列表
        }
        RelationSearchListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // srhs
            if (decoder_.eof())
                return true;
            var srhs_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < srhs_count; i++) {
                this.srhs.push(new message.RoleBriefInfo());
                if (!this.srhs[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationSearchListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelationSearchListRespBody;
    }());
    message.RelationSearchListRespBody = RelationSearchListRespBody;
    __reflect(RelationSearchListRespBody.prototype, "message.RelationSearchListRespBody", ["aone.AoneBody"]);
    var RelationSearchListResponse = (function () {
        function RelationSearchListResponse() {
            this.header = new aone.AoneRespHeader(RelationSearchListResponse.ID);
            this.body = new RelationSearchListRespBody();
        }
        RelationSearchListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationSearchListResponse.prototype.to_bytes = function (encoder) { return false; };
        RelationSearchListResponse.ID = 18021;
        return RelationSearchListResponse;
    }());
    message.RelationSearchListResponse = RelationSearchListResponse;
    __reflect(RelationSearchListResponse.prototype, "message.RelationSearchListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 赠送体力请求
    // request RelationGivePower
    ////////////////////////////////////////////////////////////////////////////////
    var RelationGivePowerReqBody = (function () {
        function RelationGivePowerReqBody() {
            this.roleIds = [];
        }
        RelationGivePowerReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelationGivePowerReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleIds
            encoder.write_uint32_vector(this.roleIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationGivePowerReqBody;
    }());
    message.RelationGivePowerReqBody = RelationGivePowerReqBody;
    __reflect(RelationGivePowerReqBody.prototype, "message.RelationGivePowerReqBody", ["aone.AoneBody"]);
    var RelationGivePowerRequest = (function () {
        function RelationGivePowerRequest() {
            this.header = new aone.AoneReqHeader(RelationGivePowerRequest.ID);
            this.body = new RelationGivePowerReqBody();
        }
        RelationGivePowerRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelationGivePowerRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelationGivePowerRequest.ID = 18030;
        return RelationGivePowerRequest;
    }());
    message.RelationGivePowerRequest = RelationGivePowerRequest;
    __reflect(RelationGivePowerRequest.prototype, "message.RelationGivePowerRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 赠送体力回复
    // response RelationGivePower
    ////////////////////////////////////////////////////////////////////////////////
    var RelationGivePowerRespBody = (function () {
        function RelationGivePowerRespBody() {
            this.givepower = []; // 更新部分信息
        }
        RelationGivePowerRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // givepower
            if (decoder_.eof())
                return true;
            this.givepower = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RelationGivePowerRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelationGivePowerRespBody;
    }());
    message.RelationGivePowerRespBody = RelationGivePowerRespBody;
    __reflect(RelationGivePowerRespBody.prototype, "message.RelationGivePowerRespBody", ["aone.AoneBody"]);
    var RelationGivePowerResponse = (function () {
        function RelationGivePowerResponse() {
            this.header = new aone.AoneRespHeader(RelationGivePowerResponse.ID);
            this.body = new RelationGivePowerRespBody();
        }
        RelationGivePowerResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationGivePowerResponse.prototype.to_bytes = function (encoder) { return false; };
        RelationGivePowerResponse.ID = 18031;
        return RelationGivePowerResponse;
    }());
    message.RelationGivePowerResponse = RelationGivePowerResponse;
    __reflect(RelationGivePowerResponse.prototype, "message.RelationGivePowerResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取体力请求
    // request RelationRewardPower
    ////////////////////////////////////////////////////////////////////////////////
    var RelationRewardPowerReqBody = (function () {
        function RelationRewardPowerReqBody() {
            this.roleIds = [];
        }
        RelationRewardPowerReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RelationRewardPowerReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleIds
            encoder.write_uint32_vector(this.roleIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RelationRewardPowerReqBody;
    }());
    message.RelationRewardPowerReqBody = RelationRewardPowerReqBody;
    __reflect(RelationRewardPowerReqBody.prototype, "message.RelationRewardPowerReqBody", ["aone.AoneBody"]);
    var RelationRewardPowerRequest = (function () {
        function RelationRewardPowerRequest() {
            this.header = new aone.AoneReqHeader(RelationRewardPowerRequest.ID);
            this.body = new RelationRewardPowerReqBody();
        }
        RelationRewardPowerRequest.prototype.parse_bytes = function (decoder) { return false; };
        RelationRewardPowerRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RelationRewardPowerRequest.ID = 18032;
        return RelationRewardPowerRequest;
    }());
    message.RelationRewardPowerRequest = RelationRewardPowerRequest;
    __reflect(RelationRewardPowerRequest.prototype, "message.RelationRewardPowerRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取体力回复
    // response RelationRewardPower
    ////////////////////////////////////////////////////////////////////////////////
    var RelationRewardPowerRespBody = (function () {
        function RelationRewardPowerRespBody() {
            this.relations = []; // 更新部分信息
            this.gameInfo = new message.GameInfo();
        }
        RelationRewardPowerRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // relations
            if (decoder_.eof())
                return true;
            var relations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < relations_count; i++) {
                this.relations.push(new message.RelationInfo());
                if (!this.relations[i].parse_bytes(decoder_))
                    return false;
            }
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RelationRewardPowerRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RelationRewardPowerRespBody;
    }());
    message.RelationRewardPowerRespBody = RelationRewardPowerRespBody;
    __reflect(RelationRewardPowerRespBody.prototype, "message.RelationRewardPowerRespBody", ["aone.AoneBody"]);
    var RelationRewardPowerResponse = (function () {
        function RelationRewardPowerResponse() {
            this.header = new aone.AoneRespHeader(RelationRewardPowerResponse.ID);
            this.body = new RelationRewardPowerRespBody();
        }
        RelationRewardPowerResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RelationRewardPowerResponse.prototype.to_bytes = function (encoder) { return false; };
        RelationRewardPowerResponse.ID = 18033;
        return RelationRewardPowerResponse;
    }());
    message.RelationRewardPowerResponse = RelationRewardPowerResponse;
    __reflect(RelationRewardPowerResponse.prototype, "message.RelationRewardPowerResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(RelationAddRequest.ID, function () { return new RelationAddRequest(); });
    aone.MessageFactory.getInstance().register(RelationAddResponse.ID, function () { return new RelationAddResponse(); });
    aone.MessageFactory.getInstance().register(RelationAnswerFriendRequest.ID, function () { return new RelationAnswerFriendRequest(); });
    aone.MessageFactory.getInstance().register(RelationAnswerFriendResponse.ID, function () { return new RelationAnswerFriendResponse(); });
    aone.MessageFactory.getInstance().register(RelationDeleteRequest.ID, function () { return new RelationDeleteRequest(); });
    aone.MessageFactory.getInstance().register(RelationDeleteResponse.ID, function () { return new RelationDeleteResponse(); });
    aone.MessageFactory.getInstance().register(RelationInfoRequest.ID, function () { return new RelationInfoRequest(); });
    aone.MessageFactory.getInstance().register(RelationInfoResponse.ID, function () { return new RelationInfoResponse(); });
    aone.MessageFactory.getInstance().register(RelationListRequest.ID, function () { return new RelationListRequest(); });
    aone.MessageFactory.getInstance().register(RelationListResponse.ID, function () { return new RelationListResponse(); });
    aone.MessageFactory.getInstance().register(RelationApplyListRequest.ID, function () { return new RelationApplyListRequest(); });
    aone.MessageFactory.getInstance().register(RelationApplyListResponse.ID, function () { return new RelationApplyListResponse(); });
    aone.MessageFactory.getInstance().register(RelationSearchListRequest.ID, function () { return new RelationSearchListRequest(); });
    aone.MessageFactory.getInstance().register(RelationSearchListResponse.ID, function () { return new RelationSearchListResponse(); });
    aone.MessageFactory.getInstance().register(RelationGivePowerRequest.ID, function () { return new RelationGivePowerRequest(); });
    aone.MessageFactory.getInstance().register(RelationGivePowerResponse.ID, function () { return new RelationGivePowerResponse(); });
    aone.MessageFactory.getInstance().register(RelationRewardPowerRequest.ID, function () { return new RelationRewardPowerRequest(); });
    aone.MessageFactory.getInstance().register(RelationRewardPowerResponse.ID, function () { return new RelationRewardPowerResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_role.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // struct ClientOperateChunk
    ////////////////////////////////////////////////////////////////////////////////
    var ClientOperateChunk = (function () {
        function ClientOperateChunk() {
            this.clientOperate = [];
        }
        ClientOperateChunk.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // clientOperate
            if (decoder_.eof())
                return true;
            var clientOperate_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < clientOperate_count; i++) {
                this.clientOperate.push(new message.ClientOperate());
                if (!this.clientOperate[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ClientOperateChunk.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // clientOperate
            encoder.write_fixuint32(Object.keys(this.clientOperate).length);
            for (var k in this.clientOperate) {
                if (!this.clientOperate[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ClientOperateChunk;
    }());
    message.ClientOperateChunk = ClientOperateChunk;
    __reflect(ClientOperateChunk.prototype, "message.ClientOperateChunk", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 心跳请求
    // request HeartBeat
    ////////////////////////////////////////////////////////////////////////////////
    var HeartBeatReqBody = (function () {
        function HeartBeatReqBody() {
            this.clientOperate = ""; // ClientOperateChunk
        }
        HeartBeatReqBody.prototype.parse_bytes = function (decoder) { return false; };
        HeartBeatReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // clientOperate
            encoder.write_string(this.clientOperate);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return HeartBeatReqBody;
    }());
    message.HeartBeatReqBody = HeartBeatReqBody;
    __reflect(HeartBeatReqBody.prototype, "message.HeartBeatReqBody", ["aone.AoneBody"]);
    var HeartBeatRequest = (function () {
        function HeartBeatRequest() {
            this.header = new aone.AoneReqHeader(HeartBeatRequest.ID);
            this.body = new HeartBeatReqBody();
        }
        HeartBeatRequest.prototype.parse_bytes = function (decoder) { return false; };
        HeartBeatRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        HeartBeatRequest.ID = 38000;
        return HeartBeatRequest;
    }());
    message.HeartBeatRequest = HeartBeatRequest;
    __reflect(HeartBeatRequest.prototype, "message.HeartBeatRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 心跳回复
    // response HeartBeat
    ////////////////////////////////////////////////////////////////////////////////
    var HeartBeatRespBody = (function () {
        function HeartBeatRespBody() {
            this.is_monitor = false; // 是否开启监测功能
            this.auth_type = 0; // 认证开关(暂时没用)
            this.token = 0; // 代币
            this.money = 0; // 铜钱
            this.power = 0; // 体力
            this.goldPlate = 0; // 盘子
            this.openTime = 0; // 开服时间
            this.serverTime = 0; // 当前服务器时间
            this.week = 0; // 当前服务器星期
            this.lastPower = 0; // 上次体力刷新时间
            this.lastGoldPlate = 0; // 上次盘子刷新时间
            this.version = 0; // 当前服务端热更版本
            this.processes = []; // 进程信息
            this.singlecraftState = 0; // 跨服战红点
            this.towerRefreshTime = 0; // 上次塔刷新时间
            this.server_id = 0; // 玩家所在服务id
        }
        HeartBeatRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // is_monitor
            if (decoder_.eof())
                return true;
            this.is_monitor = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // auth_type
            if (decoder_.eof())
                return true;
            this.auth_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // money
            if (decoder_.eof())
                return true;
            this.money = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // power
            if (decoder_.eof())
                return true;
            this.power = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // goldPlate
            if (decoder_.eof())
                return true;
            this.goldPlate = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // openTime
            if (decoder_.eof())
                return true;
            this.openTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // serverTime
            if (decoder_.eof())
                return true;
            this.serverTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // week
            if (decoder_.eof())
                return true;
            this.week = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lastPower
            if (decoder_.eof())
                return true;
            this.lastPower = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // lastGoldPlate
            if (decoder_.eof())
                return true;
            this.lastGoldPlate = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // version
            if (decoder_.eof())
                return true;
            this.version = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // processes
            if (decoder_.eof())
                return true;
            var processes_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < processes_count; i++) {
                this.processes.push(new message.ProgressInfo());
                if (!this.processes[i].parse_bytes(decoder_))
                    return false;
            }
            // singlecraftState
            if (decoder_.eof())
                return true;
            this.singlecraftState = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // towerRefreshTime
            if (decoder_.eof())
                return true;
            this.towerRefreshTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // server_id
            if (decoder_.eof())
                return true;
            this.server_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        HeartBeatRespBody.prototype.to_bytes = function (encoder) { return false; };
        return HeartBeatRespBody;
    }());
    message.HeartBeatRespBody = HeartBeatRespBody;
    __reflect(HeartBeatRespBody.prototype, "message.HeartBeatRespBody", ["aone.AoneBody"]);
    var HeartBeatResponse = (function () {
        function HeartBeatResponse() {
            this.header = new aone.AoneRespHeader(HeartBeatResponse.ID);
            this.body = new HeartBeatRespBody();
        }
        HeartBeatResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        HeartBeatResponse.prototype.to_bytes = function (encoder) { return false; };
        HeartBeatResponse.ID = 38001;
        return HeartBeatResponse;
    }());
    message.HeartBeatResponse = HeartBeatResponse;
    __reflect(HeartBeatResponse.prototype, "message.HeartBeatResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询角色详情请求
    // request QueryRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryRoleInfoReqBody = (function () {
        function QueryRoleInfoReqBody() {
            this.roleId = 0;
            this.group_id = 0; // 查询跨服玩家用
            this.battle_type = 0; // 单队切磋、三队切磋、组队战
        }
        QueryRoleInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryRoleInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // battle_type
            encoder.write_fixuint32(this.battle_type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryRoleInfoReqBody;
    }());
    message.QueryRoleInfoReqBody = QueryRoleInfoReqBody;
    __reflect(QueryRoleInfoReqBody.prototype, "message.QueryRoleInfoReqBody", ["aone.AoneBody"]);
    var QueryRoleInfoRequest = (function () {
        function QueryRoleInfoRequest() {
            this.header = new aone.AoneReqHeader(QueryRoleInfoRequest.ID);
            this.body = new QueryRoleInfoReqBody();
        }
        QueryRoleInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryRoleInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryRoleInfoRequest.ID = 38002;
        return QueryRoleInfoRequest;
    }());
    message.QueryRoleInfoRequest = QueryRoleInfoRequest;
    __reflect(QueryRoleInfoRequest.prototype, "message.QueryRoleInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct RoleInfoZip
    ////////////////////////////////////////////////////////////////////////////////
    var RoleInfoZip = (function () {
        function RoleInfoZip() {
            this.baseInfo = new message.RoleBriefInfo();
            this.generals = [];
            this.advisers = [];
            this.artifacts = [];
            this.formations = []; // 详细阵型
        }
        RoleInfoZip.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // baseInfo
            if (decoder_.eof())
                return true;
            if (!this.baseInfo.parse_bytes(decoder_))
                return false;
            // generals
            if (decoder_.eof())
                return true;
            var generals_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < generals_count; i++) {
                this.generals.push(new message.GeneralInfo());
                if (!this.generals[i].parse_bytes(decoder_))
                    return false;
            }
            // advisers
            if (decoder_.eof())
                return true;
            var advisers_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < advisers_count; i++) {
                this.advisers.push(new message.AdviserInfo());
                if (!this.advisers[i].parse_bytes(decoder_))
                    return false;
            }
            // artifacts
            if (decoder_.eof())
                return true;
            var artifacts_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < artifacts_count; i++) {
                this.artifacts.push(new message.ArtifactInfo());
                if (!this.artifacts[i].parse_bytes(decoder_))
                    return false;
            }
            // formations
            if (decoder_.eof())
                return true;
            var formations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formations_count; i++) {
                this.formations.push(new message.DetailFormationInfo());
                if (!this.formations[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RoleInfoZip.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // baseInfo
            this.baseInfo.to_bytes(encoder);
            // generals
            encoder.write_fixuint32(Object.keys(this.generals).length);
            for (var k in this.generals) {
                if (!this.generals[k].to_bytes(encoder))
                    return false;
            }
            // advisers
            encoder.write_fixuint32(Object.keys(this.advisers).length);
            for (var k in this.advisers) {
                if (!this.advisers[k].to_bytes(encoder))
                    return false;
            }
            // artifacts
            encoder.write_fixuint32(Object.keys(this.artifacts).length);
            for (var k in this.artifacts) {
                if (!this.artifacts[k].to_bytes(encoder))
                    return false;
            }
            // formations
            encoder.write_fixuint32(Object.keys(this.formations).length);
            for (var k in this.formations) {
                if (!this.formations[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RoleInfoZip;
    }());
    message.RoleInfoZip = RoleInfoZip;
    __reflect(RoleInfoZip.prototype, "message.RoleInfoZip", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询角色详情回复
    // response QueryRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryRoleInfoRespBody = (function () {
        function QueryRoleInfoRespBody() {
            this.roleInfo = []; // RoleInfoZip
        }
        QueryRoleInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            this.roleInfo = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryRoleInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryRoleInfoRespBody;
    }());
    message.QueryRoleInfoRespBody = QueryRoleInfoRespBody;
    __reflect(QueryRoleInfoRespBody.prototype, "message.QueryRoleInfoRespBody", ["aone.AoneBody"]);
    var QueryRoleInfoResponse = (function () {
        function QueryRoleInfoResponse() {
            this.header = new aone.AoneRespHeader(QueryRoleInfoResponse.ID);
            this.body = new QueryRoleInfoRespBody();
        }
        QueryRoleInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryRoleInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryRoleInfoResponse.ID = 38003;
        return QueryRoleInfoResponse;
    }());
    message.QueryRoleInfoResponse = QueryRoleInfoResponse;
    __reflect(QueryRoleInfoResponse.prototype, "message.QueryRoleInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置查看详情开关请求
    // request SetAgreeDetail
    ////////////////////////////////////////////////////////////////////////////////
    var SetAgreeDetailReqBody = (function () {
        function SetAgreeDetailReqBody() {
            this.agree_detail = false;
        }
        SetAgreeDetailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SetAgreeDetailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // agree_detail
            encoder.write_bool(this.agree_detail);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SetAgreeDetailReqBody;
    }());
    message.SetAgreeDetailReqBody = SetAgreeDetailReqBody;
    __reflect(SetAgreeDetailReqBody.prototype, "message.SetAgreeDetailReqBody", ["aone.AoneBody"]);
    var SetAgreeDetailRequest = (function () {
        function SetAgreeDetailRequest() {
            this.header = new aone.AoneReqHeader(SetAgreeDetailRequest.ID);
            this.body = new SetAgreeDetailReqBody();
        }
        SetAgreeDetailRequest.prototype.parse_bytes = function (decoder) { return false; };
        SetAgreeDetailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SetAgreeDetailRequest.ID = 38004;
        return SetAgreeDetailRequest;
    }());
    message.SetAgreeDetailRequest = SetAgreeDetailRequest;
    __reflect(SetAgreeDetailRequest.prototype, "message.SetAgreeDetailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置查看详情开关回复
    // response SetAgreeDetail
    ////////////////////////////////////////////////////////////////////////////////
    var SetAgreeDetailRespBody = (function () {
        function SetAgreeDetailRespBody() {
        }
        SetAgreeDetailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SetAgreeDetailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SetAgreeDetailRespBody;
    }());
    message.SetAgreeDetailRespBody = SetAgreeDetailRespBody;
    __reflect(SetAgreeDetailRespBody.prototype, "message.SetAgreeDetailRespBody", ["aone.AoneBody"]);
    var SetAgreeDetailResponse = (function () {
        function SetAgreeDetailResponse() {
            this.header = new aone.AoneRespHeader(SetAgreeDetailResponse.ID);
            this.body = new SetAgreeDetailRespBody();
        }
        SetAgreeDetailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SetAgreeDetailResponse.prototype.to_bytes = function (encoder) { return false; };
        SetAgreeDetailResponse.ID = 38005;
        return SetAgreeDetailResponse;
    }());
    message.SetAgreeDetailResponse = SetAgreeDetailResponse;
    __reflect(SetAgreeDetailResponse.prototype, "message.SetAgreeDetailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置进入主城标识请求
    // request SetAgreeEnter
    ////////////////////////////////////////////////////////////////////////////////
    var SetAgreeEnterReqBody = (function () {
        function SetAgreeEnterReqBody() {
            this.agree_enter = false;
        }
        SetAgreeEnterReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SetAgreeEnterReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // agree_enter
            encoder.write_bool(this.agree_enter);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SetAgreeEnterReqBody;
    }());
    message.SetAgreeEnterReqBody = SetAgreeEnterReqBody;
    __reflect(SetAgreeEnterReqBody.prototype, "message.SetAgreeEnterReqBody", ["aone.AoneBody"]);
    var SetAgreeEnterRequest = (function () {
        function SetAgreeEnterRequest() {
            this.header = new aone.AoneReqHeader(SetAgreeEnterRequest.ID);
            this.body = new SetAgreeEnterReqBody();
        }
        SetAgreeEnterRequest.prototype.parse_bytes = function (decoder) { return false; };
        SetAgreeEnterRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SetAgreeEnterRequest.ID = 38006;
        return SetAgreeEnterRequest;
    }());
    message.SetAgreeEnterRequest = SetAgreeEnterRequest;
    __reflect(SetAgreeEnterRequest.prototype, "message.SetAgreeEnterRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置进入主城标识回复
    // response SetAgreeEnter
    ////////////////////////////////////////////////////////////////////////////////
    var SetAgreeEnterRespBody = (function () {
        function SetAgreeEnterRespBody() {
        }
        SetAgreeEnterRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SetAgreeEnterRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SetAgreeEnterRespBody;
    }());
    message.SetAgreeEnterRespBody = SetAgreeEnterRespBody;
    __reflect(SetAgreeEnterRespBody.prototype, "message.SetAgreeEnterRespBody", ["aone.AoneBody"]);
    var SetAgreeEnterResponse = (function () {
        function SetAgreeEnterResponse() {
            this.header = new aone.AoneRespHeader(SetAgreeEnterResponse.ID);
            this.body = new SetAgreeEnterRespBody();
        }
        SetAgreeEnterResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SetAgreeEnterResponse.prototype.to_bytes = function (encoder) { return false; };
        SetAgreeEnterResponse.ID = 38007;
        return SetAgreeEnterResponse;
    }());
    message.SetAgreeEnterResponse = SetAgreeEnterResponse;
    __reflect(SetAgreeEnterResponse.prototype, "message.SetAgreeEnterResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 使用道具请求
    // request UseProp
    ////////////////////////////////////////////////////////////////////////////////
    var UsePropReqBody = (function () {
        function UsePropReqBody() {
            this.goodses = [];
        }
        UsePropReqBody.prototype.parse_bytes = function (decoder) { return false; };
        UsePropReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // goodses
            encoder.write_fixuint32(Object.keys(this.goodses).length);
            for (var k in this.goodses) {
                if (!this.goodses[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return UsePropReqBody;
    }());
    message.UsePropReqBody = UsePropReqBody;
    __reflect(UsePropReqBody.prototype, "message.UsePropReqBody", ["aone.AoneBody"]);
    var UsePropRequest = (function () {
        function UsePropRequest() {
            this.header = new aone.AoneReqHeader(UsePropRequest.ID);
            this.body = new UsePropReqBody();
        }
        UsePropRequest.prototype.parse_bytes = function (decoder) { return false; };
        UsePropRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        UsePropRequest.ID = 38020;
        return UsePropRequest;
    }());
    message.UsePropRequest = UsePropRequest;
    __reflect(UsePropRequest.prototype, "message.UsePropRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 使用道具回复
    // response UseProp
    ////////////////////////////////////////////////////////////////////////////////
    var UsePropRespBody = (function () {
        function UsePropRespBody() {
            this.gameInfo = new message.GameInfo();
            this.goodses = [];
        }
        UsePropRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // goodses
            if (decoder_.eof())
                return true;
            var goodses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goodses_count; i++) {
                this.goodses.push(new message.GoodsInfo());
                if (!this.goodses[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UsePropRespBody.prototype.to_bytes = function (encoder) { return false; };
        return UsePropRespBody;
    }());
    message.UsePropRespBody = UsePropRespBody;
    __reflect(UsePropRespBody.prototype, "message.UsePropRespBody", ["aone.AoneBody"]);
    var UsePropResponse = (function () {
        function UsePropResponse() {
            this.header = new aone.AoneRespHeader(UsePropResponse.ID);
            this.body = new UsePropRespBody();
        }
        UsePropResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UsePropResponse.prototype.to_bytes = function (encoder) { return false; };
        UsePropResponse.ID = 38021;
        return UsePropResponse;
    }());
    message.UsePropResponse = UsePropResponse;
    __reflect(UsePropResponse.prototype, "message.UsePropResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 出售物品请求
    // request SellGoods
    ////////////////////////////////////////////////////////////////////////////////
    var SellGoodsReqBody = (function () {
        function SellGoodsReqBody() {
            this.goodses = [];
        }
        SellGoodsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SellGoodsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // goodses
            encoder.write_fixuint32(Object.keys(this.goodses).length);
            for (var k in this.goodses) {
                if (!this.goodses[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SellGoodsReqBody;
    }());
    message.SellGoodsReqBody = SellGoodsReqBody;
    __reflect(SellGoodsReqBody.prototype, "message.SellGoodsReqBody", ["aone.AoneBody"]);
    var SellGoodsRequest = (function () {
        function SellGoodsRequest() {
            this.header = new aone.AoneReqHeader(SellGoodsRequest.ID);
            this.body = new SellGoodsReqBody();
        }
        SellGoodsRequest.prototype.parse_bytes = function (decoder) { return false; };
        SellGoodsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SellGoodsRequest.ID = 38022;
        return SellGoodsRequest;
    }());
    message.SellGoodsRequest = SellGoodsRequest;
    __reflect(SellGoodsRequest.prototype, "message.SellGoodsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 出售物品回复
    // response SellGoods
    ////////////////////////////////////////////////////////////////////////////////
    var SellGoodsRespBody = (function () {
        function SellGoodsRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SellGoodsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SellGoodsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SellGoodsRespBody;
    }());
    message.SellGoodsRespBody = SellGoodsRespBody;
    __reflect(SellGoodsRespBody.prototype, "message.SellGoodsRespBody", ["aone.AoneBody"]);
    var SellGoodsResponse = (function () {
        function SellGoodsResponse() {
            this.header = new aone.AoneRespHeader(SellGoodsResponse.ID);
            this.body = new SellGoodsRespBody();
        }
        SellGoodsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SellGoodsResponse.prototype.to_bytes = function (encoder) { return false; };
        SellGoodsResponse.ID = 38023;
        return SellGoodsResponse;
    }());
    message.SellGoodsResponse = SellGoodsResponse;
    __reflect(SellGoodsResponse.prototype, "message.SellGoodsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 验证倒计时请求
    // request CheckProcess
    ////////////////////////////////////////////////////////////////////////////////
    var CheckProcessReqBody = (function () {
        function CheckProcessReqBody() {
            this.types = [];
        }
        CheckProcessReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CheckProcessReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // types
            encoder.write_uint32_vector(this.types);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CheckProcessReqBody;
    }());
    message.CheckProcessReqBody = CheckProcessReqBody;
    __reflect(CheckProcessReqBody.prototype, "message.CheckProcessReqBody", ["aone.AoneBody"]);
    var CheckProcessRequest = (function () {
        function CheckProcessRequest() {
            this.header = new aone.AoneReqHeader(CheckProcessRequest.ID);
            this.body = new CheckProcessReqBody();
        }
        CheckProcessRequest.prototype.parse_bytes = function (decoder) { return false; };
        CheckProcessRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CheckProcessRequest.ID = 38030;
        return CheckProcessRequest;
    }());
    message.CheckProcessRequest = CheckProcessRequest;
    __reflect(CheckProcessRequest.prototype, "message.CheckProcessRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 验证倒计时回复
    // response CheckProcess
    ////////////////////////////////////////////////////////////////////////////////
    var CheckProcessRespBody = (function () {
        function CheckProcessRespBody() {
            this.processes = [];
        }
        CheckProcessRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // processes
            if (decoder_.eof())
                return true;
            var processes_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < processes_count; i++) {
                this.processes.push(new message.ProgressInfo());
                if (!this.processes[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CheckProcessRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CheckProcessRespBody;
    }());
    message.CheckProcessRespBody = CheckProcessRespBody;
    __reflect(CheckProcessRespBody.prototype, "message.CheckProcessRespBody", ["aone.AoneBody"]);
    var CheckProcessResponse = (function () {
        function CheckProcessResponse() {
            this.header = new aone.AoneRespHeader(CheckProcessResponse.ID);
            this.body = new CheckProcessRespBody();
        }
        CheckProcessResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CheckProcessResponse.prototype.to_bytes = function (encoder) { return false; };
        CheckProcessResponse.ID = 38031;
        return CheckProcessResponse;
    }());
    message.CheckProcessResponse = CheckProcessResponse;
    __reflect(CheckProcessResponse.prototype, "message.CheckProcessResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买体力请求
    // request BuyPower
    ////////////////////////////////////////////////////////////////////////////////
    var BuyPowerReqBody = (function () {
        function BuyPowerReqBody() {
        }
        BuyPowerReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuyPowerReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyPowerReqBody;
    }());
    message.BuyPowerReqBody = BuyPowerReqBody;
    __reflect(BuyPowerReqBody.prototype, "message.BuyPowerReqBody", ["aone.AoneBody"]);
    var BuyPowerRequest = (function () {
        function BuyPowerRequest() {
            this.header = new aone.AoneReqHeader(BuyPowerRequest.ID);
            this.body = new BuyPowerReqBody();
        }
        BuyPowerRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuyPowerRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuyPowerRequest.ID = 38040;
        return BuyPowerRequest;
    }());
    message.BuyPowerRequest = BuyPowerRequest;
    __reflect(BuyPowerRequest.prototype, "message.BuyPowerRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买体力回复
    // response BuyPower
    ////////////////////////////////////////////////////////////////////////////////
    var BuyPowerRespBody = (function () {
        function BuyPowerRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuyPowerRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuyPowerRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuyPowerRespBody;
    }());
    message.BuyPowerRespBody = BuyPowerRespBody;
    __reflect(BuyPowerRespBody.prototype, "message.BuyPowerRespBody", ["aone.AoneBody"]);
    var BuyPowerResponse = (function () {
        function BuyPowerResponse() {
            this.header = new aone.AoneRespHeader(BuyPowerResponse.ID);
            this.body = new BuyPowerRespBody();
        }
        BuyPowerResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuyPowerResponse.prototype.to_bytes = function (encoder) { return false; };
        BuyPowerResponse.ID = 38041;
        return BuyPowerResponse;
    }());
    message.BuyPowerResponse = BuyPowerResponse;
    __reflect(BuyPowerResponse.prototype, "message.BuyPowerResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买盘子请求
    // request BuyPlate
    ////////////////////////////////////////////////////////////////////////////////
    var BuyPlateReqBody = (function () {
        function BuyPlateReqBody() {
        }
        BuyPlateReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuyPlateReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyPlateReqBody;
    }());
    message.BuyPlateReqBody = BuyPlateReqBody;
    __reflect(BuyPlateReqBody.prototype, "message.BuyPlateReqBody", ["aone.AoneBody"]);
    var BuyPlateRequest = (function () {
        function BuyPlateRequest() {
            this.header = new aone.AoneReqHeader(BuyPlateRequest.ID);
            this.body = new BuyPlateReqBody();
        }
        BuyPlateRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuyPlateRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuyPlateRequest.ID = 38042;
        return BuyPlateRequest;
    }());
    message.BuyPlateRequest = BuyPlateRequest;
    __reflect(BuyPlateRequest.prototype, "message.BuyPlateRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买盘子回复
    // response BuyPlate
    ////////////////////////////////////////////////////////////////////////////////
    var BuyPlateRespBody = (function () {
        function BuyPlateRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuyPlateRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuyPlateRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuyPlateRespBody;
    }());
    message.BuyPlateRespBody = BuyPlateRespBody;
    __reflect(BuyPlateRespBody.prototype, "message.BuyPlateRespBody", ["aone.AoneBody"]);
    var BuyPlateResponse = (function () {
        function BuyPlateResponse() {
            this.header = new aone.AoneRespHeader(BuyPlateResponse.ID);
            this.body = new BuyPlateRespBody();
        }
        BuyPlateResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuyPlateResponse.prototype.to_bytes = function (encoder) { return false; };
        BuyPlateResponse.ID = 38043;
        return BuyPlateResponse;
    }());
    message.BuyPlateResponse = BuyPlateResponse;
    __reflect(BuyPlateResponse.prototype, "message.BuyPlateResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 更改角色名称请求
    // request ModifyRoleName
    ////////////////////////////////////////////////////////////////////////////////
    var ModifyRoleNameReqBody = (function () {
        function ModifyRoleNameReqBody() {
            this.name = "";
        }
        ModifyRoleNameReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ModifyRoleNameReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // name
            encoder.write_string(this.name);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ModifyRoleNameReqBody;
    }());
    message.ModifyRoleNameReqBody = ModifyRoleNameReqBody;
    __reflect(ModifyRoleNameReqBody.prototype, "message.ModifyRoleNameReqBody", ["aone.AoneBody"]);
    var ModifyRoleNameRequest = (function () {
        function ModifyRoleNameRequest() {
            this.header = new aone.AoneReqHeader(ModifyRoleNameRequest.ID);
            this.body = new ModifyRoleNameReqBody();
        }
        ModifyRoleNameRequest.prototype.parse_bytes = function (decoder) { return false; };
        ModifyRoleNameRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ModifyRoleNameRequest.ID = 38050;
        return ModifyRoleNameRequest;
    }());
    message.ModifyRoleNameRequest = ModifyRoleNameRequest;
    __reflect(ModifyRoleNameRequest.prototype, "message.ModifyRoleNameRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 更改角色称回复
    // response ModifyRoleName
    ////////////////////////////////////////////////////////////////////////////////
    var ModifyRoleNameRespBody = (function () {
        function ModifyRoleNameRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ModifyRoleNameRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ModifyRoleNameRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ModifyRoleNameRespBody;
    }());
    message.ModifyRoleNameRespBody = ModifyRoleNameRespBody;
    __reflect(ModifyRoleNameRespBody.prototype, "message.ModifyRoleNameRespBody", ["aone.AoneBody"]);
    var ModifyRoleNameResponse = (function () {
        function ModifyRoleNameResponse() {
            this.header = new aone.AoneRespHeader(ModifyRoleNameResponse.ID);
            this.body = new ModifyRoleNameRespBody();
        }
        ModifyRoleNameResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ModifyRoleNameResponse.prototype.to_bytes = function (encoder) { return false; };
        ModifyRoleNameResponse.ID = 38051;
        return ModifyRoleNameResponse;
    }());
    message.ModifyRoleNameResponse = ModifyRoleNameResponse;
    __reflect(ModifyRoleNameResponse.prototype, "message.ModifyRoleNameResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置角色头像请求
    // request ModifyRolePic
    ////////////////////////////////////////////////////////////////////////////////
    var ModifyRolePicReqBody = (function () {
        function ModifyRolePicReqBody() {
            this.picId = 0; // 头像设置
            this.picFrame = 0; // 头像框设置
            this.titleId = 0; // 称号设置
            this.viceTitleId = 0; // 副称号设置
        }
        ModifyRolePicReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ModifyRolePicReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // picId
            encoder.write_fixuint32(this.picId);
            // picFrame
            encoder.write_fixuint32(this.picFrame);
            // titleId
            encoder.write_fixuint32(this.titleId);
            // viceTitleId
            encoder.write_fixuint32(this.viceTitleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ModifyRolePicReqBody;
    }());
    message.ModifyRolePicReqBody = ModifyRolePicReqBody;
    __reflect(ModifyRolePicReqBody.prototype, "message.ModifyRolePicReqBody", ["aone.AoneBody"]);
    var ModifyRolePicRequest = (function () {
        function ModifyRolePicRequest() {
            this.header = new aone.AoneReqHeader(ModifyRolePicRequest.ID);
            this.body = new ModifyRolePicReqBody();
        }
        ModifyRolePicRequest.prototype.parse_bytes = function (decoder) { return false; };
        ModifyRolePicRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ModifyRolePicRequest.ID = 38052;
        return ModifyRolePicRequest;
    }());
    message.ModifyRolePicRequest = ModifyRolePicRequest;
    __reflect(ModifyRolePicRequest.prototype, "message.ModifyRolePicRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置角色头像回复
    // response ModifyRolePic
    ////////////////////////////////////////////////////////////////////////////////
    var ModifyRolePicRespBody = (function () {
        function ModifyRolePicRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ModifyRolePicRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ModifyRolePicRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ModifyRolePicRespBody;
    }());
    message.ModifyRolePicRespBody = ModifyRolePicRespBody;
    __reflect(ModifyRolePicRespBody.prototype, "message.ModifyRolePicRespBody", ["aone.AoneBody"]);
    var ModifyRolePicResponse = (function () {
        function ModifyRolePicResponse() {
            this.header = new aone.AoneRespHeader(ModifyRolePicResponse.ID);
            this.body = new ModifyRolePicRespBody();
        }
        ModifyRolePicResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ModifyRolePicResponse.prototype.to_bytes = function (encoder) { return false; };
        ModifyRolePicResponse.ID = 38053;
        return ModifyRolePicResponse;
    }());
    message.ModifyRolePicResponse = ModifyRolePicResponse;
    __reflect(ModifyRolePicResponse.prototype, "message.ModifyRolePicResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取角色称号请求
    // request RewardRoleTitle
    ////////////////////////////////////////////////////////////////////////////////
    var RewardRoleTitleReqBody = (function () {
        function RewardRoleTitleReqBody() {
            this.titleId = 0; // 称号
        }
        RewardRoleTitleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardRoleTitleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // titleId
            encoder.write_fixuint32(this.titleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardRoleTitleReqBody;
    }());
    message.RewardRoleTitleReqBody = RewardRoleTitleReqBody;
    __reflect(RewardRoleTitleReqBody.prototype, "message.RewardRoleTitleReqBody", ["aone.AoneBody"]);
    var RewardRoleTitleRequest = (function () {
        function RewardRoleTitleRequest() {
            this.header = new aone.AoneReqHeader(RewardRoleTitleRequest.ID);
            this.body = new RewardRoleTitleReqBody();
        }
        RewardRoleTitleRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardRoleTitleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardRoleTitleRequest.ID = 38054;
        return RewardRoleTitleRequest;
    }());
    message.RewardRoleTitleRequest = RewardRoleTitleRequest;
    __reflect(RewardRoleTitleRequest.prototype, "message.RewardRoleTitleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取角色称号回复
    // response RewardRoleTitle
    ////////////////////////////////////////////////////////////////////////////////
    var RewardRoleTitleRespBody = (function () {
        function RewardRoleTitleRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardRoleTitleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardRoleTitleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardRoleTitleRespBody;
    }());
    message.RewardRoleTitleRespBody = RewardRoleTitleRespBody;
    __reflect(RewardRoleTitleRespBody.prototype, "message.RewardRoleTitleRespBody", ["aone.AoneBody"]);
    var RewardRoleTitleResponse = (function () {
        function RewardRoleTitleResponse() {
            this.header = new aone.AoneRespHeader(RewardRoleTitleResponse.ID);
            this.body = new RewardRoleTitleRespBody();
        }
        RewardRoleTitleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardRoleTitleResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardRoleTitleResponse.ID = 38055;
        return RewardRoleTitleResponse;
    }());
    message.RewardRoleTitleResponse = RewardRoleTitleResponse;
    __reflect(RewardRoleTitleResponse.prototype, "message.RewardRoleTitleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉去新手引导请求
    // request QueryTeachInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryTeachInfoReqBody = (function () {
        function QueryTeachInfoReqBody() {
        }
        QueryTeachInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryTeachInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryTeachInfoReqBody;
    }());
    message.QueryTeachInfoReqBody = QueryTeachInfoReqBody;
    __reflect(QueryTeachInfoReqBody.prototype, "message.QueryTeachInfoReqBody", ["aone.AoneBody"]);
    var QueryTeachInfoRequest = (function () {
        function QueryTeachInfoRequest() {
            this.header = new aone.AoneReqHeader(QueryTeachInfoRequest.ID);
            this.body = new QueryTeachInfoReqBody();
        }
        QueryTeachInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryTeachInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryTeachInfoRequest.ID = 38060;
        return QueryTeachInfoRequest;
    }());
    message.QueryTeachInfoRequest = QueryTeachInfoRequest;
    __reflect(QueryTeachInfoRequest.prototype, "message.QueryTeachInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉去新手引导回复
    // response QueryTeachInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryTeachInfoRespBody = (function () {
        function QueryTeachInfoRespBody() {
            this.teachItems = [];
        }
        QueryTeachInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // teachItems
            if (decoder_.eof())
                return true;
            var teachItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < teachItems_count; i++) {
                this.teachItems.push(new message.TeachItem());
                if (!this.teachItems[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryTeachInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryTeachInfoRespBody;
    }());
    message.QueryTeachInfoRespBody = QueryTeachInfoRespBody;
    __reflect(QueryTeachInfoRespBody.prototype, "message.QueryTeachInfoRespBody", ["aone.AoneBody"]);
    var QueryTeachInfoResponse = (function () {
        function QueryTeachInfoResponse() {
            this.header = new aone.AoneRespHeader(QueryTeachInfoResponse.ID);
            this.body = new QueryTeachInfoRespBody();
        }
        QueryTeachInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryTeachInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryTeachInfoResponse.ID = 38061;
        return QueryTeachInfoResponse;
    }());
    message.QueryTeachInfoResponse = QueryTeachInfoResponse;
    __reflect(QueryTeachInfoResponse.prototype, "message.QueryTeachInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 保存新手引导请求
    // request SaveTeachInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SaveTeachInfoReqBody = (function () {
        function SaveTeachInfoReqBody() {
            this.teachItems = [];
        }
        SaveTeachInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SaveTeachInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // teachItems
            encoder.write_fixuint32(Object.keys(this.teachItems).length);
            for (var k in this.teachItems) {
                if (!this.teachItems[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SaveTeachInfoReqBody;
    }());
    message.SaveTeachInfoReqBody = SaveTeachInfoReqBody;
    __reflect(SaveTeachInfoReqBody.prototype, "message.SaveTeachInfoReqBody", ["aone.AoneBody"]);
    var SaveTeachInfoRequest = (function () {
        function SaveTeachInfoRequest() {
            this.header = new aone.AoneReqHeader(SaveTeachInfoRequest.ID);
            this.body = new SaveTeachInfoReqBody();
        }
        SaveTeachInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        SaveTeachInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SaveTeachInfoRequest.ID = 38062;
        return SaveTeachInfoRequest;
    }());
    message.SaveTeachInfoRequest = SaveTeachInfoRequest;
    __reflect(SaveTeachInfoRequest.prototype, "message.SaveTeachInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 保存新手引导回复
    // response SaveTeachInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SaveTeachInfoRespBody = (function () {
        function SaveTeachInfoRespBody() {
        }
        SaveTeachInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SaveTeachInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SaveTeachInfoRespBody;
    }());
    message.SaveTeachInfoRespBody = SaveTeachInfoRespBody;
    __reflect(SaveTeachInfoRespBody.prototype, "message.SaveTeachInfoRespBody", ["aone.AoneBody"]);
    var SaveTeachInfoResponse = (function () {
        function SaveTeachInfoResponse() {
            this.header = new aone.AoneRespHeader(SaveTeachInfoResponse.ID);
            this.body = new SaveTeachInfoRespBody();
        }
        SaveTeachInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SaveTeachInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        SaveTeachInfoResponse.ID = 38063;
        return SaveTeachInfoResponse;
    }());
    message.SaveTeachInfoResponse = SaveTeachInfoResponse;
    __reflect(SaveTeachInfoResponse.prototype, "message.SaveTeachInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 保存客户端设置请求
    // request SaveClientOperation
    ////////////////////////////////////////////////////////////////////////////////
    var SaveClientOperationReqBody = (function () {
        function SaveClientOperationReqBody() {
            this.clientOperation = 0; // 客户端设置(参见ClientOperation)
        }
        SaveClientOperationReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SaveClientOperationReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // clientOperation
            encoder.write_fixuint32(this.clientOperation);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SaveClientOperationReqBody;
    }());
    message.SaveClientOperationReqBody = SaveClientOperationReqBody;
    __reflect(SaveClientOperationReqBody.prototype, "message.SaveClientOperationReqBody", ["aone.AoneBody"]);
    var SaveClientOperationRequest = (function () {
        function SaveClientOperationRequest() {
            this.header = new aone.AoneReqHeader(SaveClientOperationRequest.ID);
            this.body = new SaveClientOperationReqBody();
        }
        SaveClientOperationRequest.prototype.parse_bytes = function (decoder) { return false; };
        SaveClientOperationRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SaveClientOperationRequest.ID = 38070;
        return SaveClientOperationRequest;
    }());
    message.SaveClientOperationRequest = SaveClientOperationRequest;
    __reflect(SaveClientOperationRequest.prototype, "message.SaveClientOperationRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 保存客户端设置回复
    // response SaveClientOperation
    ////////////////////////////////////////////////////////////////////////////////
    var SaveClientOperationRespBody = (function () {
        function SaveClientOperationRespBody() {
        }
        SaveClientOperationRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SaveClientOperationRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SaveClientOperationRespBody;
    }());
    message.SaveClientOperationRespBody = SaveClientOperationRespBody;
    __reflect(SaveClientOperationRespBody.prototype, "message.SaveClientOperationRespBody", ["aone.AoneBody"]);
    var SaveClientOperationResponse = (function () {
        function SaveClientOperationResponse() {
            this.header = new aone.AoneRespHeader(SaveClientOperationResponse.ID);
            this.body = new SaveClientOperationRespBody();
        }
        SaveClientOperationResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SaveClientOperationResponse.prototype.to_bytes = function (encoder) { return false; };
        SaveClientOperationResponse.ID = 38071;
        return SaveClientOperationResponse;
    }());
    message.SaveClientOperationResponse = SaveClientOperationResponse;
    __reflect(SaveClientOperationResponse.prototype, "message.SaveClientOperationResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 客户端报错日志请求
    // request ClientCoreRecord
    ////////////////////////////////////////////////////////////////////////////////
    var ClientCoreRecordReqBody = (function () {
        function ClientCoreRecordReqBody() {
            this.errorLine = ""; // 报错行号
            this.errorStack = ""; // 堆栈信息
            this.deviceInfo = new message.DeviceInfo(); // 机型信息
            this.appVersion = new message.AppVersionInfo(); // 版本信息
        }
        ClientCoreRecordReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ClientCoreRecordReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // errorLine
            encoder.write_string(this.errorLine);
            // errorStack
            encoder.write_string(this.errorStack);
            // deviceInfo
            this.deviceInfo.to_bytes(encoder);
            // appVersion
            this.appVersion.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ClientCoreRecordReqBody;
    }());
    message.ClientCoreRecordReqBody = ClientCoreRecordReqBody;
    __reflect(ClientCoreRecordReqBody.prototype, "message.ClientCoreRecordReqBody", ["aone.AoneBody"]);
    var ClientCoreRecordRequest = (function () {
        function ClientCoreRecordRequest() {
            this.header = new aone.AoneReqHeader(ClientCoreRecordRequest.ID);
            this.body = new ClientCoreRecordReqBody();
        }
        ClientCoreRecordRequest.prototype.parse_bytes = function (decoder) { return false; };
        ClientCoreRecordRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ClientCoreRecordRequest.ID = 38500;
        return ClientCoreRecordRequest;
    }());
    message.ClientCoreRecordRequest = ClientCoreRecordRequest;
    __reflect(ClientCoreRecordRequest.prototype, "message.ClientCoreRecordRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 客户端报错日志回复
    // response ClientCoreRecord
    ////////////////////////////////////////////////////////////////////////////////
    var ClientCoreRecordRespBody = (function () {
        function ClientCoreRecordRespBody() {
        }
        ClientCoreRecordRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        ClientCoreRecordRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ClientCoreRecordRespBody;
    }());
    message.ClientCoreRecordRespBody = ClientCoreRecordRespBody;
    __reflect(ClientCoreRecordRespBody.prototype, "message.ClientCoreRecordRespBody", ["aone.AoneBody"]);
    var ClientCoreRecordResponse = (function () {
        function ClientCoreRecordResponse() {
            this.header = new aone.AoneRespHeader(ClientCoreRecordResponse.ID);
            this.body = new ClientCoreRecordRespBody();
        }
        ClientCoreRecordResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ClientCoreRecordResponse.prototype.to_bytes = function (encoder) { return false; };
        ClientCoreRecordResponse.ID = 38501;
        return ClientCoreRecordResponse;
    }());
    message.ClientCoreRecordResponse = ClientCoreRecordResponse;
    __reflect(ClientCoreRecordResponse.prototype, "message.ClientCoreRecordResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 游戏内通过猎人币购买商品请求
    // request PayBackByHuntCoin
    ////////////////////////////////////////////////////////////////////////////////
    var PayBackByHuntCoinReqBody = (function () {
        function PayBackByHuntCoinReqBody() {
            this.index = "";
            this.count = 0;
        }
        PayBackByHuntCoinReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PayBackByHuntCoinReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_string(this.index);
            // count
            encoder.write_fixuint32(this.count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PayBackByHuntCoinReqBody;
    }());
    message.PayBackByHuntCoinReqBody = PayBackByHuntCoinReqBody;
    __reflect(PayBackByHuntCoinReqBody.prototype, "message.PayBackByHuntCoinReqBody", ["aone.AoneBody"]);
    var PayBackByHuntCoinRequest = (function () {
        function PayBackByHuntCoinRequest() {
            this.header = new aone.AoneReqHeader(PayBackByHuntCoinRequest.ID);
            this.body = new PayBackByHuntCoinReqBody();
        }
        PayBackByHuntCoinRequest.prototype.parse_bytes = function (decoder) { return false; };
        PayBackByHuntCoinRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PayBackByHuntCoinRequest.ID = 38502;
        return PayBackByHuntCoinRequest;
    }());
    message.PayBackByHuntCoinRequest = PayBackByHuntCoinRequest;
    __reflect(PayBackByHuntCoinRequest.prototype, "message.PayBackByHuntCoinRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 游戏内通过猎人币购买商品回复
    // response PayBackByHuntCoin
    ////////////////////////////////////////////////////////////////////////////////
    var PayBackByHuntCoinRespBody = (function () {
        function PayBackByHuntCoinRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        PayBackByHuntCoinRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        PayBackByHuntCoinRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PayBackByHuntCoinRespBody;
    }());
    message.PayBackByHuntCoinRespBody = PayBackByHuntCoinRespBody;
    __reflect(PayBackByHuntCoinRespBody.prototype, "message.PayBackByHuntCoinRespBody", ["aone.AoneBody"]);
    var PayBackByHuntCoinResponse = (function () {
        function PayBackByHuntCoinResponse() {
            this.header = new aone.AoneRespHeader(PayBackByHuntCoinResponse.ID);
            this.body = new PayBackByHuntCoinRespBody();
        }
        PayBackByHuntCoinResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PayBackByHuntCoinResponse.prototype.to_bytes = function (encoder) { return false; };
        PayBackByHuntCoinResponse.ID = 38503;
        return PayBackByHuntCoinResponse;
    }());
    message.PayBackByHuntCoinResponse = PayBackByHuntCoinResponse;
    __reflect(PayBackByHuntCoinResponse.prototype, "message.PayBackByHuntCoinResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(HeartBeatRequest.ID, function () { return new HeartBeatRequest(); });
    aone.MessageFactory.getInstance().register(HeartBeatResponse.ID, function () { return new HeartBeatResponse(); });
    aone.MessageFactory.getInstance().register(QueryRoleInfoRequest.ID, function () { return new QueryRoleInfoRequest(); });
    aone.MessageFactory.getInstance().register(QueryRoleInfoResponse.ID, function () { return new QueryRoleInfoResponse(); });
    aone.MessageFactory.getInstance().register(SetAgreeDetailRequest.ID, function () { return new SetAgreeDetailRequest(); });
    aone.MessageFactory.getInstance().register(SetAgreeDetailResponse.ID, function () { return new SetAgreeDetailResponse(); });
    aone.MessageFactory.getInstance().register(SetAgreeEnterRequest.ID, function () { return new SetAgreeEnterRequest(); });
    aone.MessageFactory.getInstance().register(SetAgreeEnterResponse.ID, function () { return new SetAgreeEnterResponse(); });
    aone.MessageFactory.getInstance().register(UsePropRequest.ID, function () { return new UsePropRequest(); });
    aone.MessageFactory.getInstance().register(UsePropResponse.ID, function () { return new UsePropResponse(); });
    aone.MessageFactory.getInstance().register(SellGoodsRequest.ID, function () { return new SellGoodsRequest(); });
    aone.MessageFactory.getInstance().register(SellGoodsResponse.ID, function () { return new SellGoodsResponse(); });
    aone.MessageFactory.getInstance().register(CheckProcessRequest.ID, function () { return new CheckProcessRequest(); });
    aone.MessageFactory.getInstance().register(CheckProcessResponse.ID, function () { return new CheckProcessResponse(); });
    aone.MessageFactory.getInstance().register(BuyPowerRequest.ID, function () { return new BuyPowerRequest(); });
    aone.MessageFactory.getInstance().register(BuyPowerResponse.ID, function () { return new BuyPowerResponse(); });
    aone.MessageFactory.getInstance().register(BuyPlateRequest.ID, function () { return new BuyPlateRequest(); });
    aone.MessageFactory.getInstance().register(BuyPlateResponse.ID, function () { return new BuyPlateResponse(); });
    aone.MessageFactory.getInstance().register(ModifyRoleNameRequest.ID, function () { return new ModifyRoleNameRequest(); });
    aone.MessageFactory.getInstance().register(ModifyRoleNameResponse.ID, function () { return new ModifyRoleNameResponse(); });
    aone.MessageFactory.getInstance().register(ModifyRolePicRequest.ID, function () { return new ModifyRolePicRequest(); });
    aone.MessageFactory.getInstance().register(ModifyRolePicResponse.ID, function () { return new ModifyRolePicResponse(); });
    aone.MessageFactory.getInstance().register(RewardRoleTitleRequest.ID, function () { return new RewardRoleTitleRequest(); });
    aone.MessageFactory.getInstance().register(RewardRoleTitleResponse.ID, function () { return new RewardRoleTitleResponse(); });
    aone.MessageFactory.getInstance().register(QueryTeachInfoRequest.ID, function () { return new QueryTeachInfoRequest(); });
    aone.MessageFactory.getInstance().register(QueryTeachInfoResponse.ID, function () { return new QueryTeachInfoResponse(); });
    aone.MessageFactory.getInstance().register(SaveTeachInfoRequest.ID, function () { return new SaveTeachInfoRequest(); });
    aone.MessageFactory.getInstance().register(SaveTeachInfoResponse.ID, function () { return new SaveTeachInfoResponse(); });
    aone.MessageFactory.getInstance().register(SaveClientOperationRequest.ID, function () { return new SaveClientOperationRequest(); });
    aone.MessageFactory.getInstance().register(SaveClientOperationResponse.ID, function () { return new SaveClientOperationResponse(); });
    aone.MessageFactory.getInstance().register(ClientCoreRecordRequest.ID, function () { return new ClientCoreRecordRequest(); });
    aone.MessageFactory.getInstance().register(ClientCoreRecordResponse.ID, function () { return new ClientCoreRecordResponse(); });
    aone.MessageFactory.getInstance().register(PayBackByHuntCoinRequest.ID, function () { return new PayBackByHuntCoinRequest(); });
    aone.MessageFactory.getInstance().register(PayBackByHuntCoinResponse.ID, function () { return new PayBackByHuntCoinResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_simulate.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 模拟协议，发布版本不参加编译
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 修改角色等级请求
    // request SimulateModifyRoleLevel
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateModifyRoleLevelReqBody = (function () {
        function SimulateModifyRoleLevelReqBody() {
            this.level = 0; // 指定等级
        }
        SimulateModifyRoleLevelReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateModifyRoleLevelReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // level
            encoder.write_fixuint32(this.level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateModifyRoleLevelReqBody;
    }());
    message.SimulateModifyRoleLevelReqBody = SimulateModifyRoleLevelReqBody;
    __reflect(SimulateModifyRoleLevelReqBody.prototype, "message.SimulateModifyRoleLevelReqBody", ["aone.AoneBody"]);
    var SimulateModifyRoleLevelRequest = (function () {
        function SimulateModifyRoleLevelRequest() {
            this.header = new aone.AoneReqHeader(SimulateModifyRoleLevelRequest.ID);
            this.body = new SimulateModifyRoleLevelReqBody();
        }
        SimulateModifyRoleLevelRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateModifyRoleLevelRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateModifyRoleLevelRequest.ID = 31000;
        return SimulateModifyRoleLevelRequest;
    }());
    message.SimulateModifyRoleLevelRequest = SimulateModifyRoleLevelRequest;
    __reflect(SimulateModifyRoleLevelRequest.prototype, "message.SimulateModifyRoleLevelRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改角色等级回复
    // response SimulateModifyRoleLevel
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateModifyRoleLevelRespBody = (function () {
        function SimulateModifyRoleLevelRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SimulateModifyRoleLevelRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateModifyRoleLevelRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateModifyRoleLevelRespBody;
    }());
    message.SimulateModifyRoleLevelRespBody = SimulateModifyRoleLevelRespBody;
    __reflect(SimulateModifyRoleLevelRespBody.prototype, "message.SimulateModifyRoleLevelRespBody", ["aone.AoneBody"]);
    var SimulateModifyRoleLevelResponse = (function () {
        function SimulateModifyRoleLevelResponse() {
            this.header = new aone.AoneRespHeader(SimulateModifyRoleLevelResponse.ID);
            this.body = new SimulateModifyRoleLevelRespBody();
        }
        SimulateModifyRoleLevelResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateModifyRoleLevelResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateModifyRoleLevelResponse.ID = 31001;
        return SimulateModifyRoleLevelResponse;
    }());
    message.SimulateModifyRoleLevelResponse = SimulateModifyRoleLevelResponse;
    __reflect(SimulateModifyRoleLevelResponse.prototype, "message.SimulateModifyRoleLevelResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改物品信息(包括资源)请求
    // request SimulateModifyGoods
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateModifyGoodsReqBody = (function () {
        function SimulateModifyGoodsReqBody() {
            this.goods = []; // 物品列表
        }
        SimulateModifyGoodsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateModifyGoodsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // goods
            encoder.write_fixuint32(Object.keys(this.goods).length);
            for (var k in this.goods) {
                if (!this.goods[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateModifyGoodsReqBody;
    }());
    message.SimulateModifyGoodsReqBody = SimulateModifyGoodsReqBody;
    __reflect(SimulateModifyGoodsReqBody.prototype, "message.SimulateModifyGoodsReqBody", ["aone.AoneBody"]);
    var SimulateModifyGoodsRequest = (function () {
        function SimulateModifyGoodsRequest() {
            this.header = new aone.AoneReqHeader(SimulateModifyGoodsRequest.ID);
            this.body = new SimulateModifyGoodsReqBody();
        }
        SimulateModifyGoodsRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateModifyGoodsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateModifyGoodsRequest.ID = 31002;
        return SimulateModifyGoodsRequest;
    }());
    message.SimulateModifyGoodsRequest = SimulateModifyGoodsRequest;
    __reflect(SimulateModifyGoodsRequest.prototype, "message.SimulateModifyGoodsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改物品信息(包括资源)回复
    // response SimulateModifyGoods
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateModifyGoodsRespBody = (function () {
        function SimulateModifyGoodsRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SimulateModifyGoodsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateModifyGoodsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateModifyGoodsRespBody;
    }());
    message.SimulateModifyGoodsRespBody = SimulateModifyGoodsRespBody;
    __reflect(SimulateModifyGoodsRespBody.prototype, "message.SimulateModifyGoodsRespBody", ["aone.AoneBody"]);
    var SimulateModifyGoodsResponse = (function () {
        function SimulateModifyGoodsResponse() {
            this.header = new aone.AoneRespHeader(SimulateModifyGoodsResponse.ID);
            this.body = new SimulateModifyGoodsRespBody();
        }
        SimulateModifyGoodsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateModifyGoodsResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateModifyGoodsResponse.ID = 31003;
        return SimulateModifyGoodsResponse;
    }());
    message.SimulateModifyGoodsResponse = SimulateModifyGoodsResponse;
    __reflect(SimulateModifyGoodsResponse.prototype, "message.SimulateModifyGoodsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 正常流程添加代币请求
    // request SimulateCharge
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateChargeReqBody = (function () {
        function SimulateChargeReqBody() {
            this.activity_index = 0; // 活动索引
            this.secret_mall = 0; // 神秘商店
            this.payIndex = 0; // 支付索引
        }
        SimulateChargeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateChargeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // activity_index
            encoder.write_fixuint32(this.activity_index);
            // secret_mall
            encoder.write_fixuint32(this.secret_mall);
            // payIndex
            encoder.write_fixuint32(this.payIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateChargeReqBody;
    }());
    message.SimulateChargeReqBody = SimulateChargeReqBody;
    __reflect(SimulateChargeReqBody.prototype, "message.SimulateChargeReqBody", ["aone.AoneBody"]);
    var SimulateChargeRequest = (function () {
        function SimulateChargeRequest() {
            this.header = new aone.AoneReqHeader(SimulateChargeRequest.ID);
            this.body = new SimulateChargeReqBody();
        }
        SimulateChargeRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateChargeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateChargeRequest.ID = 31004;
        return SimulateChargeRequest;
    }());
    message.SimulateChargeRequest = SimulateChargeRequest;
    __reflect(SimulateChargeRequest.prototype, "message.SimulateChargeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 正常流程添加代币回复
    // response SimulateCharge
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateChargeRespBody = (function () {
        function SimulateChargeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SimulateChargeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateChargeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateChargeRespBody;
    }());
    message.SimulateChargeRespBody = SimulateChargeRespBody;
    __reflect(SimulateChargeRespBody.prototype, "message.SimulateChargeRespBody", ["aone.AoneBody"]);
    var SimulateChargeResponse = (function () {
        function SimulateChargeResponse() {
            this.header = new aone.AoneRespHeader(SimulateChargeResponse.ID);
            this.body = new SimulateChargeRespBody();
        }
        SimulateChargeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateChargeResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateChargeResponse.ID = 31005;
        return SimulateChargeResponse;
    }());
    message.SimulateChargeResponse = SimulateChargeResponse;
    __reflect(SimulateChargeResponse.prototype, "message.SimulateChargeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改角色资源请求
    // request SimulateModifyRes
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateModifyResReqBody = (function () {
        function SimulateModifyResReqBody() {
            this.type = 0; // 资源类型
            this.count = 0; // 修改目标值
        }
        SimulateModifyResReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateModifyResReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // count
            encoder.write_fixuint32(this.count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateModifyResReqBody;
    }());
    message.SimulateModifyResReqBody = SimulateModifyResReqBody;
    __reflect(SimulateModifyResReqBody.prototype, "message.SimulateModifyResReqBody", ["aone.AoneBody"]);
    var SimulateModifyResRequest = (function () {
        function SimulateModifyResRequest() {
            this.header = new aone.AoneReqHeader(SimulateModifyResRequest.ID);
            this.body = new SimulateModifyResReqBody();
        }
        SimulateModifyResRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateModifyResRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateModifyResRequest.ID = 31006;
        return SimulateModifyResRequest;
    }());
    message.SimulateModifyResRequest = SimulateModifyResRequest;
    __reflect(SimulateModifyResRequest.prototype, "message.SimulateModifyResRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改角色资源回复
    // response SimulateModifyRes
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateModifyResRespBody = (function () {
        function SimulateModifyResRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SimulateModifyResRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateModifyResRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateModifyResRespBody;
    }());
    message.SimulateModifyResRespBody = SimulateModifyResRespBody;
    __reflect(SimulateModifyResRespBody.prototype, "message.SimulateModifyResRespBody", ["aone.AoneBody"]);
    var SimulateModifyResResponse = (function () {
        function SimulateModifyResResponse() {
            this.header = new aone.AoneRespHeader(SimulateModifyResResponse.ID);
            this.body = new SimulateModifyResRespBody();
        }
        SimulateModifyResResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateModifyResResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateModifyResResponse.ID = 31007;
        return SimulateModifyResResponse;
    }());
    message.SimulateModifyResResponse = SimulateModifyResResponse;
    __reflect(SimulateModifyResResponse.prototype, "message.SimulateModifyResResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除物品请求
    // request SimulateDeleteGoods
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateDeleteGoodsReqBody = (function () {
        function SimulateDeleteGoodsReqBody() {
            this.itemIds = [];
        }
        SimulateDeleteGoodsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateDeleteGoodsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // itemIds
            encoder.write_uint32_vector(this.itemIds);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateDeleteGoodsReqBody;
    }());
    message.SimulateDeleteGoodsReqBody = SimulateDeleteGoodsReqBody;
    __reflect(SimulateDeleteGoodsReqBody.prototype, "message.SimulateDeleteGoodsReqBody", ["aone.AoneBody"]);
    var SimulateDeleteGoodsRequest = (function () {
        function SimulateDeleteGoodsRequest() {
            this.header = new aone.AoneReqHeader(SimulateDeleteGoodsRequest.ID);
            this.body = new SimulateDeleteGoodsReqBody();
        }
        SimulateDeleteGoodsRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateDeleteGoodsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateDeleteGoodsRequest.ID = 31008;
        return SimulateDeleteGoodsRequest;
    }());
    message.SimulateDeleteGoodsRequest = SimulateDeleteGoodsRequest;
    __reflect(SimulateDeleteGoodsRequest.prototype, "message.SimulateDeleteGoodsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 删除物品回复
    // response SimulateDeleteGoods
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateDeleteGoodsRespBody = (function () {
        function SimulateDeleteGoodsRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SimulateDeleteGoodsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateDeleteGoodsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateDeleteGoodsRespBody;
    }());
    message.SimulateDeleteGoodsRespBody = SimulateDeleteGoodsRespBody;
    __reflect(SimulateDeleteGoodsRespBody.prototype, "message.SimulateDeleteGoodsRespBody", ["aone.AoneBody"]);
    var SimulateDeleteGoodsResponse = (function () {
        function SimulateDeleteGoodsResponse() {
            this.header = new aone.AoneRespHeader(SimulateDeleteGoodsResponse.ID);
            this.body = new SimulateDeleteGoodsRespBody();
        }
        SimulateDeleteGoodsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateDeleteGoodsResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateDeleteGoodsResponse.ID = 31009;
        return SimulateDeleteGoodsResponse;
    }());
    message.SimulateDeleteGoodsResponse = SimulateDeleteGoodsResponse;
    __reflect(SimulateDeleteGoodsResponse.prototype, "message.SimulateDeleteGoodsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改联盟等级请求
    // request SimulateModifyLeagueLevel
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateModifyLeagueLevelReqBody = (function () {
        function SimulateModifyLeagueLevelReqBody() {
            this.id = 0; // 联盟等级
            this.level = 0; // 指定等级
        }
        SimulateModifyLeagueLevelReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateModifyLeagueLevelReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            // level
            encoder.write_fixuint32(this.level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateModifyLeagueLevelReqBody;
    }());
    message.SimulateModifyLeagueLevelReqBody = SimulateModifyLeagueLevelReqBody;
    __reflect(SimulateModifyLeagueLevelReqBody.prototype, "message.SimulateModifyLeagueLevelReqBody", ["aone.AoneBody"]);
    var SimulateModifyLeagueLevelRequest = (function () {
        function SimulateModifyLeagueLevelRequest() {
            this.header = new aone.AoneReqHeader(SimulateModifyLeagueLevelRequest.ID);
            this.body = new SimulateModifyLeagueLevelReqBody();
        }
        SimulateModifyLeagueLevelRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateModifyLeagueLevelRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateModifyLeagueLevelRequest.ID = 31010;
        return SimulateModifyLeagueLevelRequest;
    }());
    message.SimulateModifyLeagueLevelRequest = SimulateModifyLeagueLevelRequest;
    __reflect(SimulateModifyLeagueLevelRequest.prototype, "message.SimulateModifyLeagueLevelRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改联盟等级回复
    // response SimulateModifyLeagueLevel
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateModifyLeagueLevelRespBody = (function () {
        function SimulateModifyLeagueLevelRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SimulateModifyLeagueLevelRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateModifyLeagueLevelRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateModifyLeagueLevelRespBody;
    }());
    message.SimulateModifyLeagueLevelRespBody = SimulateModifyLeagueLevelRespBody;
    __reflect(SimulateModifyLeagueLevelRespBody.prototype, "message.SimulateModifyLeagueLevelRespBody", ["aone.AoneBody"]);
    var SimulateModifyLeagueLevelResponse = (function () {
        function SimulateModifyLeagueLevelResponse() {
            this.header = new aone.AoneRespHeader(SimulateModifyLeagueLevelResponse.ID);
            this.body = new SimulateModifyLeagueLevelRespBody();
        }
        SimulateModifyLeagueLevelResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateModifyLeagueLevelResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateModifyLeagueLevelResponse.ID = 31011;
        return SimulateModifyLeagueLevelResponse;
    }());
    message.SimulateModifyLeagueLevelResponse = SimulateModifyLeagueLevelResponse;
    __reflect(SimulateModifyLeagueLevelResponse.prototype, "message.SimulateModifyLeagueLevelResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开启副本请求
    // request SimulateInstance
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateInstanceReqBody = (function () {
        function SimulateInstanceReqBody() {
            this.instanceId = 0;
        }
        SimulateInstanceReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateInstanceReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateInstanceReqBody;
    }());
    message.SimulateInstanceReqBody = SimulateInstanceReqBody;
    __reflect(SimulateInstanceReqBody.prototype, "message.SimulateInstanceReqBody", ["aone.AoneBody"]);
    var SimulateInstanceRequest = (function () {
        function SimulateInstanceRequest() {
            this.header = new aone.AoneReqHeader(SimulateInstanceRequest.ID);
            this.body = new SimulateInstanceReqBody();
        }
        SimulateInstanceRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateInstanceRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateInstanceRequest.ID = 31012;
        return SimulateInstanceRequest;
    }());
    message.SimulateInstanceRequest = SimulateInstanceRequest;
    __reflect(SimulateInstanceRequest.prototype, "message.SimulateInstanceRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开启副本回复
    // response SimulateInstance
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateInstanceRespBody = (function () {
        function SimulateInstanceRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SimulateInstanceRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateInstanceRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateInstanceRespBody;
    }());
    message.SimulateInstanceRespBody = SimulateInstanceRespBody;
    __reflect(SimulateInstanceRespBody.prototype, "message.SimulateInstanceRespBody", ["aone.AoneBody"]);
    var SimulateInstanceResponse = (function () {
        function SimulateInstanceResponse() {
            this.header = new aone.AoneRespHeader(SimulateInstanceResponse.ID);
            this.body = new SimulateInstanceRespBody();
        }
        SimulateInstanceResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateInstanceResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateInstanceResponse.ID = 31013;
        return SimulateInstanceResponse;
    }());
    message.SimulateInstanceResponse = SimulateInstanceResponse;
    __reflect(SimulateInstanceResponse.prototype, "message.SimulateInstanceResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 增加联盟活跃度请求
    // request SimulateLeagueEnliven
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueEnlivenReqBody = (function () {
        function SimulateLeagueEnlivenReqBody() {
            this.enliven = 0;
        }
        SimulateLeagueEnlivenReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueEnlivenReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // enliven
            encoder.write_fixuint32(this.enliven);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateLeagueEnlivenReqBody;
    }());
    message.SimulateLeagueEnlivenReqBody = SimulateLeagueEnlivenReqBody;
    __reflect(SimulateLeagueEnlivenReqBody.prototype, "message.SimulateLeagueEnlivenReqBody", ["aone.AoneBody"]);
    var SimulateLeagueEnlivenRequest = (function () {
        function SimulateLeagueEnlivenRequest() {
            this.header = new aone.AoneReqHeader(SimulateLeagueEnlivenRequest.ID);
            this.body = new SimulateLeagueEnlivenReqBody();
        }
        SimulateLeagueEnlivenRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueEnlivenRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateLeagueEnlivenRequest.ID = 31014;
        return SimulateLeagueEnlivenRequest;
    }());
    message.SimulateLeagueEnlivenRequest = SimulateLeagueEnlivenRequest;
    __reflect(SimulateLeagueEnlivenRequest.prototype, "message.SimulateLeagueEnlivenRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 增加联盟活跃度回复
    // response SimulateLeagueEnliven
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueEnlivenRespBody = (function () {
        function SimulateLeagueEnlivenRespBody() {
            this.leagueInfo = new message.LeagueInfo();
        }
        SimulateLeagueEnlivenRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // leagueInfo
            if (decoder_.eof())
                return true;
            if (!this.leagueInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateLeagueEnlivenRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateLeagueEnlivenRespBody;
    }());
    message.SimulateLeagueEnlivenRespBody = SimulateLeagueEnlivenRespBody;
    __reflect(SimulateLeagueEnlivenRespBody.prototype, "message.SimulateLeagueEnlivenRespBody", ["aone.AoneBody"]);
    var SimulateLeagueEnlivenResponse = (function () {
        function SimulateLeagueEnlivenResponse() {
            this.header = new aone.AoneRespHeader(SimulateLeagueEnlivenResponse.ID);
            this.body = new SimulateLeagueEnlivenRespBody();
        }
        SimulateLeagueEnlivenResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateLeagueEnlivenResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateLeagueEnlivenResponse.ID = 31015;
        return SimulateLeagueEnlivenResponse;
    }());
    message.SimulateLeagueEnlivenResponse = SimulateLeagueEnlivenResponse;
    __reflect(SimulateLeagueEnlivenResponse.prototype, "message.SimulateLeagueEnlivenResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟副本清楚请求
    // request SimulateLeagueInstanceClear
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueInstanceClearReqBody = (function () {
        function SimulateLeagueInstanceClearReqBody() {
        }
        SimulateLeagueInstanceClearReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueInstanceClearReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateLeagueInstanceClearReqBody;
    }());
    message.SimulateLeagueInstanceClearReqBody = SimulateLeagueInstanceClearReqBody;
    __reflect(SimulateLeagueInstanceClearReqBody.prototype, "message.SimulateLeagueInstanceClearReqBody", ["aone.AoneBody"]);
    var SimulateLeagueInstanceClearRequest = (function () {
        function SimulateLeagueInstanceClearRequest() {
            this.header = new aone.AoneReqHeader(SimulateLeagueInstanceClearRequest.ID);
            this.body = new SimulateLeagueInstanceClearReqBody();
        }
        SimulateLeagueInstanceClearRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueInstanceClearRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateLeagueInstanceClearRequest.ID = 31016;
        return SimulateLeagueInstanceClearRequest;
    }());
    message.SimulateLeagueInstanceClearRequest = SimulateLeagueInstanceClearRequest;
    __reflect(SimulateLeagueInstanceClearRequest.prototype, "message.SimulateLeagueInstanceClearRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟副本清楚回复
    // response SimulateLeagueInstanceClear
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueInstanceClearRespBody = (function () {
        function SimulateLeagueInstanceClearRespBody() {
        }
        SimulateLeagueInstanceClearRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SimulateLeagueInstanceClearRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateLeagueInstanceClearRespBody;
    }());
    message.SimulateLeagueInstanceClearRespBody = SimulateLeagueInstanceClearRespBody;
    __reflect(SimulateLeagueInstanceClearRespBody.prototype, "message.SimulateLeagueInstanceClearRespBody", ["aone.AoneBody"]);
    var SimulateLeagueInstanceClearResponse = (function () {
        function SimulateLeagueInstanceClearResponse() {
            this.header = new aone.AoneRespHeader(SimulateLeagueInstanceClearResponse.ID);
            this.body = new SimulateLeagueInstanceClearRespBody();
        }
        SimulateLeagueInstanceClearResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateLeagueInstanceClearResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateLeagueInstanceClearResponse.ID = 31017;
        return SimulateLeagueInstanceClearResponse;
    }());
    message.SimulateLeagueInstanceClearResponse = SimulateLeagueInstanceClearResponse;
    __reflect(SimulateLeagueInstanceClearResponse.prototype, "message.SimulateLeagueInstanceClearResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改神兵属性请求
    // request SimulateArtifact
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateArtifactReqBody = (function () {
        function SimulateArtifactReqBody() {
            this.artifactId = 0;
        }
        SimulateArtifactReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateArtifactReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // artifactId
            encoder.write_fixuint32(this.artifactId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateArtifactReqBody;
    }());
    message.SimulateArtifactReqBody = SimulateArtifactReqBody;
    __reflect(SimulateArtifactReqBody.prototype, "message.SimulateArtifactReqBody", ["aone.AoneBody"]);
    var SimulateArtifactRequest = (function () {
        function SimulateArtifactRequest() {
            this.header = new aone.AoneReqHeader(SimulateArtifactRequest.ID);
            this.body = new SimulateArtifactReqBody();
        }
        SimulateArtifactRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateArtifactRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateArtifactRequest.ID = 31020;
        return SimulateArtifactRequest;
    }());
    message.SimulateArtifactRequest = SimulateArtifactRequest;
    __reflect(SimulateArtifactRequest.prototype, "message.SimulateArtifactRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改神兵属性回复
    // response SimulateArtifact
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateArtifactRespBody = (function () {
        function SimulateArtifactRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SimulateArtifactRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateArtifactRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateArtifactRespBody;
    }());
    message.SimulateArtifactRespBody = SimulateArtifactRespBody;
    __reflect(SimulateArtifactRespBody.prototype, "message.SimulateArtifactRespBody", ["aone.AoneBody"]);
    var SimulateArtifactResponse = (function () {
        function SimulateArtifactResponse() {
            this.header = new aone.AoneRespHeader(SimulateArtifactResponse.ID);
            this.body = new SimulateArtifactRespBody();
        }
        SimulateArtifactResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateArtifactResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateArtifactResponse.ID = 31021;
        return SimulateArtifactResponse;
    }());
    message.SimulateArtifactResponse = SimulateArtifactResponse;
    __reflect(SimulateArtifactResponse.prototype, "message.SimulateArtifactResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改武将星级请求
    // request SimulateGenaralStar
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateGenaralStarReqBody = (function () {
        function SimulateGenaralStarReqBody() {
            this.generalId = 0;
            this.star_level = 0;
        }
        SimulateGenaralStarReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateGenaralStarReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // star_level
            encoder.write_fixuint32(this.star_level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateGenaralStarReqBody;
    }());
    message.SimulateGenaralStarReqBody = SimulateGenaralStarReqBody;
    __reflect(SimulateGenaralStarReqBody.prototype, "message.SimulateGenaralStarReqBody", ["aone.AoneBody"]);
    var SimulateGenaralStarRequest = (function () {
        function SimulateGenaralStarRequest() {
            this.header = new aone.AoneReqHeader(SimulateGenaralStarRequest.ID);
            this.body = new SimulateGenaralStarReqBody();
        }
        SimulateGenaralStarRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateGenaralStarRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateGenaralStarRequest.ID = 31022;
        return SimulateGenaralStarRequest;
    }());
    message.SimulateGenaralStarRequest = SimulateGenaralStarRequest;
    __reflect(SimulateGenaralStarRequest.prototype, "message.SimulateGenaralStarRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 修改武将星级回复
    // response SimulateGeneralStar
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateGeneralStarRespBody = (function () {
        function SimulateGeneralStarRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SimulateGeneralStarRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateGeneralStarRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateGeneralStarRespBody;
    }());
    message.SimulateGeneralStarRespBody = SimulateGeneralStarRespBody;
    __reflect(SimulateGeneralStarRespBody.prototype, "message.SimulateGeneralStarRespBody", ["aone.AoneBody"]);
    var SimulateGeneralStarResponse = (function () {
        function SimulateGeneralStarResponse() {
            this.header = new aone.AoneRespHeader(SimulateGeneralStarResponse.ID);
            this.body = new SimulateGeneralStarRespBody();
        }
        SimulateGeneralStarResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateGeneralStarResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateGeneralStarResponse.ID = 31023;
        return SimulateGeneralStarResponse;
    }());
    message.SimulateGeneralStarResponse = SimulateGeneralStarResponse;
    __reflect(SimulateGeneralStarResponse.prototype, "message.SimulateGeneralStarResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开启联盟副本请求
    // request SimulateLeagueInstance
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueInstanceReqBody = (function () {
        function SimulateLeagueInstanceReqBody() {
        }
        SimulateLeagueInstanceReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueInstanceReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateLeagueInstanceReqBody;
    }());
    message.SimulateLeagueInstanceReqBody = SimulateLeagueInstanceReqBody;
    __reflect(SimulateLeagueInstanceReqBody.prototype, "message.SimulateLeagueInstanceReqBody", ["aone.AoneBody"]);
    var SimulateLeagueInstanceRequest = (function () {
        function SimulateLeagueInstanceRequest() {
            this.header = new aone.AoneReqHeader(SimulateLeagueInstanceRequest.ID);
            this.body = new SimulateLeagueInstanceReqBody();
        }
        SimulateLeagueInstanceRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueInstanceRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateLeagueInstanceRequest.ID = 31026;
        return SimulateLeagueInstanceRequest;
    }());
    message.SimulateLeagueInstanceRequest = SimulateLeagueInstanceRequest;
    __reflect(SimulateLeagueInstanceRequest.prototype, "message.SimulateLeagueInstanceRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开启联盟副本回复
    // response SimulateLeagueInstance
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueInstanceRespBody = (function () {
        function SimulateLeagueInstanceRespBody() {
            this.info = new message.LeagueBase(); // 联盟基本信息
        }
        SimulateLeagueInstanceRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // info
            if (decoder_.eof())
                return true;
            if (!this.info.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateLeagueInstanceRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateLeagueInstanceRespBody;
    }());
    message.SimulateLeagueInstanceRespBody = SimulateLeagueInstanceRespBody;
    __reflect(SimulateLeagueInstanceRespBody.prototype, "message.SimulateLeagueInstanceRespBody", ["aone.AoneBody"]);
    var SimulateLeagueInstanceResponse = (function () {
        function SimulateLeagueInstanceResponse() {
            this.header = new aone.AoneRespHeader(SimulateLeagueInstanceResponse.ID);
            this.body = new SimulateLeagueInstanceRespBody();
        }
        SimulateLeagueInstanceResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateLeagueInstanceResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateLeagueInstanceResponse.ID = 31027;
        return SimulateLeagueInstanceResponse;
    }());
    message.SimulateLeagueInstanceResponse = SimulateLeagueInstanceResponse;
    __reflect(SimulateLeagueInstanceResponse.prototype, "message.SimulateLeagueInstanceResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 重新开启场景BOSS请求
    // request SimulateResetSceneBoss
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateResetSceneBossReqBody = (function () {
        function SimulateResetSceneBossReqBody() {
            this.time = 0; // 开启的时长，单位为秒 ，运行后两分钟之后开启
        }
        SimulateResetSceneBossReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateResetSceneBossReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // time
            encoder.write_fixuint32(this.time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateResetSceneBossReqBody;
    }());
    message.SimulateResetSceneBossReqBody = SimulateResetSceneBossReqBody;
    __reflect(SimulateResetSceneBossReqBody.prototype, "message.SimulateResetSceneBossReqBody", ["aone.AoneBody"]);
    var SimulateResetSceneBossRequest = (function () {
        function SimulateResetSceneBossRequest() {
            this.header = new aone.AoneReqHeader(SimulateResetSceneBossRequest.ID);
            this.body = new SimulateResetSceneBossReqBody();
        }
        SimulateResetSceneBossRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateResetSceneBossRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateResetSceneBossRequest.ID = 31028;
        return SimulateResetSceneBossRequest;
    }());
    message.SimulateResetSceneBossRequest = SimulateResetSceneBossRequest;
    __reflect(SimulateResetSceneBossRequest.prototype, "message.SimulateResetSceneBossRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 重新开启场景BOSS回复
    // response SimulateResetSceneBoss
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateResetSceneBossRespBody = (function () {
        function SimulateResetSceneBossRespBody() {
        }
        SimulateResetSceneBossRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SimulateResetSceneBossRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateResetSceneBossRespBody;
    }());
    message.SimulateResetSceneBossRespBody = SimulateResetSceneBossRespBody;
    __reflect(SimulateResetSceneBossRespBody.prototype, "message.SimulateResetSceneBossRespBody", ["aone.AoneBody"]);
    var SimulateResetSceneBossResponse = (function () {
        function SimulateResetSceneBossResponse() {
            this.header = new aone.AoneRespHeader(SimulateResetSceneBossResponse.ID);
            this.body = new SimulateResetSceneBossRespBody();
        }
        SimulateResetSceneBossResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateResetSceneBossResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateResetSceneBossResponse.ID = 31029;
        return SimulateResetSceneBossResponse;
    }());
    message.SimulateResetSceneBossResponse = SimulateResetSceneBossResponse;
    __reflect(SimulateResetSceneBossResponse.prototype, "message.SimulateResetSceneBossResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // H5拉取玩家充值信息请求
    // request SimulateH5QueryRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateH5QueryRoleInfoReqBody = (function () {
        function SimulateH5QueryRoleInfoReqBody() {
            this.role_id = 0;
        }
        SimulateH5QueryRoleInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateH5QueryRoleInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // role_id
            encoder.write_fixuint32(this.role_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateH5QueryRoleInfoReqBody;
    }());
    message.SimulateH5QueryRoleInfoReqBody = SimulateH5QueryRoleInfoReqBody;
    __reflect(SimulateH5QueryRoleInfoReqBody.prototype, "message.SimulateH5QueryRoleInfoReqBody", ["aone.AoneBody"]);
    var SimulateH5QueryRoleInfoRequest = (function () {
        function SimulateH5QueryRoleInfoRequest() {
            this.header = new aone.AoneReqHeader(SimulateH5QueryRoleInfoRequest.ID);
            this.body = new SimulateH5QueryRoleInfoReqBody();
        }
        SimulateH5QueryRoleInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateH5QueryRoleInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateH5QueryRoleInfoRequest.ID = 31040;
        return SimulateH5QueryRoleInfoRequest;
    }());
    message.SimulateH5QueryRoleInfoRequest = SimulateH5QueryRoleInfoRequest;
    __reflect(SimulateH5QueryRoleInfoRequest.prototype, "message.SimulateH5QueryRoleInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // H5拉取玩家充值信息回复
    // response SimulateH5QueryRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateH5QueryRoleInfoRespBody = (function () {
        function SimulateH5QueryRoleInfoRespBody() {
            this.h5_pay_info = new message.H5RolePayInfo();
        }
        SimulateH5QueryRoleInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // h5_pay_info
            if (decoder_.eof())
                return true;
            if (!this.h5_pay_info.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateH5QueryRoleInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateH5QueryRoleInfoRespBody;
    }());
    message.SimulateH5QueryRoleInfoRespBody = SimulateH5QueryRoleInfoRespBody;
    __reflect(SimulateH5QueryRoleInfoRespBody.prototype, "message.SimulateH5QueryRoleInfoRespBody", ["aone.AoneBody"]);
    var SimulateH5QueryRoleInfoResponse = (function () {
        function SimulateH5QueryRoleInfoResponse() {
            this.header = new aone.AoneRespHeader(SimulateH5QueryRoleInfoResponse.ID);
            this.body = new SimulateH5QueryRoleInfoRespBody();
        }
        SimulateH5QueryRoleInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateH5QueryRoleInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateH5QueryRoleInfoResponse.ID = 31041;
        return SimulateH5QueryRoleInfoResponse;
    }());
    message.SimulateH5QueryRoleInfoResponse = SimulateH5QueryRoleInfoResponse;
    __reflect(SimulateH5QueryRoleInfoResponse.prototype, "message.SimulateH5QueryRoleInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // H5领取累计充值奖励请求
    // request SimulateH5ReceiveChargeReward
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateH5ReceiveChargeRewardReqBody = (function () {
        function SimulateH5ReceiveChargeRewardReqBody() {
            this.role_id = 0;
            this.index = 0;
        }
        SimulateH5ReceiveChargeRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateH5ReceiveChargeRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateH5ReceiveChargeRewardReqBody;
    }());
    message.SimulateH5ReceiveChargeRewardReqBody = SimulateH5ReceiveChargeRewardReqBody;
    __reflect(SimulateH5ReceiveChargeRewardReqBody.prototype, "message.SimulateH5ReceiveChargeRewardReqBody", ["aone.AoneBody"]);
    var SimulateH5ReceiveChargeRewardRequest = (function () {
        function SimulateH5ReceiveChargeRewardRequest() {
            this.header = new aone.AoneReqHeader(SimulateH5ReceiveChargeRewardRequest.ID);
            this.body = new SimulateH5ReceiveChargeRewardReqBody();
        }
        SimulateH5ReceiveChargeRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateH5ReceiveChargeRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateH5ReceiveChargeRewardRequest.ID = 31042;
        return SimulateH5ReceiveChargeRewardRequest;
    }());
    message.SimulateH5ReceiveChargeRewardRequest = SimulateH5ReceiveChargeRewardRequest;
    __reflect(SimulateH5ReceiveChargeRewardRequest.prototype, "message.SimulateH5ReceiveChargeRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // H5领取累计充值奖励回复
    // response SimulateH5ReceiveChargeReward
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateH5ReceiveChargeRewardRespBody = (function () {
        function SimulateH5ReceiveChargeRewardRespBody() {
        }
        SimulateH5ReceiveChargeRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SimulateH5ReceiveChargeRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateH5ReceiveChargeRewardRespBody;
    }());
    message.SimulateH5ReceiveChargeRewardRespBody = SimulateH5ReceiveChargeRewardRespBody;
    __reflect(SimulateH5ReceiveChargeRewardRespBody.prototype, "message.SimulateH5ReceiveChargeRewardRespBody", ["aone.AoneBody"]);
    var SimulateH5ReceiveChargeRewardResponse = (function () {
        function SimulateH5ReceiveChargeRewardResponse() {
            this.header = new aone.AoneRespHeader(SimulateH5ReceiveChargeRewardResponse.ID);
            this.body = new SimulateH5ReceiveChargeRewardRespBody();
        }
        SimulateH5ReceiveChargeRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateH5ReceiveChargeRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateH5ReceiveChargeRewardResponse.ID = 31043;
        return SimulateH5ReceiveChargeRewardResponse;
    }());
    message.SimulateH5ReceiveChargeRewardResponse = SimulateH5ReceiveChargeRewardResponse;
    __reflect(SimulateH5ReceiveChargeRewardResponse.prototype, "message.SimulateH5ReceiveChargeRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战怪物请求
    // request SimulateChallengeMob
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateChallengeMobReqBody = (function () {
        function SimulateChallengeMobReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
            this.mobsId = 0; // 怪物Id
        }
        SimulateChallengeMobReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateChallengeMobReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // generals
            encoder.write_uint32_vector(this.generals);
            // reserves
            encoder.write_uint32_vector(this.reserves);
            // supports
            encoder.write_uint32_vector(this.supports);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateChallengeMobReqBody;
    }());
    message.SimulateChallengeMobReqBody = SimulateChallengeMobReqBody;
    __reflect(SimulateChallengeMobReqBody.prototype, "message.SimulateChallengeMobReqBody", ["aone.AoneBody"]);
    var SimulateChallengeMobRequest = (function () {
        function SimulateChallengeMobRequest() {
            this.header = new aone.AoneReqHeader(SimulateChallengeMobRequest.ID);
            this.body = new SimulateChallengeMobReqBody();
        }
        SimulateChallengeMobRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateChallengeMobRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateChallengeMobRequest.ID = 31100;
        return SimulateChallengeMobRequest;
    }());
    message.SimulateChallengeMobRequest = SimulateChallengeMobRequest;
    __reflect(SimulateChallengeMobRequest.prototype, "message.SimulateChallengeMobRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战怪物响应
    // response SimulateChallengeMob
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateChallengeMobRespBody = (function () {
        function SimulateChallengeMobRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        SimulateChallengeMobRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateChallengeMobRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateChallengeMobRespBody;
    }());
    message.SimulateChallengeMobRespBody = SimulateChallengeMobRespBody;
    __reflect(SimulateChallengeMobRespBody.prototype, "message.SimulateChallengeMobRespBody", ["aone.AoneBody"]);
    var SimulateChallengeMobResponse = (function () {
        function SimulateChallengeMobResponse() {
            this.header = new aone.AoneRespHeader(SimulateChallengeMobResponse.ID);
            this.body = new SimulateChallengeMobRespBody();
        }
        SimulateChallengeMobResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateChallengeMobResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateChallengeMobResponse.ID = 31101;
        return SimulateChallengeMobResponse;
    }());
    message.SimulateChallengeMobResponse = SimulateChallengeMobResponse;
    __reflect(SimulateChallengeMobResponse.prototype, "message.SimulateChallengeMobResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 伏牛寨挑战请求
    // request SimulateChallengeVillage
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateChallengeVillageReqBody = (function () {
        function SimulateChallengeVillageReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleType = 0; // 战斗类型
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.battleTime = 0; // 战斗时间
            this.totalDamage = 0; // 总伤害值
            this.maxCombo = 0; // 最大连击
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
        }
        SimulateChallengeVillageReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateChallengeVillageReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleType
            encoder.write_fixuint32(this.battleType);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // battleTime
            encoder.write_fixuint32(this.battleTime);
            // totalDamage
            encoder.write_fixuint32(this.totalDamage);
            // maxCombo
            encoder.write_fixuint32(this.maxCombo);
            // generals
            encoder.write_uint32_vector(this.generals);
            // reserves
            encoder.write_uint32_vector(this.reserves);
            // supports
            encoder.write_uint32_vector(this.supports);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateChallengeVillageReqBody;
    }());
    message.SimulateChallengeVillageReqBody = SimulateChallengeVillageReqBody;
    __reflect(SimulateChallengeVillageReqBody.prototype, "message.SimulateChallengeVillageReqBody", ["aone.AoneBody"]);
    var SimulateChallengeVillageRequest = (function () {
        function SimulateChallengeVillageRequest() {
            this.header = new aone.AoneReqHeader(SimulateChallengeVillageRequest.ID);
            this.body = new SimulateChallengeVillageReqBody();
        }
        SimulateChallengeVillageRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateChallengeVillageRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateChallengeVillageRequest.ID = 31102;
        return SimulateChallengeVillageRequest;
    }());
    message.SimulateChallengeVillageRequest = SimulateChallengeVillageRequest;
    __reflect(SimulateChallengeVillageRequest.prototype, "message.SimulateChallengeVillageRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 伏牛寨挑战回复
    // response SimulateChallengeVillage
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateChallengeVillageRespBody = (function () {
        function SimulateChallengeVillageRespBody() {
            this.addPerc = 0; // 加成比例
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        SimulateChallengeVillageRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // addPerc
            if (decoder_.eof())
                return true;
            this.addPerc = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateChallengeVillageRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateChallengeVillageRespBody;
    }());
    message.SimulateChallengeVillageRespBody = SimulateChallengeVillageRespBody;
    __reflect(SimulateChallengeVillageRespBody.prototype, "message.SimulateChallengeVillageRespBody", ["aone.AoneBody"]);
    var SimulateChallengeVillageResponse = (function () {
        function SimulateChallengeVillageResponse() {
            this.header = new aone.AoneRespHeader(SimulateChallengeVillageResponse.ID);
            this.body = new SimulateChallengeVillageRespBody();
        }
        SimulateChallengeVillageResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateChallengeVillageResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateChallengeVillageResponse.ID = 31103;
        return SimulateChallengeVillageResponse;
    }());
    message.SimulateChallengeVillageResponse = SimulateChallengeVillageResponse;
    __reflect(SimulateChallengeVillageResponse.prototype, "message.SimulateChallengeVillageResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯挑战请求
    // request SimulateLadderBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLadderBattleReqBody = (function () {
        function SimulateLadderBattleReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
            this.roleId = 0; // 角色Id
        }
        SimulateLadderBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLadderBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // generals
            encoder.write_uint32_vector(this.generals);
            // reserves
            encoder.write_uint32_vector(this.reserves);
            // supports
            encoder.write_uint32_vector(this.supports);
            // roleId
            encoder.write_fixuint32(this.roleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateLadderBattleReqBody;
    }());
    message.SimulateLadderBattleReqBody = SimulateLadderBattleReqBody;
    __reflect(SimulateLadderBattleReqBody.prototype, "message.SimulateLadderBattleReqBody", ["aone.AoneBody"]);
    var SimulateLadderBattleRequest = (function () {
        function SimulateLadderBattleRequest() {
            this.header = new aone.AoneReqHeader(SimulateLadderBattleRequest.ID);
            this.body = new SimulateLadderBattleReqBody();
        }
        SimulateLadderBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLadderBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateLadderBattleRequest.ID = 31104;
        return SimulateLadderBattleRequest;
    }());
    message.SimulateLadderBattleRequest = SimulateLadderBattleRequest;
    __reflect(SimulateLadderBattleRequest.prototype, "message.SimulateLadderBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 天梯挑战回复
    // response SimulateLadderBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLadderBattleRespBody = (function () {
        function SimulateLadderBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        SimulateLadderBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateLadderBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateLadderBattleRespBody;
    }());
    message.SimulateLadderBattleRespBody = SimulateLadderBattleRespBody;
    __reflect(SimulateLadderBattleRespBody.prototype, "message.SimulateLadderBattleRespBody", ["aone.AoneBody"]);
    var SimulateLadderBattleResponse = (function () {
        function SimulateLadderBattleResponse() {
            this.header = new aone.AoneRespHeader(SimulateLadderBattleResponse.ID);
            this.body = new SimulateLadderBattleRespBody();
        }
        SimulateLadderBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateLadderBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateLadderBattleResponse.ID = 31105;
        return SimulateLadderBattleResponse;
    }());
    message.SimulateLadderBattleResponse = SimulateLadderBattleResponse;
    __reflect(SimulateLadderBattleResponse.prototype, "message.SimulateLadderBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 爬塔挑战请求
    // request SimulateTowerChallenge
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateTowerChallengeReqBody = (function () {
        function SimulateTowerChallengeReqBody() {
            this.battleType = 0; // 战斗类型
            this.sequence = 0; // 战斗序号
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
            this.instanceId = 0; // 副本Id
        }
        SimulateTowerChallengeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateTowerChallengeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // battleType
            encoder.write_fixuint32(this.battleType);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // generals
            encoder.write_uint32_vector(this.generals);
            // reserves
            encoder.write_uint32_vector(this.reserves);
            // supports
            encoder.write_uint32_vector(this.supports);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateTowerChallengeReqBody;
    }());
    message.SimulateTowerChallengeReqBody = SimulateTowerChallengeReqBody;
    __reflect(SimulateTowerChallengeReqBody.prototype, "message.SimulateTowerChallengeReqBody", ["aone.AoneBody"]);
    var SimulateTowerChallengeRequest = (function () {
        function SimulateTowerChallengeRequest() {
            this.header = new aone.AoneReqHeader(SimulateTowerChallengeRequest.ID);
            this.body = new SimulateTowerChallengeReqBody();
        }
        SimulateTowerChallengeRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateTowerChallengeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateTowerChallengeRequest.ID = 31106;
        return SimulateTowerChallengeRequest;
    }());
    message.SimulateTowerChallengeRequest = SimulateTowerChallengeRequest;
    __reflect(SimulateTowerChallengeRequest.prototype, "message.SimulateTowerChallengeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 爬塔挑战回复
    // response SimulateTowerChallenge
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateTowerChallengeRespBody = (function () {
        function SimulateTowerChallengeRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        SimulateTowerChallengeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateTowerChallengeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateTowerChallengeRespBody;
    }());
    message.SimulateTowerChallengeRespBody = SimulateTowerChallengeRespBody;
    __reflect(SimulateTowerChallengeRespBody.prototype, "message.SimulateTowerChallengeRespBody", ["aone.AoneBody"]);
    var SimulateTowerChallengeResponse = (function () {
        function SimulateTowerChallengeResponse() {
            this.header = new aone.AoneRespHeader(SimulateTowerChallengeResponse.ID);
            this.body = new SimulateTowerChallengeRespBody();
        }
        SimulateTowerChallengeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateTowerChallengeResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateTowerChallengeResponse.ID = 31107;
        return SimulateTowerChallengeResponse;
    }());
    message.SimulateTowerChallengeResponse = SimulateTowerChallengeResponse;
    __reflect(SimulateTowerChallengeResponse.prototype, "message.SimulateTowerChallengeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 攻打通缉令请求
    // request SimulateWantedBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateWantedBattleReqBody = (function () {
        function SimulateWantedBattleReqBody() {
            this.wantedId = 0; // 通缉令Id
            this.sequence = 0; // 战斗序号
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
        }
        SimulateWantedBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateWantedBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // wantedId
            encoder.write_fixuint32(this.wantedId);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // generals
            encoder.write_uint32_vector(this.generals);
            // reserves
            encoder.write_uint32_vector(this.reserves);
            // supports
            encoder.write_uint32_vector(this.supports);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateWantedBattleReqBody;
    }());
    message.SimulateWantedBattleReqBody = SimulateWantedBattleReqBody;
    __reflect(SimulateWantedBattleReqBody.prototype, "message.SimulateWantedBattleReqBody", ["aone.AoneBody"]);
    var SimulateWantedBattleRequest = (function () {
        function SimulateWantedBattleRequest() {
            this.header = new aone.AoneReqHeader(SimulateWantedBattleRequest.ID);
            this.body = new SimulateWantedBattleReqBody();
        }
        SimulateWantedBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateWantedBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateWantedBattleRequest.ID = 31110;
        return SimulateWantedBattleRequest;
    }());
    message.SimulateWantedBattleRequest = SimulateWantedBattleRequest;
    __reflect(SimulateWantedBattleRequest.prototype, "message.SimulateWantedBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 攻打通缉令回复
    // response SimulateWantedBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateWantedBattleRespBody = (function () {
        function SimulateWantedBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        SimulateWantedBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateWantedBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateWantedBattleRespBody;
    }());
    message.SimulateWantedBattleRespBody = SimulateWantedBattleRespBody;
    __reflect(SimulateWantedBattleRespBody.prototype, "message.SimulateWantedBattleRespBody", ["aone.AoneBody"]);
    var SimulateWantedBattleResponse = (function () {
        function SimulateWantedBattleResponse() {
            this.header = new aone.AoneRespHeader(SimulateWantedBattleResponse.ID);
            this.body = new SimulateWantedBattleRespBody();
        }
        SimulateWantedBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateWantedBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateWantedBattleResponse.ID = 31111;
        return SimulateWantedBattleResponse;
    }());
    message.SimulateWantedBattleResponse = SimulateWantedBattleResponse;
    __reflect(SimulateWantedBattleResponse.prototype, "message.SimulateWantedBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 攻打特训请求
    // request SimulateTraining
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateTrainingReqBody = (function () {
        function SimulateTrainingReqBody() {
            this.sequence = 0; // 战斗序号
            this.mobsId = 0; // 怪物Id
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
        }
        SimulateTrainingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateTrainingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // mobsId
            encoder.write_fixuint32(this.mobsId);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // generals
            encoder.write_uint32_vector(this.generals);
            // reserves
            encoder.write_uint32_vector(this.reserves);
            // supports
            encoder.write_uint32_vector(this.supports);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateTrainingReqBody;
    }());
    message.SimulateTrainingReqBody = SimulateTrainingReqBody;
    __reflect(SimulateTrainingReqBody.prototype, "message.SimulateTrainingReqBody", ["aone.AoneBody"]);
    var SimulateTrainingRequest = (function () {
        function SimulateTrainingRequest() {
            this.header = new aone.AoneReqHeader(SimulateTrainingRequest.ID);
            this.body = new SimulateTrainingReqBody();
        }
        SimulateTrainingRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateTrainingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateTrainingRequest.ID = 31112;
        return SimulateTrainingRequest;
    }());
    message.SimulateTrainingRequest = SimulateTrainingRequest;
    __reflect(SimulateTrainingRequest.prototype, "message.SimulateTrainingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 攻打特训回复
    // response SimulateTraining
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateTrainingRespBody = (function () {
        function SimulateTrainingRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        SimulateTrainingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateTrainingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateTrainingRespBody;
    }());
    message.SimulateTrainingRespBody = SimulateTrainingRespBody;
    __reflect(SimulateTrainingRespBody.prototype, "message.SimulateTrainingRespBody", ["aone.AoneBody"]);
    var SimulateTrainingResponse = (function () {
        function SimulateTrainingResponse() {
            this.header = new aone.AoneRespHeader(SimulateTrainingResponse.ID);
            this.body = new SimulateTrainingRespBody();
        }
        SimulateTrainingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateTrainingResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateTrainingResponse.ID = 31113;
        return SimulateTrainingResponse;
    }());
    message.SimulateTrainingResponse = SimulateTrainingResponse;
    __reflect(SimulateTrainingResponse.prototype, "message.SimulateTrainingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟boss挑战请求
    // request SimulateLeagueBoss
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueBossReqBody = (function () {
        function SimulateLeagueBossReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
            this.totalDamage = 0; // 总伤害
        }
        SimulateLeagueBossReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueBossReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // generals
            encoder.write_uint32_vector(this.generals);
            // reserves
            encoder.write_uint32_vector(this.reserves);
            // supports
            encoder.write_uint32_vector(this.supports);
            // totalDamage
            encoder.write_fixuint32(this.totalDamage);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateLeagueBossReqBody;
    }());
    message.SimulateLeagueBossReqBody = SimulateLeagueBossReqBody;
    __reflect(SimulateLeagueBossReqBody.prototype, "message.SimulateLeagueBossReqBody", ["aone.AoneBody"]);
    var SimulateLeagueBossRequest = (function () {
        function SimulateLeagueBossRequest() {
            this.header = new aone.AoneReqHeader(SimulateLeagueBossRequest.ID);
            this.body = new SimulateLeagueBossReqBody();
        }
        SimulateLeagueBossRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueBossRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateLeagueBossRequest.ID = 31114;
        return SimulateLeagueBossRequest;
    }());
    message.SimulateLeagueBossRequest = SimulateLeagueBossRequest;
    __reflect(SimulateLeagueBossRequest.prototype, "message.SimulateLeagueBossRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 联盟boss挑战回复
    // response SimulateLeagueBoss
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueBossRespBody = (function () {
        function SimulateLeagueBossRespBody() {
            this.gameInfo = new message.GameInfo();
            this.is_kill = false; // 是否击杀
            this.bossHp = 0; // boss挑战后血量
            this.members = []; // 成员信息
            this.progresses = []; // 进程变化
        }
        SimulateLeagueBossRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // is_kill
            if (decoder_.eof())
                return true;
            this.is_kill = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // bossHp
            if (decoder_.eof())
                return true;
            this.bossHp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // members
            if (decoder_.eof())
                return true;
            var members_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < members_count; i++) {
                this.members.push(new message.MemberInfo());
                if (!this.members[i].parse_bytes(decoder_))
                    return false;
            }
            // progresses
            if (decoder_.eof())
                return true;
            var progresses_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < progresses_count; i++) {
                this.progresses.push(new message.ProgressInfo());
                if (!this.progresses[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateLeagueBossRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateLeagueBossRespBody;
    }());
    message.SimulateLeagueBossRespBody = SimulateLeagueBossRespBody;
    __reflect(SimulateLeagueBossRespBody.prototype, "message.SimulateLeagueBossRespBody", ["aone.AoneBody"]);
    var SimulateLeagueBossResponse = (function () {
        function SimulateLeagueBossResponse() {
            this.header = new aone.AoneRespHeader(SimulateLeagueBossResponse.ID);
            this.body = new SimulateLeagueBossRespBody();
        }
        SimulateLeagueBossResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateLeagueBossResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateLeagueBossResponse.ID = 31115;
        return SimulateLeagueBossResponse;
    }());
    message.SimulateLeagueBossResponse = SimulateLeagueBossResponse;
    __reflect(SimulateLeagueBossResponse.prototype, "message.SimulateLeagueBossResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战联盟副本请求
    // request SimulateLeagueInstanceBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueInstanceBattleReqBody = (function () {
        function SimulateLeagueInstanceBattleReqBody() {
            this.instanceId = 0; // 副本Id
            this.pos = 0; // 位置
            this.sequence = 0; // 战斗序号
            this.monstersCur = []; // 敌方当前信息
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.totalDamage = 0; // 总伤害值
            this.maxCombo = 0; // 最大连击
        }
        SimulateLeagueInstanceBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueInstanceBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // pos
            encoder.write_fixuint32(this.pos);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // monstersCur
            encoder.write_fixuint32(Object.keys(this.monstersCur).length);
            for (var k in this.monstersCur) {
                if (!this.monstersCur[k].to_bytes(encoder))
                    return false;
            }
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // totalDamage
            encoder.write_float64(this.totalDamage);
            // maxCombo
            encoder.write_fixuint32(this.maxCombo);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateLeagueInstanceBattleReqBody;
    }());
    message.SimulateLeagueInstanceBattleReqBody = SimulateLeagueInstanceBattleReqBody;
    __reflect(SimulateLeagueInstanceBattleReqBody.prototype, "message.SimulateLeagueInstanceBattleReqBody", ["aone.AoneBody"]);
    var SimulateLeagueInstanceBattleRequest = (function () {
        function SimulateLeagueInstanceBattleRequest() {
            this.header = new aone.AoneReqHeader(SimulateLeagueInstanceBattleRequest.ID);
            this.body = new SimulateLeagueInstanceBattleReqBody();
        }
        SimulateLeagueInstanceBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateLeagueInstanceBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateLeagueInstanceBattleRequest.ID = 31116;
        return SimulateLeagueInstanceBattleRequest;
    }());
    message.SimulateLeagueInstanceBattleRequest = SimulateLeagueInstanceBattleRequest;
    __reflect(SimulateLeagueInstanceBattleRequest.prototype, "message.SimulateLeagueInstanceBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战联盟副本回复
    // response SimulateLeagueInstanceBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateLeagueInstanceBattleRespBody = (function () {
        function SimulateLeagueInstanceBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
            this.stageInfos = []; // 副本信息
        }
        SimulateLeagueInstanceBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // stageInfos
            if (decoder_.eof())
                return true;
            var stageInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < stageInfos_count; i++) {
                this.stageInfos.push(new message.LeagueInstanceStageInfo());
                if (!this.stageInfos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateLeagueInstanceBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateLeagueInstanceBattleRespBody;
    }());
    message.SimulateLeagueInstanceBattleRespBody = SimulateLeagueInstanceBattleRespBody;
    __reflect(SimulateLeagueInstanceBattleRespBody.prototype, "message.SimulateLeagueInstanceBattleRespBody", ["aone.AoneBody"]);
    var SimulateLeagueInstanceBattleResponse = (function () {
        function SimulateLeagueInstanceBattleResponse() {
            this.header = new aone.AoneRespHeader(SimulateLeagueInstanceBattleResponse.ID);
            this.body = new SimulateLeagueInstanceBattleRespBody();
        }
        SimulateLeagueInstanceBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateLeagueInstanceBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateLeagueInstanceBattleResponse.ID = 31117;
        return SimulateLeagueInstanceBattleResponse;
    }());
    message.SimulateLeagueInstanceBattleResponse = SimulateLeagueInstanceBattleResponse;
    __reflect(SimulateLeagueInstanceBattleResponse.prototype, "message.SimulateLeagueInstanceBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 敌犯大本营挑战请求
    // request SimulateEnemyCampBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateEnemyCampBattleReqBody = (function () {
        function SimulateEnemyCampBattleReqBody() {
            this.enemyCampId = 0; // 敌犯大本营Id
            this.sequence = 0; // 战斗序号
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
            this.generals = []; // 参战武将
            this.reserves = []; // 替补武将
            this.supports = []; // 援助武将
        }
        SimulateEnemyCampBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateEnemyCampBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // enemyCampId
            encoder.write_fixuint32(this.enemyCampId);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            // generals
            encoder.write_uint32_vector(this.generals);
            // reserves
            encoder.write_uint32_vector(this.reserves);
            // supports
            encoder.write_uint32_vector(this.supports);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateEnemyCampBattleReqBody;
    }());
    message.SimulateEnemyCampBattleReqBody = SimulateEnemyCampBattleReqBody;
    __reflect(SimulateEnemyCampBattleReqBody.prototype, "message.SimulateEnemyCampBattleReqBody", ["aone.AoneBody"]);
    var SimulateEnemyCampBattleRequest = (function () {
        function SimulateEnemyCampBattleRequest() {
            this.header = new aone.AoneReqHeader(SimulateEnemyCampBattleRequest.ID);
            this.body = new SimulateEnemyCampBattleReqBody();
        }
        SimulateEnemyCampBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateEnemyCampBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateEnemyCampBattleRequest.ID = 31120;
        return SimulateEnemyCampBattleRequest;
    }());
    message.SimulateEnemyCampBattleRequest = SimulateEnemyCampBattleRequest;
    __reflect(SimulateEnemyCampBattleRequest.prototype, "message.SimulateEnemyCampBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 敌犯大本营挑战回复
    // response SimulateEnemyCampBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateEnemyCampBattleRespBody = (function () {
        function SimulateEnemyCampBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        SimulateEnemyCampBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateEnemyCampBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateEnemyCampBattleRespBody;
    }());
    message.SimulateEnemyCampBattleRespBody = SimulateEnemyCampBattleRespBody;
    __reflect(SimulateEnemyCampBattleRespBody.prototype, "message.SimulateEnemyCampBattleRespBody", ["aone.AoneBody"]);
    var SimulateEnemyCampBattleResponse = (function () {
        function SimulateEnemyCampBattleResponse() {
            this.header = new aone.AoneRespHeader(SimulateEnemyCampBattleResponse.ID);
            this.body = new SimulateEnemyCampBattleRespBody();
        }
        SimulateEnemyCampBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateEnemyCampBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateEnemyCampBattleResponse.ID = 31121;
        return SimulateEnemyCampBattleResponse;
    }());
    message.SimulateEnemyCampBattleResponse = SimulateEnemyCampBattleResponse;
    __reflect(SimulateEnemyCampBattleResponse.prototype, "message.SimulateEnemyCampBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将属性点挑战请求
    // request SimulateGeneralLifeStatBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateGeneralLifeStatBattleReqBody = (function () {
        function SimulateGeneralLifeStatBattleReqBody() {
            this.generalId = 0; // 武将id
            this.pos = 0; // 位子1~3
            this.statId = 0; // 属性点id
            this.sequence = 0; // 战斗序号
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
        }
        SimulateGeneralLifeStatBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateGeneralLifeStatBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // generalId
            encoder.write_fixuint32(this.generalId);
            // pos
            encoder.write_fixuint32(this.pos);
            // statId
            encoder.write_fixuint32(this.statId);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateGeneralLifeStatBattleReqBody;
    }());
    message.SimulateGeneralLifeStatBattleReqBody = SimulateGeneralLifeStatBattleReqBody;
    __reflect(SimulateGeneralLifeStatBattleReqBody.prototype, "message.SimulateGeneralLifeStatBattleReqBody", ["aone.AoneBody"]);
    var SimulateGeneralLifeStatBattleRequest = (function () {
        function SimulateGeneralLifeStatBattleRequest() {
            this.header = new aone.AoneReqHeader(SimulateGeneralLifeStatBattleRequest.ID);
            this.body = new SimulateGeneralLifeStatBattleReqBody();
        }
        SimulateGeneralLifeStatBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateGeneralLifeStatBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateGeneralLifeStatBattleRequest.ID = 31122;
        return SimulateGeneralLifeStatBattleRequest;
    }());
    message.SimulateGeneralLifeStatBattleRequest = SimulateGeneralLifeStatBattleRequest;
    __reflect(SimulateGeneralLifeStatBattleRequest.prototype, "message.SimulateGeneralLifeStatBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 武将属性点挑战回复
    // response SimulateGeneralLifeStatBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateGeneralLifeStatBattleRespBody = (function () {
        function SimulateGeneralLifeStatBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        SimulateGeneralLifeStatBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SimulateGeneralLifeStatBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateGeneralLifeStatBattleRespBody;
    }());
    message.SimulateGeneralLifeStatBattleRespBody = SimulateGeneralLifeStatBattleRespBody;
    __reflect(SimulateGeneralLifeStatBattleRespBody.prototype, "message.SimulateGeneralLifeStatBattleRespBody", ["aone.AoneBody"]);
    var SimulateGeneralLifeStatBattleResponse = (function () {
        function SimulateGeneralLifeStatBattleResponse() {
            this.header = new aone.AoneRespHeader(SimulateGeneralLifeStatBattleResponse.ID);
            this.body = new SimulateGeneralLifeStatBattleRespBody();
        }
        SimulateGeneralLifeStatBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateGeneralLifeStatBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateGeneralLifeStatBattleResponse.ID = 31123;
        return SimulateGeneralLifeStatBattleResponse;
    }());
    message.SimulateGeneralLifeStatBattleResponse = SimulateGeneralLifeStatBattleResponse;
    __reflect(SimulateGeneralLifeStatBattleResponse.prototype, "message.SimulateGeneralLifeStatBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 跨服挑战请求
    // request SimulateCraftBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateCraftBattleReqBody = (function () {
        function SimulateCraftBattleReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleResult = 0; // 战斗结果
            this.battleStar = 0; // 战斗星级
        }
        SimulateCraftBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SimulateCraftBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleResult
            encoder.write_fixuint32(this.battleResult);
            // battleStar
            encoder.write_fixuint32(this.battleStar);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SimulateCraftBattleReqBody;
    }());
    message.SimulateCraftBattleReqBody = SimulateCraftBattleReqBody;
    __reflect(SimulateCraftBattleReqBody.prototype, "message.SimulateCraftBattleReqBody", ["aone.AoneBody"]);
    var SimulateCraftBattleRequest = (function () {
        function SimulateCraftBattleRequest() {
            this.header = new aone.AoneReqHeader(SimulateCraftBattleRequest.ID);
            this.body = new SimulateCraftBattleReqBody();
        }
        SimulateCraftBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        SimulateCraftBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SimulateCraftBattleRequest.ID = 31124;
        return SimulateCraftBattleRequest;
    }());
    message.SimulateCraftBattleRequest = SimulateCraftBattleRequest;
    __reflect(SimulateCraftBattleRequest.prototype, "message.SimulateCraftBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 跨服挑战回复
    // response SimulateCraftBattle
    ////////////////////////////////////////////////////////////////////////////////
    var SimulateCraftBattleRespBody = (function () {
        function SimulateCraftBattleRespBody() {
            this.craft_result = 0; // 挑战结果0未出结果1胜利2失败
            this.craft_score = 0; // 跨服战积分
            this.craft_rank = 0; // 跨服战排名
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
            this.leftFormation = []; // 未开局左侧信息
            this.rightFormation = []; // 未开局右侧信息
        }
        SimulateCraftBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // craft_result
            if (decoder_.eof())
                return true;
            this.craft_result = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // craft_score
            if (decoder_.eof())
                return true;
            this.craft_score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // craft_rank
            if (decoder_.eof())
                return true;
            this.craft_rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // leftFormation
            if (decoder_.eof())
                return true;
            var leftFormation_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < leftFormation_count; i++) {
                this.leftFormation.push(new message.SimpleFormationInfo());
                if (!this.leftFormation[i].parse_bytes(decoder_))
                    return false;
            }
            // rightFormation
            if (decoder_.eof())
                return true;
            var rightFormation_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rightFormation_count; i++) {
                this.rightFormation.push(new message.SimpleFormationInfo());
                if (!this.rightFormation[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateCraftBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SimulateCraftBattleRespBody;
    }());
    message.SimulateCraftBattleRespBody = SimulateCraftBattleRespBody;
    __reflect(SimulateCraftBattleRespBody.prototype, "message.SimulateCraftBattleRespBody", ["aone.AoneBody"]);
    var SimulateCraftBattleResponse = (function () {
        function SimulateCraftBattleResponse() {
            this.header = new aone.AoneRespHeader(SimulateCraftBattleResponse.ID);
            this.body = new SimulateCraftBattleRespBody();
        }
        SimulateCraftBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SimulateCraftBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        SimulateCraftBattleResponse.ID = 31125;
        return SimulateCraftBattleResponse;
    }());
    message.SimulateCraftBattleResponse = SimulateCraftBattleResponse;
    __reflect(SimulateCraftBattleResponse.prototype, "message.SimulateCraftBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(SimulateModifyRoleLevelRequest.ID, function () { return new SimulateModifyRoleLevelRequest(); });
    aone.MessageFactory.getInstance().register(SimulateModifyRoleLevelResponse.ID, function () { return new SimulateModifyRoleLevelResponse(); });
    aone.MessageFactory.getInstance().register(SimulateModifyGoodsRequest.ID, function () { return new SimulateModifyGoodsRequest(); });
    aone.MessageFactory.getInstance().register(SimulateModifyGoodsResponse.ID, function () { return new SimulateModifyGoodsResponse(); });
    aone.MessageFactory.getInstance().register(SimulateChargeRequest.ID, function () { return new SimulateChargeRequest(); });
    aone.MessageFactory.getInstance().register(SimulateChargeResponse.ID, function () { return new SimulateChargeResponse(); });
    aone.MessageFactory.getInstance().register(SimulateModifyResRequest.ID, function () { return new SimulateModifyResRequest(); });
    aone.MessageFactory.getInstance().register(SimulateModifyResResponse.ID, function () { return new SimulateModifyResResponse(); });
    aone.MessageFactory.getInstance().register(SimulateDeleteGoodsRequest.ID, function () { return new SimulateDeleteGoodsRequest(); });
    aone.MessageFactory.getInstance().register(SimulateDeleteGoodsResponse.ID, function () { return new SimulateDeleteGoodsResponse(); });
    aone.MessageFactory.getInstance().register(SimulateModifyLeagueLevelRequest.ID, function () { return new SimulateModifyLeagueLevelRequest(); });
    aone.MessageFactory.getInstance().register(SimulateModifyLeagueLevelResponse.ID, function () { return new SimulateModifyLeagueLevelResponse(); });
    aone.MessageFactory.getInstance().register(SimulateInstanceRequest.ID, function () { return new SimulateInstanceRequest(); });
    aone.MessageFactory.getInstance().register(SimulateInstanceResponse.ID, function () { return new SimulateInstanceResponse(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueEnlivenRequest.ID, function () { return new SimulateLeagueEnlivenRequest(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueEnlivenResponse.ID, function () { return new SimulateLeagueEnlivenResponse(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueInstanceClearRequest.ID, function () { return new SimulateLeagueInstanceClearRequest(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueInstanceClearResponse.ID, function () { return new SimulateLeagueInstanceClearResponse(); });
    aone.MessageFactory.getInstance().register(SimulateArtifactRequest.ID, function () { return new SimulateArtifactRequest(); });
    aone.MessageFactory.getInstance().register(SimulateArtifactResponse.ID, function () { return new SimulateArtifactResponse(); });
    aone.MessageFactory.getInstance().register(SimulateGenaralStarRequest.ID, function () { return new SimulateGenaralStarRequest(); });
    aone.MessageFactory.getInstance().register(SimulateGeneralStarResponse.ID, function () { return new SimulateGeneralStarResponse(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueInstanceRequest.ID, function () { return new SimulateLeagueInstanceRequest(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueInstanceResponse.ID, function () { return new SimulateLeagueInstanceResponse(); });
    aone.MessageFactory.getInstance().register(SimulateResetSceneBossRequest.ID, function () { return new SimulateResetSceneBossRequest(); });
    aone.MessageFactory.getInstance().register(SimulateResetSceneBossResponse.ID, function () { return new SimulateResetSceneBossResponse(); });
    aone.MessageFactory.getInstance().register(SimulateH5QueryRoleInfoRequest.ID, function () { return new SimulateH5QueryRoleInfoRequest(); });
    aone.MessageFactory.getInstance().register(SimulateH5QueryRoleInfoResponse.ID, function () { return new SimulateH5QueryRoleInfoResponse(); });
    aone.MessageFactory.getInstance().register(SimulateH5ReceiveChargeRewardRequest.ID, function () { return new SimulateH5ReceiveChargeRewardRequest(); });
    aone.MessageFactory.getInstance().register(SimulateH5ReceiveChargeRewardResponse.ID, function () { return new SimulateH5ReceiveChargeRewardResponse(); });
    aone.MessageFactory.getInstance().register(SimulateChallengeMobRequest.ID, function () { return new SimulateChallengeMobRequest(); });
    aone.MessageFactory.getInstance().register(SimulateChallengeMobResponse.ID, function () { return new SimulateChallengeMobResponse(); });
    aone.MessageFactory.getInstance().register(SimulateChallengeVillageRequest.ID, function () { return new SimulateChallengeVillageRequest(); });
    aone.MessageFactory.getInstance().register(SimulateChallengeVillageResponse.ID, function () { return new SimulateChallengeVillageResponse(); });
    aone.MessageFactory.getInstance().register(SimulateLadderBattleRequest.ID, function () { return new SimulateLadderBattleRequest(); });
    aone.MessageFactory.getInstance().register(SimulateLadderBattleResponse.ID, function () { return new SimulateLadderBattleResponse(); });
    aone.MessageFactory.getInstance().register(SimulateTowerChallengeRequest.ID, function () { return new SimulateTowerChallengeRequest(); });
    aone.MessageFactory.getInstance().register(SimulateTowerChallengeResponse.ID, function () { return new SimulateTowerChallengeResponse(); });
    aone.MessageFactory.getInstance().register(SimulateWantedBattleRequest.ID, function () { return new SimulateWantedBattleRequest(); });
    aone.MessageFactory.getInstance().register(SimulateWantedBattleResponse.ID, function () { return new SimulateWantedBattleResponse(); });
    aone.MessageFactory.getInstance().register(SimulateTrainingRequest.ID, function () { return new SimulateTrainingRequest(); });
    aone.MessageFactory.getInstance().register(SimulateTrainingResponse.ID, function () { return new SimulateTrainingResponse(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueBossRequest.ID, function () { return new SimulateLeagueBossRequest(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueBossResponse.ID, function () { return new SimulateLeagueBossResponse(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueInstanceBattleRequest.ID, function () { return new SimulateLeagueInstanceBattleRequest(); });
    aone.MessageFactory.getInstance().register(SimulateLeagueInstanceBattleResponse.ID, function () { return new SimulateLeagueInstanceBattleResponse(); });
    aone.MessageFactory.getInstance().register(SimulateEnemyCampBattleRequest.ID, function () { return new SimulateEnemyCampBattleRequest(); });
    aone.MessageFactory.getInstance().register(SimulateEnemyCampBattleResponse.ID, function () { return new SimulateEnemyCampBattleResponse(); });
    aone.MessageFactory.getInstance().register(SimulateGeneralLifeStatBattleRequest.ID, function () { return new SimulateGeneralLifeStatBattleRequest(); });
    aone.MessageFactory.getInstance().register(SimulateGeneralLifeStatBattleResponse.ID, function () { return new SimulateGeneralLifeStatBattleResponse(); });
    aone.MessageFactory.getInstance().register(SimulateCraftBattleRequest.ID, function () { return new SimulateCraftBattleRequest(); });
    aone.MessageFactory.getInstance().register(SimulateCraftBattleResponse.ID, function () { return new SimulateCraftBattleResponse(); });
})(message || (message = {}));
//Date: 2019-2
//File: msg_cg_singlecraft.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了个人跨服战
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // struct CraftRoleInfoChunk
    ////////////////////////////////////////////////////////////////////////////////
    var CraftRoleInfoChunk = (function () {
        function CraftRoleInfoChunk() {
            this.roles = [];
        }
        CraftRoleInfoChunk.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roles
            if (decoder_.eof())
                return true;
            var roles_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roles_count; i++) {
                this.roles.push(new message.CraftRoleInfo());
                if (!this.roles[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftRoleInfoChunk.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roles
            encoder.write_fixuint32(Object.keys(this.roles).length);
            for (var k in this.roles) {
                if (!this.roles[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftRoleInfoChunk;
    }());
    message.CraftRoleInfoChunk = CraftRoleInfoChunk;
    __reflect(CraftRoleInfoChunk.prototype, "message.CraftRoleInfoChunk", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取挑战列表请求
    // request CraftQueryList
    ////////////////////////////////////////////////////////////////////////////////
    var CraftQueryListReqBody = (function () {
        function CraftQueryListReqBody() {
            this.is_refresh = false; // 是否是更换对手
        }
        CraftQueryListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CraftQueryListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_refresh
            encoder.write_bool(this.is_refresh);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftQueryListReqBody;
    }());
    message.CraftQueryListReqBody = CraftQueryListReqBody;
    __reflect(CraftQueryListReqBody.prototype, "message.CraftQueryListReqBody", ["aone.AoneBody"]);
    var CraftQueryListRequest = (function () {
        function CraftQueryListRequest() {
            this.header = new aone.AoneReqHeader(CraftQueryListRequest.ID);
            this.body = new CraftQueryListReqBody();
        }
        CraftQueryListRequest.prototype.parse_bytes = function (decoder) { return false; };
        CraftQueryListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CraftQueryListRequest.ID = 39400;
        return CraftQueryListRequest;
    }());
    message.CraftQueryListRequest = CraftQueryListRequest;
    __reflect(CraftQueryListRequest.prototype, "message.CraftQueryListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取挑战列表回复
    // response CraftQueryList
    ////////////////////////////////////////////////////////////////////////////////
    var CraftQueryListRespBody = (function () {
        function CraftQueryListRespBody() {
            this.index = 0; // 当前轮数
            this.roleinfos = [];
            this.score = 0;
            this.rank = 0;
            this.rank_self = 0; // 本服排名
            this.zone = 0; // 赛区
            this.group_name = [];
        }
        CraftQueryListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roleinfos
            if (decoder_.eof())
                return true;
            var roleinfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roleinfos_count; i++) {
                this.roleinfos.push(new message.CraftRoleInfo());
                if (!this.roleinfos[i].parse_bytes(decoder_))
                    return false;
            }
            // score
            if (decoder_.eof())
                return true;
            this.score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank_self
            if (decoder_.eof())
                return true;
            this.rank_self = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // zone
            if (decoder_.eof())
                return true;
            this.zone = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CraftQueryListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CraftQueryListRespBody;
    }());
    message.CraftQueryListRespBody = CraftQueryListRespBody;
    __reflect(CraftQueryListRespBody.prototype, "message.CraftQueryListRespBody", ["aone.AoneBody"]);
    var CraftQueryListResponse = (function () {
        function CraftQueryListResponse() {
            this.header = new aone.AoneRespHeader(CraftQueryListResponse.ID);
            this.body = new CraftQueryListRespBody();
        }
        CraftQueryListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftQueryListResponse.prototype.to_bytes = function (encoder) { return false; };
        CraftQueryListResponse.ID = 39401;
        return CraftQueryListResponse;
    }());
    message.CraftQueryListResponse = CraftQueryListResponse;
    __reflect(CraftQueryListResponse.prototype, "message.CraftQueryListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询对手详细信息请求
    // request CraftQueryDetail
    ////////////////////////////////////////////////////////////////////////////////
    var CraftQueryDetailReqBody = (function () {
        function CraftQueryDetailReqBody() {
            this.roleId = 0;
        }
        CraftQueryDetailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CraftQueryDetailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftQueryDetailReqBody;
    }());
    message.CraftQueryDetailReqBody = CraftQueryDetailReqBody;
    __reflect(CraftQueryDetailReqBody.prototype, "message.CraftQueryDetailReqBody", ["aone.AoneBody"]);
    var CraftQueryDetailRequest = (function () {
        function CraftQueryDetailRequest() {
            this.header = new aone.AoneReqHeader(CraftQueryDetailRequest.ID);
            this.body = new CraftQueryDetailReqBody();
        }
        CraftQueryDetailRequest.prototype.parse_bytes = function (decoder) { return false; };
        CraftQueryDetailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CraftQueryDetailRequest.ID = 39402;
        return CraftQueryDetailRequest;
    }());
    message.CraftQueryDetailRequest = CraftQueryDetailRequest;
    __reflect(CraftQueryDetailRequest.prototype, "message.CraftQueryDetailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询对手详细信息回复
    // response CraftQueryDetail
    ////////////////////////////////////////////////////////////////////////////////
    var CraftQueryDetailRespBody = (function () {
        function CraftQueryDetailRespBody() {
            this.formations = []; // 对方阵型信息
        }
        CraftQueryDetailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            var formations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formations_count; i++) {
                this.formations.push(new message.CraftFormationInfo());
                if (!this.formations[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftQueryDetailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CraftQueryDetailRespBody;
    }());
    message.CraftQueryDetailRespBody = CraftQueryDetailRespBody;
    __reflect(CraftQueryDetailRespBody.prototype, "message.CraftQueryDetailRespBody", ["aone.AoneBody"]);
    var CraftQueryDetailResponse = (function () {
        function CraftQueryDetailResponse() {
            this.header = new aone.AoneRespHeader(CraftQueryDetailResponse.ID);
            this.body = new CraftQueryDetailRespBody();
        }
        CraftQueryDetailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftQueryDetailResponse.prototype.to_bytes = function (encoder) { return false; };
        CraftQueryDetailResponse.ID = 39403;
        return CraftQueryDetailResponse;
    }());
    message.CraftQueryDetailResponse = CraftQueryDetailResponse;
    __reflect(CraftQueryDetailResponse.prototype, "message.CraftQueryDetailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买挑战次数请求
    // request CraftBuyTime
    ////////////////////////////////////////////////////////////////////////////////
    var CraftBuyTimeReqBody = (function () {
        function CraftBuyTimeReqBody() {
        }
        CraftBuyTimeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CraftBuyTimeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftBuyTimeReqBody;
    }());
    message.CraftBuyTimeReqBody = CraftBuyTimeReqBody;
    __reflect(CraftBuyTimeReqBody.prototype, "message.CraftBuyTimeReqBody", ["aone.AoneBody"]);
    var CraftBuyTimeRequest = (function () {
        function CraftBuyTimeRequest() {
            this.header = new aone.AoneReqHeader(CraftBuyTimeRequest.ID);
            this.body = new CraftBuyTimeReqBody();
        }
        CraftBuyTimeRequest.prototype.parse_bytes = function (decoder) { return false; };
        CraftBuyTimeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CraftBuyTimeRequest.ID = 39404;
        return CraftBuyTimeRequest;
    }());
    message.CraftBuyTimeRequest = CraftBuyTimeRequest;
    __reflect(CraftBuyTimeRequest.prototype, "message.CraftBuyTimeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买挑战次数回复
    // response CraftBuyTime
    ////////////////////////////////////////////////////////////////////////////////
    var CraftBuyTimeRespBody = (function () {
        function CraftBuyTimeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        CraftBuyTimeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        CraftBuyTimeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CraftBuyTimeRespBody;
    }());
    message.CraftBuyTimeRespBody = CraftBuyTimeRespBody;
    __reflect(CraftBuyTimeRespBody.prototype, "message.CraftBuyTimeRespBody", ["aone.AoneBody"]);
    var CraftBuyTimeResponse = (function () {
        function CraftBuyTimeResponse() {
            this.header = new aone.AoneRespHeader(CraftBuyTimeResponse.ID);
            this.body = new CraftBuyTimeRespBody();
        }
        CraftBuyTimeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftBuyTimeResponse.prototype.to_bytes = function (encoder) { return false; };
        CraftBuyTimeResponse.ID = 39405;
        return CraftBuyTimeResponse;
    }());
    message.CraftBuyTimeResponse = CraftBuyTimeResponse;
    __reflect(CraftBuyTimeResponse.prototype, "message.CraftBuyTimeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 跨服挑战请求
    // request CraftBattle
    ////////////////////////////////////////////////////////////////////////////////
    var CraftBattleReqBody = (function () {
        function CraftBattleReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗数据
            this.leftFormation = []; // 第三场没有打那么将第三组攻击阵型传过来
        }
        CraftBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CraftBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            // leftFormation
            encoder.write_fixuint32(Object.keys(this.leftFormation).length);
            for (var k in this.leftFormation) {
                if (!this.leftFormation[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftBattleReqBody;
    }());
    message.CraftBattleReqBody = CraftBattleReqBody;
    __reflect(CraftBattleReqBody.prototype, "message.CraftBattleReqBody", ["aone.AoneBody"]);
    var CraftBattleRequest = (function () {
        function CraftBattleRequest() {
            this.header = new aone.AoneReqHeader(CraftBattleRequest.ID);
            this.body = new CraftBattleReqBody();
        }
        CraftBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        CraftBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CraftBattleRequest.ID = 39410;
        return CraftBattleRequest;
    }());
    message.CraftBattleRequest = CraftBattleRequest;
    __reflect(CraftBattleRequest.prototype, "message.CraftBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 跨服挑战回复
    // response CraftBattle
    ////////////////////////////////////////////////////////////////////////////////
    var CraftBattleRespBody = (function () {
        function CraftBattleRespBody() {
            this.result = 0; // 挑战结果0未出结果1胜利2失败
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
            this.leftFormation = []; // 未开局左侧信息
            this.rightFormation = []; // 未开局右侧信息
            this.score = 0; // 积分
            this.rank = 0; // 排名
            this.other_score = 0; // 对方积分
            this.other_rank = 0; // 对方排名
        }
        CraftBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // result
            if (decoder_.eof())
                return true;
            this.result = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // leftFormation
            if (decoder_.eof())
                return true;
            var leftFormation_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < leftFormation_count; i++) {
                this.leftFormation.push(new message.SimpleFormationInfo());
                if (!this.leftFormation[i].parse_bytes(decoder_))
                    return false;
            }
            // rightFormation
            if (decoder_.eof())
                return true;
            var rightFormation_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rightFormation_count; i++) {
                this.rightFormation.push(new message.SimpleFormationInfo());
                if (!this.rightFormation[i].parse_bytes(decoder_))
                    return false;
            }
            // score
            if (decoder_.eof())
                return true;
            this.score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rank
            if (decoder_.eof())
                return true;
            this.rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // other_score
            if (decoder_.eof())
                return true;
            this.other_score = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // other_rank
            if (decoder_.eof())
                return true;
            this.other_rank = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CraftBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CraftBattleRespBody;
    }());
    message.CraftBattleRespBody = CraftBattleRespBody;
    __reflect(CraftBattleRespBody.prototype, "message.CraftBattleRespBody", ["aone.AoneBody"]);
    var CraftBattleResponse = (function () {
        function CraftBattleResponse() {
            this.header = new aone.AoneRespHeader(CraftBattleResponse.ID);
            this.body = new CraftBattleRespBody();
        }
        CraftBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        CraftBattleResponse.ID = 39411;
        return CraftBattleResponse;
    }());
    message.CraftBattleResponse = CraftBattleResponse;
    __reflect(CraftBattleResponse.prototype, "message.CraftBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 跨服玩家排行信息请求
    // request CraftRankList
    ////////////////////////////////////////////////////////////////////////////////
    var CraftRankListReqBody = (function () {
        function CraftRankListReqBody() {
            this.type = 0; // 0当前排行1昨日排行2天下第一3本服当前排名4本服上轮排名
        }
        CraftRankListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CraftRankListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftRankListReqBody;
    }());
    message.CraftRankListReqBody = CraftRankListReqBody;
    __reflect(CraftRankListReqBody.prototype, "message.CraftRankListReqBody", ["aone.AoneBody"]);
    var CraftRankListRequest = (function () {
        function CraftRankListRequest() {
            this.header = new aone.AoneReqHeader(CraftRankListRequest.ID);
            this.body = new CraftRankListReqBody();
        }
        CraftRankListRequest.prototype.parse_bytes = function (decoder) { return false; };
        CraftRankListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CraftRankListRequest.ID = 39420;
        return CraftRankListRequest;
    }());
    message.CraftRankListRequest = CraftRankListRequest;
    __reflect(CraftRankListRequest.prototype, "message.CraftRankListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 跨服玩家排行信息回复
    // response CraftRankList
    ////////////////////////////////////////////////////////////////////////////////
    var CraftRankListRespBody = (function () {
        function CraftRankListRespBody() {
            this.roles = []; // CraftRoleInfoChunk
        }
        CraftRankListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roles
            if (decoder_.eof())
                return true;
            this.roles = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CraftRankListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CraftRankListRespBody;
    }());
    message.CraftRankListRespBody = CraftRankListRespBody;
    __reflect(CraftRankListRespBody.prototype, "message.CraftRankListRespBody", ["aone.AoneBody"]);
    var CraftRankListResponse = (function () {
        function CraftRankListResponse() {
            this.header = new aone.AoneRespHeader(CraftRankListResponse.ID);
            this.body = new CraftRankListRespBody();
        }
        CraftRankListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftRankListResponse.prototype.to_bytes = function (encoder) { return false; };
        CraftRankListResponse.ID = 39421;
        return CraftRankListResponse;
    }());
    message.CraftRankListResponse = CraftRankListResponse;
    __reflect(CraftRankListResponse.prototype, "message.CraftRankListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct CraftElitesListChunk
    ////////////////////////////////////////////////////////////////////////////////
    var CraftElitesListChunk = (function () {
        function CraftElitesListChunk() {
            this.items = [];
        }
        CraftElitesListChunk.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // items
            if (decoder_.eof())
                return true;
            var items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < items_count; i++) {
                this.items.push(new message.CraftElitesListItem());
                if (!this.items[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftElitesListChunk.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // items
            encoder.write_fixuint32(Object.keys(this.items).length);
            for (var k in this.items) {
                if (!this.items[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftElitesListChunk;
    }());
    message.CraftElitesListChunk = CraftElitesListChunk;
    __reflect(CraftElitesListChunk.prototype, "message.CraftElitesListChunk", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取各个分区精英请求
    // request CraftElitesRankList
    ////////////////////////////////////////////////////////////////////////////////
    var CraftElitesRankListReqBody = (function () {
        function CraftElitesRankListReqBody() {
        }
        CraftElitesRankListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CraftElitesRankListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CraftElitesRankListReqBody;
    }());
    message.CraftElitesRankListReqBody = CraftElitesRankListReqBody;
    __reflect(CraftElitesRankListReqBody.prototype, "message.CraftElitesRankListReqBody", ["aone.AoneBody"]);
    var CraftElitesRankListRequest = (function () {
        function CraftElitesRankListRequest() {
            this.header = new aone.AoneReqHeader(CraftElitesRankListRequest.ID);
            this.body = new CraftElitesRankListReqBody();
        }
        CraftElitesRankListRequest.prototype.parse_bytes = function (decoder) { return false; };
        CraftElitesRankListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CraftElitesRankListRequest.ID = 39430;
        return CraftElitesRankListRequest;
    }());
    message.CraftElitesRankListRequest = CraftElitesRankListRequest;
    __reflect(CraftElitesRankListRequest.prototype, "message.CraftElitesRankListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取各个分区精英回复
    // response CraftElitesRankList
    ////////////////////////////////////////////////////////////////////////////////
    var CraftElitesRankListRespBody = (function () {
        function CraftElitesRankListRespBody() {
            this.items = []; // CraftElitesListChunk
        }
        CraftElitesRankListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // items
            if (decoder_.eof())
                return true;
            this.items = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CraftElitesRankListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CraftElitesRankListRespBody;
    }());
    message.CraftElitesRankListRespBody = CraftElitesRankListRespBody;
    __reflect(CraftElitesRankListRespBody.prototype, "message.CraftElitesRankListRespBody", ["aone.AoneBody"]);
    var CraftElitesRankListResponse = (function () {
        function CraftElitesRankListResponse() {
            this.header = new aone.AoneRespHeader(CraftElitesRankListResponse.ID);
            this.body = new CraftElitesRankListRespBody();
        }
        CraftElitesRankListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CraftElitesRankListResponse.prototype.to_bytes = function (encoder) { return false; };
        CraftElitesRankListResponse.ID = 39431;
        return CraftElitesRankListResponse;
    }());
    message.CraftElitesRankListResponse = CraftElitesRankListResponse;
    __reflect(CraftElitesRankListResponse.prototype, "message.CraftElitesRankListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////争霸相关///////////////////////////////
    // 拉取争霸所有对阵请求
    // request ContendQueryList
    ////////////////////////////////////////////////////////////////////////////////
    var ContendQueryListReqBody = (function () {
        function ContendQueryListReqBody() {
        }
        ContendQueryListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ContendQueryListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ContendQueryListReqBody;
    }());
    message.ContendQueryListReqBody = ContendQueryListReqBody;
    __reflect(ContendQueryListReqBody.prototype, "message.ContendQueryListReqBody", ["aone.AoneBody"]);
    var ContendQueryListRequest = (function () {
        function ContendQueryListRequest() {
            this.header = new aone.AoneReqHeader(ContendQueryListRequest.ID);
            this.body = new ContendQueryListReqBody();
        }
        ContendQueryListRequest.prototype.parse_bytes = function (decoder) { return false; };
        ContendQueryListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ContendQueryListRequest.ID = 39440;
        return ContendQueryListRequest;
    }());
    message.ContendQueryListRequest = ContendQueryListRequest;
    __reflect(ContendQueryListRequest.prototype, "message.ContendQueryListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取争霸所有对阵回复
    // response ContendQueryList
    ////////////////////////////////////////////////////////////////////////////////
    var ContendQueryListRespBody = (function () {
        function ContendQueryListRespBody() {
            this.firstRound = []; // 第一轮对阵信息
            this.secondRound = []; // 第一轮对阵信息
            this.thirdRound = []; // 第一轮对阵信息
            this.fourthRound = []; // 第一轮对阵信息
            this.fifthRound = []; // 第一轮对阵信息
            this.battle_roles = []; // 所有角色（CraftRoleInfoChunk）
            this.opponent = 0; // 对手id，没有则为0
            this.last_opponent = 0; // 上一轮对手
            this.zone = 0; // 赛区
            this.round = 0; // 第几轮
            this.group_name = [];
        }
        ContendQueryListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // firstRound
            if (decoder_.eof())
                return true;
            var firstRound_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < firstRound_count; i++) {
                this.firstRound.push(new message.IIKVPairs());
                if (!this.firstRound[i].parse_bytes(decoder_))
                    return false;
            }
            // secondRound
            if (decoder_.eof())
                return true;
            var secondRound_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < secondRound_count; i++) {
                this.secondRound.push(new message.IIKVPairs());
                if (!this.secondRound[i].parse_bytes(decoder_))
                    return false;
            }
            // thirdRound
            if (decoder_.eof())
                return true;
            var thirdRound_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < thirdRound_count; i++) {
                this.thirdRound.push(new message.IIKVPairs());
                if (!this.thirdRound[i].parse_bytes(decoder_))
                    return false;
            }
            // fourthRound
            if (decoder_.eof())
                return true;
            var fourthRound_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < fourthRound_count; i++) {
                this.fourthRound.push(new message.IIKVPairs());
                if (!this.fourthRound[i].parse_bytes(decoder_))
                    return false;
            }
            // fifthRound
            if (decoder_.eof())
                return true;
            var fifthRound_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < fifthRound_count; i++) {
                this.fifthRound.push(new message.IIKVPairs());
                if (!this.fifthRound[i].parse_bytes(decoder_))
                    return false;
            }
            // battle_roles
            if (decoder_.eof())
                return true;
            this.battle_roles = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // opponent
            if (decoder_.eof())
                return true;
            this.opponent = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // last_opponent
            if (decoder_.eof())
                return true;
            this.last_opponent = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // zone
            if (decoder_.eof())
                return true;
            this.zone = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // round
            if (decoder_.eof())
                return true;
            this.round = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ContendQueryListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ContendQueryListRespBody;
    }());
    message.ContendQueryListRespBody = ContendQueryListRespBody;
    __reflect(ContendQueryListRespBody.prototype, "message.ContendQueryListRespBody", ["aone.AoneBody"]);
    var ContendQueryListResponse = (function () {
        function ContendQueryListResponse() {
            this.header = new aone.AoneRespHeader(ContendQueryListResponse.ID);
            this.body = new ContendQueryListRespBody();
        }
        ContendQueryListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ContendQueryListResponse.prototype.to_bytes = function (encoder) { return false; };
        ContendQueryListResponse.ID = 39441;
        return ContendQueryListResponse;
    }());
    message.ContendQueryListResponse = ContendQueryListResponse;
    __reflect(ContendQueryListResponse.prototype, "message.ContendQueryListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询争霸对手详细信息请求
    // request ContendQueryDetail
    ////////////////////////////////////////////////////////////////////////////////
    var ContendQueryDetailReqBody = (function () {
        function ContendQueryDetailReqBody() {
            this.opponent = 0; // 对手id
        }
        ContendQueryDetailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ContendQueryDetailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // opponent
            encoder.write_fixuint32(this.opponent);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ContendQueryDetailReqBody;
    }());
    message.ContendQueryDetailReqBody = ContendQueryDetailReqBody;
    __reflect(ContendQueryDetailReqBody.prototype, "message.ContendQueryDetailReqBody", ["aone.AoneBody"]);
    var ContendQueryDetailRequest = (function () {
        function ContendQueryDetailRequest() {
            this.header = new aone.AoneReqHeader(ContendQueryDetailRequest.ID);
            this.body = new ContendQueryDetailReqBody();
        }
        ContendQueryDetailRequest.prototype.parse_bytes = function (decoder) { return false; };
        ContendQueryDetailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ContendQueryDetailRequest.ID = 39442;
        return ContendQueryDetailRequest;
    }());
    message.ContendQueryDetailRequest = ContendQueryDetailRequest;
    __reflect(ContendQueryDetailRequest.prototype, "message.ContendQueryDetailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询争霸对手详细信息回复
    // response ContendQueryDetail
    ////////////////////////////////////////////////////////////////////////////////
    var ContendQueryDetailRespBody = (function () {
        function ContendQueryDetailRespBody() {
            this.formations = []; // 对方阵型信息
        }
        ContendQueryDetailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // formations
            if (decoder_.eof())
                return true;
            var formations_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < formations_count; i++) {
                this.formations.push(new message.CraftFormationInfo());
                if (!this.formations[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ContendQueryDetailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ContendQueryDetailRespBody;
    }());
    message.ContendQueryDetailRespBody = ContendQueryDetailRespBody;
    __reflect(ContendQueryDetailRespBody.prototype, "message.ContendQueryDetailRespBody", ["aone.AoneBody"]);
    var ContendQueryDetailResponse = (function () {
        function ContendQueryDetailResponse() {
            this.header = new aone.AoneRespHeader(ContendQueryDetailResponse.ID);
            this.body = new ContendQueryDetailRespBody();
        }
        ContendQueryDetailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ContendQueryDetailResponse.prototype.to_bytes = function (encoder) { return false; };
        ContendQueryDetailResponse.ID = 39443;
        return ContendQueryDetailResponse;
    }());
    message.ContendQueryDetailResponse = ContendQueryDetailResponse;
    __reflect(ContendQueryDetailResponse.prototype, "message.ContendQueryDetailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 争霸挑战结果请求
    // request ContendBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var ContendBattleResultReqBody = (function () {
        function ContendBattleResultReqBody() {
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗数据（totalDamage胜利传自己剩余血量百分比，失败传对手损失血量百分比）
        }
        ContendBattleResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ContendBattleResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ContendBattleResultReqBody;
    }());
    message.ContendBattleResultReqBody = ContendBattleResultReqBody;
    __reflect(ContendBattleResultReqBody.prototype, "message.ContendBattleResultReqBody", ["aone.AoneBody"]);
    var ContendBattleResultRequest = (function () {
        function ContendBattleResultRequest() {
            this.header = new aone.AoneReqHeader(ContendBattleResultRequest.ID);
            this.body = new ContendBattleResultReqBody();
        }
        ContendBattleResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        ContendBattleResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ContendBattleResultRequest.ID = 39444;
        return ContendBattleResultRequest;
    }());
    message.ContendBattleResultRequest = ContendBattleResultRequest;
    __reflect(ContendBattleResultRequest.prototype, "message.ContendBattleResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 争霸挑战结果回复
    // response ContendBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var ContendBattleResultRespBody = (function () {
        function ContendBattleResultRespBody() {
            this.result = 0; // 挑战结果0未出结果1胜利2失败
            this.gameInfo = new message.GameInfo();
        }
        ContendBattleResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // result
            if (decoder_.eof())
                return true;
            this.result = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ContendBattleResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ContendBattleResultRespBody;
    }());
    message.ContendBattleResultRespBody = ContendBattleResultRespBody;
    __reflect(ContendBattleResultRespBody.prototype, "message.ContendBattleResultRespBody", ["aone.AoneBody"]);
    var ContendBattleResultResponse = (function () {
        function ContendBattleResultResponse() {
            this.header = new aone.AoneRespHeader(ContendBattleResultResponse.ID);
            this.body = new ContendBattleResultRespBody();
        }
        ContendBattleResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ContendBattleResultResponse.prototype.to_bytes = function (encoder) { return false; };
        ContendBattleResultResponse.ID = 39445;
        return ContendBattleResultResponse;
    }());
    message.ContendBattleResultResponse = ContendBattleResultResponse;
    __reflect(ContendBattleResultResponse.prototype, "message.ContendBattleResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取争霸排行榜请求
    // request ContendRankInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ContendRankInfoReqBody = (function () {
        function ContendRankInfoReqBody() {
            this.type = 0; // 1积分排行2上轮积分排行3争霸排名4上轮争霸排名
        }
        ContendRankInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ContendRankInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ContendRankInfoReqBody;
    }());
    message.ContendRankInfoReqBody = ContendRankInfoReqBody;
    __reflect(ContendRankInfoReqBody.prototype, "message.ContendRankInfoReqBody", ["aone.AoneBody"]);
    var ContendRankInfoRequest = (function () {
        function ContendRankInfoRequest() {
            this.header = new aone.AoneReqHeader(ContendRankInfoRequest.ID);
            this.body = new ContendRankInfoReqBody();
        }
        ContendRankInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        ContendRankInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ContendRankInfoRequest.ID = 39446;
        return ContendRankInfoRequest;
    }());
    message.ContendRankInfoRequest = ContendRankInfoRequest;
    __reflect(ContendRankInfoRequest.prototype, "message.ContendRankInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取争霸排行榜回复
    // response ContendRankInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ContendRankInfoRespBody = (function () {
        function ContendRankInfoRespBody() {
            this.roles = ""; // CraftRoleInfoChunk
        }
        ContendRankInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roles
            if (decoder_.eof())
                return true;
            this.roles = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ContendRankInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ContendRankInfoRespBody;
    }());
    message.ContendRankInfoRespBody = ContendRankInfoRespBody;
    __reflect(ContendRankInfoRespBody.prototype, "message.ContendRankInfoRespBody", ["aone.AoneBody"]);
    var ContendRankInfoResponse = (function () {
        function ContendRankInfoResponse() {
            this.header = new aone.AoneRespHeader(ContendRankInfoResponse.ID);
            this.body = new ContendRankInfoRespBody();
        }
        ContendRankInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ContendRankInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        ContendRankInfoResponse.ID = 39447;
        return ContendRankInfoResponse;
    }());
    message.ContendRankInfoResponse = ContendRankInfoResponse;
    __reflect(ContendRankInfoResponse.prototype, "message.ContendRankInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查看争霸战报请求
    // request ContendQueryResult
    ////////////////////////////////////////////////////////////////////////////////
    var ContendQueryResultReqBody = (function () {
        function ContendQueryResultReqBody() {
            this.round = 0; // 第几轮
            this.role_id = 0;
        }
        ContendQueryResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ContendQueryResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // round
            encoder.write_fixuint32(this.round);
            // role_id
            encoder.write_fixuint32(this.role_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ContendQueryResultReqBody;
    }());
    message.ContendQueryResultReqBody = ContendQueryResultReqBody;
    __reflect(ContendQueryResultReqBody.prototype, "message.ContendQueryResultReqBody", ["aone.AoneBody"]);
    var ContendQueryResultRequest = (function () {
        function ContendQueryResultRequest() {
            this.header = new aone.AoneReqHeader(ContendQueryResultRequest.ID);
            this.body = new ContendQueryResultReqBody();
        }
        ContendQueryResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        ContendQueryResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ContendQueryResultRequest.ID = 39448;
        return ContendQueryResultRequest;
    }());
    message.ContendQueryResultRequest = ContendQueryResultRequest;
    __reflect(ContendQueryResultRequest.prototype, "message.ContendQueryResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查看争霸战报回复
    // response ContendQueryResult
    ////////////////////////////////////////////////////////////////////////////////
    var ContendQueryResultRespBody = (function () {
        function ContendQueryResultRespBody() {
            this.battle_result = "";
        }
        ContendQueryResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_result
            if (decoder_.eof())
                return true;
            this.battle_result = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ContendQueryResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ContendQueryResultRespBody;
    }());
    message.ContendQueryResultRespBody = ContendQueryResultRespBody;
    __reflect(ContendQueryResultRespBody.prototype, "message.ContendQueryResultRespBody", ["aone.AoneBody"]);
    var ContendQueryResultResponse = (function () {
        function ContendQueryResultResponse() {
            this.header = new aone.AoneRespHeader(ContendQueryResultResponse.ID);
            this.body = new ContendQueryResultRespBody();
        }
        ContendQueryResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ContendQueryResultResponse.prototype.to_bytes = function (encoder) { return false; };
        ContendQueryResultResponse.ID = 39449;
        return ContendQueryResultResponse;
    }());
    message.ContendQueryResultResponse = ContendQueryResultResponse;
    __reflect(ContendQueryResultResponse.prototype, "message.ContendQueryResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(CraftQueryListRequest.ID, function () { return new CraftQueryListRequest(); });
    aone.MessageFactory.getInstance().register(CraftQueryListResponse.ID, function () { return new CraftQueryListResponse(); });
    aone.MessageFactory.getInstance().register(CraftQueryDetailRequest.ID, function () { return new CraftQueryDetailRequest(); });
    aone.MessageFactory.getInstance().register(CraftQueryDetailResponse.ID, function () { return new CraftQueryDetailResponse(); });
    aone.MessageFactory.getInstance().register(CraftBuyTimeRequest.ID, function () { return new CraftBuyTimeRequest(); });
    aone.MessageFactory.getInstance().register(CraftBuyTimeResponse.ID, function () { return new CraftBuyTimeResponse(); });
    aone.MessageFactory.getInstance().register(CraftBattleRequest.ID, function () { return new CraftBattleRequest(); });
    aone.MessageFactory.getInstance().register(CraftBattleResponse.ID, function () { return new CraftBattleResponse(); });
    aone.MessageFactory.getInstance().register(CraftRankListRequest.ID, function () { return new CraftRankListRequest(); });
    aone.MessageFactory.getInstance().register(CraftRankListResponse.ID, function () { return new CraftRankListResponse(); });
    aone.MessageFactory.getInstance().register(CraftElitesRankListRequest.ID, function () { return new CraftElitesRankListRequest(); });
    aone.MessageFactory.getInstance().register(CraftElitesRankListResponse.ID, function () { return new CraftElitesRankListResponse(); });
    aone.MessageFactory.getInstance().register(ContendQueryListRequest.ID, function () { return new ContendQueryListRequest(); });
    aone.MessageFactory.getInstance().register(ContendQueryListResponse.ID, function () { return new ContendQueryListResponse(); });
    aone.MessageFactory.getInstance().register(ContendQueryDetailRequest.ID, function () { return new ContendQueryDetailRequest(); });
    aone.MessageFactory.getInstance().register(ContendQueryDetailResponse.ID, function () { return new ContendQueryDetailResponse(); });
    aone.MessageFactory.getInstance().register(ContendBattleResultRequest.ID, function () { return new ContendBattleResultRequest(); });
    aone.MessageFactory.getInstance().register(ContendBattleResultResponse.ID, function () { return new ContendBattleResultResponse(); });
    aone.MessageFactory.getInstance().register(ContendRankInfoRequest.ID, function () { return new ContendRankInfoRequest(); });
    aone.MessageFactory.getInstance().register(ContendRankInfoResponse.ID, function () { return new ContendRankInfoResponse(); });
    aone.MessageFactory.getInstance().register(ContendQueryResultRequest.ID, function () { return new ContendQueryResultRequest(); });
    aone.MessageFactory.getInstance().register(ContendQueryResultResponse.ID, function () { return new ContendQueryResultResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_tower.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 爬塔挑战请求
    // request TowerChallenge
    ////////////////////////////////////////////////////////////////////////////////
    var TowerChallengeReqBody = (function () {
        function TowerChallengeReqBody() {
            this.sequence = 0; // 战斗序号
            this.instanceId = 0; // 副本Id
            this.battleInfo = new message.BattleResultInfo(); // 战斗数据
        }
        TowerChallengeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        TowerChallengeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // instanceId
            encoder.write_fixuint32(this.instanceId);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return TowerChallengeReqBody;
    }());
    message.TowerChallengeReqBody = TowerChallengeReqBody;
    __reflect(TowerChallengeReqBody.prototype, "message.TowerChallengeReqBody", ["aone.AoneBody"]);
    var TowerChallengeRequest = (function () {
        function TowerChallengeRequest() {
            this.header = new aone.AoneReqHeader(TowerChallengeRequest.ID);
            this.body = new TowerChallengeReqBody();
        }
        TowerChallengeRequest.prototype.parse_bytes = function (decoder) { return false; };
        TowerChallengeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        TowerChallengeRequest.ID = 30000;
        return TowerChallengeRequest;
    }());
    message.TowerChallengeRequest = TowerChallengeRequest;
    __reflect(TowerChallengeRequest.prototype, "message.TowerChallengeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 爬塔挑战回复
    // response TowerChallenge
    ////////////////////////////////////////////////////////////////////////////////
    var TowerChallengeRespBody = (function () {
        function TowerChallengeRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        TowerChallengeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        TowerChallengeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return TowerChallengeRespBody;
    }());
    message.TowerChallengeRespBody = TowerChallengeRespBody;
    __reflect(TowerChallengeRespBody.prototype, "message.TowerChallengeRespBody", ["aone.AoneBody"]);
    var TowerChallengeResponse = (function () {
        function TowerChallengeResponse() {
            this.header = new aone.AoneRespHeader(TowerChallengeResponse.ID);
            this.body = new TowerChallengeRespBody();
        }
        TowerChallengeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        TowerChallengeResponse.prototype.to_bytes = function (encoder) { return false; };
        TowerChallengeResponse.ID = 30001;
        return TowerChallengeResponse;
    }());
    message.TowerChallengeResponse = TowerChallengeResponse;
    __reflect(TowerChallengeResponse.prototype, "message.TowerChallengeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(TowerChallengeRequest.ID, function () { return new TowerChallengeRequest(); });
    aone.MessageFactory.getInstance().register(TowerChallengeResponse.ID, function () { return new TowerChallengeResponse(); });
})(message || (message = {}));
//Date: 2019-11
//File: msg_cg_util.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
// 主要定义了其他cg协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 领取登陆奖励请求
    // request LoginReward
    ////////////////////////////////////////////////////////////////////////////////
    var LoginRewardReqBody = (function () {
        function LoginRewardReqBody() {
            this.index = 0;
        }
        LoginRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LoginRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LoginRewardReqBody;
    }());
    message.LoginRewardReqBody = LoginRewardReqBody;
    __reflect(LoginRewardReqBody.prototype, "message.LoginRewardReqBody", ["aone.AoneBody"]);
    var LoginRewardRequest = (function () {
        function LoginRewardRequest() {
            this.header = new aone.AoneReqHeader(LoginRewardRequest.ID);
            this.body = new LoginRewardReqBody();
        }
        LoginRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        LoginRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LoginRewardRequest.ID = 27002;
        return LoginRewardRequest;
    }());
    message.LoginRewardRequest = LoginRewardRequest;
    __reflect(LoginRewardRequest.prototype, "message.LoginRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取登陆奖励回复
    // response LoginReward
    ////////////////////////////////////////////////////////////////////////////////
    var LoginRewardRespBody = (function () {
        function LoginRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LoginRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LoginRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LoginRewardRespBody;
    }());
    message.LoginRewardRespBody = LoginRewardRespBody;
    __reflect(LoginRewardRespBody.prototype, "message.LoginRewardRespBody", ["aone.AoneBody"]);
    var LoginRewardResponse = (function () {
        function LoginRewardResponse() {
            this.header = new aone.AoneRespHeader(LoginRewardResponse.ID);
            this.body = new LoginRewardRespBody();
        }
        LoginRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LoginRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        LoginRewardResponse.ID = 27003;
        return LoginRewardResponse;
    }());
    message.LoginRewardResponse = LoginRewardResponse;
    __reflect(LoginRewardResponse.prototype, "message.LoginRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取facebook奖励请求
    // request FacebookReward
    ////////////////////////////////////////////////////////////////////////////////
    var FacebookRewardReqBody = (function () {
        function FacebookRewardReqBody() {
            this.index = 0;
            this.general_id = 0; // 4,5时填武将id和装备id
            this.equip_id = 0;
        }
        FacebookRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        FacebookRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // general_id
            encoder.write_fixuint32(this.general_id);
            // equip_id
            encoder.write_fixuint32(this.equip_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return FacebookRewardReqBody;
    }());
    message.FacebookRewardReqBody = FacebookRewardReqBody;
    __reflect(FacebookRewardReqBody.prototype, "message.FacebookRewardReqBody", ["aone.AoneBody"]);
    var FacebookRewardRequest = (function () {
        function FacebookRewardRequest() {
            this.header = new aone.AoneReqHeader(FacebookRewardRequest.ID);
            this.body = new FacebookRewardReqBody();
        }
        FacebookRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        FacebookRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        FacebookRewardRequest.ID = 27004;
        return FacebookRewardRequest;
    }());
    message.FacebookRewardRequest = FacebookRewardRequest;
    __reflect(FacebookRewardRequest.prototype, "message.FacebookRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取facebook奖励回复
    // response FacebookReward
    ////////////////////////////////////////////////////////////////////////////////
    var FacebookRewardRespBody = (function () {
        function FacebookRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        FacebookRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        FacebookRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return FacebookRewardRespBody;
    }());
    message.FacebookRewardRespBody = FacebookRewardRespBody;
    __reflect(FacebookRewardRespBody.prototype, "message.FacebookRewardRespBody", ["aone.AoneBody"]);
    var FacebookRewardResponse = (function () {
        function FacebookRewardResponse() {
            this.header = new aone.AoneRespHeader(FacebookRewardResponse.ID);
            this.body = new FacebookRewardRespBody();
        }
        FacebookRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        FacebookRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        FacebookRewardResponse.ID = 27005;
        return FacebookRewardResponse;
    }());
    message.FacebookRewardResponse = FacebookRewardResponse;
    __reflect(FacebookRewardResponse.prototype, "message.FacebookRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取开服寻访奖励请求
    // request RewardNormalLottery
    ////////////////////////////////////////////////////////////////////////////////
    var RewardNormalLotteryReqBody = (function () {
        function RewardNormalLotteryReqBody() {
            this.index = 0;
        }
        RewardNormalLotteryReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardNormalLotteryReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardNormalLotteryReqBody;
    }());
    message.RewardNormalLotteryReqBody = RewardNormalLotteryReqBody;
    __reflect(RewardNormalLotteryReqBody.prototype, "message.RewardNormalLotteryReqBody", ["aone.AoneBody"]);
    var RewardNormalLotteryRequest = (function () {
        function RewardNormalLotteryRequest() {
            this.header = new aone.AoneReqHeader(RewardNormalLotteryRequest.ID);
            this.body = new RewardNormalLotteryReqBody();
        }
        RewardNormalLotteryRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardNormalLotteryRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardNormalLotteryRequest.ID = 27006;
        return RewardNormalLotteryRequest;
    }());
    message.RewardNormalLotteryRequest = RewardNormalLotteryRequest;
    __reflect(RewardNormalLotteryRequest.prototype, "message.RewardNormalLotteryRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取开服寻访奖励回复
    // response RewardNormalLottery
    ////////////////////////////////////////////////////////////////////////////////
    var RewardNormalLotteryRespBody = (function () {
        function RewardNormalLotteryRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardNormalLotteryRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardNormalLotteryRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardNormalLotteryRespBody;
    }());
    message.RewardNormalLotteryRespBody = RewardNormalLotteryRespBody;
    __reflect(RewardNormalLotteryRespBody.prototype, "message.RewardNormalLotteryRespBody", ["aone.AoneBody"]);
    var RewardNormalLotteryResponse = (function () {
        function RewardNormalLotteryResponse() {
            this.header = new aone.AoneRespHeader(RewardNormalLotteryResponse.ID);
            this.body = new RewardNormalLotteryRespBody();
        }
        RewardNormalLotteryResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardNormalLotteryResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardNormalLotteryResponse.ID = 27007;
        return RewardNormalLotteryResponse;
    }());
    message.RewardNormalLotteryResponse = RewardNormalLotteryResponse;
    __reflect(RewardNormalLotteryResponse.prototype, "message.RewardNormalLotteryResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取首冲奖励请求
    // request FirstChargeReward
    ////////////////////////////////////////////////////////////////////////////////
    var FirstChargeRewardReqBody = (function () {
        function FirstChargeRewardReqBody() {
            this.index = 0; //礼包档数
        }
        FirstChargeRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        FirstChargeRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return FirstChargeRewardReqBody;
    }());
    message.FirstChargeRewardReqBody = FirstChargeRewardReqBody;
    __reflect(FirstChargeRewardReqBody.prototype, "message.FirstChargeRewardReqBody", ["aone.AoneBody"]);
    var FirstChargeRewardRequest = (function () {
        function FirstChargeRewardRequest() {
            this.header = new aone.AoneReqHeader(FirstChargeRewardRequest.ID);
            this.body = new FirstChargeRewardReqBody();
        }
        FirstChargeRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        FirstChargeRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        FirstChargeRewardRequest.ID = 27010;
        return FirstChargeRewardRequest;
    }());
    message.FirstChargeRewardRequest = FirstChargeRewardRequest;
    __reflect(FirstChargeRewardRequest.prototype, "message.FirstChargeRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取首冲奖励回复
    // response FirstChargeReward
    ////////////////////////////////////////////////////////////////////////////////
    var FirstChargeRewardRespBody = (function () {
        function FirstChargeRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        FirstChargeRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        FirstChargeRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return FirstChargeRewardRespBody;
    }());
    message.FirstChargeRewardRespBody = FirstChargeRewardRespBody;
    __reflect(FirstChargeRewardRespBody.prototype, "message.FirstChargeRewardRespBody", ["aone.AoneBody"]);
    var FirstChargeRewardResponse = (function () {
        function FirstChargeRewardResponse() {
            this.header = new aone.AoneRespHeader(FirstChargeRewardResponse.ID);
            this.body = new FirstChargeRewardRespBody();
        }
        FirstChargeRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        FirstChargeRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        FirstChargeRewardResponse.ID = 27011;
        return FirstChargeRewardResponse;
    }());
    message.FirstChargeRewardResponse = FirstChargeRewardResponse;
    __reflect(FirstChargeRewardResponse.prototype, "message.FirstChargeRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取猛将传奖励请求
    // request SPgeneralReward
    ////////////////////////////////////////////////////////////////////////////////
    var SPgeneralRewardReqBody = (function () {
        function SPgeneralRewardReqBody() {
            this.index = 0;
        }
        SPgeneralRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SPgeneralRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SPgeneralRewardReqBody;
    }());
    message.SPgeneralRewardReqBody = SPgeneralRewardReqBody;
    __reflect(SPgeneralRewardReqBody.prototype, "message.SPgeneralRewardReqBody", ["aone.AoneBody"]);
    var SPgeneralRewardRequest = (function () {
        function SPgeneralRewardRequest() {
            this.header = new aone.AoneReqHeader(SPgeneralRewardRequest.ID);
            this.body = new SPgeneralRewardReqBody();
        }
        SPgeneralRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        SPgeneralRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SPgeneralRewardRequest.ID = 27014;
        return SPgeneralRewardRequest;
    }());
    message.SPgeneralRewardRequest = SPgeneralRewardRequest;
    __reflect(SPgeneralRewardRequest.prototype, "message.SPgeneralRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取猛将传奖励回复
    // response SPgeneralReward
    ////////////////////////////////////////////////////////////////////////////////
    var SPgeneralRewardRespBody = (function () {
        function SPgeneralRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SPgeneralRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SPgeneralRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SPgeneralRewardRespBody;
    }());
    message.SPgeneralRewardRespBody = SPgeneralRewardRespBody;
    __reflect(SPgeneralRewardRespBody.prototype, "message.SPgeneralRewardRespBody", ["aone.AoneBody"]);
    var SPgeneralRewardResponse = (function () {
        function SPgeneralRewardResponse() {
            this.header = new aone.AoneRespHeader(SPgeneralRewardResponse.ID);
            this.body = new SPgeneralRewardRespBody();
        }
        SPgeneralRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SPgeneralRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        SPgeneralRewardResponse.ID = 27015;
        return SPgeneralRewardResponse;
    }());
    message.SPgeneralRewardResponse = SPgeneralRewardResponse;
    __reflect(SPgeneralRewardResponse.prototype, "message.SPgeneralRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 抽卡请求
    // request NormalLottery
    ////////////////////////////////////////////////////////////////////////////////
    var NormalLotteryReqBody = (function () {
        function NormalLotteryReqBody() {
            this.lottery_type = 0; //1.啤酒2.红酒3.香槟4.苏打
            this.soda_num = 0; //抽卡次数(4种类型通用)
        }
        NormalLotteryReqBody.prototype.parse_bytes = function (decoder) { return false; };
        NormalLotteryReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // lottery_type
            encoder.write_fixuint32(this.lottery_type);
            // soda_num
            encoder.write_fixuint32(this.soda_num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return NormalLotteryReqBody;
    }());
    message.NormalLotteryReqBody = NormalLotteryReqBody;
    __reflect(NormalLotteryReqBody.prototype, "message.NormalLotteryReqBody", ["aone.AoneBody"]);
    var NormalLotteryRequest = (function () {
        function NormalLotteryRequest() {
            this.header = new aone.AoneReqHeader(NormalLotteryRequest.ID);
            this.body = new NormalLotteryReqBody();
        }
        NormalLotteryRequest.prototype.parse_bytes = function (decoder) { return false; };
        NormalLotteryRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        NormalLotteryRequest.ID = 27020;
        return NormalLotteryRequest;
    }());
    message.NormalLotteryRequest = NormalLotteryRequest;
    __reflect(NormalLotteryRequest.prototype, "message.NormalLotteryRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 抽卡回复
    // response NormalLottery
    ////////////////////////////////////////////////////////////////////////////////
    var NormalLotteryRespBody = (function () {
        function NormalLotteryRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        NormalLotteryRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        NormalLotteryRespBody.prototype.to_bytes = function (encoder) { return false; };
        return NormalLotteryRespBody;
    }());
    message.NormalLotteryRespBody = NormalLotteryRespBody;
    __reflect(NormalLotteryRespBody.prototype, "message.NormalLotteryRespBody", ["aone.AoneBody"]);
    var NormalLotteryResponse = (function () {
        function NormalLotteryResponse() {
            this.header = new aone.AoneRespHeader(NormalLotteryResponse.ID);
            this.body = new NormalLotteryRespBody();
        }
        NormalLotteryResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        NormalLotteryResponse.prototype.to_bytes = function (encoder) { return false; };
        NormalLotteryResponse.ID = 27021;
        return NormalLotteryResponse;
    }());
    message.NormalLotteryResponse = NormalLotteryResponse;
    __reflect(NormalLotteryResponse.prototype, "message.NormalLotteryResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开卡包请求
    // request CardBagOpen
    ////////////////////////////////////////////////////////////////////////////////
    var CardBagOpenReqBody = (function () {
        function CardBagOpenReqBody() {
            this.bag_id = 0; //卡包id
        }
        CardBagOpenReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CardBagOpenReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // bag_id
            encoder.write_fixuint32(this.bag_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CardBagOpenReqBody;
    }());
    message.CardBagOpenReqBody = CardBagOpenReqBody;
    __reflect(CardBagOpenReqBody.prototype, "message.CardBagOpenReqBody", ["aone.AoneBody"]);
    var CardBagOpenRequest = (function () {
        function CardBagOpenRequest() {
            this.header = new aone.AoneReqHeader(CardBagOpenRequest.ID);
            this.body = new CardBagOpenReqBody();
        }
        CardBagOpenRequest.prototype.parse_bytes = function (decoder) { return false; };
        CardBagOpenRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CardBagOpenRequest.ID = 27022;
        return CardBagOpenRequest;
    }());
    message.CardBagOpenRequest = CardBagOpenRequest;
    __reflect(CardBagOpenRequest.prototype, "message.CardBagOpenRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开卡包回复
    // response CardBagOpen
    ////////////////////////////////////////////////////////////////////////////////
    var CardBagOpenRespBody = (function () {
        function CardBagOpenRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        CardBagOpenRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        CardBagOpenRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CardBagOpenRespBody;
    }());
    message.CardBagOpenRespBody = CardBagOpenRespBody;
    __reflect(CardBagOpenRespBody.prototype, "message.CardBagOpenRespBody", ["aone.AoneBody"]);
    var CardBagOpenResponse = (function () {
        function CardBagOpenResponse() {
            this.header = new aone.AoneRespHeader(CardBagOpenResponse.ID);
            this.body = new CardBagOpenRespBody();
        }
        CardBagOpenResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CardBagOpenResponse.prototype.to_bytes = function (encoder) { return false; };
        CardBagOpenResponse.ID = 27023;
        return CardBagOpenResponse;
    }());
    message.CardBagOpenResponse = CardBagOpenResponse;
    __reflect(CardBagOpenResponse.prototype, "message.CardBagOpenResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买月度礼包请求
    // request BuyMonthGift
    ////////////////////////////////////////////////////////////////////////////////
    var BuyMonthGiftReqBody = (function () {
        function BuyMonthGiftReqBody() {
            this.gift_id = 0; // 礼包id
        }
        BuyMonthGiftReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuyMonthGiftReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // gift_id
            encoder.write_fixuint32(this.gift_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyMonthGiftReqBody;
    }());
    message.BuyMonthGiftReqBody = BuyMonthGiftReqBody;
    __reflect(BuyMonthGiftReqBody.prototype, "message.BuyMonthGiftReqBody", ["aone.AoneBody"]);
    var BuyMonthGiftRequest = (function () {
        function BuyMonthGiftRequest() {
            this.header = new aone.AoneReqHeader(BuyMonthGiftRequest.ID);
            this.body = new BuyMonthGiftReqBody();
        }
        BuyMonthGiftRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuyMonthGiftRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuyMonthGiftRequest.ID = 27024;
        return BuyMonthGiftRequest;
    }());
    message.BuyMonthGiftRequest = BuyMonthGiftRequest;
    __reflect(BuyMonthGiftRequest.prototype, "message.BuyMonthGiftRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买月度礼包回复
    // response BuyMonthGift
    ////////////////////////////////////////////////////////////////////////////////
    var BuyMonthGiftRespBody = (function () {
        function BuyMonthGiftRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuyMonthGiftRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuyMonthGiftRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuyMonthGiftRespBody;
    }());
    message.BuyMonthGiftRespBody = BuyMonthGiftRespBody;
    __reflect(BuyMonthGiftRespBody.prototype, "message.BuyMonthGiftRespBody", ["aone.AoneBody"]);
    var BuyMonthGiftResponse = (function () {
        function BuyMonthGiftResponse() {
            this.header = new aone.AoneRespHeader(BuyMonthGiftResponse.ID);
            this.body = new BuyMonthGiftRespBody();
        }
        BuyMonthGiftResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuyMonthGiftResponse.prototype.to_bytes = function (encoder) { return false; };
        BuyMonthGiftResponse.ID = 27025;
        return BuyMonthGiftResponse;
    }());
    message.BuyMonthGiftResponse = BuyMonthGiftResponse;
    __reflect(BuyMonthGiftResponse.prototype, "message.BuyMonthGiftResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取通行证等级奖励请求
    // request RewardPermitLevel
    ////////////////////////////////////////////////////////////////////////////////
    var RewardPermitLevelReqBody = (function () {
        function RewardPermitLevelReqBody() {
            this.is_senior = false; // 是否高级
            this.level = 0;
        }
        RewardPermitLevelReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardPermitLevelReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // is_senior
            encoder.write_bool(this.is_senior);
            // level
            encoder.write_fixuint32(this.level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardPermitLevelReqBody;
    }());
    message.RewardPermitLevelReqBody = RewardPermitLevelReqBody;
    __reflect(RewardPermitLevelReqBody.prototype, "message.RewardPermitLevelReqBody", ["aone.AoneBody"]);
    var RewardPermitLevelRequest = (function () {
        function RewardPermitLevelRequest() {
            this.header = new aone.AoneReqHeader(RewardPermitLevelRequest.ID);
            this.body = new RewardPermitLevelReqBody();
        }
        RewardPermitLevelRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardPermitLevelRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardPermitLevelRequest.ID = 27026;
        return RewardPermitLevelRequest;
    }());
    message.RewardPermitLevelRequest = RewardPermitLevelRequest;
    __reflect(RewardPermitLevelRequest.prototype, "message.RewardPermitLevelRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取通行证等级奖励回复
    // response RewardPermitLevel
    ////////////////////////////////////////////////////////////////////////////////
    var RewardPermitLevelRespBody = (function () {
        function RewardPermitLevelRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardPermitLevelRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardPermitLevelRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardPermitLevelRespBody;
    }());
    message.RewardPermitLevelRespBody = RewardPermitLevelRespBody;
    __reflect(RewardPermitLevelRespBody.prototype, "message.RewardPermitLevelRespBody", ["aone.AoneBody"]);
    var RewardPermitLevelResponse = (function () {
        function RewardPermitLevelResponse() {
            this.header = new aone.AoneRespHeader(RewardPermitLevelResponse.ID);
            this.body = new RewardPermitLevelRespBody();
        }
        RewardPermitLevelResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardPermitLevelResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardPermitLevelResponse.ID = 27027;
        return RewardPermitLevelResponse;
    }());
    message.RewardPermitLevelResponse = RewardPermitLevelResponse;
    __reflect(RewardPermitLevelResponse.prototype, "message.RewardPermitLevelResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取通行证日常任务奖励请求
    // request RewardPermitMission
    ////////////////////////////////////////////////////////////////////////////////
    var RewardPermitMissionReqBody = (function () {
        function RewardPermitMissionReqBody() {
            this.id = 0;
        }
        RewardPermitMissionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardPermitMissionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardPermitMissionReqBody;
    }());
    message.RewardPermitMissionReqBody = RewardPermitMissionReqBody;
    __reflect(RewardPermitMissionReqBody.prototype, "message.RewardPermitMissionReqBody", ["aone.AoneBody"]);
    var RewardPermitMissionRequest = (function () {
        function RewardPermitMissionRequest() {
            this.header = new aone.AoneReqHeader(RewardPermitMissionRequest.ID);
            this.body = new RewardPermitMissionReqBody();
        }
        RewardPermitMissionRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardPermitMissionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardPermitMissionRequest.ID = 27028;
        return RewardPermitMissionRequest;
    }());
    message.RewardPermitMissionRequest = RewardPermitMissionRequest;
    __reflect(RewardPermitMissionRequest.prototype, "message.RewardPermitMissionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取通行证日常任务奖励回复
    // response RewardPermitMission
    ////////////////////////////////////////////////////////////////////////////////
    var RewardPermitMissionRespBody = (function () {
        function RewardPermitMissionRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardPermitMissionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardPermitMissionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardPermitMissionRespBody;
    }());
    message.RewardPermitMissionRespBody = RewardPermitMissionRespBody;
    __reflect(RewardPermitMissionRespBody.prototype, "message.RewardPermitMissionRespBody", ["aone.AoneBody"]);
    var RewardPermitMissionResponse = (function () {
        function RewardPermitMissionResponse() {
            this.header = new aone.AoneRespHeader(RewardPermitMissionResponse.ID);
            this.body = new RewardPermitMissionRespBody();
        }
        RewardPermitMissionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardPermitMissionResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardPermitMissionResponse.ID = 27029;
        return RewardPermitMissionResponse;
    }());
    message.RewardPermitMissionResponse = RewardPermitMissionResponse;
    __reflect(RewardPermitMissionResponse.prototype, "message.RewardPermitMissionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买铜钱请求
    // request BuyMoney
    ////////////////////////////////////////////////////////////////////////////////
    var BuyMoneyReqBody = (function () {
        function BuyMoneyReqBody() {
            this.count = 0; // 购买次数
        }
        BuyMoneyReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuyMoneyReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // count
            encoder.write_fixuint32(this.count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyMoneyReqBody;
    }());
    message.BuyMoneyReqBody = BuyMoneyReqBody;
    __reflect(BuyMoneyReqBody.prototype, "message.BuyMoneyReqBody", ["aone.AoneBody"]);
    var BuyMoneyRequest = (function () {
        function BuyMoneyRequest() {
            this.header = new aone.AoneReqHeader(BuyMoneyRequest.ID);
            this.body = new BuyMoneyReqBody();
        }
        BuyMoneyRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuyMoneyRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuyMoneyRequest.ID = 27050;
        return BuyMoneyRequest;
    }());
    message.BuyMoneyRequest = BuyMoneyRequest;
    __reflect(BuyMoneyRequest.prototype, "message.BuyMoneyRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买铜钱回复
    // response BuyMoney
    ////////////////////////////////////////////////////////////////////////////////
    var BuyMoneyRespBody = (function () {
        function BuyMoneyRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuyMoneyRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuyMoneyRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuyMoneyRespBody;
    }());
    message.BuyMoneyRespBody = BuyMoneyRespBody;
    __reflect(BuyMoneyRespBody.prototype, "message.BuyMoneyRespBody", ["aone.AoneBody"]);
    var BuyMoneyResponse = (function () {
        function BuyMoneyResponse() {
            this.header = new aone.AoneRespHeader(BuyMoneyResponse.ID);
            this.body = new BuyMoneyRespBody();
        }
        BuyMoneyResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuyMoneyResponse.prototype.to_bytes = function (encoder) { return false; };
        BuyMoneyResponse.ID = 27051;
        return BuyMoneyResponse;
    }());
    message.BuyMoneyResponse = BuyMoneyResponse;
    __reflect(BuyMoneyResponse.prototype, "message.BuyMoneyResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买开服基金请求
    // request BuyFundReward
    ////////////////////////////////////////////////////////////////////////////////
    var BuyFundRewardReqBody = (function () {
        function BuyFundRewardReqBody() {
        }
        BuyFundRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuyFundRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyFundRewardReqBody;
    }());
    message.BuyFundRewardReqBody = BuyFundRewardReqBody;
    __reflect(BuyFundRewardReqBody.prototype, "message.BuyFundRewardReqBody", ["aone.AoneBody"]);
    var BuyFundRewardRequest = (function () {
        function BuyFundRewardRequest() {
            this.header = new aone.AoneReqHeader(BuyFundRewardRequest.ID);
            this.body = new BuyFundRewardReqBody();
        }
        BuyFundRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuyFundRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuyFundRewardRequest.ID = 27060;
        return BuyFundRewardRequest;
    }());
    message.BuyFundRewardRequest = BuyFundRewardRequest;
    __reflect(BuyFundRewardRequest.prototype, "message.BuyFundRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买开服基金回复
    // response BuyFundReward
    ////////////////////////////////////////////////////////////////////////////////
    var BuyFundRewardRespBody = (function () {
        function BuyFundRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuyFundRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuyFundRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuyFundRewardRespBody;
    }());
    message.BuyFundRewardRespBody = BuyFundRewardRespBody;
    __reflect(BuyFundRewardRespBody.prototype, "message.BuyFundRewardRespBody", ["aone.AoneBody"]);
    var BuyFundRewardResponse = (function () {
        function BuyFundRewardResponse() {
            this.header = new aone.AoneRespHeader(BuyFundRewardResponse.ID);
            this.body = new BuyFundRewardRespBody();
        }
        BuyFundRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuyFundRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        BuyFundRewardResponse.ID = 27061;
        return BuyFundRewardResponse;
    }());
    message.BuyFundRewardResponse = BuyFundRewardResponse;
    __reflect(BuyFundRewardResponse.prototype, "message.BuyFundRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取开服基金请求
    // request ReceiveFundReward
    ////////////////////////////////////////////////////////////////////////////////
    var ReceiveFundRewardReqBody = (function () {
        function ReceiveFundRewardReqBody() {
            this.index = 0; // 领取阶段
        }
        ReceiveFundRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ReceiveFundRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ReceiveFundRewardReqBody;
    }());
    message.ReceiveFundRewardReqBody = ReceiveFundRewardReqBody;
    __reflect(ReceiveFundRewardReqBody.prototype, "message.ReceiveFundRewardReqBody", ["aone.AoneBody"]);
    var ReceiveFundRewardRequest = (function () {
        function ReceiveFundRewardRequest() {
            this.header = new aone.AoneReqHeader(ReceiveFundRewardRequest.ID);
            this.body = new ReceiveFundRewardReqBody();
        }
        ReceiveFundRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        ReceiveFundRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ReceiveFundRewardRequest.ID = 27062;
        return ReceiveFundRewardRequest;
    }());
    message.ReceiveFundRewardRequest = ReceiveFundRewardRequest;
    __reflect(ReceiveFundRewardRequest.prototype, "message.ReceiveFundRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取开服基金回复
    // response ReceiveFundReward
    ////////////////////////////////////////////////////////////////////////////////
    var ReceiveFundRewardRespBody = (function () {
        function ReceiveFundRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ReceiveFundRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ReceiveFundRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ReceiveFundRewardRespBody;
    }());
    message.ReceiveFundRewardRespBody = ReceiveFundRewardRespBody;
    __reflect(ReceiveFundRewardRespBody.prototype, "message.ReceiveFundRewardRespBody", ["aone.AoneBody"]);
    var ReceiveFundRewardResponse = (function () {
        function ReceiveFundRewardResponse() {
            this.header = new aone.AoneRespHeader(ReceiveFundRewardResponse.ID);
            this.body = new ReceiveFundRewardRespBody();
        }
        ReceiveFundRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ReceiveFundRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        ReceiveFundRewardResponse.ID = 27063;
        return ReceiveFundRewardResponse;
    }());
    message.ReceiveFundRewardResponse = ReceiveFundRewardResponse;
    __reflect(ReceiveFundRewardResponse.prototype, "message.ReceiveFundRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 分享请求
    // request ShareReward
    ////////////////////////////////////////////////////////////////////////////////
    var ShareRewardReqBody = (function () {
        function ShareRewardReqBody() {
            this.share_type = 0; // 分享类型
        }
        ShareRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ShareRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // share_type
            encoder.write_fixuint32(this.share_type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ShareRewardReqBody;
    }());
    message.ShareRewardReqBody = ShareRewardReqBody;
    __reflect(ShareRewardReqBody.prototype, "message.ShareRewardReqBody", ["aone.AoneBody"]);
    var ShareRewardRequest = (function () {
        function ShareRewardRequest() {
            this.header = new aone.AoneReqHeader(ShareRewardRequest.ID);
            this.body = new ShareRewardReqBody();
        }
        ShareRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        ShareRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ShareRewardRequest.ID = 27070;
        return ShareRewardRequest;
    }());
    message.ShareRewardRequest = ShareRewardRequest;
    __reflect(ShareRewardRequest.prototype, "message.ShareRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 分享回复
    // response ShareReward
    ////////////////////////////////////////////////////////////////////////////////
    var ShareRewardRespBody = (function () {
        function ShareRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ShareRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ShareRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ShareRewardRespBody;
    }());
    message.ShareRewardRespBody = ShareRewardRespBody;
    __reflect(ShareRewardRespBody.prototype, "message.ShareRewardRespBody", ["aone.AoneBody"]);
    var ShareRewardResponse = (function () {
        function ShareRewardResponse() {
            this.header = new aone.AoneRespHeader(ShareRewardResponse.ID);
            this.body = new ShareRewardRespBody();
        }
        ShareRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ShareRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        ShareRewardResponse.ID = 27071;
        return ShareRewardResponse;
    }());
    message.ShareRewardResponse = ShareRewardResponse;
    __reflect(ShareRewardResponse.prototype, "message.ShareRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 新礼包是否存在请求
    // request NewGiftExist
    ////////////////////////////////////////////////////////////////////////////////
    var NewGiftExistReqBody = (function () {
        function NewGiftExistReqBody() {
            this.giftIndex = 0; // 礼包唯一索引
        }
        NewGiftExistReqBody.prototype.parse_bytes = function (decoder) { return false; };
        NewGiftExistReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // giftIndex
            encoder.write_fixuint32(this.giftIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return NewGiftExistReqBody;
    }());
    message.NewGiftExistReqBody = NewGiftExistReqBody;
    __reflect(NewGiftExistReqBody.prototype, "message.NewGiftExistReqBody", ["aone.AoneBody"]);
    var NewGiftExistRequest = (function () {
        function NewGiftExistRequest() {
            this.header = new aone.AoneReqHeader(NewGiftExistRequest.ID);
            this.body = new NewGiftExistReqBody();
        }
        NewGiftExistRequest.prototype.parse_bytes = function (decoder) { return false; };
        NewGiftExistRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        NewGiftExistRequest.ID = 27072;
        return NewGiftExistRequest;
    }());
    message.NewGiftExistRequest = NewGiftExistRequest;
    __reflect(NewGiftExistRequest.prototype, "message.NewGiftExistRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 新礼包是否存在回复
    // response NewGiftExist
    ////////////////////////////////////////////////////////////////////////////////
    var NewGiftExistRespBody = (function () {
        function NewGiftExistRespBody() {
        }
        NewGiftExistRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        NewGiftExistRespBody.prototype.to_bytes = function (encoder) { return false; };
        return NewGiftExistRespBody;
    }());
    message.NewGiftExistRespBody = NewGiftExistRespBody;
    __reflect(NewGiftExistRespBody.prototype, "message.NewGiftExistRespBody", ["aone.AoneBody"]);
    var NewGiftExistResponse = (function () {
        function NewGiftExistResponse() {
            this.header = new aone.AoneRespHeader(NewGiftExistResponse.ID);
            this.body = new NewGiftExistRespBody();
        }
        NewGiftExistResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        NewGiftExistResponse.prototype.to_bytes = function (encoder) { return false; };
        NewGiftExistResponse.ID = 27073;
        return NewGiftExistResponse;
    }());
    message.NewGiftExistResponse = NewGiftExistResponse;
    __reflect(NewGiftExistResponse.prototype, "message.NewGiftExistResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 激活码兑换请求
    // request AcceptActivation
    ////////////////////////////////////////////////////////////////////////////////
    var AcceptActivationReqBody = (function () {
        function AcceptActivationReqBody() {
            this.activation = ""; // 激活码
        }
        AcceptActivationReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AcceptActivationReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // activation
            encoder.write_string(this.activation);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AcceptActivationReqBody;
    }());
    message.AcceptActivationReqBody = AcceptActivationReqBody;
    __reflect(AcceptActivationReqBody.prototype, "message.AcceptActivationReqBody", ["aone.AoneBody"]);
    var AcceptActivationRequest = (function () {
        function AcceptActivationRequest() {
            this.header = new aone.AoneReqHeader(AcceptActivationRequest.ID);
            this.body = new AcceptActivationReqBody();
        }
        AcceptActivationRequest.prototype.parse_bytes = function (decoder) { return false; };
        AcceptActivationRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AcceptActivationRequest.ID = 27200;
        return AcceptActivationRequest;
    }());
    message.AcceptActivationRequest = AcceptActivationRequest;
    __reflect(AcceptActivationRequest.prototype, "message.AcceptActivationRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 激活码兑换回复
    // response AcceptActivation
    ////////////////////////////////////////////////////////////////////////////////
    var AcceptActivationRespBody = (function () {
        function AcceptActivationRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        AcceptActivationRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        AcceptActivationRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AcceptActivationRespBody;
    }());
    message.AcceptActivationRespBody = AcceptActivationRespBody;
    __reflect(AcceptActivationRespBody.prototype, "message.AcceptActivationRespBody", ["aone.AoneBody"]);
    var AcceptActivationResponse = (function () {
        function AcceptActivationResponse() {
            this.header = new aone.AoneRespHeader(AcceptActivationResponse.ID);
            this.body = new AcceptActivationRespBody();
        }
        AcceptActivationResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AcceptActivationResponse.prototype.to_bytes = function (encoder) { return false; };
        AcceptActivationResponse.ID = 27201;
        return AcceptActivationResponse;
    }());
    message.AcceptActivationResponse = AcceptActivationResponse;
    __reflect(AcceptActivationResponse.prototype, "message.AcceptActivationResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 祭祀请求
    // request GainRunes
    ////////////////////////////////////////////////////////////////////////////////
    var GainRunesReqBody = (function () {
        function GainRunesReqBody() {
            this.isNovice = false; // 是否是新手引导
        }
        GainRunesReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GainRunesReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // isNovice
            encoder.write_bool(this.isNovice);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GainRunesReqBody;
    }());
    message.GainRunesReqBody = GainRunesReqBody;
    __reflect(GainRunesReqBody.prototype, "message.GainRunesReqBody", ["aone.AoneBody"]);
    var GainRunesRequest = (function () {
        function GainRunesRequest() {
            this.header = new aone.AoneReqHeader(GainRunesRequest.ID);
            this.body = new GainRunesReqBody();
        }
        GainRunesRequest.prototype.parse_bytes = function (decoder) { return false; };
        GainRunesRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GainRunesRequest.ID = 27202;
        return GainRunesRequest;
    }());
    message.GainRunesRequest = GainRunesRequest;
    __reflect(GainRunesRequest.prototype, "message.GainRunesRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 祭祀回复
    // response GainRunes
    ////////////////////////////////////////////////////////////////////////////////
    var GainRunesRespBody = (function () {
        function GainRunesRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GainRunesRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GainRunesRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GainRunesRespBody;
    }());
    message.GainRunesRespBody = GainRunesRespBody;
    __reflect(GainRunesRespBody.prototype, "message.GainRunesRespBody", ["aone.AoneBody"]);
    var GainRunesResponse = (function () {
        function GainRunesResponse() {
            this.header = new aone.AoneRespHeader(GainRunesResponse.ID);
            this.body = new GainRunesRespBody();
        }
        GainRunesResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GainRunesResponse.prototype.to_bytes = function (encoder) { return false; };
        GainRunesResponse.ID = 27203;
        return GainRunesResponse;
    }());
    message.GainRunesResponse = GainRunesResponse;
    __reflect(GainRunesResponse.prototype, "message.GainRunesResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 换符文请求
    // request ChangeRunes
    ////////////////////////////////////////////////////////////////////////////////
    var ChangeRunesReqBody = (function () {
        function ChangeRunesReqBody() {
            this.isNovice = false; // 是否是新手引导
        }
        ChangeRunesReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ChangeRunesReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // isNovice
            encoder.write_bool(this.isNovice);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChangeRunesReqBody;
    }());
    message.ChangeRunesReqBody = ChangeRunesReqBody;
    __reflect(ChangeRunesReqBody.prototype, "message.ChangeRunesReqBody", ["aone.AoneBody"]);
    var ChangeRunesRequest = (function () {
        function ChangeRunesRequest() {
            this.header = new aone.AoneReqHeader(ChangeRunesRequest.ID);
            this.body = new ChangeRunesReqBody();
        }
        ChangeRunesRequest.prototype.parse_bytes = function (decoder) { return false; };
        ChangeRunesRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ChangeRunesRequest.ID = 27204;
        return ChangeRunesRequest;
    }());
    message.ChangeRunesRequest = ChangeRunesRequest;
    __reflect(ChangeRunesRequest.prototype, "message.ChangeRunesRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 换符文回复
    // response ChangeRunes
    ////////////////////////////////////////////////////////////////////////////////
    var ChangeRunesRespBody = (function () {
        function ChangeRunesRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ChangeRunesRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ChangeRunesRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ChangeRunesRespBody;
    }());
    message.ChangeRunesRespBody = ChangeRunesRespBody;
    __reflect(ChangeRunesRespBody.prototype, "message.ChangeRunesRespBody", ["aone.AoneBody"]);
    var ChangeRunesResponse = (function () {
        function ChangeRunesResponse() {
            this.header = new aone.AoneRespHeader(ChangeRunesResponse.ID);
            this.body = new ChangeRunesRespBody();
        }
        ChangeRunesResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChangeRunesResponse.prototype.to_bytes = function (encoder) { return false; };
        ChangeRunesResponse.ID = 27205;
        return ChangeRunesResponse;
    }());
    message.ChangeRunesResponse = ChangeRunesResponse;
    __reflect(ChangeRunesResponse.prototype, "message.ChangeRunesResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取祭祀奖励请求
    // request RunesReward
    ////////////////////////////////////////////////////////////////////////////////
    var RunesRewardReqBody = (function () {
        function RunesRewardReqBody() {
            this.isNovice = false; // 是否是新手引导
        }
        RunesRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RunesRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // isNovice
            encoder.write_bool(this.isNovice);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RunesRewardReqBody;
    }());
    message.RunesRewardReqBody = RunesRewardReqBody;
    __reflect(RunesRewardReqBody.prototype, "message.RunesRewardReqBody", ["aone.AoneBody"]);
    var RunesRewardRequest = (function () {
        function RunesRewardRequest() {
            this.header = new aone.AoneReqHeader(RunesRewardRequest.ID);
            this.body = new RunesRewardReqBody();
        }
        RunesRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        RunesRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RunesRewardRequest.ID = 27206;
        return RunesRewardRequest;
    }());
    message.RunesRewardRequest = RunesRewardRequest;
    __reflect(RunesRewardRequest.prototype, "message.RunesRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取祭祀奖励回复
    // response RunesReward
    ////////////////////////////////////////////////////////////////////////////////
    var RunesRewardRespBody = (function () {
        function RunesRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RunesRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RunesRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RunesRewardRespBody;
    }());
    message.RunesRewardRespBody = RunesRewardRespBody;
    __reflect(RunesRewardRespBody.prototype, "message.RunesRewardRespBody", ["aone.AoneBody"]);
    var RunesRewardResponse = (function () {
        function RunesRewardResponse() {
            this.header = new aone.AoneRespHeader(RunesRewardResponse.ID);
            this.body = new RunesRewardRespBody();
        }
        RunesRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RunesRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        RunesRewardResponse.ID = 27207;
        return RunesRewardResponse;
    }());
    message.RunesRewardResponse = RunesRewardResponse;
    __reflect(RunesRewardResponse.prototype, "message.RunesRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取或者购买新礼包请求
    // request RewardNewGift
    ////////////////////////////////////////////////////////////////////////////////
    var RewardNewGiftReqBody = (function () {
        function RewardNewGiftReqBody() {
            this.giftIndex = 0; // 礼包唯一索引
        }
        RewardNewGiftReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardNewGiftReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // giftIndex
            encoder.write_fixuint32(this.giftIndex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardNewGiftReqBody;
    }());
    message.RewardNewGiftReqBody = RewardNewGiftReqBody;
    __reflect(RewardNewGiftReqBody.prototype, "message.RewardNewGiftReqBody", ["aone.AoneBody"]);
    var RewardNewGiftRequest = (function () {
        function RewardNewGiftRequest() {
            this.header = new aone.AoneReqHeader(RewardNewGiftRequest.ID);
            this.body = new RewardNewGiftReqBody();
        }
        RewardNewGiftRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardNewGiftRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardNewGiftRequest.ID = 27208;
        return RewardNewGiftRequest;
    }());
    message.RewardNewGiftRequest = RewardNewGiftRequest;
    __reflect(RewardNewGiftRequest.prototype, "message.RewardNewGiftRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取或者购买新礼包回复
    // response RewardNewGift
    ////////////////////////////////////////////////////////////////////////////////
    var RewardNewGiftRespBody = (function () {
        function RewardNewGiftRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardNewGiftRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardNewGiftRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardNewGiftRespBody;
    }());
    message.RewardNewGiftRespBody = RewardNewGiftRespBody;
    __reflect(RewardNewGiftRespBody.prototype, "message.RewardNewGiftRespBody", ["aone.AoneBody"]);
    var RewardNewGiftResponse = (function () {
        function RewardNewGiftResponse() {
            this.header = new aone.AoneRespHeader(RewardNewGiftResponse.ID);
            this.body = new RewardNewGiftRespBody();
        }
        RewardNewGiftResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardNewGiftResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardNewGiftResponse.ID = 27209;
        return RewardNewGiftResponse;
    }());
    message.RewardNewGiftResponse = RewardNewGiftResponse;
    __reflect(RewardNewGiftResponse.prototype, "message.RewardNewGiftResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取新礼包请求
    // request GetNewGift
    ////////////////////////////////////////////////////////////////////////////////
    var GetNewGiftReqBody = (function () {
        function GetNewGiftReqBody() {
        }
        GetNewGiftReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GetNewGiftReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GetNewGiftReqBody;
    }());
    message.GetNewGiftReqBody = GetNewGiftReqBody;
    __reflect(GetNewGiftReqBody.prototype, "message.GetNewGiftReqBody", ["aone.AoneBody"]);
    var GetNewGiftRequest = (function () {
        function GetNewGiftRequest() {
            this.header = new aone.AoneReqHeader(GetNewGiftRequest.ID);
            this.body = new GetNewGiftReqBody();
        }
        GetNewGiftRequest.prototype.parse_bytes = function (decoder) { return false; };
        GetNewGiftRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GetNewGiftRequest.ID = 27210;
        return GetNewGiftRequest;
    }());
    message.GetNewGiftRequest = GetNewGiftRequest;
    __reflect(GetNewGiftRequest.prototype, "message.GetNewGiftRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取新礼包回复
    // response GetNewGift
    ////////////////////////////////////////////////////////////////////////////////
    var GetNewGiftRespBody = (function () {
        function GetNewGiftRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        GetNewGiftRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GetNewGiftRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GetNewGiftRespBody;
    }());
    message.GetNewGiftRespBody = GetNewGiftRespBody;
    __reflect(GetNewGiftRespBody.prototype, "message.GetNewGiftRespBody", ["aone.AoneBody"]);
    var GetNewGiftResponse = (function () {
        function GetNewGiftResponse() {
            this.header = new aone.AoneRespHeader(GetNewGiftResponse.ID);
            this.body = new GetNewGiftRespBody();
        }
        GetNewGiftResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GetNewGiftResponse.prototype.to_bytes = function (encoder) { return false; };
        GetNewGiftResponse.ID = 27211;
        return GetNewGiftResponse;
    }());
    message.GetNewGiftResponse = GetNewGiftResponse;
    __reflect(GetNewGiftResponse.prototype, "message.GetNewGiftResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取基金类礼包请求（form5.6）
    // request RewardFormNewGift
    ////////////////////////////////////////////////////////////////////////////////
    var RewardFormNewGiftReqBody = (function () {
        function RewardFormNewGiftReqBody() {
            this.giftIndex = 0; // 礼包唯一索引
            this.dailyindex = 0; // 分支id(6用)
        }
        RewardFormNewGiftReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardFormNewGiftReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // giftIndex
            encoder.write_fixuint32(this.giftIndex);
            // dailyindex
            encoder.write_fixuint32(this.dailyindex);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardFormNewGiftReqBody;
    }());
    message.RewardFormNewGiftReqBody = RewardFormNewGiftReqBody;
    __reflect(RewardFormNewGiftReqBody.prototype, "message.RewardFormNewGiftReqBody", ["aone.AoneBody"]);
    var RewardFormNewGiftRequest = (function () {
        function RewardFormNewGiftRequest() {
            this.header = new aone.AoneReqHeader(RewardFormNewGiftRequest.ID);
            this.body = new RewardFormNewGiftReqBody();
        }
        RewardFormNewGiftRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardFormNewGiftRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardFormNewGiftRequest.ID = 27214;
        return RewardFormNewGiftRequest;
    }());
    message.RewardFormNewGiftRequest = RewardFormNewGiftRequest;
    __reflect(RewardFormNewGiftRequest.prototype, "message.RewardFormNewGiftRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取基金类礼包回复
    // response RewardFormNewGift
    ////////////////////////////////////////////////////////////////////////////////
    var RewardFormNewGiftRespBody = (function () {
        function RewardFormNewGiftRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardFormNewGiftRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardFormNewGiftRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardFormNewGiftRespBody;
    }());
    message.RewardFormNewGiftRespBody = RewardFormNewGiftRespBody;
    __reflect(RewardFormNewGiftRespBody.prototype, "message.RewardFormNewGiftRespBody", ["aone.AoneBody"]);
    var RewardFormNewGiftResponse = (function () {
        function RewardFormNewGiftResponse() {
            this.header = new aone.AoneRespHeader(RewardFormNewGiftResponse.ID);
            this.body = new RewardFormNewGiftRespBody();
        }
        RewardFormNewGiftResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardFormNewGiftResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardFormNewGiftResponse.ID = 27215;
        return RewardFormNewGiftResponse;
    }());
    message.RewardFormNewGiftResponse = RewardFormNewGiftResponse;
    __reflect(RewardFormNewGiftResponse.prototype, "message.RewardFormNewGiftResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 兑换物品请求
    // request ExchangeMall
    ////////////////////////////////////////////////////////////////////////////////
    var ExchangeMallReqBody = (function () {
        function ExchangeMallReqBody() {
            this.type = 0;
            this.mallId = 0;
        }
        ExchangeMallReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ExchangeMallReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // mallId
            encoder.write_fixuint32(this.mallId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ExchangeMallReqBody;
    }());
    message.ExchangeMallReqBody = ExchangeMallReqBody;
    __reflect(ExchangeMallReqBody.prototype, "message.ExchangeMallReqBody", ["aone.AoneBody"]);
    var ExchangeMallRequest = (function () {
        function ExchangeMallRequest() {
            this.header = new aone.AoneReqHeader(ExchangeMallRequest.ID);
            this.body = new ExchangeMallReqBody();
        }
        ExchangeMallRequest.prototype.parse_bytes = function (decoder) { return false; };
        ExchangeMallRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ExchangeMallRequest.ID = 27212;
        return ExchangeMallRequest;
    }());
    message.ExchangeMallRequest = ExchangeMallRequest;
    __reflect(ExchangeMallRequest.prototype, "message.ExchangeMallRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 兑换物品回复
    // response ExchangeMall
    ////////////////////////////////////////////////////////////////////////////////
    var ExchangeMallRespBody = (function () {
        function ExchangeMallRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ExchangeMallRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ExchangeMallRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ExchangeMallRespBody;
    }());
    message.ExchangeMallRespBody = ExchangeMallRespBody;
    __reflect(ExchangeMallRespBody.prototype, "message.ExchangeMallRespBody", ["aone.AoneBody"]);
    var ExchangeMallResponse = (function () {
        function ExchangeMallResponse() {
            this.header = new aone.AoneRespHeader(ExchangeMallResponse.ID);
            this.body = new ExchangeMallRespBody();
        }
        ExchangeMallResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ExchangeMallResponse.prototype.to_bytes = function (encoder) { return false; };
        ExchangeMallResponse.ID = 27213;
        return ExchangeMallResponse;
    }());
    message.ExchangeMallResponse = ExchangeMallResponse;
    __reflect(ExchangeMallResponse.prototype, "message.ExchangeMallResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 投注双色球信息请求
    // request SetRoleLotteryFruit
    ////////////////////////////////////////////////////////////////////////////////
    var SetRoleLotteryFruitReqBody = (function () {
        function SetRoleLotteryFruitReqBody() {
            this.redFruit = 0; // 红色果子
            this.blueFruit = []; // 蓝色果子
        }
        SetRoleLotteryFruitReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SetRoleLotteryFruitReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // redFruit
            encoder.write_fixuint32(this.redFruit);
            // blueFruit
            encoder.write_uint32_vector(this.blueFruit);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SetRoleLotteryFruitReqBody;
    }());
    message.SetRoleLotteryFruitReqBody = SetRoleLotteryFruitReqBody;
    __reflect(SetRoleLotteryFruitReqBody.prototype, "message.SetRoleLotteryFruitReqBody", ["aone.AoneBody"]);
    var SetRoleLotteryFruitRequest = (function () {
        function SetRoleLotteryFruitRequest() {
            this.header = new aone.AoneReqHeader(SetRoleLotteryFruitRequest.ID);
            this.body = new SetRoleLotteryFruitReqBody();
        }
        SetRoleLotteryFruitRequest.prototype.parse_bytes = function (decoder) { return false; };
        SetRoleLotteryFruitRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SetRoleLotteryFruitRequest.ID = 27216;
        return SetRoleLotteryFruitRequest;
    }());
    message.SetRoleLotteryFruitRequest = SetRoleLotteryFruitRequest;
    __reflect(SetRoleLotteryFruitRequest.prototype, "message.SetRoleLotteryFruitRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 投注双色球信息回复
    // response SetRoleFruitInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SetRoleFruitInfoRespBody = (function () {
        function SetRoleFruitInfoRespBody() {
            this.gameInfo = new message.GameInfo();
            this.fruitInfo = new message.PublicFruitInfo();
        }
        SetRoleFruitInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // fruitInfo
            if (decoder_.eof())
                return true;
            if (!this.fruitInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SetRoleFruitInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SetRoleFruitInfoRespBody;
    }());
    message.SetRoleFruitInfoRespBody = SetRoleFruitInfoRespBody;
    __reflect(SetRoleFruitInfoRespBody.prototype, "message.SetRoleFruitInfoRespBody", ["aone.AoneBody"]);
    var SetRoleFruitInfoResponse = (function () {
        function SetRoleFruitInfoResponse() {
            this.header = new aone.AoneRespHeader(SetRoleFruitInfoResponse.ID);
            this.body = new SetRoleFruitInfoRespBody();
        }
        SetRoleFruitInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SetRoleFruitInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        SetRoleFruitInfoResponse.ID = 27217;
        return SetRoleFruitInfoResponse;
    }());
    message.SetRoleFruitInfoResponse = SetRoleFruitInfoResponse;
    __reflect(SetRoleFruitInfoResponse.prototype, "message.SetRoleFruitInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取双色球信息请求
    // request GetLotteryFruitInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GetLotteryFruitInfoReqBody = (function () {
        function GetLotteryFruitInfoReqBody() {
        }
        GetLotteryFruitInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GetLotteryFruitInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GetLotteryFruitInfoReqBody;
    }());
    message.GetLotteryFruitInfoReqBody = GetLotteryFruitInfoReqBody;
    __reflect(GetLotteryFruitInfoReqBody.prototype, "message.GetLotteryFruitInfoReqBody", ["aone.AoneBody"]);
    var GetLotteryFruitInfoRequest = (function () {
        function GetLotteryFruitInfoRequest() {
            this.header = new aone.AoneReqHeader(GetLotteryFruitInfoRequest.ID);
            this.body = new GetLotteryFruitInfoReqBody();
        }
        GetLotteryFruitInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        GetLotteryFruitInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GetLotteryFruitInfoRequest.ID = 27218;
        return GetLotteryFruitInfoRequest;
    }());
    message.GetLotteryFruitInfoRequest = GetLotteryFruitInfoRequest;
    __reflect(GetLotteryFruitInfoRequest.prototype, "message.GetLotteryFruitInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取双色球信息回复
    // response GetLotteryFruitInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GetLotteryFruitInfoRespBody = (function () {
        function GetLotteryFruitInfoRespBody() {
            this.gameInfo = new message.GameInfo();
            this.fruitInfo = new message.PublicFruitInfo();
        }
        GetLotteryFruitInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // fruitInfo
            if (decoder_.eof())
                return true;
            if (!this.fruitInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GetLotteryFruitInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GetLotteryFruitInfoRespBody;
    }());
    message.GetLotteryFruitInfoRespBody = GetLotteryFruitInfoRespBody;
    __reflect(GetLotteryFruitInfoRespBody.prototype, "message.GetLotteryFruitInfoRespBody", ["aone.AoneBody"]);
    var GetLotteryFruitInfoResponse = (function () {
        function GetLotteryFruitInfoResponse() {
            this.header = new aone.AoneRespHeader(GetLotteryFruitInfoResponse.ID);
            this.body = new GetLotteryFruitInfoRespBody();
        }
        GetLotteryFruitInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GetLotteryFruitInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        GetLotteryFruitInfoResponse.ID = 27219;
        return GetLotteryFruitInfoResponse;
    }());
    message.GetLotteryFruitInfoResponse = GetLotteryFruitInfoResponse;
    __reflect(GetLotteryFruitInfoResponse.prototype, "message.GetLotteryFruitInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 以下为临时功能
    // 身份认证请求
    // request Identification
    ////////////////////////////////////////////////////////////////////////////////
    var IdentificationReqBody = (function () {
        function IdentificationReqBody() {
            this.identificationCode = ""; // 身份证号
            this.realName = ""; // 真实姓名
        }
        IdentificationReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IdentificationReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // identificationCode
            encoder.write_string(this.identificationCode);
            // realName
            encoder.write_string(this.realName);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IdentificationReqBody;
    }());
    message.IdentificationReqBody = IdentificationReqBody;
    __reflect(IdentificationReqBody.prototype, "message.IdentificationReqBody", ["aone.AoneBody"]);
    var IdentificationRequest = (function () {
        function IdentificationRequest() {
            this.header = new aone.AoneReqHeader(IdentificationRequest.ID);
            this.body = new IdentificationReqBody();
        }
        IdentificationRequest.prototype.parse_bytes = function (decoder) { return false; };
        IdentificationRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IdentificationRequest.ID = 27220;
        return IdentificationRequest;
    }());
    message.IdentificationRequest = IdentificationRequest;
    __reflect(IdentificationRequest.prototype, "message.IdentificationRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 身份认证回复
    // response Identification
    ////////////////////////////////////////////////////////////////////////////////
    var IdentificationRespBody = (function () {
        function IdentificationRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        IdentificationRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        IdentificationRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IdentificationRespBody;
    }());
    message.IdentificationRespBody = IdentificationRespBody;
    __reflect(IdentificationRespBody.prototype, "message.IdentificationRespBody", ["aone.AoneBody"]);
    var IdentificationResponse = (function () {
        function IdentificationResponse() {
            this.header = new aone.AoneRespHeader(IdentificationResponse.ID);
            this.body = new IdentificationRespBody();
        }
        IdentificationResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IdentificationResponse.prototype.to_bytes = function (encoder) { return false; };
        IdentificationResponse.ID = 27221;
        return IdentificationResponse;
    }());
    message.IdentificationResponse = IdentificationResponse;
    __reflect(IdentificationResponse.prototype, "message.IdentificationResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 玩家登录后，当identification_type为0时发送该协议(目的是不改变登录流程)
    // 身份认证查询请求
    // request IdentificationQuery
    ////////////////////////////////////////////////////////////////////////////////
    var IdentificationQueryReqBody = (function () {
        function IdentificationQueryReqBody() {
        }
        IdentificationQueryReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IdentificationQueryReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IdentificationQueryReqBody;
    }());
    message.IdentificationQueryReqBody = IdentificationQueryReqBody;
    __reflect(IdentificationQueryReqBody.prototype, "message.IdentificationQueryReqBody", ["aone.AoneBody"]);
    var IdentificationQueryRequest = (function () {
        function IdentificationQueryRequest() {
            this.header = new aone.AoneReqHeader(IdentificationQueryRequest.ID);
            this.body = new IdentificationQueryReqBody();
        }
        IdentificationQueryRequest.prototype.parse_bytes = function (decoder) { return false; };
        IdentificationQueryRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IdentificationQueryRequest.ID = 27222;
        return IdentificationQueryRequest;
    }());
    message.IdentificationQueryRequest = IdentificationQueryRequest;
    __reflect(IdentificationQueryRequest.prototype, "message.IdentificationQueryRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 身份认证查询请求
    // response IdentificationQuery
    ////////////////////////////////////////////////////////////////////////////////
    var IdentificationQueryRespBody = (function () {
        function IdentificationQueryRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        IdentificationQueryRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        IdentificationQueryRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IdentificationQueryRespBody;
    }());
    message.IdentificationQueryRespBody = IdentificationQueryRespBody;
    __reflect(IdentificationQueryRespBody.prototype, "message.IdentificationQueryRespBody", ["aone.AoneBody"]);
    var IdentificationQueryResponse = (function () {
        function IdentificationQueryResponse() {
            this.header = new aone.AoneRespHeader(IdentificationQueryResponse.ID);
            this.body = new IdentificationQueryRespBody();
        }
        IdentificationQueryResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IdentificationQueryResponse.prototype.to_bytes = function (encoder) { return false; };
        IdentificationQueryResponse.ID = 27223;
        return IdentificationQueryResponse;
    }());
    message.IdentificationQueryResponse = IdentificationQueryResponse;
    __reflect(IdentificationQueryResponse.prototype, "message.IdentificationQueryResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //购买资源请求
    // request BuyResource
    ////////////////////////////////////////////////////////////////////////////////
    var BuyResourceReqBody = (function () {
        function BuyResourceReqBody() {
            this.restype = 0; //资源类型
        }
        BuyResourceReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuyResourceReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // restype
            encoder.write_fixuint32(this.restype);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyResourceReqBody;
    }());
    message.BuyResourceReqBody = BuyResourceReqBody;
    __reflect(BuyResourceReqBody.prototype, "message.BuyResourceReqBody", ["aone.AoneBody"]);
    var BuyResourceRequest = (function () {
        function BuyResourceRequest() {
            this.header = new aone.AoneReqHeader(BuyResourceRequest.ID);
            this.body = new BuyResourceReqBody();
        }
        BuyResourceRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuyResourceRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuyResourceRequest.ID = 27224;
        return BuyResourceRequest;
    }());
    message.BuyResourceRequest = BuyResourceRequest;
    __reflect(BuyResourceRequest.prototype, "message.BuyResourceRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //购买资源回复
    // response BuyResource
    ////////////////////////////////////////////////////////////////////////////////
    var BuyResourceRespBody = (function () {
        function BuyResourceRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuyResourceRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuyResourceRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuyResourceRespBody;
    }());
    message.BuyResourceRespBody = BuyResourceRespBody;
    __reflect(BuyResourceRespBody.prototype, "message.BuyResourceRespBody", ["aone.AoneBody"]);
    var BuyResourceResponse = (function () {
        function BuyResourceResponse() {
            this.header = new aone.AoneRespHeader(BuyResourceResponse.ID);
            this.body = new BuyResourceRespBody();
        }
        BuyResourceResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuyResourceResponse.prototype.to_bytes = function (encoder) { return false; };
        BuyResourceResponse.ID = 27225;
        return BuyResourceResponse;
    }());
    message.BuyResourceResponse = BuyResourceResponse;
    __reflect(BuyResourceResponse.prototype, "message.BuyResourceResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //快速购买请求
    // request QuickMall
    ////////////////////////////////////////////////////////////////////////////////
    var QuickMallReqBody = (function () {
        function QuickMallReqBody() {
            this.item_id = 0; //物品id
            this.item_num = 0; //购买物品数量
        }
        QuickMallReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QuickMallReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // item_id
            encoder.write_fixuint32(this.item_id);
            // item_num
            encoder.write_fixuint32(this.item_num);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QuickMallReqBody;
    }());
    message.QuickMallReqBody = QuickMallReqBody;
    __reflect(QuickMallReqBody.prototype, "message.QuickMallReqBody", ["aone.AoneBody"]);
    var QuickMallRequest = (function () {
        function QuickMallRequest() {
            this.header = new aone.AoneReqHeader(QuickMallRequest.ID);
            this.body = new QuickMallReqBody();
        }
        QuickMallRequest.prototype.parse_bytes = function (decoder) { return false; };
        QuickMallRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QuickMallRequest.ID = 27226;
        return QuickMallRequest;
    }());
    message.QuickMallRequest = QuickMallRequest;
    __reflect(QuickMallRequest.prototype, "message.QuickMallRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //快速购买回复
    // response QuickMall
    ////////////////////////////////////////////////////////////////////////////////
    var QuickMallRespBody = (function () {
        function QuickMallRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        QuickMallRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        QuickMallRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QuickMallRespBody;
    }());
    message.QuickMallRespBody = QuickMallRespBody;
    __reflect(QuickMallRespBody.prototype, "message.QuickMallRespBody", ["aone.AoneBody"]);
    var QuickMallResponse = (function () {
        function QuickMallResponse() {
            this.header = new aone.AoneRespHeader(QuickMallResponse.ID);
            this.body = new QuickMallRespBody();
        }
        QuickMallResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QuickMallResponse.prototype.to_bytes = function (encoder) { return false; };
        QuickMallResponse.ID = 27227;
        return QuickMallResponse;
    }());
    message.QuickMallResponse = QuickMallResponse;
    __reflect(QuickMallResponse.prototype, "message.QuickMallResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取扭蛋机信息请求
    // request QueryIntegral
    ////////////////////////////////////////////////////////////////////////////////
    var QueryIntegralReqBody = (function () {
        function QueryIntegralReqBody() {
        }
        QueryIntegralReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryIntegralReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryIntegralReqBody;
    }());
    message.QueryIntegralReqBody = QueryIntegralReqBody;
    __reflect(QueryIntegralReqBody.prototype, "message.QueryIntegralReqBody", ["aone.AoneBody"]);
    var QueryIntegralRequest = (function () {
        function QueryIntegralRequest() {
            this.header = new aone.AoneReqHeader(QueryIntegralRequest.ID);
            this.body = new QueryIntegralReqBody();
        }
        QueryIntegralRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryIntegralRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryIntegralRequest.ID = 27228;
        return QueryIntegralRequest;
    }());
    message.QueryIntegralRequest = QueryIntegralRequest;
    __reflect(QueryIntegralRequest.prototype, "message.QueryIntegralRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取扭蛋机信息回复
    // response QueryIntegral
    ////////////////////////////////////////////////////////////////////////////////
    var QueryIntegralRespBody = (function () {
        function QueryIntegralRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        QueryIntegralRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        QueryIntegralRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryIntegralRespBody;
    }());
    message.QueryIntegralRespBody = QueryIntegralRespBody;
    __reflect(QueryIntegralRespBody.prototype, "message.QueryIntegralRespBody", ["aone.AoneBody"]);
    var QueryIntegralResponse = (function () {
        function QueryIntegralResponse() {
            this.header = new aone.AoneRespHeader(QueryIntegralResponse.ID);
            this.body = new QueryIntegralRespBody();
        }
        QueryIntegralResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryIntegralResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryIntegralResponse.ID = 27229;
        return QueryIntegralResponse;
    }());
    message.QueryIntegralResponse = QueryIntegralResponse;
    __reflect(QueryIntegralResponse.prototype, "message.QueryIntegralResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 扭蛋机抽奖请求
    // request IntegralLottery
    ////////////////////////////////////////////////////////////////////////////////
    var IntegralLotteryReqBody = (function () {
        function IntegralLotteryReqBody() {
            this.lottery_time = 0; // 抽奖次数
        }
        IntegralLotteryReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IntegralLotteryReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // lottery_time
            encoder.write_fixuint32(this.lottery_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IntegralLotteryReqBody;
    }());
    message.IntegralLotteryReqBody = IntegralLotteryReqBody;
    __reflect(IntegralLotteryReqBody.prototype, "message.IntegralLotteryReqBody", ["aone.AoneBody"]);
    var IntegralLotteryRequest = (function () {
        function IntegralLotteryRequest() {
            this.header = new aone.AoneReqHeader(IntegralLotteryRequest.ID);
            this.body = new IntegralLotteryReqBody();
        }
        IntegralLotteryRequest.prototype.parse_bytes = function (decoder) { return false; };
        IntegralLotteryRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IntegralLotteryRequest.ID = 27230;
        return IntegralLotteryRequest;
    }());
    message.IntegralLotteryRequest = IntegralLotteryRequest;
    __reflect(IntegralLotteryRequest.prototype, "message.IntegralLotteryRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 扭蛋机抽奖回复
    // response IntegralLottery
    ////////////////////////////////////////////////////////////////////////////////
    var IntegralLotteryRespBody = (function () {
        function IntegralLotteryRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        IntegralLotteryRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        IntegralLotteryRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IntegralLotteryRespBody;
    }());
    message.IntegralLotteryRespBody = IntegralLotteryRespBody;
    __reflect(IntegralLotteryRespBody.prototype, "message.IntegralLotteryRespBody", ["aone.AoneBody"]);
    var IntegralLotteryResponse = (function () {
        function IntegralLotteryResponse() {
            this.header = new aone.AoneRespHeader(IntegralLotteryResponse.ID);
            this.body = new IntegralLotteryRespBody();
        }
        IntegralLotteryResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IntegralLotteryResponse.prototype.to_bytes = function (encoder) { return false; };
        IntegralLotteryResponse.ID = 27231;
        return IntegralLotteryResponse;
    }());
    message.IntegralLotteryResponse = IntegralLotteryResponse;
    __reflect(IntegralLotteryResponse.prototype, "message.IntegralLotteryResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 扭蛋机兑换奖品请求
    // request IntegralExchange
    ////////////////////////////////////////////////////////////////////////////////
    var IntegralExchangeReqBody = (function () {
        function IntegralExchangeReqBody() {
            this.exchangeId = 0;
            this.exchange_time = 0;
        }
        IntegralExchangeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IntegralExchangeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // exchangeId
            encoder.write_fixuint32(this.exchangeId);
            // exchange_time
            encoder.write_fixuint32(this.exchange_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IntegralExchangeReqBody;
    }());
    message.IntegralExchangeReqBody = IntegralExchangeReqBody;
    __reflect(IntegralExchangeReqBody.prototype, "message.IntegralExchangeReqBody", ["aone.AoneBody"]);
    var IntegralExchangeRequest = (function () {
        function IntegralExchangeRequest() {
            this.header = new aone.AoneReqHeader(IntegralExchangeRequest.ID);
            this.body = new IntegralExchangeReqBody();
        }
        IntegralExchangeRequest.prototype.parse_bytes = function (decoder) { return false; };
        IntegralExchangeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IntegralExchangeRequest.ID = 27232;
        return IntegralExchangeRequest;
    }());
    message.IntegralExchangeRequest = IntegralExchangeRequest;
    __reflect(IntegralExchangeRequest.prototype, "message.IntegralExchangeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 扭蛋机兑换奖品回复
    // response IntegralExchange
    ////////////////////////////////////////////////////////////////////////////////
    var IntegralExchangeRespBody = (function () {
        function IntegralExchangeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        IntegralExchangeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        IntegralExchangeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IntegralExchangeRespBody;
    }());
    message.IntegralExchangeRespBody = IntegralExchangeRespBody;
    __reflect(IntegralExchangeRespBody.prototype, "message.IntegralExchangeRespBody", ["aone.AoneBody"]);
    var IntegralExchangeResponse = (function () {
        function IntegralExchangeResponse() {
            this.header = new aone.AoneRespHeader(IntegralExchangeResponse.ID);
            this.body = new IntegralExchangeRespBody();
        }
        IntegralExchangeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IntegralExchangeResponse.prototype.to_bytes = function (encoder) { return false; };
        IntegralExchangeResponse.ID = 27233;
        return IntegralExchangeResponse;
    }());
    message.IntegralExchangeResponse = IntegralExchangeResponse;
    __reflect(IntegralExchangeResponse.prototype, "message.IntegralExchangeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取武将首次升星奖励请求
    // request UpStarReward
    ////////////////////////////////////////////////////////////////////////////////
    var UpStarRewardReqBody = (function () {
        function UpStarRewardReqBody() {
            this.star_level = 0;
        }
        UpStarRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        UpStarRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // star_level
            encoder.write_fixuint32(this.star_level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return UpStarRewardReqBody;
    }());
    message.UpStarRewardReqBody = UpStarRewardReqBody;
    __reflect(UpStarRewardReqBody.prototype, "message.UpStarRewardReqBody", ["aone.AoneBody"]);
    var UpStarRewardRequest = (function () {
        function UpStarRewardRequest() {
            this.header = new aone.AoneReqHeader(UpStarRewardRequest.ID);
            this.body = new UpStarRewardReqBody();
        }
        UpStarRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        UpStarRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        UpStarRewardRequest.ID = 27234;
        return UpStarRewardRequest;
    }());
    message.UpStarRewardRequest = UpStarRewardRequest;
    __reflect(UpStarRewardRequest.prototype, "message.UpStarRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取武将首次升星奖励回复
    // response UpStarReward
    ////////////////////////////////////////////////////////////////////////////////
    var UpStarRewardRespBody = (function () {
        function UpStarRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        UpStarRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        UpStarRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return UpStarRewardRespBody;
    }());
    message.UpStarRewardRespBody = UpStarRewardRespBody;
    __reflect(UpStarRewardRespBody.prototype, "message.UpStarRewardRespBody", ["aone.AoneBody"]);
    var UpStarRewardResponse = (function () {
        function UpStarRewardResponse() {
            this.header = new aone.AoneRespHeader(UpStarRewardResponse.ID);
            this.body = new UpStarRewardRespBody();
        }
        UpStarRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UpStarRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        UpStarRewardResponse.ID = 27235;
        return UpStarRewardResponse;
    }());
    message.UpStarRewardResponse = UpStarRewardResponse;
    __reflect(UpStarRewardResponse.prototype, "message.UpStarRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取升级奖励请求
    // request UpLevelReward
    ////////////////////////////////////////////////////////////////////////////////
    var UpLevelRewardReqBody = (function () {
        function UpLevelRewardReqBody() {
            this.index = 0;
        }
        UpLevelRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        UpLevelRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return UpLevelRewardReqBody;
    }());
    message.UpLevelRewardReqBody = UpLevelRewardReqBody;
    __reflect(UpLevelRewardReqBody.prototype, "message.UpLevelRewardReqBody", ["aone.AoneBody"]);
    var UpLevelRewardRequest = (function () {
        function UpLevelRewardRequest() {
            this.header = new aone.AoneReqHeader(UpLevelRewardRequest.ID);
            this.body = new UpLevelRewardReqBody();
        }
        UpLevelRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        UpLevelRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        UpLevelRewardRequest.ID = 27236;
        return UpLevelRewardRequest;
    }());
    message.UpLevelRewardRequest = UpLevelRewardRequest;
    __reflect(UpLevelRewardRequest.prototype, "message.UpLevelRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取升级奖励回复
    // response UpLevelReward
    ////////////////////////////////////////////////////////////////////////////////
    var UpLevelRewardRespBody = (function () {
        function UpLevelRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        UpLevelRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        UpLevelRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return UpLevelRewardRespBody;
    }());
    message.UpLevelRewardRespBody = UpLevelRewardRespBody;
    __reflect(UpLevelRewardRespBody.prototype, "message.UpLevelRewardRespBody", ["aone.AoneBody"]);
    var UpLevelRewardResponse = (function () {
        function UpLevelRewardResponse() {
            this.header = new aone.AoneRespHeader(UpLevelRewardResponse.ID);
            this.body = new UpLevelRewardRespBody();
        }
        UpLevelRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UpLevelRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        UpLevelRewardResponse.ID = 27237;
        return UpLevelRewardResponse;
    }());
    message.UpLevelRewardResponse = UpLevelRewardResponse;
    __reflect(UpLevelRewardResponse.prototype, "message.UpLevelRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 大V领取奖励请求
    // request BigVipReward
    ////////////////////////////////////////////////////////////////////////////////
    var BigVipRewardReqBody = (function () {
        function BigVipRewardReqBody() {
            this.star_level = 0;
        }
        BigVipRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BigVipRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // star_level
            encoder.write_fixuint32(this.star_level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BigVipRewardReqBody;
    }());
    message.BigVipRewardReqBody = BigVipRewardReqBody;
    __reflect(BigVipRewardReqBody.prototype, "message.BigVipRewardReqBody", ["aone.AoneBody"]);
    var BigVipRewardRequest = (function () {
        function BigVipRewardRequest() {
            this.header = new aone.AoneReqHeader(BigVipRewardRequest.ID);
            this.body = new BigVipRewardReqBody();
        }
        BigVipRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        BigVipRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BigVipRewardRequest.ID = 27238;
        return BigVipRewardRequest;
    }());
    message.BigVipRewardRequest = BigVipRewardRequest;
    __reflect(BigVipRewardRequest.prototype, "message.BigVipRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 大V领取奖励回复
    // response BigVipReward
    ////////////////////////////////////////////////////////////////////////////////
    var BigVipRewardRespBody = (function () {
        function BigVipRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BigVipRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BigVipRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BigVipRewardRespBody;
    }());
    message.BigVipRewardRespBody = BigVipRewardRespBody;
    __reflect(BigVipRewardRespBody.prototype, "message.BigVipRewardRespBody", ["aone.AoneBody"]);
    var BigVipRewardResponse = (function () {
        function BigVipRewardResponse() {
            this.header = new aone.AoneRespHeader(BigVipRewardResponse.ID);
            this.body = new BigVipRewardRespBody();
        }
        BigVipRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BigVipRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        BigVipRewardResponse.ID = 27239;
        return BigVipRewardResponse;
    }());
    message.BigVipRewardResponse = BigVipRewardResponse;
    __reflect(BigVipRewardResponse.prototype, "message.BigVipRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置光环请求
    // request SetHalo
    ////////////////////////////////////////////////////////////////////////////////
    var SetHaloReqBody = (function () {
        function SetHaloReqBody() {
            this.halo_id = 0;
        }
        SetHaloReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SetHaloReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // halo_id
            encoder.write_fixuint32(this.halo_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SetHaloReqBody;
    }());
    message.SetHaloReqBody = SetHaloReqBody;
    __reflect(SetHaloReqBody.prototype, "message.SetHaloReqBody", ["aone.AoneBody"]);
    var SetHaloRequest = (function () {
        function SetHaloRequest() {
            this.header = new aone.AoneReqHeader(SetHaloRequest.ID);
            this.body = new SetHaloReqBody();
        }
        SetHaloRequest.prototype.parse_bytes = function (decoder) { return false; };
        SetHaloRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SetHaloRequest.ID = 27240;
        return SetHaloRequest;
    }());
    message.SetHaloRequest = SetHaloRequest;
    __reflect(SetHaloRequest.prototype, "message.SetHaloRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置光环回复
    // response SetHalo
    ////////////////////////////////////////////////////////////////////////////////
    var SetHaloRespBody = (function () {
        function SetHaloRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SetHaloRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SetHaloRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SetHaloRespBody;
    }());
    message.SetHaloRespBody = SetHaloRespBody;
    __reflect(SetHaloRespBody.prototype, "message.SetHaloRespBody", ["aone.AoneBody"]);
    var SetHaloResponse = (function () {
        function SetHaloResponse() {
            this.header = new aone.AoneRespHeader(SetHaloResponse.ID);
            this.body = new SetHaloRespBody();
        }
        SetHaloResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SetHaloResponse.prototype.to_bytes = function (encoder) { return false; };
        SetHaloResponse.ID = 27241;
        return SetHaloResponse;
    }());
    message.SetHaloResponse = SetHaloResponse;
    __reflect(SetHaloResponse.prototype, "message.SetHaloResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买开服七日礼包请求
    // request BuySevenNewGift
    ////////////////////////////////////////////////////////////////////////////////
    var BuySevenNewGiftReqBody = (function () {
        function BuySevenNewGiftReqBody() {
            this.index = 0;
        }
        BuySevenNewGiftReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuySevenNewGiftReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuySevenNewGiftReqBody;
    }());
    message.BuySevenNewGiftReqBody = BuySevenNewGiftReqBody;
    __reflect(BuySevenNewGiftReqBody.prototype, "message.BuySevenNewGiftReqBody", ["aone.AoneBody"]);
    var BuySevenNewGiftRequest = (function () {
        function BuySevenNewGiftRequest() {
            this.header = new aone.AoneReqHeader(BuySevenNewGiftRequest.ID);
            this.body = new BuySevenNewGiftReqBody();
        }
        BuySevenNewGiftRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuySevenNewGiftRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuySevenNewGiftRequest.ID = 27242;
        return BuySevenNewGiftRequest;
    }());
    message.BuySevenNewGiftRequest = BuySevenNewGiftRequest;
    __reflect(BuySevenNewGiftRequest.prototype, "message.BuySevenNewGiftRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买开服七日礼包回复
    // response BuySevenNewGift
    ////////////////////////////////////////////////////////////////////////////////
    var BuySevenNewGiftRespBody = (function () {
        function BuySevenNewGiftRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuySevenNewGiftRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuySevenNewGiftRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuySevenNewGiftRespBody;
    }());
    message.BuySevenNewGiftRespBody = BuySevenNewGiftRespBody;
    __reflect(BuySevenNewGiftRespBody.prototype, "message.BuySevenNewGiftRespBody", ["aone.AoneBody"]);
    var BuySevenNewGiftResponse = (function () {
        function BuySevenNewGiftResponse() {
            this.header = new aone.AoneRespHeader(BuySevenNewGiftResponse.ID);
            this.body = new BuySevenNewGiftRespBody();
        }
        BuySevenNewGiftResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuySevenNewGiftResponse.prototype.to_bytes = function (encoder) { return false; };
        BuySevenNewGiftResponse.ID = 27243;
        return BuySevenNewGiftResponse;
    }());
    message.BuySevenNewGiftResponse = BuySevenNewGiftResponse;
    __reflect(BuySevenNewGiftResponse.prototype, "message.BuySevenNewGiftResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 兑换徽章请求
    // request ExchangePartner
    ////////////////////////////////////////////////////////////////////////////////
    var ExchangePartnerReqBody = (function () {
        function ExchangePartnerReqBody() {
            this.partnerId = 0;
            this.count = 0;
        }
        ExchangePartnerReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ExchangePartnerReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // partnerId
            encoder.write_fixuint32(this.partnerId);
            // count
            encoder.write_fixuint32(this.count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ExchangePartnerReqBody;
    }());
    message.ExchangePartnerReqBody = ExchangePartnerReqBody;
    __reflect(ExchangePartnerReqBody.prototype, "message.ExchangePartnerReqBody", ["aone.AoneBody"]);
    var ExchangePartnerRequest = (function () {
        function ExchangePartnerRequest() {
            this.header = new aone.AoneReqHeader(ExchangePartnerRequest.ID);
            this.body = new ExchangePartnerReqBody();
        }
        ExchangePartnerRequest.prototype.parse_bytes = function (decoder) { return false; };
        ExchangePartnerRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ExchangePartnerRequest.ID = 27244;
        return ExchangePartnerRequest;
    }());
    message.ExchangePartnerRequest = ExchangePartnerRequest;
    __reflect(ExchangePartnerRequest.prototype, "message.ExchangePartnerRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 兑换徽章回复
    // response ExchangePartner
    ////////////////////////////////////////////////////////////////////////////////
    var ExchangePartnerRespBody = (function () {
        function ExchangePartnerRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ExchangePartnerRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ExchangePartnerRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ExchangePartnerRespBody;
    }());
    message.ExchangePartnerRespBody = ExchangePartnerRespBody;
    __reflect(ExchangePartnerRespBody.prototype, "message.ExchangePartnerRespBody", ["aone.AoneBody"]);
    var ExchangePartnerResponse = (function () {
        function ExchangePartnerResponse() {
            this.header = new aone.AoneRespHeader(ExchangePartnerResponse.ID);
            this.body = new ExchangePartnerRespBody();
        }
        ExchangePartnerResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ExchangePartnerResponse.prototype.to_bytes = function (encoder) { return false; };
        ExchangePartnerResponse.ID = 27245;
        return ExchangePartnerResponse;
    }());
    message.ExchangePartnerResponse = ExchangePartnerResponse;
    __reflect(ExchangePartnerResponse.prototype, "message.ExchangePartnerResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开启卡包格子请求
    // request BuyPotatoCount
    ////////////////////////////////////////////////////////////////////////////////
    var BuyPotatoCountReqBody = (function () {
        function BuyPotatoCountReqBody() {
        }
        BuyPotatoCountReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuyPotatoCountReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyPotatoCountReqBody;
    }());
    message.BuyPotatoCountReqBody = BuyPotatoCountReqBody;
    __reflect(BuyPotatoCountReqBody.prototype, "message.BuyPotatoCountReqBody", ["aone.AoneBody"]);
    var BuyPotatoCountRequest = (function () {
        function BuyPotatoCountRequest() {
            this.header = new aone.AoneReqHeader(BuyPotatoCountRequest.ID);
            this.body = new BuyPotatoCountReqBody();
        }
        BuyPotatoCountRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuyPotatoCountRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuyPotatoCountRequest.ID = 27246;
        return BuyPotatoCountRequest;
    }());
    message.BuyPotatoCountRequest = BuyPotatoCountRequest;
    __reflect(BuyPotatoCountRequest.prototype, "message.BuyPotatoCountRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 开启卡包格子回复
    // response BuyPotatoCount
    ////////////////////////////////////////////////////////////////////////////////
    var BuyPotatoCountRespBody = (function () {
        function BuyPotatoCountRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuyPotatoCountRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuyPotatoCountRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuyPotatoCountRespBody;
    }());
    message.BuyPotatoCountRespBody = BuyPotatoCountRespBody;
    __reflect(BuyPotatoCountRespBody.prototype, "message.BuyPotatoCountRespBody", ["aone.AoneBody"]);
    var BuyPotatoCountResponse = (function () {
        function BuyPotatoCountResponse() {
            this.header = new aone.AoneRespHeader(BuyPotatoCountResponse.ID);
            this.body = new BuyPotatoCountRespBody();
        }
        BuyPotatoCountResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuyPotatoCountResponse.prototype.to_bytes = function (encoder) { return false; };
        BuyPotatoCountResponse.ID = 27247;
        return BuyPotatoCountResponse;
    }());
    message.BuyPotatoCountResponse = BuyPotatoCountResponse;
    __reflect(BuyPotatoCountResponse.prototype, "message.BuyPotatoCountResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 许愿屋抽奖请求
    // request XuyuanLottery
    ////////////////////////////////////////////////////////////////////////////////
    var XuyuanLotteryReqBody = (function () {
        function XuyuanLotteryReqBody() {
            this.lottery_time = 0; // 抽奖次数
        }
        XuyuanLotteryReqBody.prototype.parse_bytes = function (decoder) { return false; };
        XuyuanLotteryReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // lottery_time
            encoder.write_fixuint32(this.lottery_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return XuyuanLotteryReqBody;
    }());
    message.XuyuanLotteryReqBody = XuyuanLotteryReqBody;
    __reflect(XuyuanLotteryReqBody.prototype, "message.XuyuanLotteryReqBody", ["aone.AoneBody"]);
    var XuyuanLotteryRequest = (function () {
        function XuyuanLotteryRequest() {
            this.header = new aone.AoneReqHeader(XuyuanLotteryRequest.ID);
            this.body = new XuyuanLotteryReqBody();
        }
        XuyuanLotteryRequest.prototype.parse_bytes = function (decoder) { return false; };
        XuyuanLotteryRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        XuyuanLotteryRequest.ID = 27248;
        return XuyuanLotteryRequest;
    }());
    message.XuyuanLotteryRequest = XuyuanLotteryRequest;
    __reflect(XuyuanLotteryRequest.prototype, "message.XuyuanLotteryRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 许愿屋抽奖回复
    // response XuyuanLottery
    ////////////////////////////////////////////////////////////////////////////////
    var XuyuanLotteryRespBody = (function () {
        function XuyuanLotteryRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        XuyuanLotteryRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        XuyuanLotteryRespBody.prototype.to_bytes = function (encoder) { return false; };
        return XuyuanLotteryRespBody;
    }());
    message.XuyuanLotteryRespBody = XuyuanLotteryRespBody;
    __reflect(XuyuanLotteryRespBody.prototype, "message.XuyuanLotteryRespBody", ["aone.AoneBody"]);
    var XuyuanLotteryResponse = (function () {
        function XuyuanLotteryResponse() {
            this.header = new aone.AoneRespHeader(XuyuanLotteryResponse.ID);
            this.body = new XuyuanLotteryRespBody();
        }
        XuyuanLotteryResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        XuyuanLotteryResponse.prototype.to_bytes = function (encoder) { return false; };
        XuyuanLotteryResponse.ID = 27249;
        return XuyuanLotteryResponse;
    }());
    message.XuyuanLotteryResponse = XuyuanLotteryResponse;
    __reflect(XuyuanLotteryResponse.prototype, "message.XuyuanLotteryResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 许愿屋兑换请求
    // request XuyuanExchange
    ////////////////////////////////////////////////////////////////////////////////
    var XuyuanExchangeReqBody = (function () {
        function XuyuanExchangeReqBody() {
            this.exchangeId = 0;
            this.exchange_time = 0;
        }
        XuyuanExchangeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        XuyuanExchangeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // exchangeId
            encoder.write_fixuint32(this.exchangeId);
            // exchange_time
            encoder.write_fixuint32(this.exchange_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return XuyuanExchangeReqBody;
    }());
    message.XuyuanExchangeReqBody = XuyuanExchangeReqBody;
    __reflect(XuyuanExchangeReqBody.prototype, "message.XuyuanExchangeReqBody", ["aone.AoneBody"]);
    var XuyuanExchangeRequest = (function () {
        function XuyuanExchangeRequest() {
            this.header = new aone.AoneReqHeader(XuyuanExchangeRequest.ID);
            this.body = new XuyuanExchangeReqBody();
        }
        XuyuanExchangeRequest.prototype.parse_bytes = function (decoder) { return false; };
        XuyuanExchangeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        XuyuanExchangeRequest.ID = 27250;
        return XuyuanExchangeRequest;
    }());
    message.XuyuanExchangeRequest = XuyuanExchangeRequest;
    __reflect(XuyuanExchangeRequest.prototype, "message.XuyuanExchangeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 许愿屋兑换回复
    // response XuyuanExchange
    ////////////////////////////////////////////////////////////////////////////////
    var XuyuanExchangeRespBody = (function () {
        function XuyuanExchangeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        XuyuanExchangeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        XuyuanExchangeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return XuyuanExchangeRespBody;
    }());
    message.XuyuanExchangeRespBody = XuyuanExchangeRespBody;
    __reflect(XuyuanExchangeRespBody.prototype, "message.XuyuanExchangeRespBody", ["aone.AoneBody"]);
    var XuyuanExchangeResponse = (function () {
        function XuyuanExchangeResponse() {
            this.header = new aone.AoneRespHeader(XuyuanExchangeResponse.ID);
            this.body = new XuyuanExchangeRespBody();
        }
        XuyuanExchangeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        XuyuanExchangeResponse.prototype.to_bytes = function (encoder) { return false; };
        XuyuanExchangeResponse.ID = 27251;
        return XuyuanExchangeResponse;
    }());
    message.XuyuanExchangeResponse = XuyuanExchangeResponse;
    __reflect(XuyuanExchangeResponse.prototype, "message.XuyuanExchangeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 许愿屋进度奖励请求
    // request XuyuanStepReward
    ////////////////////////////////////////////////////////////////////////////////
    var XuyuanStepRewardReqBody = (function () {
        function XuyuanStepRewardReqBody() {
            this.step_id = 0;
        }
        XuyuanStepRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        XuyuanStepRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // step_id
            encoder.write_fixuint32(this.step_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return XuyuanStepRewardReqBody;
    }());
    message.XuyuanStepRewardReqBody = XuyuanStepRewardReqBody;
    __reflect(XuyuanStepRewardReqBody.prototype, "message.XuyuanStepRewardReqBody", ["aone.AoneBody"]);
    var XuyuanStepRewardRequest = (function () {
        function XuyuanStepRewardRequest() {
            this.header = new aone.AoneReqHeader(XuyuanStepRewardRequest.ID);
            this.body = new XuyuanStepRewardReqBody();
        }
        XuyuanStepRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        XuyuanStepRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        XuyuanStepRewardRequest.ID = 27252;
        return XuyuanStepRewardRequest;
    }());
    message.XuyuanStepRewardRequest = XuyuanStepRewardRequest;
    __reflect(XuyuanStepRewardRequest.prototype, "message.XuyuanStepRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 许愿屋进度奖励回复
    // response XuyuanStepReward
    ////////////////////////////////////////////////////////////////////////////////
    var XuyuanStepRewardRespBody = (function () {
        function XuyuanStepRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        XuyuanStepRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        XuyuanStepRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return XuyuanStepRewardRespBody;
    }());
    message.XuyuanStepRewardRespBody = XuyuanStepRewardRespBody;
    __reflect(XuyuanStepRewardRespBody.prototype, "message.XuyuanStepRewardRespBody", ["aone.AoneBody"]);
    var XuyuanStepRewardResponse = (function () {
        function XuyuanStepRewardResponse() {
            this.header = new aone.AoneRespHeader(XuyuanStepRewardResponse.ID);
            this.body = new XuyuanStepRewardRespBody();
        }
        XuyuanStepRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        XuyuanStepRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        XuyuanStepRewardResponse.ID = 27253;
        return XuyuanStepRewardResponse;
    }());
    message.XuyuanStepRewardResponse = XuyuanStepRewardResponse;
    __reflect(XuyuanStepRewardResponse.prototype, "message.XuyuanStepRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 申请短信验证码请求
    // request ApplyPhoneCode
    ////////////////////////////////////////////////////////////////////////////////
    var ApplyPhoneCodeReqBody = (function () {
        function ApplyPhoneCodeReqBody() {
            this.phone = ""; // 手机号码(接收短信验证码用)
        }
        ApplyPhoneCodeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ApplyPhoneCodeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // phone
            encoder.write_string(this.phone);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ApplyPhoneCodeReqBody;
    }());
    message.ApplyPhoneCodeReqBody = ApplyPhoneCodeReqBody;
    __reflect(ApplyPhoneCodeReqBody.prototype, "message.ApplyPhoneCodeReqBody", ["aone.AoneBody"]);
    var ApplyPhoneCodeRequest = (function () {
        function ApplyPhoneCodeRequest() {
            this.header = new aone.AoneReqHeader(ApplyPhoneCodeRequest.ID);
            this.body = new ApplyPhoneCodeReqBody();
        }
        ApplyPhoneCodeRequest.prototype.parse_bytes = function (decoder) { return false; };
        ApplyPhoneCodeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ApplyPhoneCodeRequest.ID = 27254;
        return ApplyPhoneCodeRequest;
    }());
    message.ApplyPhoneCodeRequest = ApplyPhoneCodeRequest;
    __reflect(ApplyPhoneCodeRequest.prototype, "message.ApplyPhoneCodeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 申请短信验证码回复
    // response ApplyPhoneCode
    ////////////////////////////////////////////////////////////////////////////////
    var ApplyPhoneCodeRespBody = (function () {
        function ApplyPhoneCodeRespBody() {
        }
        ApplyPhoneCodeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        ApplyPhoneCodeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ApplyPhoneCodeRespBody;
    }());
    message.ApplyPhoneCodeRespBody = ApplyPhoneCodeRespBody;
    __reflect(ApplyPhoneCodeRespBody.prototype, "message.ApplyPhoneCodeRespBody", ["aone.AoneBody"]);
    var ApplyPhoneCodeResponse = (function () {
        function ApplyPhoneCodeResponse() {
            this.header = new aone.AoneRespHeader(ApplyPhoneCodeResponse.ID);
            this.body = new ApplyPhoneCodeRespBody();
        }
        ApplyPhoneCodeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ApplyPhoneCodeResponse.prototype.to_bytes = function (encoder) { return false; };
        ApplyPhoneCodeResponse.ID = 27255;
        return ApplyPhoneCodeResponse;
    }());
    message.ApplyPhoneCodeResponse = ApplyPhoneCodeResponse;
    __reflect(ApplyPhoneCodeResponse.prototype, "message.ApplyPhoneCodeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 验证短信验证码请求
    // request VerifyPhoneCode
    ////////////////////////////////////////////////////////////////////////////////
    var VerifyPhoneCodeReqBody = (function () {
        function VerifyPhoneCodeReqBody() {
            this.phone = ""; //手机号码(接收短信验证码用)
            this.code = ""; //短信验证码
        }
        VerifyPhoneCodeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        VerifyPhoneCodeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // phone
            encoder.write_string(this.phone);
            // code
            encoder.write_string(this.code);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return VerifyPhoneCodeReqBody;
    }());
    message.VerifyPhoneCodeReqBody = VerifyPhoneCodeReqBody;
    __reflect(VerifyPhoneCodeReqBody.prototype, "message.VerifyPhoneCodeReqBody", ["aone.AoneBody"]);
    var VerifyPhoneCodeRequest = (function () {
        function VerifyPhoneCodeRequest() {
            this.header = new aone.AoneReqHeader(VerifyPhoneCodeRequest.ID);
            this.body = new VerifyPhoneCodeReqBody();
        }
        VerifyPhoneCodeRequest.prototype.parse_bytes = function (decoder) { return false; };
        VerifyPhoneCodeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        VerifyPhoneCodeRequest.ID = 27256;
        return VerifyPhoneCodeRequest;
    }());
    message.VerifyPhoneCodeRequest = VerifyPhoneCodeRequest;
    __reflect(VerifyPhoneCodeRequest.prototype, "message.VerifyPhoneCodeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 验证短信验证码回复
    // response VerifyPhoneCode
    ////////////////////////////////////////////////////////////////////////////////
    var VerifyPhoneCodeRespBody = (function () {
        function VerifyPhoneCodeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        VerifyPhoneCodeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        VerifyPhoneCodeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return VerifyPhoneCodeRespBody;
    }());
    message.VerifyPhoneCodeRespBody = VerifyPhoneCodeRespBody;
    __reflect(VerifyPhoneCodeRespBody.prototype, "message.VerifyPhoneCodeRespBody", ["aone.AoneBody"]);
    var VerifyPhoneCodeResponse = (function () {
        function VerifyPhoneCodeResponse() {
            this.header = new aone.AoneRespHeader(VerifyPhoneCodeResponse.ID);
            this.body = new VerifyPhoneCodeRespBody();
        }
        VerifyPhoneCodeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        VerifyPhoneCodeResponse.prototype.to_bytes = function (encoder) { return false; };
        VerifyPhoneCodeResponse.ID = 27257;
        return VerifyPhoneCodeResponse;
    }());
    message.VerifyPhoneCodeResponse = VerifyPhoneCodeResponse;
    __reflect(VerifyPhoneCodeResponse.prototype, "message.VerifyPhoneCodeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询应用下用户是否绑定过手机号请求
    // request QueryBindPhone
    ////////////////////////////////////////////////////////////////////////////////
    var QueryBindPhoneReqBody = (function () {
        function QueryBindPhoneReqBody() {
        }
        QueryBindPhoneReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryBindPhoneReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryBindPhoneReqBody;
    }());
    message.QueryBindPhoneReqBody = QueryBindPhoneReqBody;
    __reflect(QueryBindPhoneReqBody.prototype, "message.QueryBindPhoneReqBody", ["aone.AoneBody"]);
    var QueryBindPhoneRequest = (function () {
        function QueryBindPhoneRequest() {
            this.header = new aone.AoneReqHeader(QueryBindPhoneRequest.ID);
            this.body = new QueryBindPhoneReqBody();
        }
        QueryBindPhoneRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryBindPhoneRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryBindPhoneRequest.ID = 27258;
        return QueryBindPhoneRequest;
    }());
    message.QueryBindPhoneRequest = QueryBindPhoneRequest;
    __reflect(QueryBindPhoneRequest.prototype, "message.QueryBindPhoneRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 查询应用下用户是否绑定过手机号回复
    // response QueryBindPhone
    ////////////////////////////////////////////////////////////////////////////////
    var QueryBindPhoneRespBody = (function () {
        function QueryBindPhoneRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        QueryBindPhoneRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        QueryBindPhoneRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryBindPhoneRespBody;
    }());
    message.QueryBindPhoneRespBody = QueryBindPhoneRespBody;
    __reflect(QueryBindPhoneRespBody.prototype, "message.QueryBindPhoneRespBody", ["aone.AoneBody"]);
    var QueryBindPhoneResponse = (function () {
        function QueryBindPhoneResponse() {
            this.header = new aone.AoneRespHeader(QueryBindPhoneResponse.ID);
            this.body = new QueryBindPhoneRespBody();
        }
        QueryBindPhoneResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryBindPhoneResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryBindPhoneResponse.ID = 27259;
        return QueryBindPhoneResponse;
    }());
    message.QueryBindPhoneResponse = QueryBindPhoneResponse;
    __reflect(QueryBindPhoneResponse.prototype, "message.QueryBindPhoneResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 玩家分享关系请求
    // request ShareRelation
    ////////////////////////////////////////////////////////////////////////////////
    var ShareRelationReqBody = (function () {
        function ShareRelationReqBody() {
            this.roleId = 0;
        }
        ShareRelationReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ShareRelationReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // roleId
            encoder.write_fixuint32(this.roleId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ShareRelationReqBody;
    }());
    message.ShareRelationReqBody = ShareRelationReqBody;
    __reflect(ShareRelationReqBody.prototype, "message.ShareRelationReqBody", ["aone.AoneBody"]);
    var ShareRelationRequest = (function () {
        function ShareRelationRequest() {
            this.header = new aone.AoneReqHeader(ShareRelationRequest.ID);
            this.body = new ShareRelationReqBody();
        }
        ShareRelationRequest.prototype.parse_bytes = function (decoder) { return false; };
        ShareRelationRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ShareRelationRequest.ID = 27260;
        return ShareRelationRequest;
    }());
    message.ShareRelationRequest = ShareRelationRequest;
    __reflect(ShareRelationRequest.prototype, "message.ShareRelationRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 玩家分享关系回复
    // response ShareRelation
    ////////////////////////////////////////////////////////////////////////////////
    var ShareRelationRespBody = (function () {
        function ShareRelationRespBody() {
        }
        ShareRelationRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        ShareRelationRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ShareRelationRespBody;
    }());
    message.ShareRelationRespBody = ShareRelationRespBody;
    __reflect(ShareRelationRespBody.prototype, "message.ShareRelationRespBody", ["aone.AoneBody"]);
    var ShareRelationResponse = (function () {
        function ShareRelationResponse() {
            this.header = new aone.AoneRespHeader(ShareRelationResponse.ID);
            this.body = new ShareRelationRespBody();
        }
        ShareRelationResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ShareRelationResponse.prototype.to_bytes = function (encoder) { return false; };
        ShareRelationResponse.ID = 27261;
        return ShareRelationResponse;
    }());
    message.ShareRelationResponse = ShareRelationResponse;
    __reflect(ShareRelationResponse.prototype, "message.ShareRelationResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取分享奖励
    // request ShareTaskReward
    ////////////////////////////////////////////////////////////////////////////////
    var ShareTaskRewardReqBody = (function () {
        function ShareTaskRewardReqBody() {
            this.type = 0; //任务类型（msg_xx_common的ShareTaskType）
            this.count = 0; //要领取的进度数
        }
        ShareTaskRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ShareTaskRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            // count
            encoder.write_fixuint32(this.count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ShareTaskRewardReqBody;
    }());
    message.ShareTaskRewardReqBody = ShareTaskRewardReqBody;
    __reflect(ShareTaskRewardReqBody.prototype, "message.ShareTaskRewardReqBody", ["aone.AoneBody"]);
    var ShareTaskRewardRequest = (function () {
        function ShareTaskRewardRequest() {
            this.header = new aone.AoneReqHeader(ShareTaskRewardRequest.ID);
            this.body = new ShareTaskRewardReqBody();
        }
        ShareTaskRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        ShareTaskRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ShareTaskRewardRequest.ID = 27262;
        return ShareTaskRewardRequest;
    }());
    message.ShareTaskRewardRequest = ShareTaskRewardRequest;
    __reflect(ShareTaskRewardRequest.prototype, "message.ShareTaskRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取分享奖励
    // response ShareTaskReward
    ////////////////////////////////////////////////////////////////////////////////
    var ShareTaskRewardRespBody = (function () {
        function ShareTaskRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ShareTaskRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ShareTaskRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ShareTaskRewardRespBody;
    }());
    message.ShareTaskRewardRespBody = ShareTaskRewardRespBody;
    __reflect(ShareTaskRewardRespBody.prototype, "message.ShareTaskRewardRespBody", ["aone.AoneBody"]);
    var ShareTaskRewardResponse = (function () {
        function ShareTaskRewardResponse() {
            this.header = new aone.AoneRespHeader(ShareTaskRewardResponse.ID);
            this.body = new ShareTaskRewardRespBody();
        }
        ShareTaskRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ShareTaskRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        ShareTaskRewardResponse.ID = 27263;
        return ShareTaskRewardResponse;
    }());
    message.ShareTaskRewardResponse = ShareTaskRewardResponse;
    __reflect(ShareTaskRewardResponse.prototype, "message.ShareTaskRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 设置微信分享的url
    // request ShareUrl
    ////////////////////////////////////////////////////////////////////////////////
    var ShareUrlReqBody = (function () {
        function ShareUrlReqBody() {
            this.share_url = "";
        }
        ShareUrlReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ShareUrlReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // share_url
            encoder.write_string(this.share_url);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ShareUrlReqBody;
    }());
    message.ShareUrlReqBody = ShareUrlReqBody;
    __reflect(ShareUrlReqBody.prototype, "message.ShareUrlReqBody", ["aone.AoneBody"]);
    var ShareUrlRequest = (function () {
        function ShareUrlRequest() {
            this.header = new aone.AoneReqHeader(ShareUrlRequest.ID);
            this.body = new ShareUrlReqBody();
        }
        ShareUrlRequest.prototype.parse_bytes = function (decoder) { return false; };
        ShareUrlRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ShareUrlRequest.ID = 27264;
        return ShareUrlRequest;
    }());
    message.ShareUrlRequest = ShareUrlRequest;
    __reflect(ShareUrlRequest.prototype, "message.ShareUrlRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //  设置微信分享的url
    // response ShareUrl
    ////////////////////////////////////////////////////////////////////////////////
    var ShareUrlRespBody = (function () {
        function ShareUrlRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ShareUrlRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ShareUrlRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ShareUrlRespBody;
    }());
    message.ShareUrlRespBody = ShareUrlRespBody;
    __reflect(ShareUrlRespBody.prototype, "message.ShareUrlRespBody", ["aone.AoneBody"]);
    var ShareUrlResponse = (function () {
        function ShareUrlResponse() {
            this.header = new aone.AoneRespHeader(ShareUrlResponse.ID);
            this.body = new ShareUrlRespBody();
        }
        ShareUrlResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ShareUrlResponse.prototype.to_bytes = function (encoder) { return false; };
        ShareUrlResponse.ID = 27265;
        return ShareUrlResponse;
    }());
    message.ShareUrlResponse = ShareUrlResponse;
    __reflect(ShareUrlResponse.prototype, "message.ShareUrlResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 低级vip购买福利请求
    // request LowVipBuyWeal
    ////////////////////////////////////////////////////////////////////////////////
    var LowVipBuyWealReqBody = (function () {
        function LowVipBuyWealReqBody() {
            this.weal_level = 0;
        }
        LowVipBuyWealReqBody.prototype.parse_bytes = function (decoder) { return false; };
        LowVipBuyWealReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // weal_level
            encoder.write_fixuint32(this.weal_level);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LowVipBuyWealReqBody;
    }());
    message.LowVipBuyWealReqBody = LowVipBuyWealReqBody;
    __reflect(LowVipBuyWealReqBody.prototype, "message.LowVipBuyWealReqBody", ["aone.AoneBody"]);
    var LowVipBuyWealRequest = (function () {
        function LowVipBuyWealRequest() {
            this.header = new aone.AoneReqHeader(LowVipBuyWealRequest.ID);
            this.body = new LowVipBuyWealReqBody();
        }
        LowVipBuyWealRequest.prototype.parse_bytes = function (decoder) { return false; };
        LowVipBuyWealRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        LowVipBuyWealRequest.ID = 27266;
        return LowVipBuyWealRequest;
    }());
    message.LowVipBuyWealRequest = LowVipBuyWealRequest;
    __reflect(LowVipBuyWealRequest.prototype, "message.LowVipBuyWealRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 低级vip购买福利回复
    // response LowVipBuyWeal
    ////////////////////////////////////////////////////////////////////////////////
    var LowVipBuyWealRespBody = (function () {
        function LowVipBuyWealRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        LowVipBuyWealRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        LowVipBuyWealRespBody.prototype.to_bytes = function (encoder) { return false; };
        return LowVipBuyWealRespBody;
    }());
    message.LowVipBuyWealRespBody = LowVipBuyWealRespBody;
    __reflect(LowVipBuyWealRespBody.prototype, "message.LowVipBuyWealRespBody", ["aone.AoneBody"]);
    var LowVipBuyWealResponse = (function () {
        function LowVipBuyWealResponse() {
            this.header = new aone.AoneRespHeader(LowVipBuyWealResponse.ID);
            this.body = new LowVipBuyWealRespBody();
        }
        LowVipBuyWealResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        LowVipBuyWealResponse.prototype.to_bytes = function (encoder) { return false; };
        LowVipBuyWealResponse.ID = 27267;
        return LowVipBuyWealResponse;
    }());
    message.LowVipBuyWealResponse = LowVipBuyWealResponse;
    __reflect(LowVipBuyWealResponse.prototype, "message.LowVipBuyWealResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 每日领取体力请求
    // request RecievePower
    ////////////////////////////////////////////////////////////////////////////////
    var RecievePowerReqBody = (function () {
        function RecievePowerReqBody() {
            this.index = 0;
        }
        RecievePowerReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RecievePowerReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RecievePowerReqBody;
    }());
    message.RecievePowerReqBody = RecievePowerReqBody;
    __reflect(RecievePowerReqBody.prototype, "message.RecievePowerReqBody", ["aone.AoneBody"]);
    var RecievePowerRequest = (function () {
        function RecievePowerRequest() {
            this.header = new aone.AoneReqHeader(RecievePowerRequest.ID);
            this.body = new RecievePowerReqBody();
        }
        RecievePowerRequest.prototype.parse_bytes = function (decoder) { return false; };
        RecievePowerRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RecievePowerRequest.ID = 27268;
        return RecievePowerRequest;
    }());
    message.RecievePowerRequest = RecievePowerRequest;
    __reflect(RecievePowerRequest.prototype, "message.RecievePowerRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 每日领取体力回复
    // response RecievePower
    ////////////////////////////////////////////////////////////////////////////////
    var RecievePowerRespBody = (function () {
        function RecievePowerRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RecievePowerRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RecievePowerRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RecievePowerRespBody;
    }());
    message.RecievePowerRespBody = RecievePowerRespBody;
    __reflect(RecievePowerRespBody.prototype, "message.RecievePowerRespBody", ["aone.AoneBody"]);
    var RecievePowerResponse = (function () {
        function RecievePowerResponse() {
            this.header = new aone.AoneRespHeader(RecievePowerResponse.ID);
            this.body = new RecievePowerRespBody();
        }
        RecievePowerResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RecievePowerResponse.prototype.to_bytes = function (encoder) { return false; };
        RecievePowerResponse.ID = 27269;
        return RecievePowerResponse;
    }());
    message.RecievePowerResponse = RecievePowerResponse;
    __reflect(RecievePowerResponse.prototype, "message.RecievePowerResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 扭蛋机购买礼包请求
    // request IntegralBuyGift
    ////////////////////////////////////////////////////////////////////////////////
    var IntegralBuyGiftReqBody = (function () {
        function IntegralBuyGiftReqBody() {
        }
        IntegralBuyGiftReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IntegralBuyGiftReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IntegralBuyGiftReqBody;
    }());
    message.IntegralBuyGiftReqBody = IntegralBuyGiftReqBody;
    __reflect(IntegralBuyGiftReqBody.prototype, "message.IntegralBuyGiftReqBody", ["aone.AoneBody"]);
    var IntegralBuyGiftRequest = (function () {
        function IntegralBuyGiftRequest() {
            this.header = new aone.AoneReqHeader(IntegralBuyGiftRequest.ID);
            this.body = new IntegralBuyGiftReqBody();
        }
        IntegralBuyGiftRequest.prototype.parse_bytes = function (decoder) { return false; };
        IntegralBuyGiftRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IntegralBuyGiftRequest.ID = 27270;
        return IntegralBuyGiftRequest;
    }());
    message.IntegralBuyGiftRequest = IntegralBuyGiftRequest;
    __reflect(IntegralBuyGiftRequest.prototype, "message.IntegralBuyGiftRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 扭蛋机购买礼包回复
    // response IntegralBuyGift
    ////////////////////////////////////////////////////////////////////////////////
    var IntegralBuyGiftRespBody = (function () {
        function IntegralBuyGiftRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        IntegralBuyGiftRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        IntegralBuyGiftRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IntegralBuyGiftRespBody;
    }());
    message.IntegralBuyGiftRespBody = IntegralBuyGiftRespBody;
    __reflect(IntegralBuyGiftRespBody.prototype, "message.IntegralBuyGiftRespBody", ["aone.AoneBody"]);
    var IntegralBuyGiftResponse = (function () {
        function IntegralBuyGiftResponse() {
            this.header = new aone.AoneRespHeader(IntegralBuyGiftResponse.ID);
            this.body = new IntegralBuyGiftRespBody();
        }
        IntegralBuyGiftResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IntegralBuyGiftResponse.prototype.to_bytes = function (encoder) { return false; };
        IntegralBuyGiftResponse.ID = 27271;
        return IntegralBuyGiftResponse;
    }());
    message.IntegralBuyGiftResponse = IntegralBuyGiftResponse;
    __reflect(IntegralBuyGiftResponse.prototype, "message.IntegralBuyGiftResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 分享S猎人请求
    // request ShareSGeneral
    ////////////////////////////////////////////////////////////////////////////////
    var ShareSGeneralReqBody = (function () {
        function ShareSGeneralReqBody() {
            this.general_index = 0; // 武将唯一标识
        }
        ShareSGeneralReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ShareSGeneralReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // general_index
            encoder.write_fixuint32(this.general_index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ShareSGeneralReqBody;
    }());
    message.ShareSGeneralReqBody = ShareSGeneralReqBody;
    __reflect(ShareSGeneralReqBody.prototype, "message.ShareSGeneralReqBody", ["aone.AoneBody"]);
    var ShareSGeneralRequest = (function () {
        function ShareSGeneralRequest() {
            this.header = new aone.AoneReqHeader(ShareSGeneralRequest.ID);
            this.body = new ShareSGeneralReqBody();
        }
        ShareSGeneralRequest.prototype.parse_bytes = function (decoder) { return false; };
        ShareSGeneralRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ShareSGeneralRequest.ID = 27272;
        return ShareSGeneralRequest;
    }());
    message.ShareSGeneralRequest = ShareSGeneralRequest;
    __reflect(ShareSGeneralRequest.prototype, "message.ShareSGeneralRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 分享S猎人回复
    // response ShareSGeneral
    ////////////////////////////////////////////////////////////////////////////////
    var ShareSGeneralRespBody = (function () {
        function ShareSGeneralRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ShareSGeneralRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ShareSGeneralRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ShareSGeneralRespBody;
    }());
    message.ShareSGeneralRespBody = ShareSGeneralRespBody;
    __reflect(ShareSGeneralRespBody.prototype, "message.ShareSGeneralRespBody", ["aone.AoneBody"]);
    var ShareSGeneralResponse = (function () {
        function ShareSGeneralResponse() {
            this.header = new aone.AoneRespHeader(ShareSGeneralResponse.ID);
            this.body = new ShareSGeneralRespBody();
        }
        ShareSGeneralResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ShareSGeneralResponse.prototype.to_bytes = function (encoder) { return false; };
        ShareSGeneralResponse.ID = 27273;
        return ShareSGeneralResponse;
    }());
    message.ShareSGeneralResponse = ShareSGeneralResponse;
    __reflect(ShareSGeneralResponse.prototype, "message.ShareSGeneralResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取在线时长奖励请求
    // request OnlineTimeReward
    ////////////////////////////////////////////////////////////////////////////////
    var OnlineTimeRewardReqBody = (function () {
        function OnlineTimeRewardReqBody() {
            this.index = 0; // 奖励阶段索引
        }
        OnlineTimeRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        OnlineTimeRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return OnlineTimeRewardReqBody;
    }());
    message.OnlineTimeRewardReqBody = OnlineTimeRewardReqBody;
    __reflect(OnlineTimeRewardReqBody.prototype, "message.OnlineTimeRewardReqBody", ["aone.AoneBody"]);
    var OnlineTimeRewardRequest = (function () {
        function OnlineTimeRewardRequest() {
            this.header = new aone.AoneReqHeader(OnlineTimeRewardRequest.ID);
            this.body = new OnlineTimeRewardReqBody();
        }
        OnlineTimeRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        OnlineTimeRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        OnlineTimeRewardRequest.ID = 27274;
        return OnlineTimeRewardRequest;
    }());
    message.OnlineTimeRewardRequest = OnlineTimeRewardRequest;
    __reflect(OnlineTimeRewardRequest.prototype, "message.OnlineTimeRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取在线时长奖励回复
    // response OnlineTimeReward
    ////////////////////////////////////////////////////////////////////////////////
    var OnlineTimeRewardRespBody = (function () {
        function OnlineTimeRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        OnlineTimeRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        OnlineTimeRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return OnlineTimeRewardRespBody;
    }());
    message.OnlineTimeRewardRespBody = OnlineTimeRewardRespBody;
    __reflect(OnlineTimeRewardRespBody.prototype, "message.OnlineTimeRewardRespBody", ["aone.AoneBody"]);
    var OnlineTimeRewardResponse = (function () {
        function OnlineTimeRewardResponse() {
            this.header = new aone.AoneRespHeader(OnlineTimeRewardResponse.ID);
            this.body = new OnlineTimeRewardRespBody();
        }
        OnlineTimeRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        OnlineTimeRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        OnlineTimeRewardResponse.ID = 27275;
        return OnlineTimeRewardResponse;
    }());
    message.OnlineTimeRewardResponse = OnlineTimeRewardResponse;
    __reflect(OnlineTimeRewardResponse.prototype, "message.OnlineTimeRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取连续充值奖励请求
    // request ContinuePayReward
    ////////////////////////////////////////////////////////////////////////////////
    var ContinuePayRewardReqBody = (function () {
        function ContinuePayRewardReqBody() {
            this.index = 0;
        }
        ContinuePayRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ContinuePayRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ContinuePayRewardReqBody;
    }());
    message.ContinuePayRewardReqBody = ContinuePayRewardReqBody;
    __reflect(ContinuePayRewardReqBody.prototype, "message.ContinuePayRewardReqBody", ["aone.AoneBody"]);
    var ContinuePayRewardRequest = (function () {
        function ContinuePayRewardRequest() {
            this.header = new aone.AoneReqHeader(ContinuePayRewardRequest.ID);
            this.body = new ContinuePayRewardReqBody();
        }
        ContinuePayRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        ContinuePayRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ContinuePayRewardRequest.ID = 27276;
        return ContinuePayRewardRequest;
    }());
    message.ContinuePayRewardRequest = ContinuePayRewardRequest;
    __reflect(ContinuePayRewardRequest.prototype, "message.ContinuePayRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取连续充值奖励回复
    // response ContinuePayReward
    ////////////////////////////////////////////////////////////////////////////////
    var ContinuePayRewardRespBody = (function () {
        function ContinuePayRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        ContinuePayRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        ContinuePayRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ContinuePayRewardRespBody;
    }());
    message.ContinuePayRewardRespBody = ContinuePayRewardRespBody;
    __reflect(ContinuePayRewardRespBody.prototype, "message.ContinuePayRewardRespBody", ["aone.AoneBody"]);
    var ContinuePayRewardResponse = (function () {
        function ContinuePayRewardResponse() {
            this.header = new aone.AoneRespHeader(ContinuePayRewardResponse.ID);
            this.body = new ContinuePayRewardRespBody();
        }
        ContinuePayRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ContinuePayRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        ContinuePayRewardResponse.ID = 27277;
        return ContinuePayRewardResponse;
    }());
    message.ContinuePayRewardResponse = ContinuePayRewardResponse;
    __reflect(ContinuePayRewardResponse.prototype, "message.ContinuePayRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 签到请求
    // request Sign
    ////////////////////////////////////////////////////////////////////////////////
    var SignReqBody = (function () {
        function SignReqBody() {
        }
        SignReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SignReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SignReqBody;
    }());
    message.SignReqBody = SignReqBody;
    __reflect(SignReqBody.prototype, "message.SignReqBody", ["aone.AoneBody"]);
    var SignRequest = (function () {
        function SignRequest() {
            this.header = new aone.AoneReqHeader(SignRequest.ID);
            this.body = new SignReqBody();
        }
        SignRequest.prototype.parse_bytes = function (decoder) { return false; };
        SignRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SignRequest.ID = 27278;
        return SignRequest;
    }());
    message.SignRequest = SignRequest;
    __reflect(SignRequest.prototype, "message.SignRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 签到回复
    // response Sign
    ////////////////////////////////////////////////////////////////////////////////
    var SignRespBody = (function () {
        function SignRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        SignRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        SignRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SignRespBody;
    }());
    message.SignRespBody = SignRespBody;
    __reflect(SignRespBody.prototype, "message.SignRespBody", ["aone.AoneBody"]);
    var SignResponse = (function () {
        function SignResponse() {
            this.header = new aone.AoneRespHeader(SignResponse.ID);
            this.body = new SignRespBody();
        }
        SignResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SignResponse.prototype.to_bytes = function (encoder) { return false; };
        SignResponse.ID = 27279;
        return SignResponse;
    }());
    message.SignResponse = SignResponse;
    __reflect(SignResponse.prototype, "message.SignResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买嘉年华礼包请求
    // request BuyMissionGift
    ////////////////////////////////////////////////////////////////////////////////
    var BuyMissionGiftReqBody = (function () {
        function BuyMissionGiftReqBody() {
            this.index = 0;
        }
        BuyMissionGiftReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BuyMissionGiftReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BuyMissionGiftReqBody;
    }());
    message.BuyMissionGiftReqBody = BuyMissionGiftReqBody;
    __reflect(BuyMissionGiftReqBody.prototype, "message.BuyMissionGiftReqBody", ["aone.AoneBody"]);
    var BuyMissionGiftRequest = (function () {
        function BuyMissionGiftRequest() {
            this.header = new aone.AoneReqHeader(BuyMissionGiftRequest.ID);
            this.body = new BuyMissionGiftReqBody();
        }
        BuyMissionGiftRequest.prototype.parse_bytes = function (decoder) { return false; };
        BuyMissionGiftRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BuyMissionGiftRequest.ID = 27280;
        return BuyMissionGiftRequest;
    }());
    message.BuyMissionGiftRequest = BuyMissionGiftRequest;
    __reflect(BuyMissionGiftRequest.prototype, "message.BuyMissionGiftRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 购买嘉年华礼包回复
    // response BuyMissionGift
    ////////////////////////////////////////////////////////////////////////////////
    var BuyMissionGiftRespBody = (function () {
        function BuyMissionGiftRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        BuyMissionGiftRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        BuyMissionGiftRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BuyMissionGiftRespBody;
    }());
    message.BuyMissionGiftRespBody = BuyMissionGiftRespBody;
    __reflect(BuyMissionGiftRespBody.prototype, "message.BuyMissionGiftRespBody", ["aone.AoneBody"]);
    var BuyMissionGiftResponse = (function () {
        function BuyMissionGiftResponse() {
            this.header = new aone.AoneRespHeader(BuyMissionGiftResponse.ID);
            this.body = new BuyMissionGiftRespBody();
        }
        BuyMissionGiftResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BuyMissionGiftResponse.prototype.to_bytes = function (encoder) { return false; };
        BuyMissionGiftResponse.ID = 27281;
        return BuyMissionGiftResponse;
    }());
    message.BuyMissionGiftResponse = BuyMissionGiftResponse;
    __reflect(BuyMissionGiftResponse.prototype, "message.BuyMissionGiftResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取每日首冲奖励请求
    // request RewardEverydayCharge
    ////////////////////////////////////////////////////////////////////////////////
    var RewardEverydayChargeReqBody = (function () {
        function RewardEverydayChargeReqBody() {
        }
        RewardEverydayChargeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RewardEverydayChargeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RewardEverydayChargeReqBody;
    }());
    message.RewardEverydayChargeReqBody = RewardEverydayChargeReqBody;
    __reflect(RewardEverydayChargeReqBody.prototype, "message.RewardEverydayChargeReqBody", ["aone.AoneBody"]);
    var RewardEverydayChargeRequest = (function () {
        function RewardEverydayChargeRequest() {
            this.header = new aone.AoneReqHeader(RewardEverydayChargeRequest.ID);
            this.body = new RewardEverydayChargeReqBody();
        }
        RewardEverydayChargeRequest.prototype.parse_bytes = function (decoder) { return false; };
        RewardEverydayChargeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RewardEverydayChargeRequest.ID = 27282;
        return RewardEverydayChargeRequest;
    }());
    message.RewardEverydayChargeRequest = RewardEverydayChargeRequest;
    __reflect(RewardEverydayChargeRequest.prototype, "message.RewardEverydayChargeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取每日首冲奖励回复
    // response RewardEverydayCharge
    ////////////////////////////////////////////////////////////////////////////////
    var RewardEverydayChargeRespBody = (function () {
        function RewardEverydayChargeRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        RewardEverydayChargeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        RewardEverydayChargeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RewardEverydayChargeRespBody;
    }());
    message.RewardEverydayChargeRespBody = RewardEverydayChargeRespBody;
    __reflect(RewardEverydayChargeRespBody.prototype, "message.RewardEverydayChargeRespBody", ["aone.AoneBody"]);
    var RewardEverydayChargeResponse = (function () {
        function RewardEverydayChargeResponse() {
            this.header = new aone.AoneRespHeader(RewardEverydayChargeResponse.ID);
            this.body = new RewardEverydayChargeRespBody();
        }
        RewardEverydayChargeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RewardEverydayChargeResponse.prototype.to_bytes = function (encoder) { return false; };
        RewardEverydayChargeResponse.ID = 27283;
        return RewardEverydayChargeResponse;
    }());
    message.RewardEverydayChargeResponse = RewardEverydayChargeResponse;
    __reflect(RewardEverydayChargeResponse.prototype, "message.RewardEverydayChargeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(LoginRewardRequest.ID, function () { return new LoginRewardRequest(); });
    aone.MessageFactory.getInstance().register(LoginRewardResponse.ID, function () { return new LoginRewardResponse(); });
    aone.MessageFactory.getInstance().register(FacebookRewardRequest.ID, function () { return new FacebookRewardRequest(); });
    aone.MessageFactory.getInstance().register(FacebookRewardResponse.ID, function () { return new FacebookRewardResponse(); });
    aone.MessageFactory.getInstance().register(RewardNormalLotteryRequest.ID, function () { return new RewardNormalLotteryRequest(); });
    aone.MessageFactory.getInstance().register(RewardNormalLotteryResponse.ID, function () { return new RewardNormalLotteryResponse(); });
    aone.MessageFactory.getInstance().register(FirstChargeRewardRequest.ID, function () { return new FirstChargeRewardRequest(); });
    aone.MessageFactory.getInstance().register(FirstChargeRewardResponse.ID, function () { return new FirstChargeRewardResponse(); });
    aone.MessageFactory.getInstance().register(SPgeneralRewardRequest.ID, function () { return new SPgeneralRewardRequest(); });
    aone.MessageFactory.getInstance().register(SPgeneralRewardResponse.ID, function () { return new SPgeneralRewardResponse(); });
    aone.MessageFactory.getInstance().register(NormalLotteryRequest.ID, function () { return new NormalLotteryRequest(); });
    aone.MessageFactory.getInstance().register(NormalLotteryResponse.ID, function () { return new NormalLotteryResponse(); });
    aone.MessageFactory.getInstance().register(CardBagOpenRequest.ID, function () { return new CardBagOpenRequest(); });
    aone.MessageFactory.getInstance().register(CardBagOpenResponse.ID, function () { return new CardBagOpenResponse(); });
    aone.MessageFactory.getInstance().register(BuyMonthGiftRequest.ID, function () { return new BuyMonthGiftRequest(); });
    aone.MessageFactory.getInstance().register(BuyMonthGiftResponse.ID, function () { return new BuyMonthGiftResponse(); });
    aone.MessageFactory.getInstance().register(RewardPermitLevelRequest.ID, function () { return new RewardPermitLevelRequest(); });
    aone.MessageFactory.getInstance().register(RewardPermitLevelResponse.ID, function () { return new RewardPermitLevelResponse(); });
    aone.MessageFactory.getInstance().register(RewardPermitMissionRequest.ID, function () { return new RewardPermitMissionRequest(); });
    aone.MessageFactory.getInstance().register(RewardPermitMissionResponse.ID, function () { return new RewardPermitMissionResponse(); });
    aone.MessageFactory.getInstance().register(BuyMoneyRequest.ID, function () { return new BuyMoneyRequest(); });
    aone.MessageFactory.getInstance().register(BuyMoneyResponse.ID, function () { return new BuyMoneyResponse(); });
    aone.MessageFactory.getInstance().register(BuyFundRewardRequest.ID, function () { return new BuyFundRewardRequest(); });
    aone.MessageFactory.getInstance().register(BuyFundRewardResponse.ID, function () { return new BuyFundRewardResponse(); });
    aone.MessageFactory.getInstance().register(ReceiveFundRewardRequest.ID, function () { return new ReceiveFundRewardRequest(); });
    aone.MessageFactory.getInstance().register(ReceiveFundRewardResponse.ID, function () { return new ReceiveFundRewardResponse(); });
    aone.MessageFactory.getInstance().register(ShareRewardRequest.ID, function () { return new ShareRewardRequest(); });
    aone.MessageFactory.getInstance().register(ShareRewardResponse.ID, function () { return new ShareRewardResponse(); });
    aone.MessageFactory.getInstance().register(NewGiftExistRequest.ID, function () { return new NewGiftExistRequest(); });
    aone.MessageFactory.getInstance().register(NewGiftExistResponse.ID, function () { return new NewGiftExistResponse(); });
    aone.MessageFactory.getInstance().register(AcceptActivationRequest.ID, function () { return new AcceptActivationRequest(); });
    aone.MessageFactory.getInstance().register(AcceptActivationResponse.ID, function () { return new AcceptActivationResponse(); });
    aone.MessageFactory.getInstance().register(GainRunesRequest.ID, function () { return new GainRunesRequest(); });
    aone.MessageFactory.getInstance().register(GainRunesResponse.ID, function () { return new GainRunesResponse(); });
    aone.MessageFactory.getInstance().register(ChangeRunesRequest.ID, function () { return new ChangeRunesRequest(); });
    aone.MessageFactory.getInstance().register(ChangeRunesResponse.ID, function () { return new ChangeRunesResponse(); });
    aone.MessageFactory.getInstance().register(RunesRewardRequest.ID, function () { return new RunesRewardRequest(); });
    aone.MessageFactory.getInstance().register(RunesRewardResponse.ID, function () { return new RunesRewardResponse(); });
    aone.MessageFactory.getInstance().register(RewardNewGiftRequest.ID, function () { return new RewardNewGiftRequest(); });
    aone.MessageFactory.getInstance().register(RewardNewGiftResponse.ID, function () { return new RewardNewGiftResponse(); });
    aone.MessageFactory.getInstance().register(GetNewGiftRequest.ID, function () { return new GetNewGiftRequest(); });
    aone.MessageFactory.getInstance().register(GetNewGiftResponse.ID, function () { return new GetNewGiftResponse(); });
    aone.MessageFactory.getInstance().register(RewardFormNewGiftRequest.ID, function () { return new RewardFormNewGiftRequest(); });
    aone.MessageFactory.getInstance().register(RewardFormNewGiftResponse.ID, function () { return new RewardFormNewGiftResponse(); });
    aone.MessageFactory.getInstance().register(ExchangeMallRequest.ID, function () { return new ExchangeMallRequest(); });
    aone.MessageFactory.getInstance().register(ExchangeMallResponse.ID, function () { return new ExchangeMallResponse(); });
    aone.MessageFactory.getInstance().register(SetRoleLotteryFruitRequest.ID, function () { return new SetRoleLotteryFruitRequest(); });
    aone.MessageFactory.getInstance().register(SetRoleFruitInfoResponse.ID, function () { return new SetRoleFruitInfoResponse(); });
    aone.MessageFactory.getInstance().register(GetLotteryFruitInfoRequest.ID, function () { return new GetLotteryFruitInfoRequest(); });
    aone.MessageFactory.getInstance().register(GetLotteryFruitInfoResponse.ID, function () { return new GetLotteryFruitInfoResponse(); });
    aone.MessageFactory.getInstance().register(IdentificationRequest.ID, function () { return new IdentificationRequest(); });
    aone.MessageFactory.getInstance().register(IdentificationResponse.ID, function () { return new IdentificationResponse(); });
    aone.MessageFactory.getInstance().register(IdentificationQueryRequest.ID, function () { return new IdentificationQueryRequest(); });
    aone.MessageFactory.getInstance().register(IdentificationQueryResponse.ID, function () { return new IdentificationQueryResponse(); });
    aone.MessageFactory.getInstance().register(BuyResourceRequest.ID, function () { return new BuyResourceRequest(); });
    aone.MessageFactory.getInstance().register(BuyResourceResponse.ID, function () { return new BuyResourceResponse(); });
    aone.MessageFactory.getInstance().register(QuickMallRequest.ID, function () { return new QuickMallRequest(); });
    aone.MessageFactory.getInstance().register(QuickMallResponse.ID, function () { return new QuickMallResponse(); });
    aone.MessageFactory.getInstance().register(QueryIntegralRequest.ID, function () { return new QueryIntegralRequest(); });
    aone.MessageFactory.getInstance().register(QueryIntegralResponse.ID, function () { return new QueryIntegralResponse(); });
    aone.MessageFactory.getInstance().register(IntegralLotteryRequest.ID, function () { return new IntegralLotteryRequest(); });
    aone.MessageFactory.getInstance().register(IntegralLotteryResponse.ID, function () { return new IntegralLotteryResponse(); });
    aone.MessageFactory.getInstance().register(IntegralExchangeRequest.ID, function () { return new IntegralExchangeRequest(); });
    aone.MessageFactory.getInstance().register(IntegralExchangeResponse.ID, function () { return new IntegralExchangeResponse(); });
    aone.MessageFactory.getInstance().register(UpStarRewardRequest.ID, function () { return new UpStarRewardRequest(); });
    aone.MessageFactory.getInstance().register(UpStarRewardResponse.ID, function () { return new UpStarRewardResponse(); });
    aone.MessageFactory.getInstance().register(UpLevelRewardRequest.ID, function () { return new UpLevelRewardRequest(); });
    aone.MessageFactory.getInstance().register(UpLevelRewardResponse.ID, function () { return new UpLevelRewardResponse(); });
    aone.MessageFactory.getInstance().register(BigVipRewardRequest.ID, function () { return new BigVipRewardRequest(); });
    aone.MessageFactory.getInstance().register(BigVipRewardResponse.ID, function () { return new BigVipRewardResponse(); });
    aone.MessageFactory.getInstance().register(SetHaloRequest.ID, function () { return new SetHaloRequest(); });
    aone.MessageFactory.getInstance().register(SetHaloResponse.ID, function () { return new SetHaloResponse(); });
    aone.MessageFactory.getInstance().register(BuySevenNewGiftRequest.ID, function () { return new BuySevenNewGiftRequest(); });
    aone.MessageFactory.getInstance().register(BuySevenNewGiftResponse.ID, function () { return new BuySevenNewGiftResponse(); });
    aone.MessageFactory.getInstance().register(ExchangePartnerRequest.ID, function () { return new ExchangePartnerRequest(); });
    aone.MessageFactory.getInstance().register(ExchangePartnerResponse.ID, function () { return new ExchangePartnerResponse(); });
    aone.MessageFactory.getInstance().register(BuyPotatoCountRequest.ID, function () { return new BuyPotatoCountRequest(); });
    aone.MessageFactory.getInstance().register(BuyPotatoCountResponse.ID, function () { return new BuyPotatoCountResponse(); });
    aone.MessageFactory.getInstance().register(XuyuanLotteryRequest.ID, function () { return new XuyuanLotteryRequest(); });
    aone.MessageFactory.getInstance().register(XuyuanLotteryResponse.ID, function () { return new XuyuanLotteryResponse(); });
    aone.MessageFactory.getInstance().register(XuyuanExchangeRequest.ID, function () { return new XuyuanExchangeRequest(); });
    aone.MessageFactory.getInstance().register(XuyuanExchangeResponse.ID, function () { return new XuyuanExchangeResponse(); });
    aone.MessageFactory.getInstance().register(XuyuanStepRewardRequest.ID, function () { return new XuyuanStepRewardRequest(); });
    aone.MessageFactory.getInstance().register(XuyuanStepRewardResponse.ID, function () { return new XuyuanStepRewardResponse(); });
    aone.MessageFactory.getInstance().register(ApplyPhoneCodeRequest.ID, function () { return new ApplyPhoneCodeRequest(); });
    aone.MessageFactory.getInstance().register(ApplyPhoneCodeResponse.ID, function () { return new ApplyPhoneCodeResponse(); });
    aone.MessageFactory.getInstance().register(VerifyPhoneCodeRequest.ID, function () { return new VerifyPhoneCodeRequest(); });
    aone.MessageFactory.getInstance().register(VerifyPhoneCodeResponse.ID, function () { return new VerifyPhoneCodeResponse(); });
    aone.MessageFactory.getInstance().register(QueryBindPhoneRequest.ID, function () { return new QueryBindPhoneRequest(); });
    aone.MessageFactory.getInstance().register(QueryBindPhoneResponse.ID, function () { return new QueryBindPhoneResponse(); });
    aone.MessageFactory.getInstance().register(ShareRelationRequest.ID, function () { return new ShareRelationRequest(); });
    aone.MessageFactory.getInstance().register(ShareRelationResponse.ID, function () { return new ShareRelationResponse(); });
    aone.MessageFactory.getInstance().register(ShareTaskRewardRequest.ID, function () { return new ShareTaskRewardRequest(); });
    aone.MessageFactory.getInstance().register(ShareTaskRewardResponse.ID, function () { return new ShareTaskRewardResponse(); });
    aone.MessageFactory.getInstance().register(ShareUrlRequest.ID, function () { return new ShareUrlRequest(); });
    aone.MessageFactory.getInstance().register(ShareUrlResponse.ID, function () { return new ShareUrlResponse(); });
    aone.MessageFactory.getInstance().register(LowVipBuyWealRequest.ID, function () { return new LowVipBuyWealRequest(); });
    aone.MessageFactory.getInstance().register(LowVipBuyWealResponse.ID, function () { return new LowVipBuyWealResponse(); });
    aone.MessageFactory.getInstance().register(RecievePowerRequest.ID, function () { return new RecievePowerRequest(); });
    aone.MessageFactory.getInstance().register(RecievePowerResponse.ID, function () { return new RecievePowerResponse(); });
    aone.MessageFactory.getInstance().register(IntegralBuyGiftRequest.ID, function () { return new IntegralBuyGiftRequest(); });
    aone.MessageFactory.getInstance().register(IntegralBuyGiftResponse.ID, function () { return new IntegralBuyGiftResponse(); });
    aone.MessageFactory.getInstance().register(ShareSGeneralRequest.ID, function () { return new ShareSGeneralRequest(); });
    aone.MessageFactory.getInstance().register(ShareSGeneralResponse.ID, function () { return new ShareSGeneralResponse(); });
    aone.MessageFactory.getInstance().register(OnlineTimeRewardRequest.ID, function () { return new OnlineTimeRewardRequest(); });
    aone.MessageFactory.getInstance().register(OnlineTimeRewardResponse.ID, function () { return new OnlineTimeRewardResponse(); });
    aone.MessageFactory.getInstance().register(ContinuePayRewardRequest.ID, function () { return new ContinuePayRewardRequest(); });
    aone.MessageFactory.getInstance().register(ContinuePayRewardResponse.ID, function () { return new ContinuePayRewardResponse(); });
    aone.MessageFactory.getInstance().register(SignRequest.ID, function () { return new SignRequest(); });
    aone.MessageFactory.getInstance().register(SignResponse.ID, function () { return new SignResponse(); });
    aone.MessageFactory.getInstance().register(BuyMissionGiftRequest.ID, function () { return new BuyMissionGiftRequest(); });
    aone.MessageFactory.getInstance().register(BuyMissionGiftResponse.ID, function () { return new BuyMissionGiftResponse(); });
    aone.MessageFactory.getInstance().register(RewardEverydayChargeRequest.ID, function () { return new RewardEverydayChargeRequest(); });
    aone.MessageFactory.getInstance().register(RewardEverydayChargeResponse.ID, function () { return new RewardEverydayChargeResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_wanted.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义了客户端与游戏服务间的部分协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 通缉令关卡信息请求
    // request WantedQuery
    ////////////////////////////////////////////////////////////////////////////////
    var WantedQueryReqBody = (function () {
        function WantedQueryReqBody() {
            this.type = 0; // 通缉令类型
        }
        WantedQueryReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WantedQueryReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WantedQueryReqBody;
    }());
    message.WantedQueryReqBody = WantedQueryReqBody;
    __reflect(WantedQueryReqBody.prototype, "message.WantedQueryReqBody", ["aone.AoneBody"]);
    var WantedQueryRequest = (function () {
        function WantedQueryRequest() {
            this.header = new aone.AoneReqHeader(WantedQueryRequest.ID);
            this.body = new WantedQueryReqBody();
        }
        WantedQueryRequest.prototype.parse_bytes = function (decoder) { return false; };
        WantedQueryRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WantedQueryRequest.ID = 33000;
        return WantedQueryRequest;
    }());
    message.WantedQueryRequest = WantedQueryRequest;
    __reflect(WantedQueryRequest.prototype, "message.WantedQueryRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 通缉令关卡信息回复
    // response WantedQuery
    ////////////////////////////////////////////////////////////////////////////////
    var WantedQueryRespBody = (function () {
        function WantedQueryRespBody() {
            this.mapRoles = [];
            this.gameInfo = new message.GameInfo();
        }
        WantedQueryRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // mapRoles
            if (decoder_.eof())
                return true;
            this.mapRoles = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WantedQueryRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WantedQueryRespBody;
    }());
    message.WantedQueryRespBody = WantedQueryRespBody;
    __reflect(WantedQueryRespBody.prototype, "message.WantedQueryRespBody", ["aone.AoneBody"]);
    var WantedQueryResponse = (function () {
        function WantedQueryResponse() {
            this.header = new aone.AoneRespHeader(WantedQueryResponse.ID);
            this.body = new WantedQueryRespBody();
        }
        WantedQueryResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WantedQueryResponse.prototype.to_bytes = function (encoder) { return false; };
        WantedQueryResponse.ID = 33001;
        return WantedQueryResponse;
    }());
    message.WantedQueryResponse = WantedQueryResponse;
    __reflect(WantedQueryResponse.prototype, "message.WantedQueryResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 刷新奖励请求（无）
    // request WantedRefreshReward
    ////////////////////////////////////////////////////////////////////////////////
    var WantedRefreshRewardReqBody = (function () {
        function WantedRefreshRewardReqBody() {
            this.type = 0; // 通缉令类型
        }
        WantedRefreshRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WantedRefreshRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WantedRefreshRewardReqBody;
    }());
    message.WantedRefreshRewardReqBody = WantedRefreshRewardReqBody;
    __reflect(WantedRefreshRewardReqBody.prototype, "message.WantedRefreshRewardReqBody", ["aone.AoneBody"]);
    var WantedRefreshRewardRequest = (function () {
        function WantedRefreshRewardRequest() {
            this.header = new aone.AoneReqHeader(WantedRefreshRewardRequest.ID);
            this.body = new WantedRefreshRewardReqBody();
        }
        WantedRefreshRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        WantedRefreshRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WantedRefreshRewardRequest.ID = 33004;
        return WantedRefreshRewardRequest;
    }());
    message.WantedRefreshRewardRequest = WantedRefreshRewardRequest;
    __reflect(WantedRefreshRewardRequest.prototype, "message.WantedRefreshRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 刷新奖励回复
    // response WantedRefreshReward
    ////////////////////////////////////////////////////////////////////////////////
    var WantedRefreshRewardRespBody = (function () {
        function WantedRefreshRewardRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        WantedRefreshRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WantedRefreshRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WantedRefreshRewardRespBody;
    }());
    message.WantedRefreshRewardRespBody = WantedRefreshRewardRespBody;
    __reflect(WantedRefreshRewardRespBody.prototype, "message.WantedRefreshRewardRespBody", ["aone.AoneBody"]);
    var WantedRefreshRewardResponse = (function () {
        function WantedRefreshRewardResponse() {
            this.header = new aone.AoneRespHeader(WantedRefreshRewardResponse.ID);
            this.body = new WantedRefreshRewardRespBody();
        }
        WantedRefreshRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WantedRefreshRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        WantedRefreshRewardResponse.ID = 33005;
        return WantedRefreshRewardResponse;
    }());
    message.WantedRefreshRewardResponse = WantedRefreshRewardResponse;
    __reflect(WantedRefreshRewardResponse.prototype, "message.WantedRefreshRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 通缉令扫荡请求（无）
    // request WantedSweep
    ////////////////////////////////////////////////////////////////////////////////
    var WantedSweepReqBody = (function () {
        function WantedSweepReqBody() {
            this.wantedId = 0; //通缉令Id
        }
        WantedSweepReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WantedSweepReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // wantedId
            encoder.write_fixuint32(this.wantedId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WantedSweepReqBody;
    }());
    message.WantedSweepReqBody = WantedSweepReqBody;
    __reflect(WantedSweepReqBody.prototype, "message.WantedSweepReqBody", ["aone.AoneBody"]);
    var WantedSweepRequest = (function () {
        function WantedSweepRequest() {
            this.header = new aone.AoneReqHeader(WantedSweepRequest.ID);
            this.body = new WantedSweepReqBody();
        }
        WantedSweepRequest.prototype.parse_bytes = function (decoder) { return false; };
        WantedSweepRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WantedSweepRequest.ID = 33006;
        return WantedSweepRequest;
    }());
    message.WantedSweepRequest = WantedSweepRequest;
    __reflect(WantedSweepRequest.prototype, "message.WantedSweepRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 通缉令扫荡回复
    // response WantedSweep
    ////////////////////////////////////////////////////////////////////////////////
    var WantedSweepRespBody = (function () {
        function WantedSweepRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        WantedSweepRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WantedSweepRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WantedSweepRespBody;
    }());
    message.WantedSweepRespBody = WantedSweepRespBody;
    __reflect(WantedSweepRespBody.prototype, "message.WantedSweepRespBody", ["aone.AoneBody"]);
    var WantedSweepResponse = (function () {
        function WantedSweepResponse() {
            this.header = new aone.AoneRespHeader(WantedSweepResponse.ID);
            this.body = new WantedSweepRespBody();
        }
        WantedSweepResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WantedSweepResponse.prototype.to_bytes = function (encoder) { return false; };
        WantedSweepResponse.ID = 33007;
        return WantedSweepResponse;
    }());
    message.WantedSweepResponse = WantedSweepResponse;
    __reflect(WantedSweepResponse.prototype, "message.WantedSweepResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战怪物请求
    // request WantedBattle
    ////////////////////////////////////////////////////////////////////////////////
    var WantedBattleReqBody = (function () {
        function WantedBattleReqBody() {
            this.wantedId = 0; // 通缉令Id
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
        }
        WantedBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WantedBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // wantedId
            encoder.write_fixuint32(this.wantedId);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WantedBattleReqBody;
    }());
    message.WantedBattleReqBody = WantedBattleReqBody;
    __reflect(WantedBattleReqBody.prototype, "message.WantedBattleReqBody", ["aone.AoneBody"]);
    var WantedBattleRequest = (function () {
        function WantedBattleRequest() {
            this.header = new aone.AoneReqHeader(WantedBattleRequest.ID);
            this.body = new WantedBattleReqBody();
        }
        WantedBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        WantedBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WantedBattleRequest.ID = 33010;
        return WantedBattleRequest;
    }());
    message.WantedBattleRequest = WantedBattleRequest;
    __reflect(WantedBattleRequest.prototype, "message.WantedBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 挑战怪物回复
    // response WantedBattle
    ////////////////////////////////////////////////////////////////////////////////
    var WantedBattleRespBody = (function () {
        function WantedBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        WantedBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WantedBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WantedBattleRespBody;
    }());
    message.WantedBattleRespBody = WantedBattleRespBody;
    __reflect(WantedBattleRespBody.prototype, "message.WantedBattleRespBody", ["aone.AoneBody"]);
    var WantedBattleResponse = (function () {
        function WantedBattleResponse() {
            this.header = new aone.AoneRespHeader(WantedBattleResponse.ID);
            this.body = new WantedBattleRespBody();
        }
        WantedBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WantedBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        WantedBattleResponse.ID = 33011;
        return WantedBattleResponse;
    }());
    message.WantedBattleResponse = WantedBattleResponse;
    __reflect(WantedBattleResponse.prototype, "message.WantedBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 通缉令购买精英门票请求
    // request WantedBuyTicket
    ////////////////////////////////////////////////////////////////////////////////
    var WantedBuyTicketReqBody = (function () {
        function WantedBuyTicketReqBody() {
            this.ticketId = 0; // 门票Id
        }
        WantedBuyTicketReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WantedBuyTicketReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // ticketId
            encoder.write_fixuint32(this.ticketId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WantedBuyTicketReqBody;
    }());
    message.WantedBuyTicketReqBody = WantedBuyTicketReqBody;
    __reflect(WantedBuyTicketReqBody.prototype, "message.WantedBuyTicketReqBody", ["aone.AoneBody"]);
    var WantedBuyTicketRequest = (function () {
        function WantedBuyTicketRequest() {
            this.header = new aone.AoneReqHeader(WantedBuyTicketRequest.ID);
            this.body = new WantedBuyTicketReqBody();
        }
        WantedBuyTicketRequest.prototype.parse_bytes = function (decoder) { return false; };
        WantedBuyTicketRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WantedBuyTicketRequest.ID = 33012;
        return WantedBuyTicketRequest;
    }());
    message.WantedBuyTicketRequest = WantedBuyTicketRequest;
    __reflect(WantedBuyTicketRequest.prototype, "message.WantedBuyTicketRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 通缉令购买精英门票回复
    // response WantedBuyTicket
    ////////////////////////////////////////////////////////////////////////////////
    var WantedBuyTicketRespBody = (function () {
        function WantedBuyTicketRespBody() {
            this.gameInfo = new message.GameInfo();
        }
        WantedBuyTicketRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WantedBuyTicketRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WantedBuyTicketRespBody;
    }());
    message.WantedBuyTicketRespBody = WantedBuyTicketRespBody;
    __reflect(WantedBuyTicketRespBody.prototype, "message.WantedBuyTicketRespBody", ["aone.AoneBody"]);
    var WantedBuyTicketResponse = (function () {
        function WantedBuyTicketResponse() {
            this.header = new aone.AoneRespHeader(WantedBuyTicketResponse.ID);
            this.body = new WantedBuyTicketRespBody();
        }
        WantedBuyTicketResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WantedBuyTicketResponse.prototype.to_bytes = function (encoder) { return false; };
        WantedBuyTicketResponse.ID = 33013;
        return WantedBuyTicketResponse;
    }());
    message.WantedBuyTicketResponse = WantedBuyTicketResponse;
    __reflect(WantedBuyTicketResponse.prototype, "message.WantedBuyTicketResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取敌犯大本营信息请求（无）
    // request EnemyCampQuery
    ////////////////////////////////////////////////////////////////////////////////
    var EnemyCampQueryReqBody = (function () {
        function EnemyCampQueryReqBody() {
            this.type = 0; // 敌犯大本营Id
        }
        EnemyCampQueryReqBody.prototype.parse_bytes = function (decoder) { return false; };
        EnemyCampQueryReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_fixuint32(this.type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return EnemyCampQueryReqBody;
    }());
    message.EnemyCampQueryReqBody = EnemyCampQueryReqBody;
    __reflect(EnemyCampQueryReqBody.prototype, "message.EnemyCampQueryReqBody", ["aone.AoneBody"]);
    var EnemyCampQueryRequest = (function () {
        function EnemyCampQueryRequest() {
            this.header = new aone.AoneReqHeader(EnemyCampQueryRequest.ID);
            this.body = new EnemyCampQueryReqBody();
        }
        EnemyCampQueryRequest.prototype.parse_bytes = function (decoder) { return false; };
        EnemyCampQueryRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        EnemyCampQueryRequest.ID = 33020;
        return EnemyCampQueryRequest;
    }());
    message.EnemyCampQueryRequest = EnemyCampQueryRequest;
    __reflect(EnemyCampQueryRequest.prototype, "message.EnemyCampQueryRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取敌犯大本营信息回复
    // response EnemyCampQuery
    ////////////////////////////////////////////////////////////////////////////////
    var EnemyCampQueryRespBody = (function () {
        function EnemyCampQueryRespBody() {
            this.leftTime = 0; // 敌犯大本营剩余刷新时间
            this.mapRoles = 0; // 怪物形象
            this.maxLevel = 0; // 最大关卡
            this.rankItems = []; // 排名
        }
        EnemyCampQueryRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // leftTime
            if (decoder_.eof())
                return true;
            this.leftTime = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // mapRoles
            if (decoder_.eof())
                return true;
            this.mapRoles = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // maxLevel
            if (decoder_.eof())
                return true;
            this.maxLevel = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // rankItems
            if (decoder_.eof())
                return true;
            var rankItems_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < rankItems_count; i++) {
                this.rankItems.push(new message.BattleRankInfo());
                if (!this.rankItems[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        EnemyCampQueryRespBody.prototype.to_bytes = function (encoder) { return false; };
        return EnemyCampQueryRespBody;
    }());
    message.EnemyCampQueryRespBody = EnemyCampQueryRespBody;
    __reflect(EnemyCampQueryRespBody.prototype, "message.EnemyCampQueryRespBody", ["aone.AoneBody"]);
    var EnemyCampQueryResponse = (function () {
        function EnemyCampQueryResponse() {
            this.header = new aone.AoneRespHeader(EnemyCampQueryResponse.ID);
            this.body = new EnemyCampQueryRespBody();
        }
        EnemyCampQueryResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        EnemyCampQueryResponse.prototype.to_bytes = function (encoder) { return false; };
        EnemyCampQueryResponse.ID = 33021;
        return EnemyCampQueryResponse;
    }());
    message.EnemyCampQueryResponse = EnemyCampQueryResponse;
    __reflect(EnemyCampQueryResponse.prototype, "message.EnemyCampQueryResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 敌犯大本营挑战怪物请求（无）
    // request EnemyCampBattle
    ////////////////////////////////////////////////////////////////////////////////
    var EnemyCampBattleReqBody = (function () {
        function EnemyCampBattleReqBody() {
            this.enemyCampId = 0; // 敌犯大本营Id
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 战斗结果
        }
        EnemyCampBattleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        EnemyCampBattleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // enemyCampId
            encoder.write_fixuint32(this.enemyCampId);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return EnemyCampBattleReqBody;
    }());
    message.EnemyCampBattleReqBody = EnemyCampBattleReqBody;
    __reflect(EnemyCampBattleReqBody.prototype, "message.EnemyCampBattleReqBody", ["aone.AoneBody"]);
    var EnemyCampBattleRequest = (function () {
        function EnemyCampBattleRequest() {
            this.header = new aone.AoneReqHeader(EnemyCampBattleRequest.ID);
            this.body = new EnemyCampBattleReqBody();
        }
        EnemyCampBattleRequest.prototype.parse_bytes = function (decoder) { return false; };
        EnemyCampBattleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        EnemyCampBattleRequest.ID = 33026;
        return EnemyCampBattleRequest;
    }());
    message.EnemyCampBattleRequest = EnemyCampBattleRequest;
    __reflect(EnemyCampBattleRequest.prototype, "message.EnemyCampBattleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 敌犯大本营挑战怪物回复
    // response EnemyCampBattle
    ////////////////////////////////////////////////////////////////////////////////
    var EnemyCampBattleRespBody = (function () {
        function EnemyCampBattleRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        EnemyCampBattleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        EnemyCampBattleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return EnemyCampBattleRespBody;
    }());
    message.EnemyCampBattleRespBody = EnemyCampBattleRespBody;
    __reflect(EnemyCampBattleRespBody.prototype, "message.EnemyCampBattleRespBody", ["aone.AoneBody"]);
    var EnemyCampBattleResponse = (function () {
        function EnemyCampBattleResponse() {
            this.header = new aone.AoneRespHeader(EnemyCampBattleResponse.ID);
            this.body = new EnemyCampBattleRespBody();
        }
        EnemyCampBattleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        EnemyCampBattleResponse.prototype.to_bytes = function (encoder) { return false; };
        EnemyCampBattleResponse.ID = 33027;
        return EnemyCampBattleResponse;
    }());
    message.EnemyCampBattleResponse = EnemyCampBattleResponse;
    __reflect(EnemyCampBattleResponse.prototype, "message.EnemyCampBattleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 组队战挑战怪物结果请求
    // request GroupBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var GroupBattleResultReqBody = (function () {
        function GroupBattleResultReqBody() {
            this.Id = 0; // 挑战Id
            this.sequence = 0; // 战斗序号
            this.battleInfo = new message.BattleResultInfo(); // 多场战斗结果
        }
        GroupBattleResultReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GroupBattleResultReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // Id
            encoder.write_fixuint32(this.Id);
            // sequence
            encoder.write_fixuint32(this.sequence);
            // battleInfo
            this.battleInfo.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GroupBattleResultReqBody;
    }());
    message.GroupBattleResultReqBody = GroupBattleResultReqBody;
    __reflect(GroupBattleResultReqBody.prototype, "message.GroupBattleResultReqBody", ["aone.AoneBody"]);
    var GroupBattleResultRequest = (function () {
        function GroupBattleResultRequest() {
            this.header = new aone.AoneReqHeader(GroupBattleResultRequest.ID);
            this.body = new GroupBattleResultReqBody();
        }
        GroupBattleResultRequest.prototype.parse_bytes = function (decoder) { return false; };
        GroupBattleResultRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GroupBattleResultRequest.ID = 33030;
        return GroupBattleResultRequest;
    }());
    message.GroupBattleResultRequest = GroupBattleResultRequest;
    __reflect(GroupBattleResultRequest.prototype, "message.GroupBattleResultRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 组队战挑战怪物结果回复
    // response GroupBattleResult
    ////////////////////////////////////////////////////////////////////////////////
    var GroupBattleResultRespBody = (function () {
        function GroupBattleResultRespBody() {
            this.battle_id = ""; // 战报Id
            this.gameInfo = new message.GameInfo();
        }
        GroupBattleResultRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // battle_id
            if (decoder_.eof())
                return true;
            this.battle_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        GroupBattleResultRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GroupBattleResultRespBody;
    }());
    message.GroupBattleResultRespBody = GroupBattleResultRespBody;
    __reflect(GroupBattleResultRespBody.prototype, "message.GroupBattleResultRespBody", ["aone.AoneBody"]);
    var GroupBattleResultResponse = (function () {
        function GroupBattleResultResponse() {
            this.header = new aone.AoneRespHeader(GroupBattleResultResponse.ID);
            this.body = new GroupBattleResultRespBody();
        }
        GroupBattleResultResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GroupBattleResultResponse.prototype.to_bytes = function (encoder) { return false; };
        GroupBattleResultResponse.ID = 33031;
        return GroupBattleResultResponse;
    }());
    message.GroupBattleResultResponse = GroupBattleResultResponse;
    __reflect(GroupBattleResultResponse.prototype, "message.GroupBattleResultResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(WantedQueryRequest.ID, function () { return new WantedQueryRequest(); });
    aone.MessageFactory.getInstance().register(WantedQueryResponse.ID, function () { return new WantedQueryResponse(); });
    aone.MessageFactory.getInstance().register(WantedRefreshRewardRequest.ID, function () { return new WantedRefreshRewardRequest(); });
    aone.MessageFactory.getInstance().register(WantedRefreshRewardResponse.ID, function () { return new WantedRefreshRewardResponse(); });
    aone.MessageFactory.getInstance().register(WantedSweepRequest.ID, function () { return new WantedSweepRequest(); });
    aone.MessageFactory.getInstance().register(WantedSweepResponse.ID, function () { return new WantedSweepResponse(); });
    aone.MessageFactory.getInstance().register(WantedBattleRequest.ID, function () { return new WantedBattleRequest(); });
    aone.MessageFactory.getInstance().register(WantedBattleResponse.ID, function () { return new WantedBattleResponse(); });
    aone.MessageFactory.getInstance().register(WantedBuyTicketRequest.ID, function () { return new WantedBuyTicketRequest(); });
    aone.MessageFactory.getInstance().register(WantedBuyTicketResponse.ID, function () { return new WantedBuyTicketResponse(); });
    aone.MessageFactory.getInstance().register(EnemyCampQueryRequest.ID, function () { return new EnemyCampQueryRequest(); });
    aone.MessageFactory.getInstance().register(EnemyCampQueryResponse.ID, function () { return new EnemyCampQueryResponse(); });
    aone.MessageFactory.getInstance().register(EnemyCampBattleRequest.ID, function () { return new EnemyCampBattleRequest(); });
    aone.MessageFactory.getInstance().register(EnemyCampBattleResponse.ID, function () { return new EnemyCampBattleResponse(); });
    aone.MessageFactory.getInstance().register(GroupBattleResultRequest.ID, function () { return new GroupBattleResultRequest(); });
    aone.MessageFactory.getInstance().register(GroupBattleResultResponse.ID, function () { return new GroupBattleResultResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_cg_wonderland.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 本文档定义联盟协议
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////
    // 进入仙境场景请求
    // request WonderlandEnter
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandEnterReqBody = (function () {
        function WonderlandEnterReqBody() {
            this.id = 0;
        }
        WonderlandEnterReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandEnterReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandEnterReqBody;
    }());
    message.WonderlandEnterReqBody = WonderlandEnterReqBody;
    __reflect(WonderlandEnterReqBody.prototype, "message.WonderlandEnterReqBody", ["aone.AoneBody"]);
    var WonderlandEnterRequest = (function () {
        function WonderlandEnterRequest() {
            this.header = new aone.AoneReqHeader(WonderlandEnterRequest.ID);
            this.body = new WonderlandEnterReqBody();
        }
        WonderlandEnterRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandEnterRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandEnterRequest.ID = 24100;
        return WonderlandEnterRequest;
    }());
    message.WonderlandEnterRequest = WonderlandEnterRequest;
    __reflect(WonderlandEnterRequest.prototype, "message.WonderlandEnterRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 进入仙境场景回复
    // response WonderlandEnter
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandEnterRespBody = (function () {
        function WonderlandEnterRespBody() {
            this.roleInfo = new message.WonderlandRoleInfo(); // 角色基本信息
            this.posInfos = [];
            this.sceneId = 0;
        }
        WonderlandEnterRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // posInfos
            if (decoder_.eof())
                return true;
            var posInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < posInfos_count; i++) {
                this.posInfos.push(new message.ScenePosInfo());
                if (!this.posInfos[i].parse_bytes(decoder_))
                    return false;
            }
            // sceneId
            if (decoder_.eof())
                return true;
            this.sceneId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        WonderlandEnterRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandEnterRespBody;
    }());
    message.WonderlandEnterRespBody = WonderlandEnterRespBody;
    __reflect(WonderlandEnterRespBody.prototype, "message.WonderlandEnterRespBody", ["aone.AoneBody"]);
    var WonderlandEnterResponse = (function () {
        function WonderlandEnterResponse() {
            this.header = new aone.AoneRespHeader(WonderlandEnterResponse.ID);
            this.body = new WonderlandEnterRespBody();
        }
        WonderlandEnterResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandEnterResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandEnterResponse.ID = 24101;
        return WonderlandEnterResponse;
    }());
    message.WonderlandEnterResponse = WonderlandEnterResponse;
    __reflect(WonderlandEnterResponse.prototype, "message.WonderlandEnterResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 离开场景请求
    // request WonderlandLeave
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandLeaveReqBody = (function () {
        function WonderlandLeaveReqBody() {
        }
        WonderlandLeaveReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandLeaveReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandLeaveReqBody;
    }());
    message.WonderlandLeaveReqBody = WonderlandLeaveReqBody;
    __reflect(WonderlandLeaveReqBody.prototype, "message.WonderlandLeaveReqBody", ["aone.AoneBody"]);
    var WonderlandLeaveRequest = (function () {
        function WonderlandLeaveRequest() {
            this.header = new aone.AoneReqHeader(WonderlandLeaveRequest.ID);
            this.body = new WonderlandLeaveReqBody();
        }
        WonderlandLeaveRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandLeaveRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandLeaveRequest.ID = 24102;
        return WonderlandLeaveRequest;
    }());
    message.WonderlandLeaveRequest = WonderlandLeaveRequest;
    __reflect(WonderlandLeaveRequest.prototype, "message.WonderlandLeaveRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 离开场景回复
    // response WonderlandLeave
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandLeaveRespBody = (function () {
        function WonderlandLeaveRespBody() {
        }
        WonderlandLeaveRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        WonderlandLeaveRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandLeaveRespBody;
    }());
    message.WonderlandLeaveRespBody = WonderlandLeaveRespBody;
    __reflect(WonderlandLeaveRespBody.prototype, "message.WonderlandLeaveRespBody", ["aone.AoneBody"]);
    var WonderlandLeaveResponse = (function () {
        function WonderlandLeaveResponse() {
            this.header = new aone.AoneRespHeader(WonderlandLeaveResponse.ID);
            this.body = new WonderlandLeaveRespBody();
        }
        WonderlandLeaveResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandLeaveResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandLeaveResponse.ID = 24103;
        return WonderlandLeaveResponse;
    }());
    message.WonderlandLeaveResponse = WonderlandLeaveResponse;
    __reflect(WonderlandLeaveResponse.prototype, "message.WonderlandLeaveResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景中移动请求
    // 该协议发送最大间隔为2分钟，最小间隔取经验值
    // request WonderlandMove
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandMoveReqBody = (function () {
        function WonderlandMoveReqBody() {
            this.scene_x = 0; // 场景坐标
            this.scene_y = 0; // 场景坐标
        }
        WonderlandMoveReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandMoveReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // scene_x
            encoder.write_fixuint32(this.scene_x);
            // scene_y
            encoder.write_fixuint32(this.scene_y);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandMoveReqBody;
    }());
    message.WonderlandMoveReqBody = WonderlandMoveReqBody;
    __reflect(WonderlandMoveReqBody.prototype, "message.WonderlandMoveReqBody", ["aone.AoneBody"]);
    var WonderlandMoveRequest = (function () {
        function WonderlandMoveRequest() {
            this.header = new aone.AoneReqHeader(WonderlandMoveRequest.ID);
            this.body = new WonderlandMoveReqBody();
        }
        WonderlandMoveRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandMoveRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandMoveRequest.ID = 24104;
        return WonderlandMoveRequest;
    }());
    message.WonderlandMoveRequest = WonderlandMoveRequest;
    __reflect(WonderlandMoveRequest.prototype, "message.WonderlandMoveRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 场景中移动回复
    // response WonderlandMove
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandMoveRespBody = (function () {
        function WonderlandMoveRespBody() {
            this.roleInfo = []; // 角色基本信息
        }
        WonderlandMoveRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            var roleInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roleInfo_count; i++) {
                this.roleInfo.push(new message.WonderlandRoleInfo());
                if (!this.roleInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandMoveRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandMoveRespBody;
    }());
    message.WonderlandMoveRespBody = WonderlandMoveRespBody;
    __reflect(WonderlandMoveRespBody.prototype, "message.WonderlandMoveRespBody", ["aone.AoneBody"]);
    var WonderlandMoveResponse = (function () {
        function WonderlandMoveResponse() {
            this.header = new aone.AoneRespHeader(WonderlandMoveResponse.ID);
            this.body = new WonderlandMoveRespBody();
        }
        WonderlandMoveResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandMoveResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandMoveResponse.ID = 24105;
        return WonderlandMoveResponse;
    }());
    message.WonderlandMoveResponse = WonderlandMoveResponse;
    __reflect(WonderlandMoveResponse.prototype, "message.WonderlandMoveResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 清空死亡冷却请求
    // request WonderlandDeadCooling
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandDeadCoolingReqBody = (function () {
        function WonderlandDeadCoolingReqBody() {
        }
        WonderlandDeadCoolingReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandDeadCoolingReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandDeadCoolingReqBody;
    }());
    message.WonderlandDeadCoolingReqBody = WonderlandDeadCoolingReqBody;
    __reflect(WonderlandDeadCoolingReqBody.prototype, "message.WonderlandDeadCoolingReqBody", ["aone.AoneBody"]);
    var WonderlandDeadCoolingRequest = (function () {
        function WonderlandDeadCoolingRequest() {
            this.header = new aone.AoneReqHeader(WonderlandDeadCoolingRequest.ID);
            this.body = new WonderlandDeadCoolingReqBody();
        }
        WonderlandDeadCoolingRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandDeadCoolingRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandDeadCoolingRequest.ID = 24106;
        return WonderlandDeadCoolingRequest;
    }());
    message.WonderlandDeadCoolingRequest = WonderlandDeadCoolingRequest;
    __reflect(WonderlandDeadCoolingRequest.prototype, "message.WonderlandDeadCoolingRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 清空死亡冷却回复
    // response WonderlandDeadCooling
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandDeadCoolingRespBody = (function () {
        function WonderlandDeadCoolingRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.WonderlandRoleInfo(); // 角色基本信息
        }
        WonderlandDeadCoolingRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WonderlandDeadCoolingRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandDeadCoolingRespBody;
    }());
    message.WonderlandDeadCoolingRespBody = WonderlandDeadCoolingRespBody;
    __reflect(WonderlandDeadCoolingRespBody.prototype, "message.WonderlandDeadCoolingRespBody", ["aone.AoneBody"]);
    var WonderlandDeadCoolingResponse = (function () {
        function WonderlandDeadCoolingResponse() {
            this.header = new aone.AoneRespHeader(WonderlandDeadCoolingResponse.ID);
            this.body = new WonderlandDeadCoolingRespBody();
        }
        WonderlandDeadCoolingResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandDeadCoolingResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandDeadCoolingResponse.ID = 24107;
        return WonderlandDeadCoolingResponse;
    }());
    message.WonderlandDeadCoolingResponse = WonderlandDeadCoolingResponse;
    __reflect(WonderlandDeadCoolingResponse.prototype, "message.WonderlandDeadCoolingResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加快移动速度请求
    // request WonderlandFaster
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandFasterReqBody = (function () {
        function WonderlandFasterReqBody() {
        }
        WonderlandFasterReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandFasterReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandFasterReqBody;
    }());
    message.WonderlandFasterReqBody = WonderlandFasterReqBody;
    __reflect(WonderlandFasterReqBody.prototype, "message.WonderlandFasterReqBody", ["aone.AoneBody"]);
    var WonderlandFasterRequest = (function () {
        function WonderlandFasterRequest() {
            this.header = new aone.AoneReqHeader(WonderlandFasterRequest.ID);
            this.body = new WonderlandFasterReqBody();
        }
        WonderlandFasterRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandFasterRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandFasterRequest.ID = 24108;
        return WonderlandFasterRequest;
    }());
    message.WonderlandFasterRequest = WonderlandFasterRequest;
    __reflect(WonderlandFasterRequest.prototype, "message.WonderlandFasterRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加快移动速度回复
    // response WonderlandFaster
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandFasterRespBody = (function () {
        function WonderlandFasterRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.WonderlandRoleInfo(); // 角色基本信息
        }
        WonderlandFasterRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WonderlandFasterRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandFasterRespBody;
    }());
    message.WonderlandFasterRespBody = WonderlandFasterRespBody;
    __reflect(WonderlandFasterRespBody.prototype, "message.WonderlandFasterRespBody", ["aone.AoneBody"]);
    var WonderlandFasterResponse = (function () {
        function WonderlandFasterResponse() {
            this.header = new aone.AoneRespHeader(WonderlandFasterResponse.ID);
            this.body = new WonderlandFasterRespBody();
        }
        WonderlandFasterResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandFasterResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandFasterResponse.ID = 24109;
        return WonderlandFasterResponse;
    }());
    message.WonderlandFasterResponse = WonderlandFasterResponse;
    __reflect(WonderlandFasterResponse.prototype, "message.WonderlandFasterResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加血请求
    // request WonderlandAddBlood
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandAddBloodReqBody = (function () {
        function WonderlandAddBloodReqBody() {
        }
        WonderlandAddBloodReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandAddBloodReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandAddBloodReqBody;
    }());
    message.WonderlandAddBloodReqBody = WonderlandAddBloodReqBody;
    __reflect(WonderlandAddBloodReqBody.prototype, "message.WonderlandAddBloodReqBody", ["aone.AoneBody"]);
    var WonderlandAddBloodRequest = (function () {
        function WonderlandAddBloodRequest() {
            this.header = new aone.AoneReqHeader(WonderlandAddBloodRequest.ID);
            this.body = new WonderlandAddBloodReqBody();
        }
        WonderlandAddBloodRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandAddBloodRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandAddBloodRequest.ID = 24110;
        return WonderlandAddBloodRequest;
    }());
    message.WonderlandAddBloodRequest = WonderlandAddBloodRequest;
    __reflect(WonderlandAddBloodRequest.prototype, "message.WonderlandAddBloodRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 加血回复
    // response WonderlandAddBlood
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandAddBloodRespBody = (function () {
        function WonderlandAddBloodRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.WonderlandRoleInfo(); // 角色基本信息
        }
        WonderlandAddBloodRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WonderlandAddBloodRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandAddBloodRespBody;
    }());
    message.WonderlandAddBloodRespBody = WonderlandAddBloodRespBody;
    __reflect(WonderlandAddBloodRespBody.prototype, "message.WonderlandAddBloodRespBody", ["aone.AoneBody"]);
    var WonderlandAddBloodResponse = (function () {
        function WonderlandAddBloodResponse() {
            this.header = new aone.AoneRespHeader(WonderlandAddBloodResponse.ID);
            this.body = new WonderlandAddBloodRespBody();
        }
        WonderlandAddBloodResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandAddBloodResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandAddBloodResponse.ID = 24111;
        return WonderlandAddBloodResponse;
    }());
    message.WonderlandAddBloodResponse = WonderlandAddBloodResponse;
    __reflect(WonderlandAddBloodResponse.prototype, "message.WonderlandAddBloodResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 切换模式请求
    // request WonderlandBattleMode
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandBattleModeReqBody = (function () {
        function WonderlandBattleModeReqBody() {
            this.battleMode = 0;
        }
        WonderlandBattleModeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandBattleModeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // battleMode
            encoder.write_fixuint32(this.battleMode);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandBattleModeReqBody;
    }());
    message.WonderlandBattleModeReqBody = WonderlandBattleModeReqBody;
    __reflect(WonderlandBattleModeReqBody.prototype, "message.WonderlandBattleModeReqBody", ["aone.AoneBody"]);
    var WonderlandBattleModeRequest = (function () {
        function WonderlandBattleModeRequest() {
            this.header = new aone.AoneReqHeader(WonderlandBattleModeRequest.ID);
            this.body = new WonderlandBattleModeReqBody();
        }
        WonderlandBattleModeRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandBattleModeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandBattleModeRequest.ID = 24120;
        return WonderlandBattleModeRequest;
    }());
    message.WonderlandBattleModeRequest = WonderlandBattleModeRequest;
    __reflect(WonderlandBattleModeRequest.prototype, "message.WonderlandBattleModeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 切换模式回复
    // response WonderlandBattleMode
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandBattleModeRespBody = (function () {
        function WonderlandBattleModeRespBody() {
            this.roleInfo = new message.WonderlandRoleInfo(); // 角色基本信息
        }
        WonderlandBattleModeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WonderlandBattleModeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandBattleModeRespBody;
    }());
    message.WonderlandBattleModeRespBody = WonderlandBattleModeRespBody;
    __reflect(WonderlandBattleModeRespBody.prototype, "message.WonderlandBattleModeRespBody", ["aone.AoneBody"]);
    var WonderlandBattleModeResponse = (function () {
        function WonderlandBattleModeResponse() {
            this.header = new aone.AoneRespHeader(WonderlandBattleModeResponse.ID);
            this.body = new WonderlandBattleModeRespBody();
        }
        WonderlandBattleModeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandBattleModeResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandBattleModeResponse.ID = 24121;
        return WonderlandBattleModeResponse;
    }());
    message.WonderlandBattleModeResponse = WonderlandBattleModeResponse;
    __reflect(WonderlandBattleModeResponse.prototype, "message.WonderlandBattleModeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 采集果子请求
    // request WonderlandCollection
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandCollectionReqBody = (function () {
        function WonderlandCollectionReqBody() {
            this.treeId = 0;
        }
        WonderlandCollectionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandCollectionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // treeId
            encoder.write_fixuint32(this.treeId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandCollectionReqBody;
    }());
    message.WonderlandCollectionReqBody = WonderlandCollectionReqBody;
    __reflect(WonderlandCollectionReqBody.prototype, "message.WonderlandCollectionReqBody", ["aone.AoneBody"]);
    var WonderlandCollectionRequest = (function () {
        function WonderlandCollectionRequest() {
            this.header = new aone.AoneReqHeader(WonderlandCollectionRequest.ID);
            this.body = new WonderlandCollectionReqBody();
        }
        WonderlandCollectionRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandCollectionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandCollectionRequest.ID = 24122;
        return WonderlandCollectionRequest;
    }());
    message.WonderlandCollectionRequest = WonderlandCollectionRequest;
    __reflect(WonderlandCollectionRequest.prototype, "message.WonderlandCollectionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 采集果子回复
    // response WonderlandCollection
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandCollectionRespBody = (function () {
        function WonderlandCollectionRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.WonderlandRoleInfo(); // 角色基本信息
        }
        WonderlandCollectionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WonderlandCollectionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandCollectionRespBody;
    }());
    message.WonderlandCollectionRespBody = WonderlandCollectionRespBody;
    __reflect(WonderlandCollectionRespBody.prototype, "message.WonderlandCollectionRespBody", ["aone.AoneBody"]);
    var WonderlandCollectionResponse = (function () {
        function WonderlandCollectionResponse() {
            this.header = new aone.AoneRespHeader(WonderlandCollectionResponse.ID);
            this.body = new WonderlandCollectionRespBody();
        }
        WonderlandCollectionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandCollectionResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandCollectionResponse.ID = 24123;
        return WonderlandCollectionResponse;
    }());
    message.WonderlandCollectionResponse = WonderlandCollectionResponse;
    __reflect(WonderlandCollectionResponse.prototype, "message.WonderlandCollectionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 向某人发起挑战请求
    //message WonderlandDeclareReqBody = 24124
    //{
    //	uint32 roleId;
    //}
    // 向某人发起挑战回复
    //message WonderlandDeclareRespBody = 24125
    //{
    //	WonderlandRoleInfo roleInfo;				// 角色基本信息
    //}
    // 清除罪恶值请求
    // request WonderlandClearEvil
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandClearEvilReqBody = (function () {
        function WonderlandClearEvilReqBody() {
        }
        WonderlandClearEvilReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandClearEvilReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandClearEvilReqBody;
    }());
    message.WonderlandClearEvilReqBody = WonderlandClearEvilReqBody;
    __reflect(WonderlandClearEvilReqBody.prototype, "message.WonderlandClearEvilReqBody", ["aone.AoneBody"]);
    var WonderlandClearEvilRequest = (function () {
        function WonderlandClearEvilRequest() {
            this.header = new aone.AoneReqHeader(WonderlandClearEvilRequest.ID);
            this.body = new WonderlandClearEvilReqBody();
        }
        WonderlandClearEvilRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandClearEvilRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandClearEvilRequest.ID = 24126;
        return WonderlandClearEvilRequest;
    }());
    message.WonderlandClearEvilRequest = WonderlandClearEvilRequest;
    __reflect(WonderlandClearEvilRequest.prototype, "message.WonderlandClearEvilRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 清除罪恶值回复
    // response WonderlandClearEvil
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandClearEvilRespBody = (function () {
        function WonderlandClearEvilRespBody() {
            this.gameInfo = new message.GameInfo();
            this.roleInfo = new message.WonderlandRoleInfo(); // 角色基本信息
        }
        WonderlandClearEvilRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WonderlandClearEvilRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandClearEvilRespBody;
    }());
    message.WonderlandClearEvilRespBody = WonderlandClearEvilRespBody;
    __reflect(WonderlandClearEvilRespBody.prototype, "message.WonderlandClearEvilRespBody", ["aone.AoneBody"]);
    var WonderlandClearEvilResponse = (function () {
        function WonderlandClearEvilResponse() {
            this.header = new aone.AoneRespHeader(WonderlandClearEvilResponse.ID);
            this.body = new WonderlandClearEvilRespBody();
        }
        WonderlandClearEvilResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandClearEvilResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandClearEvilResponse.ID = 24127;
        return WonderlandClearEvilResponse;
    }());
    message.WonderlandClearEvilResponse = WonderlandClearEvilResponse;
    __reflect(WonderlandClearEvilResponse.prototype, "message.WonderlandClearEvilResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 碰撞请求
    // request WonderlandCollide
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandCollideReqBody = (function () {
        function WonderlandCollideReqBody() {
            this.objectId = 0; // 玩家或者怪物
        }
        WonderlandCollideReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandCollideReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // objectId
            encoder.write_fixuint32(this.objectId);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandCollideReqBody;
    }());
    message.WonderlandCollideReqBody = WonderlandCollideReqBody;
    __reflect(WonderlandCollideReqBody.prototype, "message.WonderlandCollideReqBody", ["aone.AoneBody"]);
    var WonderlandCollideRequest = (function () {
        function WonderlandCollideRequest() {
            this.header = new aone.AoneReqHeader(WonderlandCollideRequest.ID);
            this.body = new WonderlandCollideReqBody();
        }
        WonderlandCollideRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandCollideRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandCollideRequest.ID = 24130;
        return WonderlandCollideRequest;
    }());
    message.WonderlandCollideRequest = WonderlandCollideRequest;
    __reflect(WonderlandCollideRequest.prototype, "message.WonderlandCollideRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 碰撞回复
    // response WonderlandCollide
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandCollideRespBody = (function () {
        function WonderlandCollideRespBody() {
            this.gameInfo = new message.GameInfo();
            this.battleResult = []; // BattleImitateResult
            this.roleInfo = new message.WonderlandRoleInfo(); // 角色基本信息
        }
        WonderlandCollideRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // gameInfo
            if (decoder_.eof())
                return true;
            if (!this.gameInfo.parse_bytes(decoder_))
                return false;
            // battleResult
            if (decoder_.eof())
                return true;
            this.battleResult = decoder_.read_byte_vector();
            if (decoder_.has_error())
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            return true;
        };
        WonderlandCollideRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandCollideRespBody;
    }());
    message.WonderlandCollideRespBody = WonderlandCollideRespBody;
    __reflect(WonderlandCollideRespBody.prototype, "message.WonderlandCollideRespBody", ["aone.AoneBody"]);
    var WonderlandCollideResponse = (function () {
        function WonderlandCollideResponse() {
            this.header = new aone.AoneRespHeader(WonderlandCollideResponse.ID);
            this.body = new WonderlandCollideRespBody();
        }
        WonderlandCollideResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandCollideResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandCollideResponse.ID = 24131;
        return WonderlandCollideResponse;
    }());
    message.WonderlandCollideResponse = WonderlandCollideResponse;
    __reflect(WonderlandCollideResponse.prototype, "message.WonderlandCollideResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取所有分线请求
    // request WonderlandGetBranchInfo
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandGetBranchInfoReqBody = (function () {
        function WonderlandGetBranchInfoReqBody() {
            this.id = 0;
        }
        WonderlandGetBranchInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandGetBranchInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandGetBranchInfoReqBody;
    }());
    message.WonderlandGetBranchInfoReqBody = WonderlandGetBranchInfoReqBody;
    __reflect(WonderlandGetBranchInfoReqBody.prototype, "message.WonderlandGetBranchInfoReqBody", ["aone.AoneBody"]);
    var WonderlandGetBranchInfoRequest = (function () {
        function WonderlandGetBranchInfoRequest() {
            this.header = new aone.AoneReqHeader(WonderlandGetBranchInfoRequest.ID);
            this.body = new WonderlandGetBranchInfoReqBody();
        }
        WonderlandGetBranchInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandGetBranchInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandGetBranchInfoRequest.ID = 24132;
        return WonderlandGetBranchInfoRequest;
    }());
    message.WonderlandGetBranchInfoRequest = WonderlandGetBranchInfoRequest;
    __reflect(WonderlandGetBranchInfoRequest.prototype, "message.WonderlandGetBranchInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 拉取所有分线回复
    // response WonderlandGetBranchInfo
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandGetBranchInfoRespBody = (function () {
        function WonderlandGetBranchInfoRespBody() {
            this.branchInfo = []; // k:id v:num
        }
        WonderlandGetBranchInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // branchInfo
            if (decoder_.eof())
                return true;
            var branchInfo_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < branchInfo_count; i++) {
                this.branchInfo.push(new message.IIKVPairs());
                if (!this.branchInfo[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandGetBranchInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandGetBranchInfoRespBody;
    }());
    message.WonderlandGetBranchInfoRespBody = WonderlandGetBranchInfoRespBody;
    __reflect(WonderlandGetBranchInfoRespBody.prototype, "message.WonderlandGetBranchInfoRespBody", ["aone.AoneBody"]);
    var WonderlandGetBranchInfoResponse = (function () {
        function WonderlandGetBranchInfoResponse() {
            this.header = new aone.AoneRespHeader(WonderlandGetBranchInfoResponse.ID);
            this.body = new WonderlandGetBranchInfoRespBody();
        }
        WonderlandGetBranchInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandGetBranchInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandGetBranchInfoResponse.ID = 24133;
        return WonderlandGetBranchInfoResponse;
    }());
    message.WonderlandGetBranchInfoResponse = WonderlandGetBranchInfoResponse;
    __reflect(WonderlandGetBranchInfoResponse.prototype, "message.WonderlandGetBranchInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 切换分线请求
    // request WonderlandChangeBranchInfo
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandChangeBranchInfoReqBody = (function () {
        function WonderlandChangeBranchInfoReqBody() {
            this.id = 0;
        }
        WonderlandChangeBranchInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandChangeBranchInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WonderlandChangeBranchInfoReqBody;
    }());
    message.WonderlandChangeBranchInfoReqBody = WonderlandChangeBranchInfoReqBody;
    __reflect(WonderlandChangeBranchInfoReqBody.prototype, "message.WonderlandChangeBranchInfoReqBody", ["aone.AoneBody"]);
    var WonderlandChangeBranchInfoRequest = (function () {
        function WonderlandChangeBranchInfoRequest() {
            this.header = new aone.AoneReqHeader(WonderlandChangeBranchInfoRequest.ID);
            this.body = new WonderlandChangeBranchInfoReqBody();
        }
        WonderlandChangeBranchInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        WonderlandChangeBranchInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WonderlandChangeBranchInfoRequest.ID = 24134;
        return WonderlandChangeBranchInfoRequest;
    }());
    message.WonderlandChangeBranchInfoRequest = WonderlandChangeBranchInfoRequest;
    __reflect(WonderlandChangeBranchInfoRequest.prototype, "message.WonderlandChangeBranchInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 切换分线回复
    // response WonderlandChangeBranchInfo
    ////////////////////////////////////////////////////////////////////////////////
    var WonderlandChangeBranchInfoRespBody = (function () {
        function WonderlandChangeBranchInfoRespBody() {
            this.sceneId = 0;
            this.roleInfo = new message.WonderlandRoleInfo();
            this.posInfos = [];
        }
        WonderlandChangeBranchInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sceneId
            if (decoder_.eof())
                return true;
            this.sceneId = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roleInfo
            if (decoder_.eof())
                return true;
            if (!this.roleInfo.parse_bytes(decoder_))
                return false;
            // posInfos
            if (decoder_.eof())
                return true;
            var posInfos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < posInfos_count; i++) {
                this.posInfos.push(new message.ScenePosInfo());
                if (!this.posInfos[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandChangeBranchInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WonderlandChangeBranchInfoRespBody;
    }());
    message.WonderlandChangeBranchInfoRespBody = WonderlandChangeBranchInfoRespBody;
    __reflect(WonderlandChangeBranchInfoRespBody.prototype, "message.WonderlandChangeBranchInfoRespBody", ["aone.AoneBody"]);
    var WonderlandChangeBranchInfoResponse = (function () {
        function WonderlandChangeBranchInfoResponse() {
            this.header = new aone.AoneRespHeader(WonderlandChangeBranchInfoResponse.ID);
            this.body = new WonderlandChangeBranchInfoRespBody();
        }
        WonderlandChangeBranchInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WonderlandChangeBranchInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        WonderlandChangeBranchInfoResponse.ID = 24135;
        return WonderlandChangeBranchInfoResponse;
    }());
    message.WonderlandChangeBranchInfoResponse = WonderlandChangeBranchInfoResponse;
    __reflect(WonderlandChangeBranchInfoResponse.prototype, "message.WonderlandChangeBranchInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(WonderlandEnterRequest.ID, function () { return new WonderlandEnterRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandEnterResponse.ID, function () { return new WonderlandEnterResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandLeaveRequest.ID, function () { return new WonderlandLeaveRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandLeaveResponse.ID, function () { return new WonderlandLeaveResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandMoveRequest.ID, function () { return new WonderlandMoveRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandMoveResponse.ID, function () { return new WonderlandMoveResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandDeadCoolingRequest.ID, function () { return new WonderlandDeadCoolingRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandDeadCoolingResponse.ID, function () { return new WonderlandDeadCoolingResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandFasterRequest.ID, function () { return new WonderlandFasterRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandFasterResponse.ID, function () { return new WonderlandFasterResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandAddBloodRequest.ID, function () { return new WonderlandAddBloodRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandAddBloodResponse.ID, function () { return new WonderlandAddBloodResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandBattleModeRequest.ID, function () { return new WonderlandBattleModeRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandBattleModeResponse.ID, function () { return new WonderlandBattleModeResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandCollectionRequest.ID, function () { return new WonderlandCollectionRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandCollectionResponse.ID, function () { return new WonderlandCollectionResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandClearEvilRequest.ID, function () { return new WonderlandClearEvilRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandClearEvilResponse.ID, function () { return new WonderlandClearEvilResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandCollideRequest.ID, function () { return new WonderlandCollideRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandCollideResponse.ID, function () { return new WonderlandCollideResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandGetBranchInfoRequest.ID, function () { return new WonderlandGetBranchInfoRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandGetBranchInfoResponse.ID, function () { return new WonderlandGetBranchInfoResponse(); });
    aone.MessageFactory.getInstance().register(WonderlandChangeBranchInfoRequest.ID, function () { return new WonderlandChangeBranchInfoRequest(); });
    aone.MessageFactory.getInstance().register(WonderlandChangeBranchInfoResponse.ID, function () { return new WonderlandChangeBranchInfoResponse(); });
})(message || (message = {}));
//Date: 2020-1
//File: msg_xx_apiserver.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// ���ĵ�����API����ͨ��Э��
// 1700 -- 1999:  API����(I)
// auth_key�㷨��
// ����ĸΪ��־λ����ʾʹ�����ּ����㷨��Ŀǰ��'A'
//
// �㷨AuthKeyA()������ܴ����㷨
// 1. ���û�������32λMD5���㣬�õ�32λ�ַ���1����ת��Ϊ��д�õ��ַ���2��
// 2. ��'0'~'9'��'A'~'F'��������������ַ����滻�ַ���2��0�͵�31�����ַ����õ��ַ���3��
// 3. ���ַ���3����һ��32λMD5����õ��ַ���4����ת��Ϊ��д�õ��ַ���5��
// 4. ʹ�øյõ����������ֵ�ֱ��滻�ַ���5�ĵ�0�͵�31�����ַ����õ��ַ���6��
// 5. 'A'���ַ���6���Ӽ�Ϊ��֤��(auth_key)��
//
// ����aone2Э��ӿڵ� auth_key = AuthKeyA(device_id + appkey)
//
// ����httpЭ��ӿڵ� sign = md5(http_body + appkey)תСд
//
// ����Ƶ�����Ʋ���????
//
// HTTPЭ��ͳһ��http post����,��ϢͷContent-Type��Ϊapplication/json,��Ϣ��Ϊjson�ַ���
// ����url��ַ�������Ҫ����serverid��sign������sign�����ļ��㷽����sign = md5(http��Ϣ��+appkey)תΪСд��ĸ
// http������Ϣbody: ��Ϣ�����л�Ϊjson����
// http�ظ���Ϣbody: {"retcode":xxxx,"retmsg":"xxxxxx","body":{......}}
//                   ����ʡ�ԵĲ���Ϊ��Ϣ�����л����json;��retcodeΪ��0ʱbody����Ϊ��json����{}
// HTTP�����Ż�������httpЭ�����Ӹ��ã�API���������ر����ӣ��������������������
// �����������붨��
// push_ios_apns
// push_ios_baidu
// push_ios_jiguang
// push_ios_xinge
// push_android_gcm
// push_android_baidu
// push_android_jiguang
// push_android_xinge
// push_wp_mpns
// push_wp_jiguang
// ���ͷ����
// low: ��������º͵ı���
// medium: һ��ģ�Ĭ�ϵı���
// high: �����ۣ���ḻ�ı���
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // (��ʱ�豸�˺�)���ٵ�½����
    // �ӿ�1: http post + json��url·����/api/quick_login.do
    // �ӿ�2: aone2Э�飬Э��ţ�1700
    // request QuickLogin
    ////////////////////////////////////////////////////////////////////////////////
    var QuickLoginReqBody = (function () {
        function QuickLoginReqBody() {
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
            this.delay_ms = 0; // �ͻ�������Ϸ������ʱ(��¼SDK������ڷ�����CheckVersion�������ѵĺ���ʱ��)
        }
        QuickLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QuickLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // delay_ms
            encoder.write_fixuint32(this.delay_ms);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QuickLoginReqBody;
    }());
    message.QuickLoginReqBody = QuickLoginReqBody;
    __reflect(QuickLoginReqBody.prototype, "message.QuickLoginReqBody", ["aone.AoneBody"]);
    var QuickLoginRequest = (function () {
        function QuickLoginRequest() {
            this.header = new aone.AoneReqHeader(QuickLoginRequest.ID);
            this.body = new QuickLoginReqBody();
        }
        QuickLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        QuickLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QuickLoginRequest.ID = 1700;
        return QuickLoginRequest;
    }());
    message.QuickLoginRequest = QuickLoginRequest;
    __reflect(QuickLoginRequest.prototype, "message.QuickLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // (��ʱ�豸�˺�)���ٵ�½�ظ�
    // response QuickLogin
    ////////////////////////////////////////////////////////////////////////////////
    var QuickLoginRespBody = (function () {
        function QuickLoginRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
            this.aone_account = ""; // �豸�󶨵�Aone�˺�(û���ÿ�)
            this.token = ""; // (��ƽ̨)�û�������֤��(���Ѱ󶨹�Aone�˺ţ��򷵻���Ч�Ŀ�token)
        }
        QuickLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // aone_account
            if (decoder_.eof())
                return true;
            this.aone_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QuickLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QuickLoginRespBody;
    }());
    message.QuickLoginRespBody = QuickLoginRespBody;
    __reflect(QuickLoginRespBody.prototype, "message.QuickLoginRespBody", ["aone.AoneBody"]);
    var QuickLoginResponse = (function () {
        function QuickLoginResponse() {
            this.header = new aone.AoneRespHeader(QuickLoginResponse.ID);
            this.body = new QuickLoginRespBody();
        }
        QuickLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QuickLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        QuickLoginResponse.ID = 1701;
        return QuickLoginResponse;
    }());
    message.QuickLoginResponse = QuickLoginResponse;
    __reflect(QuickLoginResponse.prototype, "message.QuickLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���������SDK��½����
    // ��ʱʱ���������ô�һЩ>=10��
    // ��һ�ε�½�Զ�����ע��
    // �ӿ�1: http post + json��url·����/api/sdk_login.do
    // �ӿ�2: aone2Э�飬Э��ţ�1702
    // request SDKLogin
    ////////////////////////////////////////////////////////////////////////////////
    var SDKLoginReqBody = (function () {
        function SDKLoginReqBody() {
            this.sdk_userid = ""; // (������ƽ̨���ص�)�û�ID(û�����ÿ�)
            this.sdk_token = ""; // (���������ص�)�û���֤��
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
            this.sdk_version = ""; // ������sdk�汾(������"1.2.3"��"2.3"����ֹ������SDK����������)
            this.delay_ms = 0; // �ͻ�������Ϸ������ʱ(��¼SDK������ڷ�����CheckVersion�������ѵĺ���ʱ��)
        }
        SDKLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SDKLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // sdk_userid
            encoder.write_string(this.sdk_userid);
            // sdk_token
            encoder.write_string(this.sdk_token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // sdk_version
            encoder.write_string(this.sdk_version);
            // delay_ms
            encoder.write_fixuint32(this.delay_ms);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SDKLoginReqBody;
    }());
    message.SDKLoginReqBody = SDKLoginReqBody;
    __reflect(SDKLoginReqBody.prototype, "message.SDKLoginReqBody", ["aone.AoneBody"]);
    var SDKLoginRequest = (function () {
        function SDKLoginRequest() {
            this.header = new aone.AoneReqHeader(SDKLoginRequest.ID);
            this.body = new SDKLoginReqBody();
        }
        SDKLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        SDKLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SDKLoginRequest.ID = 1702;
        return SDKLoginRequest;
    }());
    message.SDKLoginRequest = SDKLoginRequest;
    __reflect(SDKLoginRequest.prototype, "message.SDKLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���������SDK��½�ظ�
    // response SDKLogin
    ////////////////////////////////////////////////////////////////////////////////
    var SDKLoginRespBody = (function () {
        function SDKLoginRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
            this.token = ""; // (��ƽ̨)�û�������֤��
            this.ext = ""; // ��Ҫ�ش�sdk������
        }
        SDKLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // ext
            if (decoder_.eof())
                return true;
            this.ext = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        SDKLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SDKLoginRespBody;
    }());
    message.SDKLoginRespBody = SDKLoginRespBody;
    __reflect(SDKLoginRespBody.prototype, "message.SDKLoginRespBody", ["aone.AoneBody"]);
    var SDKLoginResponse = (function () {
        function SDKLoginResponse() {
            this.header = new aone.AoneRespHeader(SDKLoginResponse.ID);
            this.body = new SDKLoginRespBody();
        }
        SDKLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SDKLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        SDKLoginResponse.ID = 1703;
        return SDKLoginResponse;
    }());
    message.SDKLoginResponse = SDKLoginResponse;
    __reflect(SDKLoginResponse.prototype, "message.SDKLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���࿪��ƽ̨��½����
    // ����OAuth2.0Э��
    // ��һ�ε�½�Զ�����ע��
    // request OAuthLogin
    ////////////////////////////////////////////////////////////////////////////////
    var OAuthLoginReqBody = (function () {
        function OAuthLoginReqBody() {
            this.oauth_type = ""; // ��½����(sina, tencent, facebook, gamecenter, google)
            this.oauth_token = ""; // ����ƽ̨��֤����
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ(�������ͱ�����aone_android��aone_ios)
            this.delay_ms = 0; // �ͻ�������Ϸ������ʱ(��¼SDK������ڷ�����CheckVersion�������ѵĺ���ʱ��)
        }
        OAuthLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        OAuthLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // oauth_type
            encoder.write_string(this.oauth_type);
            // oauth_token
            encoder.write_string(this.oauth_token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // delay_ms
            encoder.write_fixuint32(this.delay_ms);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return OAuthLoginReqBody;
    }());
    message.OAuthLoginReqBody = OAuthLoginReqBody;
    __reflect(OAuthLoginReqBody.prototype, "message.OAuthLoginReqBody", ["aone.AoneBody"]);
    var OAuthLoginRequest = (function () {
        function OAuthLoginRequest() {
            this.header = new aone.AoneReqHeader(OAuthLoginRequest.ID);
            this.body = new OAuthLoginReqBody();
        }
        OAuthLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        OAuthLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        OAuthLoginRequest.ID = 1704;
        return OAuthLoginRequest;
    }());
    message.OAuthLoginRequest = OAuthLoginRequest;
    __reflect(OAuthLoginRequest.prototype, "message.OAuthLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���࿪��ƽ̨��½�ظ�
    // response OAuthLogin
    ////////////////////////////////////////////////////////////////////////////////
    var OAuthLoginRespBody = (function () {
        function OAuthLoginRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
            this.token = ""; // (��ƽ̨)�û�������֤��
            this.ext = ""; // ��Ҫ�ش�sdk������
        }
        OAuthLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // ext
            if (decoder_.eof())
                return true;
            this.ext = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        OAuthLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return OAuthLoginRespBody;
    }());
    message.OAuthLoginRespBody = OAuthLoginRespBody;
    __reflect(OAuthLoginRespBody.prototype, "message.OAuthLoginRespBody", ["aone.AoneBody"]);
    var OAuthLoginResponse = (function () {
        function OAuthLoginResponse() {
            this.header = new aone.AoneRespHeader(OAuthLoginResponse.ID);
            this.body = new OAuthLoginRespBody();
        }
        OAuthLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        OAuthLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        OAuthLoginResponse.ID = 1705;
        return OAuthLoginResponse;
    }());
    message.OAuthLoginResponse = OAuthLoginResponse;
    __reflect(OAuthLoginResponse.prototype, "message.OAuthLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���࿪��ƽ̨�ֻ�(Mobile)������
    // request OAuthBind
    ////////////////////////////////////////////////////////////////////////////////
    var OAuthBindReqBody = (function () {
        function OAuthBindReqBody() {
            this.oauth_type = ""; // ��½����(sina, tencent, facebook, gamecenter, google)
            this.oauth_token = ""; // ����ƽ̨��֤����
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ(�������ͱ�����aone_android��aone_ios)
            this.oauth_account = ""; // �������˺�(Ŀǰ��facebook��Ҫ)
        }
        OAuthBindReqBody.prototype.parse_bytes = function (decoder) { return false; };
        OAuthBindReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // oauth_type
            encoder.write_string(this.oauth_type);
            // oauth_token
            encoder.write_string(this.oauth_token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // oauth_account
            encoder.write_string(this.oauth_account);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return OAuthBindReqBody;
    }());
    message.OAuthBindReqBody = OAuthBindReqBody;
    __reflect(OAuthBindReqBody.prototype, "message.OAuthBindReqBody", ["aone.AoneBody"]);
    var OAuthBindRequest = (function () {
        function OAuthBindRequest() {
            this.header = new aone.AoneReqHeader(OAuthBindRequest.ID);
            this.body = new OAuthBindReqBody();
        }
        OAuthBindRequest.prototype.parse_bytes = function (decoder) { return false; };
        OAuthBindRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        OAuthBindRequest.ID = 1706;
        return OAuthBindRequest;
    }());
    message.OAuthBindRequest = OAuthBindRequest;
    __reflect(OAuthBindRequest.prototype, "message.OAuthBindRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���࿪��ƽ̨�ֻ�(Mobile)�󶨻ظ�
    // response OAuthBind
    ////////////////////////////////////////////////////////////////////////////////
    var OAuthBindRespBody = (function () {
        function OAuthBindRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
            this.token = ""; // (��ƽ̨)�û�������֤��
            this.ext = ""; // ��Ҫ�ش�sdk������
        }
        OAuthBindRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // ext
            if (decoder_.eof())
                return true;
            this.ext = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        OAuthBindRespBody.prototype.to_bytes = function (encoder) { return false; };
        return OAuthBindRespBody;
    }());
    message.OAuthBindRespBody = OAuthBindRespBody;
    __reflect(OAuthBindRespBody.prototype, "message.OAuthBindRespBody", ["aone.AoneBody"]);
    var OAuthBindResponse = (function () {
        function OAuthBindResponse() {
            this.header = new aone.AoneRespHeader(OAuthBindResponse.ID);
            this.body = new OAuthBindRespBody();
        }
        OAuthBindResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        OAuthBindResponse.prototype.to_bytes = function (encoder) { return false; };
        OAuthBindResponse.ID = 1707;
        return OAuthBindResponse;
    }());
    message.OAuthBindResponse = OAuthBindResponse;
    __reflect(OAuthBindResponse.prototype, "message.OAuthBindResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺��ֻ�(Mobile)������
    // ע�Ტ��Aone�˺Ű󶨵��豸��
    // request AoneBind
    ////////////////////////////////////////////////////////////////////////////////
    var AoneBindReqBody = (function () {
        function AoneBindReqBody() {
            this.account = ""; // �˺�(6~50���ַ�����ʹ����ĸ�����֡��»��ߣ��������»��߿�ͷ�����ִ�Сд)
            this.password = ""; // ����(6~16���ַ������ִ�Сд)
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneBindReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneBindReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // account
            encoder.write_string(this.account);
            // password
            encoder.write_string(this.password);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneBindReqBody;
    }());
    message.AoneBindReqBody = AoneBindReqBody;
    __reflect(AoneBindReqBody.prototype, "message.AoneBindReqBody", ["aone.AoneBody"]);
    var AoneBindRequest = (function () {
        function AoneBindRequest() {
            this.header = new aone.AoneReqHeader(AoneBindRequest.ID);
            this.body = new AoneBindReqBody();
        }
        AoneBindRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneBindRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneBindRequest.ID = 1708;
        return AoneBindRequest;
    }());
    message.AoneBindRequest = AoneBindRequest;
    __reflect(AoneBindRequest.prototype, "message.AoneBindRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺��ֻ�(Mobile)�󶨻ظ�
    // response AoneBind
    ////////////////////////////////////////////////////////////////////////////////
    var AoneBindRespBody = (function () {
        function AoneBindRespBody() {
            this.user_id = 0; // �û�ID
            this.user_account = ""; // �û��˺�
            this.token = ""; // (��ƽ̨)�û�������֤��(������֮ǰ�Ѱ󶨣�������Ч�Ŀ�token)
            this.aone_account = ""; // �󶨵�Aone�˺�
        }
        AoneBindRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // aone_account
            if (decoder_.eof())
                return true;
            this.aone_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneBindRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneBindRespBody;
    }());
    message.AoneBindRespBody = AoneBindRespBody;
    __reflect(AoneBindRespBody.prototype, "message.AoneBindRespBody", ["aone.AoneBody"]);
    var AoneBindResponse = (function () {
        function AoneBindResponse() {
            this.header = new aone.AoneRespHeader(AoneBindResponse.ID);
            this.body = new AoneBindRespBody();
        }
        AoneBindResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneBindResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneBindResponse.ID = 1709;
        return AoneBindResponse;
    }());
    message.AoneBindResponse = AoneBindResponse;
    __reflect(AoneBindResponse.prototype, "message.AoneBindResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺�ע������
    // �ӿ�1: http post + json��url·����/api/aone_register.do
    // �ӿ�2: aone2Э�飬Э��ţ�1710
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request AoneRegister
    ////////////////////////////////////////////////////////////////////////////////
    var AoneRegisterReqBody = (function () {
        function AoneRegisterReqBody() {
            this.account = ""; // �˺�(6~50���ַ�����ʹ����ĸ�����֡��»��ߣ��������»��߿�ͷ�����ִ�Сд)
            this.password = ""; // ����(6~16���ַ������ִ�Сд)
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneRegisterReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneRegisterReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // account
            encoder.write_string(this.account);
            // password
            encoder.write_string(this.password);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneRegisterReqBody;
    }());
    message.AoneRegisterReqBody = AoneRegisterReqBody;
    __reflect(AoneRegisterReqBody.prototype, "message.AoneRegisterReqBody", ["aone.AoneBody"]);
    var AoneRegisterRequest = (function () {
        function AoneRegisterRequest() {
            this.header = new aone.AoneReqHeader(AoneRegisterRequest.ID);
            this.body = new AoneRegisterReqBody();
        }
        AoneRegisterRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneRegisterRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneRegisterRequest.ID = 1710;
        return AoneRegisterRequest;
    }());
    message.AoneRegisterRequest = AoneRegisterRequest;
    __reflect(AoneRegisterRequest.prototype, "message.AoneRegisterRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺�ע��ظ�
    // response AoneRegister
    ////////////////////////////////////////////////////////////////////////////////
    var AoneRegisterRespBody = (function () {
        function AoneRegisterRespBody() {
            this.user_id = 0; // �û�ID
            this.user_account = ""; // �û��˺�
            this.token = ""; // (��ƽ̨)�û�������֤��
        }
        AoneRegisterRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneRegisterRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneRegisterRespBody;
    }());
    message.AoneRegisterRespBody = AoneRegisterRespBody;
    __reflect(AoneRegisterRespBody.prototype, "message.AoneRegisterRespBody", ["aone.AoneBody"]);
    var AoneRegisterResponse = (function () {
        function AoneRegisterResponse() {
            this.header = new aone.AoneRespHeader(AoneRegisterResponse.ID);
            this.body = new AoneRegisterRespBody();
        }
        AoneRegisterResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneRegisterResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneRegisterResponse.ID = 1711;
        return AoneRegisterResponse;
    }());
    message.AoneRegisterResponse = AoneRegisterResponse;
    __reflect(AoneRegisterResponse.prototype, "message.AoneRegisterResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺ŵ�½����
    // ���󶨵��豸�뱾�ε�½���豸��ͬһ�豸�����Բ���֤���롣
    // �ӿ�1: http post + json��url·����/api/aone_login.do
    // �ӿ�2: aone2Э�飬Э��ţ�1712
    // ���ýӿ�1ʱ��auth_key,device_info,version_info,delay_ms����ʡ��
    // request AoneLogin
    ////////////////////////////////////////////////////////////////////////////////
    var AoneLoginReqBody = (function () {
        function AoneLoginReqBody() {
            this.account = ""; // �˺�(6~50���ַ�����ʹ����ĸ�����֡��»��ߣ��������»��߿�ͷ�����ִ�Сд)
            this.password = ""; // ����(6~16���ַ������ִ�Сд)
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.delay_ms = 0; // �ͻ�������Ϸ������ʱ(��¼SDK������ڷ�����CheckVersion�������ѵĺ���ʱ��)
        }
        AoneLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // account
            encoder.write_string(this.account);
            // password
            encoder.write_string(this.password);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // delay_ms
            encoder.write_fixuint32(this.delay_ms);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneLoginReqBody;
    }());
    message.AoneLoginReqBody = AoneLoginReqBody;
    __reflect(AoneLoginReqBody.prototype, "message.AoneLoginReqBody", ["aone.AoneBody"]);
    var AoneLoginRequest = (function () {
        function AoneLoginRequest() {
            this.header = new aone.AoneReqHeader(AoneLoginRequest.ID);
            this.body = new AoneLoginReqBody();
        }
        AoneLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneLoginRequest.ID = 1712;
        return AoneLoginRequest;
    }());
    message.AoneLoginRequest = AoneLoginRequest;
    __reflect(AoneLoginRequest.prototype, "message.AoneLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺ŵ�½�ظ�
    // response AoneLogin
    ////////////////////////////////////////////////////////////////////////////////
    var AoneLoginRespBody = (function () {
        function AoneLoginRespBody() {
            this.user_id = 0; // �û�ID
            this.user_account = ""; // �û��˺�
            this.token = ""; // (��ƽ̨)�û�������֤��
        }
        AoneLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneLoginRespBody;
    }());
    message.AoneLoginRespBody = AoneLoginRespBody;
    __reflect(AoneLoginRespBody.prototype, "message.AoneLoginRespBody", ["aone.AoneBody"]);
    var AoneLoginResponse = (function () {
        function AoneLoginResponse() {
            this.header = new aone.AoneRespHeader(AoneLoginResponse.ID);
            this.body = new AoneLoginRespBody();
        }
        AoneLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneLoginResponse.ID = 1713;
        return AoneLoginResponse;
    }());
    message.AoneLoginResponse = AoneLoginResponse;
    __reflect(AoneLoginResponse.prototype, "message.AoneLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺��޸���������
    // �ӿ�1: http post + json��url·����/api/aone_change_password.do
    // �ӿ�2: aone2��Э���1714
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request AoneChangePassword
    ////////////////////////////////////////////////////////////////////////////////
    var AoneChangePasswordReqBody = (function () {
        function AoneChangePasswordReqBody() {
            this.user_id = 0; // �û�ID
            this.token = ""; // (��ƽ̨)�û�������֤��
            this.old_password = ""; // ������
            this.new_password = ""; // ������
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneChangePasswordReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneChangePasswordReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // token
            encoder.write_string(this.token);
            // old_password
            encoder.write_string(this.old_password);
            // new_password
            encoder.write_string(this.new_password);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneChangePasswordReqBody;
    }());
    message.AoneChangePasswordReqBody = AoneChangePasswordReqBody;
    __reflect(AoneChangePasswordReqBody.prototype, "message.AoneChangePasswordReqBody", ["aone.AoneBody"]);
    var AoneChangePasswordRequest = (function () {
        function AoneChangePasswordRequest() {
            this.header = new aone.AoneReqHeader(AoneChangePasswordRequest.ID);
            this.body = new AoneChangePasswordReqBody();
        }
        AoneChangePasswordRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneChangePasswordRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneChangePasswordRequest.ID = 1714;
        return AoneChangePasswordRequest;
    }());
    message.AoneChangePasswordRequest = AoneChangePasswordRequest;
    __reflect(AoneChangePasswordRequest.prototype, "message.AoneChangePasswordRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺��޸�����ظ�
    // response AoneChangePassword
    ////////////////////////////////////////////////////////////////////////////////
    var AoneChangePasswordRespBody = (function () {
        function AoneChangePasswordRespBody() {
        }
        AoneChangePasswordRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        AoneChangePasswordRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneChangePasswordRespBody;
    }());
    message.AoneChangePasswordRespBody = AoneChangePasswordRespBody;
    __reflect(AoneChangePasswordRespBody.prototype, "message.AoneChangePasswordRespBody", ["aone.AoneBody"]);
    var AoneChangePasswordResponse = (function () {
        function AoneChangePasswordResponse() {
            this.header = new aone.AoneRespHeader(AoneChangePasswordResponse.ID);
            this.body = new AoneChangePasswordRespBody();
        }
        AoneChangePasswordResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneChangePasswordResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneChangePasswordResponse.ID = 1715;
        return AoneChangePasswordResponse;
    }());
    message.AoneChangePasswordResponse = AoneChangePasswordResponse;
    __reflect(AoneChangePasswordResponse.prototype, "message.AoneChangePasswordResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // (ͨ���ֻ�)������֤������
    // �ӿ�1: http post + json��url·����/api/apply_token_by_phone.do?appid=xxx&sign=xxxx
    // �ӿ�2: aone2, Э���1716
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // ����Ƶ�����ƣ���Ҫ����!!!
    // request ApplyTokenByPhone
    ////////////////////////////////////////////////////////////////////////////////
    var ApplyTokenByPhoneReqBody = (function () {
        function ApplyTokenByPhoneReqBody() {
            this.action = ""; // ����(bind:��, unbind:���, resetpwd:��������)
            this.phone = ""; // �ֻ���
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        ApplyTokenByPhoneReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ApplyTokenByPhoneReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // action
            encoder.write_string(this.action);
            // phone
            encoder.write_string(this.phone);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ApplyTokenByPhoneReqBody;
    }());
    message.ApplyTokenByPhoneReqBody = ApplyTokenByPhoneReqBody;
    __reflect(ApplyTokenByPhoneReqBody.prototype, "message.ApplyTokenByPhoneReqBody", ["aone.AoneBody"]);
    var ApplyTokenByPhoneRequest = (function () {
        function ApplyTokenByPhoneRequest() {
            this.header = new aone.AoneReqHeader(ApplyTokenByPhoneRequest.ID);
            this.body = new ApplyTokenByPhoneReqBody();
        }
        ApplyTokenByPhoneRequest.prototype.parse_bytes = function (decoder) { return false; };
        ApplyTokenByPhoneRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ApplyTokenByPhoneRequest.ID = 1716;
        return ApplyTokenByPhoneRequest;
    }());
    message.ApplyTokenByPhoneRequest = ApplyTokenByPhoneRequest;
    __reflect(ApplyTokenByPhoneRequest.prototype, "message.ApplyTokenByPhoneRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // (ͨ���ֻ�)������֤��ظ�
    // response ApplyTokenByPhone
    ////////////////////////////////////////////////////////////////////////////////
    var ApplyTokenByPhoneRespBody = (function () {
        function ApplyTokenByPhoneRespBody() {
        }
        ApplyTokenByPhoneRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        ApplyTokenByPhoneRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ApplyTokenByPhoneRespBody;
    }());
    message.ApplyTokenByPhoneRespBody = ApplyTokenByPhoneRespBody;
    __reflect(ApplyTokenByPhoneRespBody.prototype, "message.ApplyTokenByPhoneRespBody", ["aone.AoneBody"]);
    var ApplyTokenByPhoneResponse = (function () {
        function ApplyTokenByPhoneResponse() {
            this.header = new aone.AoneRespHeader(ApplyTokenByPhoneResponse.ID);
            this.body = new ApplyTokenByPhoneRespBody();
        }
        ApplyTokenByPhoneResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ApplyTokenByPhoneResponse.prototype.to_bytes = function (encoder) { return false; };
        ApplyTokenByPhoneResponse.ID = 1717;
        return ApplyTokenByPhoneResponse;
    }());
    message.ApplyTokenByPhoneResponse = ApplyTokenByPhoneResponse;
    __reflect(ApplyTokenByPhoneResponse.prototype, "message.ApplyTokenByPhoneResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺Ű��ֻ���
    // �ӿ�1: http post + json��url·����/api/aone_bind_phone.do?appid=xxx&sign=xxxx
    // �ӿ�2: aone2��Э���1718
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request AoneBindPhone
    ////////////////////////////////////////////////////////////////////////////////
    var AoneBindPhoneReqBody = (function () {
        function AoneBindPhoneReqBody() {
            this.user_id = 0; // �û�ID
            this.phone = ""; // �ֻ���
            this.phone_token = ""; // (ͨ���ֻ���ȡ��)��֤��
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneBindPhoneReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneBindPhoneReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // phone
            encoder.write_string(this.phone);
            // phone_token
            encoder.write_string(this.phone_token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneBindPhoneReqBody;
    }());
    message.AoneBindPhoneReqBody = AoneBindPhoneReqBody;
    __reflect(AoneBindPhoneReqBody.prototype, "message.AoneBindPhoneReqBody", ["aone.AoneBody"]);
    var AoneBindPhoneRequest = (function () {
        function AoneBindPhoneRequest() {
            this.header = new aone.AoneReqHeader(AoneBindPhoneRequest.ID);
            this.body = new AoneBindPhoneReqBody();
        }
        AoneBindPhoneRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneBindPhoneRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneBindPhoneRequest.ID = 1718;
        return AoneBindPhoneRequest;
    }());
    message.AoneBindPhoneRequest = AoneBindPhoneRequest;
    __reflect(AoneBindPhoneRequest.prototype, "message.AoneBindPhoneRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺Ű��ֻ��Żظ�
    // response AoneBindPhone
    ////////////////////////////////////////////////////////////////////////////////
    var AoneBindPhoneRespBody = (function () {
        function AoneBindPhoneRespBody() {
        }
        AoneBindPhoneRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        AoneBindPhoneRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneBindPhoneRespBody;
    }());
    message.AoneBindPhoneRespBody = AoneBindPhoneRespBody;
    __reflect(AoneBindPhoneRespBody.prototype, "message.AoneBindPhoneRespBody", ["aone.AoneBody"]);
    var AoneBindPhoneResponse = (function () {
        function AoneBindPhoneResponse() {
            this.header = new aone.AoneRespHeader(AoneBindPhoneResponse.ID);
            this.body = new AoneBindPhoneRespBody();
        }
        AoneBindPhoneResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneBindPhoneResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneBindPhoneResponse.ID = 1719;
        return AoneBindPhoneResponse;
    }());
    message.AoneBindPhoneResponse = AoneBindPhoneResponse;
    __reflect(AoneBindPhoneResponse.prototype, "message.AoneBindPhoneResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺Ž���ֻ��Ű�����
    // �ӿ�1: http post + json��url·����/api/aone_unbind_phone.do?appid=xxx&sign=xxxx
    // �ӿ�2: aone2��Э���1720
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request AoneUnBindPhone
    ////////////////////////////////////////////////////////////////////////////////
    var AoneUnBindPhoneReqBody = (function () {
        function AoneUnBindPhoneReqBody() {
            this.user_id = 0; // �û�ID
            this.phone = ""; // �ֻ���
            this.phone_token = ""; // (ͨ���ֻ���ȡ��)��֤��
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneUnBindPhoneReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneUnBindPhoneReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // phone
            encoder.write_string(this.phone);
            // phone_token
            encoder.write_string(this.phone_token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneUnBindPhoneReqBody;
    }());
    message.AoneUnBindPhoneReqBody = AoneUnBindPhoneReqBody;
    __reflect(AoneUnBindPhoneReqBody.prototype, "message.AoneUnBindPhoneReqBody", ["aone.AoneBody"]);
    var AoneUnBindPhoneRequest = (function () {
        function AoneUnBindPhoneRequest() {
            this.header = new aone.AoneReqHeader(AoneUnBindPhoneRequest.ID);
            this.body = new AoneUnBindPhoneReqBody();
        }
        AoneUnBindPhoneRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneUnBindPhoneRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneUnBindPhoneRequest.ID = 1720;
        return AoneUnBindPhoneRequest;
    }());
    message.AoneUnBindPhoneRequest = AoneUnBindPhoneRequest;
    __reflect(AoneUnBindPhoneRequest.prototype, "message.AoneUnBindPhoneRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺Ž���ֻ��Ű󶨻ظ�
    // response AoneUnBindPhone
    ////////////////////////////////////////////////////////////////////////////////
    var AoneUnBindPhoneRespBody = (function () {
        function AoneUnBindPhoneRespBody() {
        }
        AoneUnBindPhoneRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        AoneUnBindPhoneRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneUnBindPhoneRespBody;
    }());
    message.AoneUnBindPhoneRespBody = AoneUnBindPhoneRespBody;
    __reflect(AoneUnBindPhoneRespBody.prototype, "message.AoneUnBindPhoneRespBody", ["aone.AoneBody"]);
    var AoneUnBindPhoneResponse = (function () {
        function AoneUnBindPhoneResponse() {
            this.header = new aone.AoneRespHeader(AoneUnBindPhoneResponse.ID);
            this.body = new AoneUnBindPhoneRespBody();
        }
        AoneUnBindPhoneResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneUnBindPhoneResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneUnBindPhoneResponse.ID = 1721;
        return AoneUnBindPhoneResponse;
    }());
    message.AoneUnBindPhoneResponse = AoneUnBindPhoneResponse;
    __reflect(AoneUnBindPhoneResponse.prototype, "message.AoneUnBindPhoneResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺��ֻ��һ���������
    // �ӿ�1: http post + json��url·����/api/aone_reset_password_by_phone.do?appid=xxx&sign=xxxx
    // �ӿ�2: aone2��Э���1722
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request AoneResetPasswordByPhone
    ////////////////////////////////////////////////////////////////////////////////
    var AoneResetPasswordByPhoneReqBody = (function () {
        function AoneResetPasswordByPhoneReqBody() {
            this.phone = ""; // �ֻ���
            this.phone_token = ""; // (ͨ���ֻ���ȡ��)��֤��
            this.password = ""; // ������
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneResetPasswordByPhoneReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneResetPasswordByPhoneReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // phone
            encoder.write_string(this.phone);
            // phone_token
            encoder.write_string(this.phone_token);
            // password
            encoder.write_string(this.password);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneResetPasswordByPhoneReqBody;
    }());
    message.AoneResetPasswordByPhoneReqBody = AoneResetPasswordByPhoneReqBody;
    __reflect(AoneResetPasswordByPhoneReqBody.prototype, "message.AoneResetPasswordByPhoneReqBody", ["aone.AoneBody"]);
    var AoneResetPasswordByPhoneRequest = (function () {
        function AoneResetPasswordByPhoneRequest() {
            this.header = new aone.AoneReqHeader(AoneResetPasswordByPhoneRequest.ID);
            this.body = new AoneResetPasswordByPhoneReqBody();
        }
        AoneResetPasswordByPhoneRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneResetPasswordByPhoneRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneResetPasswordByPhoneRequest.ID = 1722;
        return AoneResetPasswordByPhoneRequest;
    }());
    message.AoneResetPasswordByPhoneRequest = AoneResetPasswordByPhoneRequest;
    __reflect(AoneResetPasswordByPhoneRequest.prototype, "message.AoneResetPasswordByPhoneRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺��ֻ��һ���������
    // response AoneResetPasswordByPhone
    ////////////////////////////////////////////////////////////////////////////////
    var AoneResetPasswordByPhoneRespBody = (function () {
        function AoneResetPasswordByPhoneRespBody() {
        }
        AoneResetPasswordByPhoneRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        AoneResetPasswordByPhoneRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneResetPasswordByPhoneRespBody;
    }());
    message.AoneResetPasswordByPhoneRespBody = AoneResetPasswordByPhoneRespBody;
    __reflect(AoneResetPasswordByPhoneRespBody.prototype, "message.AoneResetPasswordByPhoneRespBody", ["aone.AoneBody"]);
    var AoneResetPasswordByPhoneResponse = (function () {
        function AoneResetPasswordByPhoneResponse() {
            this.header = new aone.AoneRespHeader(AoneResetPasswordByPhoneResponse.ID);
            this.body = new AoneResetPasswordByPhoneRespBody();
        }
        AoneResetPasswordByPhoneResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneResetPasswordByPhoneResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneResetPasswordByPhoneResponse.ID = 1723;
        return AoneResetPasswordByPhoneResponse;
    }());
    message.AoneResetPasswordByPhoneResponse = AoneResetPasswordByPhoneResponse;
    __reflect(AoneResetPasswordByPhoneResponse.prototype, "message.AoneResetPasswordByPhoneResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // (ͨ���ʼ�)������֤������
    // �ӿ�1: http post + json��url·����/api/apply_token_by_mail.do?appid=xxx&sign=xxxx
    // �ӿ�2: aone2��Э���1724
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // ����Ƶ�����ƣ���������!!!
    // request ApplyTokenByMail
    ////////////////////////////////////////////////////////////////////////////////
    var ApplyTokenByMailReqBody = (function () {
        function ApplyTokenByMailReqBody() {
            this.action = ""; // ����(bind:��, unbind:���,resetpwd:��������)
            this.mail = ""; // ����
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        ApplyTokenByMailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ApplyTokenByMailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // action
            encoder.write_string(this.action);
            // mail
            encoder.write_string(this.mail);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ApplyTokenByMailReqBody;
    }());
    message.ApplyTokenByMailReqBody = ApplyTokenByMailReqBody;
    __reflect(ApplyTokenByMailReqBody.prototype, "message.ApplyTokenByMailReqBody", ["aone.AoneBody"]);
    var ApplyTokenByMailRequest = (function () {
        function ApplyTokenByMailRequest() {
            this.header = new aone.AoneReqHeader(ApplyTokenByMailRequest.ID);
            this.body = new ApplyTokenByMailReqBody();
        }
        ApplyTokenByMailRequest.prototype.parse_bytes = function (decoder) { return false; };
        ApplyTokenByMailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ApplyTokenByMailRequest.ID = 1724;
        return ApplyTokenByMailRequest;
    }());
    message.ApplyTokenByMailRequest = ApplyTokenByMailRequest;
    __reflect(ApplyTokenByMailRequest.prototype, "message.ApplyTokenByMailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // (ͨ���ʼ�)������֤��ظ�
    // response ApplyTokenByMail
    ////////////////////////////////////////////////////////////////////////////////
    var ApplyTokenByMailRespBody = (function () {
        function ApplyTokenByMailRespBody() {
        }
        ApplyTokenByMailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        ApplyTokenByMailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ApplyTokenByMailRespBody;
    }());
    message.ApplyTokenByMailRespBody = ApplyTokenByMailRespBody;
    __reflect(ApplyTokenByMailRespBody.prototype, "message.ApplyTokenByMailRespBody", ["aone.AoneBody"]);
    var ApplyTokenByMailResponse = (function () {
        function ApplyTokenByMailResponse() {
            this.header = new aone.AoneRespHeader(ApplyTokenByMailResponse.ID);
            this.body = new ApplyTokenByMailRespBody();
        }
        ApplyTokenByMailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ApplyTokenByMailResponse.prototype.to_bytes = function (encoder) { return false; };
        ApplyTokenByMailResponse.ID = 1725;
        return ApplyTokenByMailResponse;
    }());
    message.ApplyTokenByMailResponse = ApplyTokenByMailResponse;
    __reflect(ApplyTokenByMailResponse.prototype, "message.ApplyTokenByMailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺Ű���������
    // �ӿ�1: http post + json��url·����/api/aone_bind_mail.do?appid=xxx&sign=xxxx
    // �ӿ�2: aone2��Э���1726
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request AoneBindMail
    ////////////////////////////////////////////////////////////////////////////////
    var AoneBindMailReqBody = (function () {
        function AoneBindMailReqBody() {
            this.user_id = 0; // �û�ID
            this.mail = ""; // ����
            this.mail_token = ""; // (ͨ�������ȡ��)��֤��
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneBindMailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneBindMailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // mail
            encoder.write_string(this.mail);
            // mail_token
            encoder.write_string(this.mail_token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneBindMailReqBody;
    }());
    message.AoneBindMailReqBody = AoneBindMailReqBody;
    __reflect(AoneBindMailReqBody.prototype, "message.AoneBindMailReqBody", ["aone.AoneBody"]);
    var AoneBindMailRequest = (function () {
        function AoneBindMailRequest() {
            this.header = new aone.AoneReqHeader(AoneBindMailRequest.ID);
            this.body = new AoneBindMailReqBody();
        }
        AoneBindMailRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneBindMailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneBindMailRequest.ID = 1726;
        return AoneBindMailRequest;
    }());
    message.AoneBindMailRequest = AoneBindMailRequest;
    __reflect(AoneBindMailRequest.prototype, "message.AoneBindMailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺Ű�����ظ�
    // response AoneBindMail
    ////////////////////////////////////////////////////////////////////////////////
    var AoneBindMailRespBody = (function () {
        function AoneBindMailRespBody() {
        }
        AoneBindMailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        AoneBindMailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneBindMailRespBody;
    }());
    message.AoneBindMailRespBody = AoneBindMailRespBody;
    __reflect(AoneBindMailRespBody.prototype, "message.AoneBindMailRespBody", ["aone.AoneBody"]);
    var AoneBindMailResponse = (function () {
        function AoneBindMailResponse() {
            this.header = new aone.AoneRespHeader(AoneBindMailResponse.ID);
            this.body = new AoneBindMailRespBody();
        }
        AoneBindMailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneBindMailResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneBindMailResponse.ID = 1727;
        return AoneBindMailResponse;
    }());
    message.AoneBindMailResponse = AoneBindMailResponse;
    __reflect(AoneBindMailResponse.prototype, "message.AoneBindMailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺Ž�����������
    // �ӿ�1: http post + json��url·����/api/aone_unbind_mail.do?appid=xxx&sign=xxxx
    // �ӿ�2: aone2��Э���1732
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request AoneUnBindMail
    ////////////////////////////////////////////////////////////////////////////////
    var AoneUnBindMailReqBody = (function () {
        function AoneUnBindMailReqBody() {
            this.user_id = 0; // �û�ID
            this.mail = ""; // ����
            this.mail_token = ""; // (ͨ�������ȡ��)��֤��
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneUnBindMailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneUnBindMailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // mail
            encoder.write_string(this.mail);
            // mail_token
            encoder.write_string(this.mail_token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneUnBindMailReqBody;
    }());
    message.AoneUnBindMailReqBody = AoneUnBindMailReqBody;
    __reflect(AoneUnBindMailReqBody.prototype, "message.AoneUnBindMailReqBody", ["aone.AoneBody"]);
    var AoneUnBindMailRequest = (function () {
        function AoneUnBindMailRequest() {
            this.header = new aone.AoneReqHeader(AoneUnBindMailRequest.ID);
            this.body = new AoneUnBindMailReqBody();
        }
        AoneUnBindMailRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneUnBindMailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneUnBindMailRequest.ID = 1728;
        return AoneUnBindMailRequest;
    }());
    message.AoneUnBindMailRequest = AoneUnBindMailRequest;
    __reflect(AoneUnBindMailRequest.prototype, "message.AoneUnBindMailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺Ž������󶨻ظ�
    // response AoneUnBindMail
    ////////////////////////////////////////////////////////////////////////////////
    var AoneUnBindMailRespBody = (function () {
        function AoneUnBindMailRespBody() {
        }
        AoneUnBindMailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        AoneUnBindMailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneUnBindMailRespBody;
    }());
    message.AoneUnBindMailRespBody = AoneUnBindMailRespBody;
    __reflect(AoneUnBindMailRespBody.prototype, "message.AoneUnBindMailRespBody", ["aone.AoneBody"]);
    var AoneUnBindMailResponse = (function () {
        function AoneUnBindMailResponse() {
            this.header = new aone.AoneRespHeader(AoneUnBindMailResponse.ID);
            this.body = new AoneUnBindMailRespBody();
        }
        AoneUnBindMailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneUnBindMailResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneUnBindMailResponse.ID = 1729;
        return AoneUnBindMailResponse;
    }());
    message.AoneUnBindMailResponse = AoneUnBindMailResponse;
    __reflect(AoneUnBindMailResponse.prototype, "message.AoneUnBindMailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺������һ���������
    // �ӿ�1: http post + json��url·����/api/aone_reset_password_by_mail.do?appid=xxx&sign=xxxx
    // �ӿ�2: aone2��Э���1730
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request AoneResetPasswordByMail
    ////////////////////////////////////////////////////////////////////////////////
    var AoneResetPasswordByMailReqBody = (function () {
        function AoneResetPasswordByMailReqBody() {
            this.mail = ""; // ����
            this.mail_token = ""; // (ͨ�������ȡ��)��֤��
            this.password = ""; // ������
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneResetPasswordByMailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneResetPasswordByMailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // mail
            encoder.write_string(this.mail);
            // mail_token
            encoder.write_string(this.mail_token);
            // password
            encoder.write_string(this.password);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneResetPasswordByMailReqBody;
    }());
    message.AoneResetPasswordByMailReqBody = AoneResetPasswordByMailReqBody;
    __reflect(AoneResetPasswordByMailReqBody.prototype, "message.AoneResetPasswordByMailReqBody", ["aone.AoneBody"]);
    var AoneResetPasswordByMailRequest = (function () {
        function AoneResetPasswordByMailRequest() {
            this.header = new aone.AoneReqHeader(AoneResetPasswordByMailRequest.ID);
            this.body = new AoneResetPasswordByMailReqBody();
        }
        AoneResetPasswordByMailRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneResetPasswordByMailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneResetPasswordByMailRequest.ID = 1730;
        return AoneResetPasswordByMailRequest;
    }());
    message.AoneResetPasswordByMailRequest = AoneResetPasswordByMailRequest;
    __reflect(AoneResetPasswordByMailRequest.prototype, "message.AoneResetPasswordByMailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Aone�˺������һ�����ظ�
    // response AoneResetPasswordByMail
    ////////////////////////////////////////////////////////////////////////////////
    var AoneResetPasswordByMailRespBody = (function () {
        function AoneResetPasswordByMailRespBody() {
        }
        AoneResetPasswordByMailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        AoneResetPasswordByMailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneResetPasswordByMailRespBody;
    }());
    message.AoneResetPasswordByMailRespBody = AoneResetPasswordByMailRespBody;
    __reflect(AoneResetPasswordByMailRespBody.prototype, "message.AoneResetPasswordByMailRespBody", ["aone.AoneBody"]);
    var AoneResetPasswordByMailResponse = (function () {
        function AoneResetPasswordByMailResponse() {
            this.header = new aone.AoneRespHeader(AoneResetPasswordByMailResponse.ID);
            this.body = new AoneResetPasswordByMailRespBody();
        }
        AoneResetPasswordByMailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneResetPasswordByMailResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneResetPasswordByMailResponse.ID = 1731;
        return AoneResetPasswordByMailResponse;
    }());
    message.AoneResetPasswordByMailResponse = AoneResetPasswordByMailResponse;
    __reflect(AoneResetPasswordByMailResponse.prototype, "message.AoneResetPasswordByMailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���û�ID��ѯAone�˺���Ϣ
    // �ӿ�1: http post + json��url·����/api/aone_account_info.do?appid=xxx&sign=xxxx
    // ��ʱֻ֧��һ�ֽӿ�
    // request AoneAccountInfo
    ////////////////////////////////////////////////////////////////////////////////
    var AoneAccountInfoReqBody = (function () {
        function AoneAccountInfoReqBody() {
            this.user_id = 0; // �û�ID
        }
        AoneAccountInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneAccountInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneAccountInfoReqBody;
    }());
    message.AoneAccountInfoReqBody = AoneAccountInfoReqBody;
    __reflect(AoneAccountInfoReqBody.prototype, "message.AoneAccountInfoReqBody", ["aone.AoneBody"]);
    var AoneAccountInfoRequest = (function () {
        function AoneAccountInfoRequest() {
            this.header = new aone.AoneReqHeader(AoneAccountInfoRequest.ID);
            this.body = new AoneAccountInfoReqBody();
        }
        AoneAccountInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneAccountInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneAccountInfoRequest.ID = 1732;
        return AoneAccountInfoRequest;
    }());
    message.AoneAccountInfoRequest = AoneAccountInfoRequest;
    __reflect(AoneAccountInfoRequest.prototype, "message.AoneAccountInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���û�ID��ѯAone�˺���Ϣ
    // response AoneAccountInfo
    ////////////////////////////////////////////////////////////////////////////////
    var AoneAccountInfoRespBody = (function () {
        function AoneAccountInfoRespBody() {
            this.user_id = 0; // �û�ID
            this.account = ""; // Aone�˺�
            this.device_id = ""; // ���豸ID
            this.phone = ""; // �󶨵绰
            this.mail = ""; // ������
            this.weixin = ""; // ��΢��
            this.real_name = ""; // ��ʵ����
            this.identity_number = ""; // ����֤��
            this.flag = 0; // ��ʶ
            this.create_time = ""; // �˺Ŵ���ʱ��(yyyy-mm-dd hh:mm:ss)
        }
        AoneAccountInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // account
            if (decoder_.eof())
                return true;
            this.account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // device_id
            if (decoder_.eof())
                return true;
            this.device_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // phone
            if (decoder_.eof())
                return true;
            this.phone = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // mail
            if (decoder_.eof())
                return true;
            this.mail = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // weixin
            if (decoder_.eof())
                return true;
            this.weixin = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // real_name
            if (decoder_.eof())
                return true;
            this.real_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // identity_number
            if (decoder_.eof())
                return true;
            this.identity_number = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // flag
            if (decoder_.eof())
                return true;
            this.flag = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // create_time
            if (decoder_.eof())
                return true;
            this.create_time = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneAccountInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneAccountInfoRespBody;
    }());
    message.AoneAccountInfoRespBody = AoneAccountInfoRespBody;
    __reflect(AoneAccountInfoRespBody.prototype, "message.AoneAccountInfoRespBody", ["aone.AoneBody"]);
    var AoneAccountInfoResponse = (function () {
        function AoneAccountInfoResponse() {
            this.header = new aone.AoneRespHeader(AoneAccountInfoResponse.ID);
            this.body = new AoneAccountInfoRespBody();
        }
        AoneAccountInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneAccountInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneAccountInfoResponse.ID = 1733;
        return AoneAccountInfoResponse;
    }());
    message.AoneAccountInfoResponse = AoneAccountInfoResponse;
    __reflect(AoneAccountInfoResponse.prototype, "message.AoneAccountInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���࿪��ƽ̨��Ϣ��ѯ����
    // request OAuthInfo
    ////////////////////////////////////////////////////////////////////////////////
    var OAuthInfoReqBody = (function () {
        function OAuthInfoReqBody() {
            this.oauth_type = ""; // ��½����(sina, tencent, facebook, gamecenter, google)
            this.oauth_token = ""; // ����ƽ̨��֤����
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
        }
        OAuthInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        OAuthInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // oauth_type
            encoder.write_string(this.oauth_type);
            // oauth_token
            encoder.write_string(this.oauth_token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return OAuthInfoReqBody;
    }());
    message.OAuthInfoReqBody = OAuthInfoReqBody;
    __reflect(OAuthInfoReqBody.prototype, "message.OAuthInfoReqBody", ["aone.AoneBody"]);
    var OAuthInfoRequest = (function () {
        function OAuthInfoRequest() {
            this.header = new aone.AoneReqHeader(OAuthInfoRequest.ID);
            this.body = new OAuthInfoReqBody();
        }
        OAuthInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        OAuthInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        OAuthInfoRequest.ID = 1734;
        return OAuthInfoRequest;
    }());
    message.OAuthInfoRequest = OAuthInfoRequest;
    __reflect(OAuthInfoRequest.prototype, "message.OAuthInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���࿪��ƽ̨��Ϣ��ѯ�ظ�
    // response OAuthInfo
    ////////////////////////////////////////////////////////////////////////////////
    var OAuthInfoRespBody = (function () {
        function OAuthInfoRespBody() {
            this.is_register_device = false; // �豸ID�Ƿ���ע��
            this.is_register_oauth = false; // �������˺��Ƿ���ע��
        }
        OAuthInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // is_register_device
            if (decoder_.eof())
                return true;
            this.is_register_device = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_register_oauth
            if (decoder_.eof())
                return true;
            this.is_register_oauth = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        OAuthInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return OAuthInfoRespBody;
    }());
    message.OAuthInfoRespBody = OAuthInfoRespBody;
    __reflect(OAuthInfoRespBody.prototype, "message.OAuthInfoRespBody", ["aone.AoneBody"]);
    var OAuthInfoResponse = (function () {
        function OAuthInfoResponse() {
            this.header = new aone.AoneRespHeader(OAuthInfoResponse.ID);
            this.body = new OAuthInfoRespBody();
        }
        OAuthInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        OAuthInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        OAuthInfoResponse.ID = 1735;
        return OAuthInfoResponse;
    }());
    message.OAuthInfoResponse = OAuthInfoResponse;
    __reflect(OAuthInfoResponse.prototype, "message.OAuthInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // (�豸)����ע������
    // ��û�а�Aone�˺ţ���ͬʱ�������һ��Aone�˺ź���������豸��
    // �ӿ�1: http post + json��url·����/api/quick_register.do
    // request QuickRegister
    ////////////////////////////////////////////////////////////////////////////////
    var QuickRegisterReqBody = (function () {
        function QuickRegisterReqBody() {
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.delay_ms = 0; // �ͻ�������Ϸ������ʱ(��¼SDK������ڷ�����CheckVersion�������ѵĺ���ʱ��)
        }
        QuickRegisterReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QuickRegisterReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // delay_ms
            encoder.write_fixuint32(this.delay_ms);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QuickRegisterReqBody;
    }());
    message.QuickRegisterReqBody = QuickRegisterReqBody;
    __reflect(QuickRegisterReqBody.prototype, "message.QuickRegisterReqBody", ["aone.AoneBody"]);
    var QuickRegisterRequest = (function () {
        function QuickRegisterRequest() {
            this.header = new aone.AoneReqHeader(QuickRegisterRequest.ID);
            this.body = new QuickRegisterReqBody();
        }
        QuickRegisterRequest.prototype.parse_bytes = function (decoder) { return false; };
        QuickRegisterRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QuickRegisterRequest.ID = 1736;
        return QuickRegisterRequest;
    }());
    message.QuickRegisterRequest = QuickRegisterRequest;
    __reflect(QuickRegisterRequest.prototype, "message.QuickRegisterRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // (�豸)����ע��ظ�
    // response QuickRegister
    ////////////////////////////////////////////////////////////////////////////////
    var QuickRegisterRespBody = (function () {
        function QuickRegisterRespBody() {
            this.user_id = 0; // �û�ID
            this.user_account = ""; // �û��豸�˺�: ******@device
            this.aone_account = ""; // �󶨵�Aone�˺�
            this.aone_password = ""; // Aone����,�����Ϊ�գ���ʾ���豸�ǵ�һ�ο���ע��
            this.token = ""; // (��ƽ̨)�û�������֤��
        }
        QuickRegisterRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // aone_account
            if (decoder_.eof())
                return true;
            this.aone_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // aone_password
            if (decoder_.eof())
                return true;
            this.aone_password = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QuickRegisterRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QuickRegisterRespBody;
    }());
    message.QuickRegisterRespBody = QuickRegisterRespBody;
    __reflect(QuickRegisterRespBody.prototype, "message.QuickRegisterRespBody", ["aone.AoneBody"]);
    var QuickRegisterResponse = (function () {
        function QuickRegisterResponse() {
            this.header = new aone.AoneRespHeader(QuickRegisterResponse.ID);
            this.body = new QuickRegisterRespBody();
        }
        QuickRegisterResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QuickRegisterResponse.prototype.to_bytes = function (encoder) { return false; };
        QuickRegisterResponse.ID = 1737;
        return QuickRegisterResponse;
    }());
    message.QuickRegisterResponse = QuickRegisterResponse;
    __reflect(QuickRegisterResponse.prototype, "message.QuickRegisterResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ʵ�����˺���Ϣ����
    // �ӿ�1: http post + json��url·����/api/aone_account_certificate.do?appid=xxx&sign=xxxx
    // request AoneAccountCertificate
    ////////////////////////////////////////////////////////////////////////////////
    var AoneAccountCertificateReqBody = (function () {
        function AoneAccountCertificateReqBody() {
            this.user_id = 0; // �û�id
            this.real_name = ""; // ��ʵ����
            this.identity_number = ""; // ����֤��
        }
        AoneAccountCertificateReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneAccountCertificateReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // real_name
            encoder.write_string(this.real_name);
            // identity_number
            encoder.write_string(this.identity_number);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneAccountCertificateReqBody;
    }());
    message.AoneAccountCertificateReqBody = AoneAccountCertificateReqBody;
    __reflect(AoneAccountCertificateReqBody.prototype, "message.AoneAccountCertificateReqBody", ["aone.AoneBody"]);
    var AoneAccountCertificateRequest = (function () {
        function AoneAccountCertificateRequest() {
            this.header = new aone.AoneReqHeader(AoneAccountCertificateRequest.ID);
            this.body = new AoneAccountCertificateReqBody();
        }
        AoneAccountCertificateRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneAccountCertificateRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneAccountCertificateRequest.ID = 1738;
        return AoneAccountCertificateRequest;
    }());
    message.AoneAccountCertificateRequest = AoneAccountCertificateRequest;
    __reflect(AoneAccountCertificateRequest.prototype, "message.AoneAccountCertificateRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ʵ�����˺���Ϣ�ظ�
    // response AoneAccountCertificate
    ////////////////////////////////////////////////////////////////////////////////
    var AoneAccountCertificateRespBody = (function () {
        function AoneAccountCertificateRespBody() {
            this.flag = 0; // ��ʶ
        }
        AoneAccountCertificateRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // flag
            if (decoder_.eof())
                return true;
            this.flag = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneAccountCertificateRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneAccountCertificateRespBody;
    }());
    message.AoneAccountCertificateRespBody = AoneAccountCertificateRespBody;
    __reflect(AoneAccountCertificateRespBody.prototype, "message.AoneAccountCertificateRespBody", ["aone.AoneBody"]);
    var AoneAccountCertificateResponse = (function () {
        function AoneAccountCertificateResponse() {
            this.header = new aone.AoneRespHeader(AoneAccountCertificateResponse.ID);
            this.body = new AoneAccountCertificateRespBody();
        }
        AoneAccountCertificateResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneAccountCertificateResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneAccountCertificateResponse.ID = 1739;
        return AoneAccountCertificateResponse;
    }());
    message.AoneAccountCertificateResponse = AoneAccountCertificateResponse;
    __reflect(AoneAccountCertificateResponse.prototype, "message.AoneAccountCertificateResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // AoneSdk�汾���
    // request AoneSdkCheckVersion
    ////////////////////////////////////////////////////////////////////////////////
    var AoneSdkCheckVersionReqBody = (function () {
        function AoneSdkCheckVersionReqBody() {
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AoneSdkCheckVersionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneSdkCheckVersionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneSdkCheckVersionReqBody;
    }());
    message.AoneSdkCheckVersionReqBody = AoneSdkCheckVersionReqBody;
    __reflect(AoneSdkCheckVersionReqBody.prototype, "message.AoneSdkCheckVersionReqBody", ["aone.AoneBody"]);
    var AoneSdkCheckVersionRequest = (function () {
        function AoneSdkCheckVersionRequest() {
            this.header = new aone.AoneReqHeader(AoneSdkCheckVersionRequest.ID);
            this.body = new AoneSdkCheckVersionReqBody();
        }
        AoneSdkCheckVersionRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneSdkCheckVersionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneSdkCheckVersionRequest.ID = 1740;
        return AoneSdkCheckVersionRequest;
    }());
    message.AoneSdkCheckVersionRequest = AoneSdkCheckVersionRequest;
    __reflect(AoneSdkCheckVersionRequest.prototype, "message.AoneSdkCheckVersionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // response AoneSdkCheckVersion
    ////////////////////////////////////////////////////////////////////////////////
    var AoneSdkCheckVersionRespBody = (function () {
        function AoneSdkCheckVersionRespBody() {
            this.new_version_info = []; // ���°汾��Ϣ
            this.cur_version_info = []; // ��ǰ�汾��Ϣ
            this.server_time = ""; // ��������ǰʱ��
        }
        AoneSdkCheckVersionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // new_version_info
            if (decoder_.eof())
                return true;
            var new_version_info_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < new_version_info_count; i++) {
                this.new_version_info.push(new message.ChannelVersionInfo());
                if (!this.new_version_info[i].parse_bytes(decoder_))
                    return false;
            }
            // cur_version_info
            if (decoder_.eof())
                return true;
            var cur_version_info_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < cur_version_info_count; i++) {
                this.cur_version_info.push(new message.ChannelVersionInfo());
                if (!this.cur_version_info[i].parse_bytes(decoder_))
                    return false;
            }
            // server_time
            if (decoder_.eof())
                return true;
            this.server_time = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneSdkCheckVersionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneSdkCheckVersionRespBody;
    }());
    message.AoneSdkCheckVersionRespBody = AoneSdkCheckVersionRespBody;
    __reflect(AoneSdkCheckVersionRespBody.prototype, "message.AoneSdkCheckVersionRespBody", ["aone.AoneBody"]);
    var AoneSdkCheckVersionResponse = (function () {
        function AoneSdkCheckVersionResponse() {
            this.header = new aone.AoneRespHeader(AoneSdkCheckVersionResponse.ID);
            this.body = new AoneSdkCheckVersionRespBody();
        }
        AoneSdkCheckVersionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneSdkCheckVersionResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneSdkCheckVersionResponse.ID = 1741;
        return AoneSdkCheckVersionResponse;
    }());
    message.AoneSdkCheckVersionResponse = AoneSdkCheckVersionResponse;
    __reflect(AoneSdkCheckVersionResponse.prototype, "message.AoneSdkCheckVersionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �˺�ʵ����֤��Ϣ��ѯ����
    // �ӿ�1: http post + json��url·����/api/account_identify_info.do?appid=xxx&sign=xxxx
    // request AccountIdentityInfo
    ////////////////////////////////////////////////////////////////////////////////
    var AccountIdentityInfoReqBody = (function () {
        function AccountIdentityInfoReqBody() {
            this.user_id = 0; // �û�ID
        }
        AccountIdentityInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AccountIdentityInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AccountIdentityInfoReqBody;
    }());
    message.AccountIdentityInfoReqBody = AccountIdentityInfoReqBody;
    __reflect(AccountIdentityInfoReqBody.prototype, "message.AccountIdentityInfoReqBody", ["aone.AoneBody"]);
    var AccountIdentityInfoRequest = (function () {
        function AccountIdentityInfoRequest() {
            this.header = new aone.AoneReqHeader(AccountIdentityInfoRequest.ID);
            this.body = new AccountIdentityInfoReqBody();
        }
        AccountIdentityInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        AccountIdentityInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AccountIdentityInfoRequest.ID = 1742;
        return AccountIdentityInfoRequest;
    }());
    message.AccountIdentityInfoRequest = AccountIdentityInfoRequest;
    __reflect(AccountIdentityInfoRequest.prototype, "message.AccountIdentityInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �˺�ʵ����֤��Ϣ��ѯ�ظ�
    // response AccountIdentityInfo
    ////////////////////////////////////////////////////////////////////////////////
    var AccountIdentityInfoRespBody = (function () {
        function AccountIdentityInfoRespBody() {
            this.flag = 0; // ��ʶ
        }
        AccountIdentityInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // flag
            if (decoder_.eof())
                return true;
            this.flag = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AccountIdentityInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AccountIdentityInfoRespBody;
    }());
    message.AccountIdentityInfoRespBody = AccountIdentityInfoRespBody;
    __reflect(AccountIdentityInfoRespBody.prototype, "message.AccountIdentityInfoRespBody", ["aone.AoneBody"]);
    var AccountIdentityInfoResponse = (function () {
        function AccountIdentityInfoResponse() {
            this.header = new aone.AoneRespHeader(AccountIdentityInfoResponse.ID);
            this.body = new AccountIdentityInfoRespBody();
        }
        AccountIdentityInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AccountIdentityInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        AccountIdentityInfoResponse.ID = 1743;
        return AccountIdentityInfoResponse;
    }());
    message.AccountIdentityInfoResponse = AccountIdentityInfoResponse;
    __reflect(AccountIdentityInfoResponse.prototype, "message.AccountIdentityInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �˺�ʵ����֤����
    // �ӿ�1: http post + json��url·����/api/account_certificate.do?appid=xxx&sign=xxxx
    // request AccountCertificate
    ////////////////////////////////////////////////////////////////////////////////
    var AccountCertificateReqBody = (function () {
        function AccountCertificateReqBody() {
            this.user_id = 0; // �û�id
            this.real_name = ""; // ��ʵ����
            this.identity_number = ""; // ����֤��
        }
        AccountCertificateReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AccountCertificateReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // real_name
            encoder.write_string(this.real_name);
            // identity_number
            encoder.write_string(this.identity_number);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AccountCertificateReqBody;
    }());
    message.AccountCertificateReqBody = AccountCertificateReqBody;
    __reflect(AccountCertificateReqBody.prototype, "message.AccountCertificateReqBody", ["aone.AoneBody"]);
    var AccountCertificateRequest = (function () {
        function AccountCertificateRequest() {
            this.header = new aone.AoneReqHeader(AccountCertificateRequest.ID);
            this.body = new AccountCertificateReqBody();
        }
        AccountCertificateRequest.prototype.parse_bytes = function (decoder) { return false; };
        AccountCertificateRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AccountCertificateRequest.ID = 1744;
        return AccountCertificateRequest;
    }());
    message.AccountCertificateRequest = AccountCertificateRequest;
    __reflect(AccountCertificateRequest.prototype, "message.AccountCertificateRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �˺�ʵ����֤�ظ�
    // response AccountCertificate
    ////////////////////////////////////////////////////////////////////////////////
    var AccountCertificateRespBody = (function () {
        function AccountCertificateRespBody() {
            this.flag = 0; // ��ʶ
            this.real_name = ""; // �����ص���ʵ����
            this.identity_number = ""; // �����ص�����֤��
        }
        AccountCertificateRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // flag
            if (decoder_.eof())
                return true;
            this.flag = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // real_name
            if (decoder_.eof())
                return true;
            this.real_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // identity_number
            if (decoder_.eof())
                return true;
            this.identity_number = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AccountCertificateRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AccountCertificateRespBody;
    }());
    message.AccountCertificateRespBody = AccountCertificateRespBody;
    __reflect(AccountCertificateRespBody.prototype, "message.AccountCertificateRespBody", ["aone.AoneBody"]);
    var AccountCertificateResponse = (function () {
        function AccountCertificateResponse() {
            this.header = new aone.AoneRespHeader(AccountCertificateResponse.ID);
            this.body = new AccountCertificateRespBody();
        }
        AccountCertificateResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AccountCertificateResponse.prototype.to_bytes = function (encoder) { return false; };
        AccountCertificateResponse.ID = 1745;
        return AccountCertificateResponse;
    }());
    message.AccountCertificateResponse = AccountCertificateResponse;
    __reflect(AccountCertificateResponse.prototype, "message.AccountCertificateResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////
    // ����С��Ϸƽ̨�ӿ�
    // ΢��С��Ϸ������С����ƽ̨��½����
    // ��һ�ε�½�Զ�����ע��
    // �ӿ�: http post + json��url·����/api/wxapp_login.do
    // request WxAppLogin
    ////////////////////////////////////////////////////////////////////////////////
    var WxAppLoginReqBody = (function () {
        function WxAppLoginReqBody() {
            this.code = ""; // С�����¼ʱ��õ�code
            this.raw_data = ""; // ԭʼ��Ϣ�ַ���
            this.signature = ""; // ��Ϣǩ��,ʹ��sha1(rawData+sessionkey)�õ��ַ���,����У���û���Ϣ
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
        }
        WxAppLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WxAppLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // code
            encoder.write_string(this.code);
            // raw_data
            encoder.write_string(this.raw_data);
            // signature
            encoder.write_string(this.signature);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WxAppLoginReqBody;
    }());
    message.WxAppLoginReqBody = WxAppLoginReqBody;
    __reflect(WxAppLoginReqBody.prototype, "message.WxAppLoginReqBody", ["aone.AoneBody"]);
    var WxAppLoginRequest = (function () {
        function WxAppLoginRequest() {
            this.header = new aone.AoneReqHeader(WxAppLoginRequest.ID);
            this.body = new WxAppLoginReqBody();
        }
        WxAppLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        WxAppLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WxAppLoginRequest.ID = 1760;
        return WxAppLoginRequest;
    }());
    message.WxAppLoginRequest = WxAppLoginRequest;
    __reflect(WxAppLoginRequest.prototype, "message.WxAppLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ΢��С��Ϸ������С����ƽ̨��½�ظ�
    // response WxAppLogin
    ////////////////////////////////////////////////////////////////////////////////
    var WxAppLoginRespBody = (function () {
        function WxAppLoginRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
            this.token = ""; // (��ƽ̨)�û�������֤��
            this.openid = ""; // ΢��openid
            this.session_key = ""; // ΢��session_key
        }
        WxAppLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // openid
            if (decoder_.eof())
                return true;
            this.openid = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // session_key
            if (decoder_.eof())
                return true;
            this.session_key = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        WxAppLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WxAppLoginRespBody;
    }());
    message.WxAppLoginRespBody = WxAppLoginRespBody;
    __reflect(WxAppLoginRespBody.prototype, "message.WxAppLoginRespBody", ["aone.AoneBody"]);
    var WxAppLoginResponse = (function () {
        function WxAppLoginResponse() {
            this.header = new aone.AoneRespHeader(WxAppLoginResponse.ID);
            this.body = new WxAppLoginRespBody();
        }
        WxAppLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WxAppLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        WxAppLoginResponse.ID = 1761;
        return WxAppLoginResponse;
    }());
    message.WxAppLoginResponse = WxAppLoginResponse;
    __reflect(WxAppLoginResponse.prototype, "message.WxAppLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ٶ�С��Ϸ������С����ƽ̨��½����
    // ��һ�ε�½�Զ�����ע��
    // �ӿ�: http post + json��url·����/api/baiduapp_login.do
    // request BaiduAppLogin
    ////////////////////////////////////////////////////////////////////////////////
    var BaiduAppLoginReqBody = (function () {
        function BaiduAppLoginReqBody() {
            this.code = ""; // С�����¼ʱ��õ�code
            this.nickname = ""; // �û��ǳ�
            this.headimgurl = ""; // �û�ͷ��
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
        }
        BaiduAppLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BaiduAppLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // code
            encoder.write_string(this.code);
            // nickname
            encoder.write_string(this.nickname);
            // headimgurl
            encoder.write_string(this.headimgurl);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BaiduAppLoginReqBody;
    }());
    message.BaiduAppLoginReqBody = BaiduAppLoginReqBody;
    __reflect(BaiduAppLoginReqBody.prototype, "message.BaiduAppLoginReqBody", ["aone.AoneBody"]);
    var BaiduAppLoginRequest = (function () {
        function BaiduAppLoginRequest() {
            this.header = new aone.AoneReqHeader(BaiduAppLoginRequest.ID);
            this.body = new BaiduAppLoginReqBody();
        }
        BaiduAppLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        BaiduAppLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BaiduAppLoginRequest.ID = 1762;
        return BaiduAppLoginRequest;
    }());
    message.BaiduAppLoginRequest = BaiduAppLoginRequest;
    __reflect(BaiduAppLoginRequest.prototype, "message.BaiduAppLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ٶ�С��Ϸ������С����ƽ̨��½�ظ�
    // response BaiduAppLogin
    ////////////////////////////////////////////////////////////////////////////////
    var BaiduAppLoginRespBody = (function () {
        function BaiduAppLoginRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
            this.token = ""; // (��ƽ̨)�û�������֤��
            this.openid = ""; // �ٶ�openid
        }
        BaiduAppLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // openid
            if (decoder_.eof())
                return true;
            this.openid = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BaiduAppLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BaiduAppLoginRespBody;
    }());
    message.BaiduAppLoginRespBody = BaiduAppLoginRespBody;
    __reflect(BaiduAppLoginRespBody.prototype, "message.BaiduAppLoginRespBody", ["aone.AoneBody"]);
    var BaiduAppLoginResponse = (function () {
        function BaiduAppLoginResponse() {
            this.header = new aone.AoneRespHeader(BaiduAppLoginResponse.ID);
            this.body = new BaiduAppLoginRespBody();
        }
        BaiduAppLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BaiduAppLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        BaiduAppLoginResponse.ID = 1763;
        return BaiduAppLoginResponse;
    }());
    message.BaiduAppLoginResponse = BaiduAppLoginResponse;
    __reflect(BaiduAppLoginResponse.prototype, "message.BaiduAppLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Facebook Game Instant��¼����
    // ��һ�ε�½�Զ�����ע��
    // �ӿ�: http post + json��url·����/api/fbinstant_login.do
    // request FBInstantLogin
    ////////////////////////////////////////////////////////////////////////////////
    var FBInstantLoginReqBody = (function () {
        function FBInstantLoginReqBody() {
            this.id = ""; // FB�û�ID
            this.name = ""; // FB�û�����
            this.photo = ""; // FB�û�ͷ��
            this.signature = ""; // ��id��ǩ�������ַ�����base64url����ģ�ʹ�� HMAC ����Ӧ�õ� Secret ����ǩ��
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
        }
        FBInstantLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        FBInstantLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_string(this.id);
            // name
            encoder.write_string(this.name);
            // photo
            encoder.write_string(this.photo);
            // signature
            encoder.write_string(this.signature);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return FBInstantLoginReqBody;
    }());
    message.FBInstantLoginReqBody = FBInstantLoginReqBody;
    __reflect(FBInstantLoginReqBody.prototype, "message.FBInstantLoginReqBody", ["aone.AoneBody"]);
    var FBInstantLoginRequest = (function () {
        function FBInstantLoginRequest() {
            this.header = new aone.AoneReqHeader(FBInstantLoginRequest.ID);
            this.body = new FBInstantLoginReqBody();
        }
        FBInstantLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        FBInstantLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        FBInstantLoginRequest.ID = 1764;
        return FBInstantLoginRequest;
    }());
    message.FBInstantLoginRequest = FBInstantLoginRequest;
    __reflect(FBInstantLoginRequest.prototype, "message.FBInstantLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Facebook Game Instant��¼�ظ�
    // response FBInstantLogin
    ////////////////////////////////////////////////////////////////////////////////
    var FBInstantLoginRespBody = (function () {
        function FBInstantLoginRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
            this.token = ""; // (��ƽ̨)�û�������֤��
        }
        FBInstantLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        FBInstantLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return FBInstantLoginRespBody;
    }());
    message.FBInstantLoginRespBody = FBInstantLoginRespBody;
    __reflect(FBInstantLoginRespBody.prototype, "message.FBInstantLoginRespBody", ["aone.AoneBody"]);
    var FBInstantLoginResponse = (function () {
        function FBInstantLoginResponse() {
            this.header = new aone.AoneRespHeader(FBInstantLoginResponse.ID);
            this.body = new FBInstantLoginRespBody();
        }
        FBInstantLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        FBInstantLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        FBInstantLoginResponse.ID = 1765;
        return FBInstantLoginResponse;
    }());
    message.FBInstantLoginResponse = FBInstantLoginResponse;
    __reflect(FBInstantLoginResponse.prototype, "message.FBInstantLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ΢��С��Ϸ������С���򣩻�ȡopenid����
    // �ӿ�: http post + json��url·����/api/wxapp_query_openid.do
    // request WxAppQueryOpenid
    ////////////////////////////////////////////////////////////////////////////////
    var WxAppQueryOpenidReqBody = (function () {
        function WxAppQueryOpenidReqBody() {
            this.code = ""; // С�����¼ʱ��õ�code
            this.raw_data = ""; // ԭʼ��Ϣ�ַ���
            this.signature = ""; // ��Ϣǩ��,ʹ��sha1(rawData+sessionkey)�õ��ַ���,����У���û���Ϣ
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
        }
        WxAppQueryOpenidReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WxAppQueryOpenidReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // code
            encoder.write_string(this.code);
            // raw_data
            encoder.write_string(this.raw_data);
            // signature
            encoder.write_string(this.signature);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WxAppQueryOpenidReqBody;
    }());
    message.WxAppQueryOpenidReqBody = WxAppQueryOpenidReqBody;
    __reflect(WxAppQueryOpenidReqBody.prototype, "message.WxAppQueryOpenidReqBody", ["aone.AoneBody"]);
    var WxAppQueryOpenidRequest = (function () {
        function WxAppQueryOpenidRequest() {
            this.header = new aone.AoneReqHeader(WxAppQueryOpenidRequest.ID);
            this.body = new WxAppQueryOpenidReqBody();
        }
        WxAppQueryOpenidRequest.prototype.parse_bytes = function (decoder) { return false; };
        WxAppQueryOpenidRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WxAppQueryOpenidRequest.ID = 1768;
        return WxAppQueryOpenidRequest;
    }());
    message.WxAppQueryOpenidRequest = WxAppQueryOpenidRequest;
    __reflect(WxAppQueryOpenidRequest.prototype, "message.WxAppQueryOpenidRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ΢��С��Ϸ������С���򣩻�ȡopenid�ظ�
    // response WxAppQueryOpenid
    ////////////////////////////////////////////////////////////////////////////////
    var WxAppQueryOpenidRespBody = (function () {
        function WxAppQueryOpenidRespBody() {
            this.openid = ""; // ΢��openid
            this.session_key = ""; // ΢��session_key
        }
        WxAppQueryOpenidRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // openid
            if (decoder_.eof())
                return true;
            this.openid = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // session_key
            if (decoder_.eof())
                return true;
            this.session_key = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        WxAppQueryOpenidRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WxAppQueryOpenidRespBody;
    }());
    message.WxAppQueryOpenidRespBody = WxAppQueryOpenidRespBody;
    __reflect(WxAppQueryOpenidRespBody.prototype, "message.WxAppQueryOpenidRespBody", ["aone.AoneBody"]);
    var WxAppQueryOpenidResponse = (function () {
        function WxAppQueryOpenidResponse() {
            this.header = new aone.AoneRespHeader(WxAppQueryOpenidResponse.ID);
            this.body = new WxAppQueryOpenidRespBody();
        }
        WxAppQueryOpenidResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WxAppQueryOpenidResponse.prototype.to_bytes = function (encoder) { return false; };
        WxAppQueryOpenidResponse.ID = 1769;
        return WxAppQueryOpenidResponse;
    }());
    message.WxAppQueryOpenidResponse = WxAppQueryOpenidResponse;
    __reflect(WxAppQueryOpenidResponse.prototype, "message.WxAppQueryOpenidResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ΢�Ź��ںŻ�ȡopenid ����
    // �ӿ�: http post + json��url·����/api/wechatofficalaccount_query_openid.do
    // request WechatOfficalAccountQueryOpenid
    ////////////////////////////////////////////////////////////////////////////////
    var WechatOfficalAccountQueryOpenidReqBody = (function () {
        function WechatOfficalAccountQueryOpenidReqBody() {
            this.code = "";
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
        }
        WechatOfficalAccountQueryOpenidReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WechatOfficalAccountQueryOpenidReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // code
            encoder.write_string(this.code);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WechatOfficalAccountQueryOpenidReqBody;
    }());
    message.WechatOfficalAccountQueryOpenidReqBody = WechatOfficalAccountQueryOpenidReqBody;
    __reflect(WechatOfficalAccountQueryOpenidReqBody.prototype, "message.WechatOfficalAccountQueryOpenidReqBody", ["aone.AoneBody"]);
    var WechatOfficalAccountQueryOpenidRequest = (function () {
        function WechatOfficalAccountQueryOpenidRequest() {
            this.header = new aone.AoneReqHeader(WechatOfficalAccountQueryOpenidRequest.ID);
            this.body = new WechatOfficalAccountQueryOpenidReqBody();
        }
        WechatOfficalAccountQueryOpenidRequest.prototype.parse_bytes = function (decoder) { return false; };
        WechatOfficalAccountQueryOpenidRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WechatOfficalAccountQueryOpenidRequest.ID = 17670;
        return WechatOfficalAccountQueryOpenidRequest;
    }());
    message.WechatOfficalAccountQueryOpenidRequest = WechatOfficalAccountQueryOpenidRequest;
    __reflect(WechatOfficalAccountQueryOpenidRequest.prototype, "message.WechatOfficalAccountQueryOpenidRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //  ΢�Ź��ںŻ�ȡopenid �ظ�
    // response WechatOfficalAccountQueryOpenid
    ////////////////////////////////////////////////////////////////////////////////
    var WechatOfficalAccountQueryOpenidRespBody = (function () {
        function WechatOfficalAccountQueryOpenidRespBody() {
            this.openid = ""; // ΢��openid
        }
        WechatOfficalAccountQueryOpenidRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // openid
            if (decoder_.eof())
                return true;
            this.openid = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        WechatOfficalAccountQueryOpenidRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WechatOfficalAccountQueryOpenidRespBody;
    }());
    message.WechatOfficalAccountQueryOpenidRespBody = WechatOfficalAccountQueryOpenidRespBody;
    __reflect(WechatOfficalAccountQueryOpenidRespBody.prototype, "message.WechatOfficalAccountQueryOpenidRespBody", ["aone.AoneBody"]);
    var WechatOfficalAccountQueryOpenidResponse = (function () {
        function WechatOfficalAccountQueryOpenidResponse() {
            this.header = new aone.AoneRespHeader(WechatOfficalAccountQueryOpenidResponse.ID);
            this.body = new WechatOfficalAccountQueryOpenidRespBody();
        }
        WechatOfficalAccountQueryOpenidResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WechatOfficalAccountQueryOpenidResponse.prototype.to_bytes = function (encoder) { return false; };
        WechatOfficalAccountQueryOpenidResponse.ID = 1771;
        return WechatOfficalAccountQueryOpenidResponse;
    }());
    message.WechatOfficalAccountQueryOpenidResponse = WechatOfficalAccountQueryOpenidResponse;
    __reflect(WechatOfficalAccountQueryOpenidResponse.prototype, "message.WechatOfficalAccountQueryOpenidResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡ��������汾
    // �ӿ�: http post + json��url·����/api/query_channel_review_versions.do
    // request QueryChannelReviewVersions
    ////////////////////////////////////////////////////////////////////////////////
    var QueryChannelReviewVersionsReqBody = (function () {
        function QueryChannelReviewVersionsReqBody() {
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        QueryChannelReviewVersionsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryChannelReviewVersionsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryChannelReviewVersionsReqBody;
    }());
    message.QueryChannelReviewVersionsReqBody = QueryChannelReviewVersionsReqBody;
    __reflect(QueryChannelReviewVersionsReqBody.prototype, "message.QueryChannelReviewVersionsReqBody", ["aone.AoneBody"]);
    var QueryChannelReviewVersionsRequest = (function () {
        function QueryChannelReviewVersionsRequest() {
            this.header = new aone.AoneReqHeader(QueryChannelReviewVersionsRequest.ID);
            this.body = new QueryChannelReviewVersionsReqBody();
        }
        QueryChannelReviewVersionsRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryChannelReviewVersionsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryChannelReviewVersionsRequest.ID = 1772;
        return QueryChannelReviewVersionsRequest;
    }());
    message.QueryChannelReviewVersionsRequest = QueryChannelReviewVersionsRequest;
    __reflect(QueryChannelReviewVersionsRequest.prototype, "message.QueryChannelReviewVersionsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //��ȡ��������汾
    // response QueryChannelReviewVersions
    ////////////////////////////////////////////////////////////////////////////////
    var QueryChannelReviewVersionsRespBody = (function () {
        function QueryChannelReviewVersionsRespBody() {
            this.reviewVersions = "";
        }
        QueryChannelReviewVersionsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // reviewVersions
            if (decoder_.eof())
                return true;
            this.reviewVersions = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryChannelReviewVersionsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryChannelReviewVersionsRespBody;
    }());
    message.QueryChannelReviewVersionsRespBody = QueryChannelReviewVersionsRespBody;
    __reflect(QueryChannelReviewVersionsRespBody.prototype, "message.QueryChannelReviewVersionsRespBody", ["aone.AoneBody"]);
    var QueryChannelReviewVersionsResponse = (function () {
        function QueryChannelReviewVersionsResponse() {
            this.header = new aone.AoneRespHeader(QueryChannelReviewVersionsResponse.ID);
            this.body = new QueryChannelReviewVersionsRespBody();
        }
        QueryChannelReviewVersionsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryChannelReviewVersionsResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryChannelReviewVersionsResponse.ID = 1773;
        return QueryChannelReviewVersionsResponse;
    }());
    message.QueryChannelReviewVersionsResponse = QueryChannelReviewVersionsResponse;
    __reflect(QueryChannelReviewVersionsResponse.prototype, "message.QueryChannelReviewVersionsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // QQС��Ϸ��С���򣩵�½����
    // �ӿ�: http post + json��url·����/api/qqgame_login.do
    // request QQGameLogin
    ////////////////////////////////////////////////////////////////////////////////
    var QQGameLoginReqBody = (function () {
        function QQGameLoginReqBody() {
            this.code = ""; // ��¼ƾ֤ code
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
        }
        QQGameLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QQGameLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // code
            encoder.write_string(this.code);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QQGameLoginReqBody;
    }());
    message.QQGameLoginReqBody = QQGameLoginReqBody;
    __reflect(QQGameLoginReqBody.prototype, "message.QQGameLoginReqBody", ["aone.AoneBody"]);
    var QQGameLoginRequest = (function () {
        function QQGameLoginRequest() {
            this.header = new aone.AoneReqHeader(QQGameLoginRequest.ID);
            this.body = new QQGameLoginReqBody();
        }
        QQGameLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        QQGameLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QQGameLoginRequest.ID = 1774;
        return QQGameLoginRequest;
    }());
    message.QQGameLoginRequest = QQGameLoginRequest;
    __reflect(QQGameLoginRequest.prototype, "message.QQGameLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // QQС��Ϸ��С���򣩵�½�ظ�
    // response QQGameLogin
    ////////////////////////////////////////////////////////////////////////////////
    var QQGameLoginRespBody = (function () {
        function QQGameLoginRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
            this.token = ""; // (��ƽ̨)�û�������֤��
            this.openid = "";
            this.session_key = "";
        }
        QQGameLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // openid
            if (decoder_.eof())
                return true;
            this.openid = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // session_key
            if (decoder_.eof())
                return true;
            this.session_key = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QQGameLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QQGameLoginRespBody;
    }());
    message.QQGameLoginRespBody = QQGameLoginRespBody;
    __reflect(QQGameLoginRespBody.prototype, "message.QQGameLoginRespBody", ["aone.AoneBody"]);
    var QQGameLoginResponse = (function () {
        function QQGameLoginResponse() {
            this.header = new aone.AoneRespHeader(QQGameLoginResponse.ID);
            this.body = new QQGameLoginRespBody();
        }
        QQGameLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QQGameLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        QQGameLoginResponse.ID = 1775;
        return QQGameLoginResponse;
    }());
    message.QQGameLoginResponse = QQGameLoginResponse;
    __reflect(QQGameLoginResponse.prototype, "message.QQGameLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // QQ��ȡopenid ����
    // �ӿ�: http post + json��url·����/api/qq_query_openid.do
    // request QQQueryOpenid
    ////////////////////////////////////////////////////////////////////////////////
    var QQQueryOpenidReqBody = (function () {
        function QQQueryOpenidReqBody() {
            this.code = "";
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
        }
        QQQueryOpenidReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QQQueryOpenidReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // code
            encoder.write_string(this.code);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QQQueryOpenidReqBody;
    }());
    message.QQQueryOpenidReqBody = QQQueryOpenidReqBody;
    __reflect(QQQueryOpenidReqBody.prototype, "message.QQQueryOpenidReqBody", ["aone.AoneBody"]);
    var QQQueryOpenidRequest = (function () {
        function QQQueryOpenidRequest() {
            this.header = new aone.AoneReqHeader(QQQueryOpenidRequest.ID);
            this.body = new QQQueryOpenidReqBody();
        }
        QQQueryOpenidRequest.prototype.parse_bytes = function (decoder) { return false; };
        QQQueryOpenidRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QQQueryOpenidRequest.ID = 1776;
        return QQQueryOpenidRequest;
    }());
    message.QQQueryOpenidRequest = QQQueryOpenidRequest;
    __reflect(QQQueryOpenidRequest.prototype, "message.QQQueryOpenidRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //  QQ���ںŻ�ȡopenid �ظ�
    // response QQQueryOpenid
    ////////////////////////////////////////////////////////////////////////////////
    var QQQueryOpenidRespBody = (function () {
        function QQQueryOpenidRespBody() {
            this.openid = "";
            this.session_key = "";
        }
        QQQueryOpenidRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // openid
            if (decoder_.eof())
                return true;
            this.openid = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // session_key
            if (decoder_.eof())
                return true;
            this.session_key = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QQQueryOpenidRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QQQueryOpenidRespBody;
    }());
    message.QQQueryOpenidRespBody = QQQueryOpenidRespBody;
    __reflect(QQQueryOpenidRespBody.prototype, "message.QQQueryOpenidRespBody", ["aone.AoneBody"]);
    var QQQueryOpenidResponse = (function () {
        function QQQueryOpenidResponse() {
            this.header = new aone.AoneRespHeader(QQQueryOpenidResponse.ID);
            this.body = new QQQueryOpenidRespBody();
        }
        QQQueryOpenidResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QQQueryOpenidResponse.prototype.to_bytes = function (encoder) { return false; };
        QQQueryOpenidResponse.ID = 1777;
        return QQQueryOpenidResponse;
    }());
    message.QQQueryOpenidResponse = QQQueryOpenidResponse;
    __reflect(QQQueryOpenidResponse.prototype, "message.QQQueryOpenidResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����Ϸ��hortor��ƽ̨��½����
    // ��һ�ε�½�Զ�����ע��
    // �ӿ�: http post + json��url·����/api/hortor_login.do
    // request HortorLogin
    ////////////////////////////////////////////////////////////////////////////////
    var HortorLoginReqBody = (function () {
        function HortorLoginReqBody() {
            this.userId = ""; // �����Ϸ��hortor��?��Ψ?id
            this.userName = ""; // �����Ϸ��hortor��?���ǳ�
            this.userSex = 0; // �Ա� 1:�� 2:? 0:δ֪
            this.userImg = ""; // ?��ͷ��
            this.isSubscribe = false; // ?���Ƿ��ע�˹��ں� true: �ѹ�ע false: δ��ע
            this.isShowSubscribe = false; // ��Ϸ���Ƿ���ʾ��ע����
            this.shareCode = ""; // ��?��������(?���ñ�?��??Ϊ���ѣ���?����ϸ����?��)
            this.friendCode = ""; // ĳ?���ķ�����(�������?�����������ӽ�?ʱ��Я����?���ķ�����, ��?����ϸ����?��)
            this.time = 0; // ʱ���
            this.sign = ""; // ǩ��
            this.device_info = new message.DeviceInfo(); // �ͻ����豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // APPӦ����Ϣ
        }
        HortorLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        HortorLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // userId
            encoder.write_string(this.userId);
            // userName
            encoder.write_string(this.userName);
            // userSex
            encoder.write_fixuint32(this.userSex);
            // userImg
            encoder.write_string(this.userImg);
            // isSubscribe
            encoder.write_bool(this.isSubscribe);
            // isShowSubscribe
            encoder.write_bool(this.isShowSubscribe);
            // shareCode
            encoder.write_string(this.shareCode);
            // friendCode
            encoder.write_string(this.friendCode);
            // time
            encoder.write_fixuint32(this.time);
            // sign
            encoder.write_string(this.sign);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return HortorLoginReqBody;
    }());
    message.HortorLoginReqBody = HortorLoginReqBody;
    __reflect(HortorLoginReqBody.prototype, "message.HortorLoginReqBody", ["aone.AoneBody"]);
    var HortorLoginRequest = (function () {
        function HortorLoginRequest() {
            this.header = new aone.AoneReqHeader(HortorLoginRequest.ID);
            this.body = new HortorLoginReqBody();
        }
        HortorLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        HortorLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        HortorLoginRequest.ID = 1778;
        return HortorLoginRequest;
    }());
    message.HortorLoginRequest = HortorLoginRequest;
    __reflect(HortorLoginRequest.prototype, "message.HortorLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����Ϸ��hortor��ƽ̨��½�ظ�
    // response HortorLogin
    ////////////////////////////////////////////////////////////////////////////////
    var HortorLoginRespBody = (function () {
        function HortorLoginRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
            this.token = ""; // (��ƽ̨)�û�������֤��
        }
        HortorLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // token
            if (decoder_.eof())
                return true;
            this.token = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        HortorLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return HortorLoginRespBody;
    }());
    message.HortorLoginRespBody = HortorLoginRespBody;
    __reflect(HortorLoginRespBody.prototype, "message.HortorLoginRespBody", ["aone.AoneBody"]);
    var HortorLoginResponse = (function () {
        function HortorLoginResponse() {
            this.header = new aone.AoneRespHeader(HortorLoginResponse.ID);
            this.body = new HortorLoginRespBody();
        }
        HortorLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        HortorLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        HortorLoginResponse.ID = 1779;
        return HortorLoginResponse;
    }());
    message.HortorLoginResponse = HortorLoginResponse;
    __reflect(HortorLoginResponse.prototype, "message.HortorLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////
    // ��ȡ����������Ϣ����
    // ����������˺�(��sina΢��)����aone����
    // �ӿ�1: http post + json��url·����/api/query_channel_config.do?appid=xxx
    // request QueryChannelConfig
    ////////////////////////////////////////////////////////////////////////////////
    var QueryChannelConfigReqBody = (function () {
        function QueryChannelConfigReqBody() {
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.code = ""; // �ƶ����Һ�������룬����42104
            this.is_wifi = false; // �ͻ����Ƿ�ʹ��wifi
        }
        QueryChannelConfigReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryChannelConfigReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // code
            encoder.write_string(this.code);
            // is_wifi
            encoder.write_bool(this.is_wifi);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryChannelConfigReqBody;
    }());
    message.QueryChannelConfigReqBody = QueryChannelConfigReqBody;
    __reflect(QueryChannelConfigReqBody.prototype, "message.QueryChannelConfigReqBody", ["aone.AoneBody"]);
    var QueryChannelConfigRequest = (function () {
        function QueryChannelConfigRequest() {
            this.header = new aone.AoneReqHeader(QueryChannelConfigRequest.ID);
            this.body = new QueryChannelConfigReqBody();
        }
        QueryChannelConfigRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryChannelConfigRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryChannelConfigRequest.ID = 1790;
        return QueryChannelConfigRequest;
    }());
    message.QueryChannelConfigRequest = QueryChannelConfigRequest;
    __reflect(QueryChannelConfigRequest.prototype, "message.QueryChannelConfigRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡ����������Ϣ�ظ�
    // response QueryChannelConfig
    ////////////////////////////////////////////////////////////////////////////////
    var QueryChannelConfigRespBody = (function () {
        function QueryChannelConfigRespBody() {
            this.channel_params = []; // ����(SDK)���������б�
            this.channel_products = []; // ����֧����Ʒ�б�
            this.entryserver_ip = ""; // ��ڷ�IP
            this.entryserver_port = 0; // ��ڷ��˿�
            this.app_langs = []; // Ӧ��֧�ֵ������б�
            this.bbs_url = ""; // ��Ϸ��̳(�Լ��û�����)URL��ַ
            this.is_enable = false; // �Ƿ���ʾ����֧��
            this.channel_products_ext = []; // ����֧����Ʒ�б���չ
        }
        QueryChannelConfigRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // channel_params
            if (decoder_.eof())
                return true;
            var channel_params_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channel_params_count; i++) {
                this.channel_params.push(new message.KVPair());
                if (!this.channel_params[i].parse_bytes(decoder_))
                    return false;
            }
            // channel_products
            if (decoder_.eof())
                return true;
            var channel_products_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channel_products_count; i++) {
                this.channel_products.push(new message.PayProductInfo());
                if (!this.channel_products[i].parse_bytes(decoder_))
                    return false;
            }
            // entryserver_ip
            if (decoder_.eof())
                return true;
            this.entryserver_ip = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // entryserver_port
            if (decoder_.eof())
                return true;
            this.entryserver_port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // app_langs
            if (decoder_.eof())
                return true;
            var app_langs_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < app_langs_count; i++) {
                this.app_langs.push(new message.KVPair());
                if (!this.app_langs[i].parse_bytes(decoder_))
                    return false;
            }
            // bbs_url
            if (decoder_.eof())
                return true;
            this.bbs_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // is_enable
            if (decoder_.eof())
                return true;
            this.is_enable = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // channel_products_ext
            if (decoder_.eof())
                return true;
            var channel_products_ext_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channel_products_ext_count; i++) {
                this.channel_products_ext.push(new message.PayProductExtInfo());
                if (!this.channel_products_ext[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryChannelConfigRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryChannelConfigRespBody;
    }());
    message.QueryChannelConfigRespBody = QueryChannelConfigRespBody;
    __reflect(QueryChannelConfigRespBody.prototype, "message.QueryChannelConfigRespBody", ["aone.AoneBody"]);
    var QueryChannelConfigResponse = (function () {
        function QueryChannelConfigResponse() {
            this.header = new aone.AoneRespHeader(QueryChannelConfigResponse.ID);
            this.body = new QueryChannelConfigRespBody();
        }
        QueryChannelConfigResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryChannelConfigResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryChannelConfigResponse.ID = 1791;
        return QueryChannelConfigResponse;
    }());
    message.QueryChannelConfigResponse = QueryChannelConfigResponse;
    __reflect(QueryChannelConfigResponse.prototype, "message.QueryChannelConfigResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // SDK�ڲ������Դ�����쳣��־����
    // request RecordSDKDownloadException
    ////////////////////////////////////////////////////////////////////////////////
    var RecordSDKDownloadExceptionReqBody = (function () {
        function RecordSDKDownloadExceptionReqBody() {
            this.dns = ""; // ��������ʹ�õ�DNS��������ַ
            this.ip = ""; // url����������������IP��ַ
            this.url = ""; // ��Դ����url��ַ
            this.code = ""; // ������
            this.detail = ""; // ��Դ��������(http�ظ���)
            this.use_ms = 0; // ��������Դ���õ��ظ�ʹ�õ�ʱ��(����)
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        RecordSDKDownloadExceptionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RecordSDKDownloadExceptionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // dns
            encoder.write_string(this.dns);
            // ip
            encoder.write_string(this.ip);
            // url
            encoder.write_string(this.url);
            // code
            encoder.write_string(this.code);
            // detail
            encoder.write_string(this.detail);
            // use_ms
            encoder.write_fixuint32(this.use_ms);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RecordSDKDownloadExceptionReqBody;
    }());
    message.RecordSDKDownloadExceptionReqBody = RecordSDKDownloadExceptionReqBody;
    __reflect(RecordSDKDownloadExceptionReqBody.prototype, "message.RecordSDKDownloadExceptionReqBody", ["aone.AoneBody"]);
    var RecordSDKDownloadExceptionRequest = (function () {
        function RecordSDKDownloadExceptionRequest() {
            this.header = new aone.AoneReqHeader(RecordSDKDownloadExceptionRequest.ID);
            this.body = new RecordSDKDownloadExceptionReqBody();
        }
        RecordSDKDownloadExceptionRequest.prototype.parse_bytes = function (decoder) { return false; };
        RecordSDKDownloadExceptionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RecordSDKDownloadExceptionRequest.ID = 1792;
        return RecordSDKDownloadExceptionRequest;
    }());
    message.RecordSDKDownloadExceptionRequest = RecordSDKDownloadExceptionRequest;
    __reflect(RecordSDKDownloadExceptionRequest.prototype, "message.RecordSDKDownloadExceptionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // SDK�ڲ������Դ�����쳣��־�ظ�
    // response RecordSDKDownloadException
    ////////////////////////////////////////////////////////////////////////////////
    var RecordSDKDownloadExceptionRespBody = (function () {
        function RecordSDKDownloadExceptionRespBody() {
        }
        RecordSDKDownloadExceptionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        RecordSDKDownloadExceptionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RecordSDKDownloadExceptionRespBody;
    }());
    message.RecordSDKDownloadExceptionRespBody = RecordSDKDownloadExceptionRespBody;
    __reflect(RecordSDKDownloadExceptionRespBody.prototype, "message.RecordSDKDownloadExceptionRespBody", ["aone.AoneBody"]);
    var RecordSDKDownloadExceptionResponse = (function () {
        function RecordSDKDownloadExceptionResponse() {
            this.header = new aone.AoneRespHeader(RecordSDKDownloadExceptionResponse.ID);
            this.body = new RecordSDKDownloadExceptionRespBody();
        }
        RecordSDKDownloadExceptionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RecordSDKDownloadExceptionResponse.prototype.to_bytes = function (encoder) { return false; };
        RecordSDKDownloadExceptionResponse.ID = 1793;
        return RecordSDKDownloadExceptionResponse;
    }());
    message.RecordSDKDownloadExceptionResponse = RecordSDKDownloadExceptionResponse;
    __reflect(RecordSDKDownloadExceptionResponse.prototype, "message.RecordSDKDownloadExceptionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // SDK�ռ���Ϸ����Դ�����쳣��־����
    // request RecordGameDownloadException
    ////////////////////////////////////////////////////////////////////////////////
    var RecordGameDownloadExceptionReqBody = (function () {
        function RecordGameDownloadExceptionReqBody() {
            this.url = ""; // ��Դ����url��ַ
            this.code = ""; // ������
            this.detail = ""; // ��Դ��������(http�ظ���)
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        RecordGameDownloadExceptionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RecordGameDownloadExceptionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // url
            encoder.write_string(this.url);
            // code
            encoder.write_string(this.code);
            // detail
            encoder.write_string(this.detail);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RecordGameDownloadExceptionReqBody;
    }());
    message.RecordGameDownloadExceptionReqBody = RecordGameDownloadExceptionReqBody;
    __reflect(RecordGameDownloadExceptionReqBody.prototype, "message.RecordGameDownloadExceptionReqBody", ["aone.AoneBody"]);
    var RecordGameDownloadExceptionRequest = (function () {
        function RecordGameDownloadExceptionRequest() {
            this.header = new aone.AoneReqHeader(RecordGameDownloadExceptionRequest.ID);
            this.body = new RecordGameDownloadExceptionReqBody();
        }
        RecordGameDownloadExceptionRequest.prototype.parse_bytes = function (decoder) { return false; };
        RecordGameDownloadExceptionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RecordGameDownloadExceptionRequest.ID = 1794;
        return RecordGameDownloadExceptionRequest;
    }());
    message.RecordGameDownloadExceptionRequest = RecordGameDownloadExceptionRequest;
    __reflect(RecordGameDownloadExceptionRequest.prototype, "message.RecordGameDownloadExceptionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // SDK�ռ���Ϸ����Դ�����쳣��־�ظ�
    // response RecordGameDownloadException
    ////////////////////////////////////////////////////////////////////////////////
    var RecordGameDownloadExceptionRespBody = (function () {
        function RecordGameDownloadExceptionRespBody() {
        }
        RecordGameDownloadExceptionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        RecordGameDownloadExceptionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RecordGameDownloadExceptionRespBody;
    }());
    message.RecordGameDownloadExceptionRespBody = RecordGameDownloadExceptionRespBody;
    __reflect(RecordGameDownloadExceptionRespBody.prototype, "message.RecordGameDownloadExceptionRespBody", ["aone.AoneBody"]);
    var RecordGameDownloadExceptionResponse = (function () {
        function RecordGameDownloadExceptionResponse() {
            this.header = new aone.AoneRespHeader(RecordGameDownloadExceptionResponse.ID);
            this.body = new RecordGameDownloadExceptionRespBody();
        }
        RecordGameDownloadExceptionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RecordGameDownloadExceptionResponse.prototype.to_bytes = function (encoder) { return false; };
        RecordGameDownloadExceptionResponse.ID = 1795;
        return RecordGameDownloadExceptionResponse;
    }());
    message.RecordGameDownloadExceptionResponse = RecordGameDownloadExceptionResponse;
    __reflect(RecordGameDownloadExceptionResponse.prototype, "message.RecordGameDownloadExceptionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // SDK�ռ�֧���쳣��־����
    // request RecordSDKPayException
    ////////////////////////////////////////////////////////////////////////////////
    var RecordSDKPayExceptionReqBody = (function () {
        function RecordSDKPayExceptionReqBody() {
            this.code = ""; // SDK���صĴ�����
            this.detail = ""; // �쳣����(����������)
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        RecordSDKPayExceptionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RecordSDKPayExceptionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // code
            encoder.write_string(this.code);
            // detail
            encoder.write_string(this.detail);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RecordSDKPayExceptionReqBody;
    }());
    message.RecordSDKPayExceptionReqBody = RecordSDKPayExceptionReqBody;
    __reflect(RecordSDKPayExceptionReqBody.prototype, "message.RecordSDKPayExceptionReqBody", ["aone.AoneBody"]);
    var RecordSDKPayExceptionRequest = (function () {
        function RecordSDKPayExceptionRequest() {
            this.header = new aone.AoneReqHeader(RecordSDKPayExceptionRequest.ID);
            this.body = new RecordSDKPayExceptionReqBody();
        }
        RecordSDKPayExceptionRequest.prototype.parse_bytes = function (decoder) { return false; };
        RecordSDKPayExceptionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RecordSDKPayExceptionRequest.ID = 1796;
        return RecordSDKPayExceptionRequest;
    }());
    message.RecordSDKPayExceptionRequest = RecordSDKPayExceptionRequest;
    __reflect(RecordSDKPayExceptionRequest.prototype, "message.RecordSDKPayExceptionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // SDK�ռ�֧���쳣��־�ظ�
    // response RecordSDKPayException
    ////////////////////////////////////////////////////////////////////////////////
    var RecordSDKPayExceptionRespBody = (function () {
        function RecordSDKPayExceptionRespBody() {
        }
        RecordSDKPayExceptionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        RecordSDKPayExceptionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RecordSDKPayExceptionRespBody;
    }());
    message.RecordSDKPayExceptionRespBody = RecordSDKPayExceptionRespBody;
    __reflect(RecordSDKPayExceptionRespBody.prototype, "message.RecordSDKPayExceptionRespBody", ["aone.AoneBody"]);
    var RecordSDKPayExceptionResponse = (function () {
        function RecordSDKPayExceptionResponse() {
            this.header = new aone.AoneRespHeader(RecordSDKPayExceptionResponse.ID);
            this.body = new RecordSDKPayExceptionRespBody();
        }
        RecordSDKPayExceptionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RecordSDKPayExceptionResponse.prototype.to_bytes = function (encoder) { return false; };
        RecordSDKPayExceptionResponse.ID = 1797;
        return RecordSDKPayExceptionResponse;
    }());
    message.RecordSDKPayExceptionResponse = RecordSDKPayExceptionResponse;
    __reflect(RecordSDKPayExceptionResponse.prototype, "message.RecordSDKPayExceptionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ж��Ƿ���ʾ����֧��֧����ҳ������
    // ���ں��ⷢ�бܿ��ȸ����
    // request QueryIsEnableLocalPay
    ////////////////////////////////////////////////////////////////////////////////
    var QueryIsEnableLocalPayReqBody = (function () {
        function QueryIsEnableLocalPayReqBody() {
            this.code = ""; // �ƶ����Һ�������룬����42104
            this.is_wifi = false; // �ͻ����Ƿ�ʹ��wifi
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        QueryIsEnableLocalPayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryIsEnableLocalPayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // code
            encoder.write_string(this.code);
            // is_wifi
            encoder.write_bool(this.is_wifi);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryIsEnableLocalPayReqBody;
    }());
    message.QueryIsEnableLocalPayReqBody = QueryIsEnableLocalPayReqBody;
    __reflect(QueryIsEnableLocalPayReqBody.prototype, "message.QueryIsEnableLocalPayReqBody", ["aone.AoneBody"]);
    var QueryIsEnableLocalPayRequest = (function () {
        function QueryIsEnableLocalPayRequest() {
            this.header = new aone.AoneReqHeader(QueryIsEnableLocalPayRequest.ID);
            this.body = new QueryIsEnableLocalPayReqBody();
        }
        QueryIsEnableLocalPayRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryIsEnableLocalPayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryIsEnableLocalPayRequest.ID = 1798;
        return QueryIsEnableLocalPayRequest;
    }());
    message.QueryIsEnableLocalPayRequest = QueryIsEnableLocalPayRequest;
    __reflect(QueryIsEnableLocalPayRequest.prototype, "message.QueryIsEnableLocalPayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ж��Ƿ���ʾ����֧��֧����ҳ��ظ�
    // ���ں��ⷢ�бܿ��ȸ����
    // response QueryIsEnableLocalPay
    ////////////////////////////////////////////////////////////////////////////////
    var QueryIsEnableLocalPayRespBody = (function () {
        function QueryIsEnableLocalPayRespBody() {
            this.is_enable = false; // �Ƿ���ʾ
        }
        QueryIsEnableLocalPayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // is_enable
            if (decoder_.eof())
                return true;
            this.is_enable = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryIsEnableLocalPayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryIsEnableLocalPayRespBody;
    }());
    message.QueryIsEnableLocalPayRespBody = QueryIsEnableLocalPayRespBody;
    __reflect(QueryIsEnableLocalPayRespBody.prototype, "message.QueryIsEnableLocalPayRespBody", ["aone.AoneBody"]);
    var QueryIsEnableLocalPayResponse = (function () {
        function QueryIsEnableLocalPayResponse() {
            this.header = new aone.AoneRespHeader(QueryIsEnableLocalPayResponse.ID);
            this.body = new QueryIsEnableLocalPayRespBody();
        }
        QueryIsEnableLocalPayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryIsEnableLocalPayResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryIsEnableLocalPayResponse.ID = 1799;
        return QueryIsEnableLocalPayResponse;
    }());
    message.QueryIsEnableLocalPayResponse = QueryIsEnableLocalPayResponse;
    __reflect(QueryIsEnableLocalPayResponse.prototype, "message.QueryIsEnableLocalPayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////
    // �û���½��֤����
    // �ӿ�1: http post + json��url·����/api/user_verify.do?appid=xxx&sign=xxxx
    // �ӿ�2: aone2��Э���1800
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request UserVerify
    ////////////////////////////////////////////////////////////////////////////////
    var UserVerifyReqBody = (function () {
        function UserVerifyReqBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.token = ""; // (��ƽ̨)�û�������֤��
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        UserVerifyReqBody.prototype.parse_bytes = function (decoder) { return false; };
        UserVerifyReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // token
            encoder.write_string(this.token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return UserVerifyReqBody;
    }());
    message.UserVerifyReqBody = UserVerifyReqBody;
    __reflect(UserVerifyReqBody.prototype, "message.UserVerifyReqBody", ["aone.AoneBody"]);
    var UserVerifyRequest = (function () {
        function UserVerifyRequest() {
            this.header = new aone.AoneReqHeader(UserVerifyRequest.ID);
            this.body = new UserVerifyReqBody();
        }
        UserVerifyRequest.prototype.parse_bytes = function (decoder) { return false; };
        UserVerifyRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        UserVerifyRequest.ID = 1800;
        return UserVerifyRequest;
    }());
    message.UserVerifyRequest = UserVerifyRequest;
    __reflect(UserVerifyRequest.prototype, "message.UserVerifyRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �û���½��֤�ظ�
    // response UserVerify
    ////////////////////////////////////////////////////////////////////////////////
    var UserVerifyRespBody = (function () {
        function UserVerifyRespBody() {
            this.user_id = 0; // (��ƽ̨)�û�ID
            this.user_account = ""; // (��ƽ̨)�û��˺���
        }
        UserVerifyRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_account
            if (decoder_.eof())
                return true;
            this.user_account = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        UserVerifyRespBody.prototype.to_bytes = function (encoder) { return false; };
        return UserVerifyRespBody;
    }());
    message.UserVerifyRespBody = UserVerifyRespBody;
    __reflect(UserVerifyRespBody.prototype, "message.UserVerifyRespBody", ["aone.AoneBody"]);
    var UserVerifyResponse = (function () {
        function UserVerifyResponse() {
            this.header = new aone.AoneRespHeader(UserVerifyResponse.ID);
            this.body = new UserVerifyRespBody();
        }
        UserVerifyResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UserVerifyResponse.prototype.to_bytes = function (encoder) { return false; };
        UserVerifyResponse.ID = 1801;
        return UserVerifyResponse;
    }());
    message.UserVerifyResponse = UserVerifyResponse;
    __reflect(UserVerifyResponse.prototype, "message.UserVerifyResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////
    // ֧������
    // 1.��������UUSDK����������
    // 2.�������ÿ��ɷ���������
    // �Ժ󶼰�2ִ�У�pay_no����ֻΪ���ݽ���汾sdk
    // �ӿ�1: http post + json��url·����/api/pay.do
    // �ӿ�2: aone2��Э���1850
    // ���ýӿ�1ʱ��auth_key,device_info,version_info����ʡ��
    // request Pay
    ////////////////////////////////////////////////////////////////////////////////
    var PayReqBody = (function () {
        function PayReqBody() {
            this.user_id = 0; // �û�ID
            this.role_id = 0; // ��ɫID(�ѷ���)
            this.receipt = ""; // �������վ�(û��ʱ�ÿ�)
            this.pay_channel = ""; // ֧������
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.pay_no = ""; // ������
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.channel_user_id = ""; // ����������user_id(����֧���ص���֤)
            this.product_quantity = 0; // ��Ʒ����
        }
        PayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // receipt
            encoder.write_string(this.receipt);
            // pay_channel
            encoder.write_string(this.pay_channel);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // pay_no
            encoder.write_string(this.pay_no);
            // product_id
            encoder.write_string(this.product_id);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // channel_user_id
            encoder.write_string(this.channel_user_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PayReqBody;
    }());
    message.PayReqBody = PayReqBody;
    __reflect(PayReqBody.prototype, "message.PayReqBody", ["aone.AoneBody"]);
    var PayRequest = (function () {
        function PayRequest() {
            this.header = new aone.AoneReqHeader(PayRequest.ID);
            this.body = new PayReqBody();
        }
        PayRequest.prototype.parse_bytes = function (decoder) { return false; };
        PayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PayRequest.ID = 1850;
        return PayRequest;
    }());
    message.PayRequest = PayRequest;
    __reflect(PayRequest.prototype, "message.PayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ֧���ظ�
    // response Pay
    ////////////////////////////////////////////////////////////////////////////////
    var PayRespBody = (function () {
        function PayRespBody() {
            this.pay_no = ""; // ������
            this.discount = 0; // �ۿ�
            this.amount = 0; // �������
        }
        PayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pay_no
            if (decoder_.eof())
                return true;
            this.pay_no = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // discount
            if (decoder_.eof())
                return true;
            this.discount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // amount
            if (decoder_.eof())
                return true;
            this.amount = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PayRespBody;
    }());
    message.PayRespBody = PayRespBody;
    __reflect(PayRespBody.prototype, "message.PayRespBody", ["aone.AoneBody"]);
    var PayResponse = (function () {
        function PayResponse() {
            this.header = new aone.AoneRespHeader(PayResponse.ID);
            this.body = new PayRespBody();
        }
        PayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PayResponse.prototype.to_bytes = function (encoder) { return false; };
        PayResponse.ID = 1851;
        return PayResponse;
    }());
    message.PayResponse = PayResponse;
    __reflect(PayResponse.prototype, "message.PayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ֧��������ǩ������
    // ǩ������+ǩ��+�ص���ַ
    // request AlipaySign
    ////////////////////////////////////////////////////////////////////////////////
    var AlipaySignReqBody = (function () {
        function AlipaySignReqBody() {
            this.content = ""; // ��Ҫǩ��������
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        AlipaySignReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AlipaySignReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // content
            encoder.write_string(this.content);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AlipaySignReqBody;
    }());
    message.AlipaySignReqBody = AlipaySignReqBody;
    __reflect(AlipaySignReqBody.prototype, "message.AlipaySignReqBody", ["aone.AoneBody"]);
    var AlipaySignRequest = (function () {
        function AlipaySignRequest() {
            this.header = new aone.AoneReqHeader(AlipaySignRequest.ID);
            this.body = new AlipaySignReqBody();
        }
        AlipaySignRequest.prototype.parse_bytes = function (decoder) { return false; };
        AlipaySignRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AlipaySignRequest.ID = 1852;
        return AlipaySignRequest;
    }());
    message.AlipaySignRequest = AlipaySignRequest;
    __reflect(AlipaySignRequest.prototype, "message.AlipaySignRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ֧��������ǩ���ظ�
    // response AlipaySign
    ////////////////////////////////////////////////////////////////////////////////
    var AlipaySignRespBody = (function () {
        function AlipaySignRespBody() {
            this.sign_content = ""; // ����ǩ���������
        }
        AlipaySignRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sign_content
            if (decoder_.eof())
                return true;
            this.sign_content = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AlipaySignRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AlipaySignRespBody;
    }());
    message.AlipaySignRespBody = AlipaySignRespBody;
    __reflect(AlipaySignRespBody.prototype, "message.AlipaySignRespBody", ["aone.AoneBody"]);
    var AlipaySignResponse = (function () {
        function AlipaySignResponse() {
            this.header = new aone.AoneRespHeader(AlipaySignResponse.ID);
            this.body = new AlipaySignRespBody();
        }
        AlipaySignResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AlipaySignResponse.prototype.to_bytes = function (encoder) { return false; };
        AlipaySignResponse.ID = 1853;
        return AlipaySignResponse;
    }());
    message.AlipaySignResponse = AlipaySignResponse;
    __reflect(AlipaySignResponse.prototype, "message.AlipaySignResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �쳣������Ϣ��ѯ����
    // ��෵�ز�ѯ���100��
    // ��ɫIDΪ0ʱ����ɫID����Ϊ��ѯ�޶�����
    // ֧������Ϊ��ʱ��֧����������Ϊ��ѯ�޶�����
    // �ӿ�1: http post + json��url·����/api/query_exception_payorders.do?appid=xxx&sign=xxxx
    // request QueryExceptionPayOrders
    ////////////////////////////////////////////////////////////////////////////////
    var QueryExceptionPayOrdersReqBody = (function () {
        function QueryExceptionPayOrdersReqBody() {
            this.role_id = 0; // ��ɫID(Ϊ0ʱ����Ϊ��ѯ�޶�����)
            this.pay_channel = ""; // ֧������(Ϊ��ʱ����Ϊ��ѯ�޶�����)
            this.begin_time = ""; // ��ѯ��ʼʱ��(��ʽ��yyyy-mm-dd hh:mm:ss)
            this.end_time = ""; // ��ѯ����ʱ��(��ʽ��yyyy-mm-dd hh:mm:ss)
        }
        QueryExceptionPayOrdersReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryExceptionPayOrdersReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // pay_channel
            encoder.write_string(this.pay_channel);
            // begin_time
            encoder.write_string(this.begin_time);
            // end_time
            encoder.write_string(this.end_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryExceptionPayOrdersReqBody;
    }());
    message.QueryExceptionPayOrdersReqBody = QueryExceptionPayOrdersReqBody;
    __reflect(QueryExceptionPayOrdersReqBody.prototype, "message.QueryExceptionPayOrdersReqBody", ["aone.AoneBody"]);
    var QueryExceptionPayOrdersRequest = (function () {
        function QueryExceptionPayOrdersRequest() {
            this.header = new aone.AoneReqHeader(QueryExceptionPayOrdersRequest.ID);
            this.body = new QueryExceptionPayOrdersReqBody();
        }
        QueryExceptionPayOrdersRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryExceptionPayOrdersRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryExceptionPayOrdersRequest.ID = 1854;
        return QueryExceptionPayOrdersRequest;
    }());
    message.QueryExceptionPayOrdersRequest = QueryExceptionPayOrdersRequest;
    __reflect(QueryExceptionPayOrdersRequest.prototype, "message.QueryExceptionPayOrdersRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct QueryExceptionPayOrdersRespBody::ExceptionPayOrder
    ////////////////////////////////////////////////////////////////////////////////
    var ExceptionPayOrder = (function () {
        function ExceptionPayOrder() {
            this.pay_no = ""; // (��ƽ̨)������
            this.pay_out_no = ""; // ������������
            this.is_verify = false; // �Ƿ�������֤ģʽ(����Ϊ�������ص�ģʽ)
            this.status = ""; // ״̬
            this.user_id = 0; // �û�id
            this.role_id = 0; // ��ɫid
            this.pay_channel = ""; // ֧������
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������
            this.receipt = ""; // �������վ�(�ص���������ص�http����ԭʼ����)
            this.notify_url = ""; // ֪ͨ��Ϸ֧�������Ϣ��URL��ַ
            this.product_id = ""; // �������ƷID
            this.pay_commit_time = ""; // �����ύʱ��(��ʽ��yyyy-mm-dd hh:mm:ss)
            this.pay_finished_time = ""; // ֧���ɹ�ʱ��(������֤�͵������ص�)(��ʽ��yyyy-mm-dd hh:mm:ss)
        }
        ExceptionPayOrder.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pay_no
            if (decoder_.eof())
                return true;
            this.pay_no = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_out_no
            if (decoder_.eof())
                return true;
            this.pay_out_no = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // is_verify
            if (decoder_.eof())
                return true;
            this.is_verify = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // status
            if (decoder_.eof())
                return true;
            this.status = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_id
            if (decoder_.eof())
                return true;
            this.role_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pay_channel
            if (decoder_.eof())
                return true;
            this.pay_channel = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // cp_ext
            if (decoder_.eof())
                return true;
            this.cp_ext = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // receipt
            if (decoder_.eof())
                return true;
            this.receipt = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // notify_url
            if (decoder_.eof())
                return true;
            this.notify_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // product_id
            if (decoder_.eof())
                return true;
            this.product_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_commit_time
            if (decoder_.eof())
                return true;
            this.pay_commit_time = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_finished_time
            if (decoder_.eof())
                return true;
            this.pay_finished_time = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ExceptionPayOrder.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pay_no
            encoder.write_string(this.pay_no);
            // pay_out_no
            encoder.write_string(this.pay_out_no);
            // is_verify
            encoder.write_bool(this.is_verify);
            // status
            encoder.write_string(this.status);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // pay_channel
            encoder.write_string(this.pay_channel);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // receipt
            encoder.write_string(this.receipt);
            // notify_url
            encoder.write_string(this.notify_url);
            // product_id
            encoder.write_string(this.product_id);
            // pay_commit_time
            encoder.write_string(this.pay_commit_time);
            // pay_finished_time
            encoder.write_string(this.pay_finished_time);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ExceptionPayOrder;
    }());
    message.ExceptionPayOrder = ExceptionPayOrder;
    __reflect(ExceptionPayOrder.prototype, "message.ExceptionPayOrder", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �쳣������Ϣ��ѯ�ظ�
    // response QueryExceptionPayOrders
    ////////////////////////////////////////////////////////////////////////////////
    var QueryExceptionPayOrdersRespBody = (function () {
        function QueryExceptionPayOrdersRespBody() {
            this.pay_orders = []; // ������Ϣ�б�
        }
        QueryExceptionPayOrdersRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pay_orders
            if (decoder_.eof())
                return true;
            var pay_orders_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < pay_orders_count; i++) {
                this.pay_orders.push(new ExceptionPayOrder());
                if (!this.pay_orders[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryExceptionPayOrdersRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryExceptionPayOrdersRespBody;
    }());
    message.QueryExceptionPayOrdersRespBody = QueryExceptionPayOrdersRespBody;
    __reflect(QueryExceptionPayOrdersRespBody.prototype, "message.QueryExceptionPayOrdersRespBody", ["aone.AoneBody"]);
    var QueryExceptionPayOrdersResponse = (function () {
        function QueryExceptionPayOrdersResponse() {
            this.header = new aone.AoneRespHeader(QueryExceptionPayOrdersResponse.ID);
            this.body = new QueryExceptionPayOrdersRespBody();
        }
        QueryExceptionPayOrdersResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryExceptionPayOrdersResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryExceptionPayOrdersResponse.ID = 1855;
        return QueryExceptionPayOrdersResponse;
    }());
    message.QueryExceptionPayOrdersResponse = QueryExceptionPayOrdersResponse;
    __reflect(QueryExceptionPayOrdersResponse.prototype, "message.QueryExceptionPayOrdersResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �վ��ύ����
    // request CommitReceipt
    ////////////////////////////////////////////////////////////////////////////////
    var CommitReceiptReqBody = (function () {
        function CommitReceiptReqBody() {
            this.pay_no = ""; // ������
            this.receipt = ""; // �������վ�
            this.pay_channel = ""; // ֧������
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        CommitReceiptReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CommitReceiptReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pay_no
            encoder.write_string(this.pay_no);
            // receipt
            encoder.write_string(this.receipt);
            // pay_channel
            encoder.write_string(this.pay_channel);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CommitReceiptReqBody;
    }());
    message.CommitReceiptReqBody = CommitReceiptReqBody;
    __reflect(CommitReceiptReqBody.prototype, "message.CommitReceiptReqBody", ["aone.AoneBody"]);
    var CommitReceiptRequest = (function () {
        function CommitReceiptRequest() {
            this.header = new aone.AoneReqHeader(CommitReceiptRequest.ID);
            this.body = new CommitReceiptReqBody();
        }
        CommitReceiptRequest.prototype.parse_bytes = function (decoder) { return false; };
        CommitReceiptRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CommitReceiptRequest.ID = 1856;
        return CommitReceiptRequest;
    }());
    message.CommitReceiptRequest = CommitReceiptRequest;
    __reflect(CommitReceiptRequest.prototype, "message.CommitReceiptRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �վ��ύ�ظ�
    // response CommitReceipt
    ////////////////////////////////////////////////////////////////////////////////
    var CommitReceiptRespBody = (function () {
        function CommitReceiptRespBody() {
        }
        CommitReceiptRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        CommitReceiptRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CommitReceiptRespBody;
    }());
    message.CommitReceiptRespBody = CommitReceiptRespBody;
    __reflect(CommitReceiptRespBody.prototype, "message.CommitReceiptRespBody", ["aone.AoneBody"]);
    var CommitReceiptResponse = (function () {
        function CommitReceiptResponse() {
            this.header = new aone.AoneRespHeader(CommitReceiptResponse.ID);
            this.body = new CommitReceiptRespBody();
        }
        CommitReceiptResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CommitReceiptResponse.prototype.to_bytes = function (encoder) { return false; };
        CommitReceiptResponse.ID = 1857;
        return CommitReceiptResponse;
    }());
    message.CommitReceiptResponse = CommitReceiptResponse;
    __reflect(CommitReceiptResponse.prototype, "message.CommitReceiptResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ����״̬��ѯ����, ��ѯ�û����һ��֧��״̬
    // request QueryOrderStatus
    ////////////////////////////////////////////////////////////////////////////////
    var QueryOrderStatusReqBody = (function () {
        function QueryOrderStatusReqBody() {
            this.user_id = 0; // �û�id
            this.auth_key = ""; // ��֤�� = AuthKeyA(device_id + appkey)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        QueryOrderStatusReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryOrderStatusReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryOrderStatusReqBody;
    }());
    message.QueryOrderStatusReqBody = QueryOrderStatusReqBody;
    __reflect(QueryOrderStatusReqBody.prototype, "message.QueryOrderStatusReqBody", ["aone.AoneBody"]);
    var QueryOrderStatusRequest = (function () {
        function QueryOrderStatusRequest() {
            this.header = new aone.AoneReqHeader(QueryOrderStatusRequest.ID);
            this.body = new QueryOrderStatusReqBody();
        }
        QueryOrderStatusRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryOrderStatusRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryOrderStatusRequest.ID = 1858;
        return QueryOrderStatusRequest;
    }());
    message.QueryOrderStatusRequest = QueryOrderStatusRequest;
    __reflect(QueryOrderStatusRequest.prototype, "message.QueryOrderStatusRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ����״̬��ѯ�ظ�
    // response QueryOrderStatus
    ////////////////////////////////////////////////////////////////////////////////
    var QueryOrderStatusRespBody = (function () {
        function QueryOrderStatusRespBody() {
            this.pay_no = "";
            this.currency = "";
            this.amount = 0;
            this.amount_usd = 0;
            this.coin = 0;
        }
        QueryOrderStatusRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pay_no
            if (decoder_.eof())
                return true;
            this.pay_no = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // currency
            if (decoder_.eof())
                return true;
            this.currency = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // amount
            if (decoder_.eof())
                return true;
            this.amount = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // amount_usd
            if (decoder_.eof())
                return true;
            this.amount_usd = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // coin
            if (decoder_.eof())
                return true;
            this.coin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryOrderStatusRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryOrderStatusRespBody;
    }());
    message.QueryOrderStatusRespBody = QueryOrderStatusRespBody;
    __reflect(QueryOrderStatusRespBody.prototype, "message.QueryOrderStatusRespBody", ["aone.AoneBody"]);
    var QueryOrderStatusResponse = (function () {
        function QueryOrderStatusResponse() {
            this.header = new aone.AoneRespHeader(QueryOrderStatusResponse.ID);
            this.body = new QueryOrderStatusRespBody();
        }
        QueryOrderStatusResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryOrderStatusResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryOrderStatusResponse.ID = 1859;
        return QueryOrderStatusResponse;
    }());
    message.QueryOrderStatusResponse = QueryOrderStatusResponse;
    __reflect(QueryOrderStatusResponse.prototype, "message.QueryOrderStatusResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ѯ���嶩���ŵ�֧��״̬����
    // request QueryPayNoStatus
    ////////////////////////////////////////////////////////////////////////////////
    var QueryPayNoStatusReqBody = (function () {
        function QueryPayNoStatusReqBody() {
            this.app_id = 0; //	Ӧ��ID
            this.pay_no = ""; // ��Ҫ��ѯ�����Ķ�����
        }
        QueryPayNoStatusReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryPayNoStatusReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // app_id
            encoder.write_fixuint32(this.app_id);
            // pay_no
            encoder.write_string(this.pay_no);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryPayNoStatusReqBody;
    }());
    message.QueryPayNoStatusReqBody = QueryPayNoStatusReqBody;
    __reflect(QueryPayNoStatusReqBody.prototype, "message.QueryPayNoStatusReqBody", ["aone.AoneBody"]);
    var QueryPayNoStatusRequest = (function () {
        function QueryPayNoStatusRequest() {
            this.header = new aone.AoneReqHeader(QueryPayNoStatusRequest.ID);
            this.body = new QueryPayNoStatusReqBody();
        }
        QueryPayNoStatusRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryPayNoStatusRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryPayNoStatusRequest.ID = 1860;
        return QueryPayNoStatusRequest;
    }());
    message.QueryPayNoStatusRequest = QueryPayNoStatusRequest;
    __reflect(QueryPayNoStatusRequest.prototype, "message.QueryPayNoStatusRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ѯ���嶩���ŵ�֧��״̬�ظ�
    // response QueryPayNoStatus
    ////////////////////////////////////////////////////////////////////////////////
    var QueryPayNoStatusRespBody = (function () {
        function QueryPayNoStatusRespBody() {
            this.status = ""; // ����״̬
        }
        QueryPayNoStatusRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // status
            if (decoder_.eof())
                return true;
            this.status = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryPayNoStatusRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryPayNoStatusRespBody;
    }());
    message.QueryPayNoStatusRespBody = QueryPayNoStatusRespBody;
    __reflect(QueryPayNoStatusRespBody.prototype, "message.QueryPayNoStatusRespBody", ["aone.AoneBody"]);
    var QueryPayNoStatusResponse = (function () {
        function QueryPayNoStatusResponse() {
            this.header = new aone.AoneRespHeader(QueryPayNoStatusResponse.ID);
            this.body = new QueryPayNoStatusRespBody();
        }
        QueryPayNoStatusResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryPayNoStatusResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryPayNoStatusResponse.ID = 1861;
        return QueryPayNoStatusResponse;
    }());
    message.QueryPayNoStatusResponse = QueryPayNoStatusResponse;
    __reflect(QueryPayNoStatusResponse.prototype, "message.QueryPayNoStatusResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ΢��С����֧������
    // �ӿ�: http post + json, url·��: /api/pay_wxapp.do
    // request WxappPay
    ////////////////////////////////////////////////////////////////////////////////
    var WxappPayReqBody = (function () {
        function WxappPayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.openid = ""; // �û���Ӧ��΢��openid
        }
        WxappPayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WxappPayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // openid
            encoder.write_string(this.openid);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WxappPayReqBody;
    }());
    message.WxappPayReqBody = WxappPayReqBody;
    __reflect(WxappPayReqBody.prototype, "message.WxappPayReqBody", ["aone.AoneBody"]);
    var WxappPayRequest = (function () {
        function WxappPayRequest() {
            this.header = new aone.AoneReqHeader(WxappPayRequest.ID);
            this.body = new WxappPayReqBody();
        }
        WxappPayRequest.prototype.parse_bytes = function (decoder) { return false; };
        WxappPayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WxappPayRequest.ID = 1862;
        return WxappPayRequest;
    }());
    message.WxappPayRequest = WxappPayRequest;
    __reflect(WxappPayRequest.prototype, "message.WxappPayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ΢��С����֧���ظ�
    // response WxappPay
    ////////////////////////////////////////////////////////////////////////////////
    var WxappPayRespBody = (function () {
        function WxappPayRespBody() {
            this.timeStamp = ""; // ʱ�������1970��1��1��00:00:00���������������ǰ��ʱ��
            this.nonceStr = ""; // ����ַ���������Ϊ32���ַ�����
            this.package = ""; // ͳһ�µ��ӿڷ��ص� prepay_id ����ֵ���ύ��ʽ�磺prepay_id=***
            this.signType = ""; // ǩ���㷨
            this.paySign = ""; // ǩ��������ǩ�������μ� С����֧���ӿ��ĵ�
            this.pay_no = ""; // ������
            this.discount = 0; // �ۿ�
        }
        WxappPayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // timeStamp
            if (decoder_.eof())
                return true;
            this.timeStamp = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // nonceStr
            if (decoder_.eof())
                return true;
            this.nonceStr = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // package
            if (decoder_.eof())
                return true;
            this.package = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // signType
            if (decoder_.eof())
                return true;
            this.signType = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // paySign
            if (decoder_.eof())
                return true;
            this.paySign = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_no
            if (decoder_.eof())
                return true;
            this.pay_no = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // discount
            if (decoder_.eof())
                return true;
            this.discount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        WxappPayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WxappPayRespBody;
    }());
    message.WxappPayRespBody = WxappPayRespBody;
    __reflect(WxappPayRespBody.prototype, "message.WxappPayRespBody", ["aone.AoneBody"]);
    var WxappPayResponse = (function () {
        function WxappPayResponse() {
            this.header = new aone.AoneRespHeader(WxappPayResponse.ID);
            this.body = new WxappPayRespBody();
        }
        WxappPayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WxappPayResponse.prototype.to_bytes = function (encoder) { return false; };
        WxappPayResponse.ID = 1863;
        return WxappPayResponse;
    }());
    message.WxappPayResponse = WxappPayResponse;
    __reflect(WxappPayResponse.prototype, "message.WxappPayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ٶ�����С����֧������
    // �ӿ�: http post + json, url·��: /api/pay_baiduapp.do
    // request BaiduAppPay
    ////////////////////////////////////////////////////////////////////////////////
    var BaiduAppPayReqBody = (function () {
        function BaiduAppPayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        BaiduAppPayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BaiduAppPayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BaiduAppPayReqBody;
    }());
    message.BaiduAppPayReqBody = BaiduAppPayReqBody;
    __reflect(BaiduAppPayReqBody.prototype, "message.BaiduAppPayReqBody", ["aone.AoneBody"]);
    var BaiduAppPayRequest = (function () {
        function BaiduAppPayRequest() {
            this.header = new aone.AoneReqHeader(BaiduAppPayRequest.ID);
            this.body = new BaiduAppPayReqBody();
        }
        BaiduAppPayRequest.prototype.parse_bytes = function (decoder) { return false; };
        BaiduAppPayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BaiduAppPayRequest.ID = 1864;
        return BaiduAppPayRequest;
    }());
    message.BaiduAppPayRequest = BaiduAppPayRequest;
    __reflect(BaiduAppPayRequest.prototype, "message.BaiduAppPayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �ٶ�����С����֧���ظ�
    // response BaiduAppPay
    ////////////////////////////////////////////////////////////////////////////////
    var BaiduAppPayRespBody = (function () {
        function BaiduAppPayRespBody() {
            this.dealId = ""; // �ٶ�����̨�Ĳ������ƾ֤
            this.appKey = ""; // �ٶȵ��̿���ƽ̨appKey�����Ա�ʾӦ�����ݵ�ΨһID
            this.rsaSign = ""; // ��appKey+dealId+tpOrderId+totalAmount����RSA���ܺ��ǩ��
            this.totalAmount = 0; // ��������λΪ����ҷ�
            this.dealTitle = ""; // ����������
            this.pay_no = ""; // ������
            this.discount = 0; // �ۿ�
        }
        BaiduAppPayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // dealId
            if (decoder_.eof())
                return true;
            this.dealId = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // appKey
            if (decoder_.eof())
                return true;
            this.appKey = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // rsaSign
            if (decoder_.eof())
                return true;
            this.rsaSign = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // totalAmount
            if (decoder_.eof())
                return true;
            this.totalAmount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // dealTitle
            if (decoder_.eof())
                return true;
            this.dealTitle = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_no
            if (decoder_.eof())
                return true;
            this.pay_no = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // discount
            if (decoder_.eof())
                return true;
            this.discount = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BaiduAppPayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BaiduAppPayRespBody;
    }());
    message.BaiduAppPayRespBody = BaiduAppPayRespBody;
    __reflect(BaiduAppPayRespBody.prototype, "message.BaiduAppPayRespBody", ["aone.AoneBody"]);
    var BaiduAppPayResponse = (function () {
        function BaiduAppPayResponse() {
            this.header = new aone.AoneRespHeader(BaiduAppPayResponse.ID);
            this.body = new BaiduAppPayRespBody();
        }
        BaiduAppPayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BaiduAppPayResponse.prototype.to_bytes = function (encoder) { return false; };
        BaiduAppPayResponse.ID = 1865;
        return BaiduAppPayResponse;
    }());
    message.BaiduAppPayResponse = BaiduAppPayResponse;
    __reflect(BaiduAppPayResponse.prototype, "message.BaiduAppPayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // С�׿���Ϸ֧������
    // �ӿ�: http post + json, url·��: /api/pay_xiaomiqgame.do
    // request XiaomiQGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var XiaomiQGamePayReqBody = (function () {
        function XiaomiQGamePayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.appAccountId = ""; // ���¼�ӿڷ��ص�appAccountIdһ��
            this.session = ""; // ���¼�ӿڷ��ص�sessionһ��
        }
        XiaomiQGamePayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        XiaomiQGamePayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // appAccountId
            encoder.write_string(this.appAccountId);
            // session
            encoder.write_string(this.session);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return XiaomiQGamePayReqBody;
    }());
    message.XiaomiQGamePayReqBody = XiaomiQGamePayReqBody;
    __reflect(XiaomiQGamePayReqBody.prototype, "message.XiaomiQGamePayReqBody", ["aone.AoneBody"]);
    var XiaomiQGamePayRequest = (function () {
        function XiaomiQGamePayRequest() {
            this.header = new aone.AoneReqHeader(XiaomiQGamePayRequest.ID);
            this.body = new XiaomiQGamePayReqBody();
        }
        XiaomiQGamePayRequest.prototype.parse_bytes = function (decoder) { return false; };
        XiaomiQGamePayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        XiaomiQGamePayRequest.ID = 1866;
        return XiaomiQGamePayRequest;
    }());
    message.XiaomiQGamePayRequest = XiaomiQGamePayRequest;
    __reflect(XiaomiQGamePayRequest.prototype, "message.XiaomiQGamePayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // С�׿���Ϸ֧���ظ�
    // response XiaomiQGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var XiaomiQGamePayRespBody = (function () {
        function XiaomiQGamePayRespBody() {
            this.orderInfo = "";
        }
        XiaomiQGamePayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // orderInfo
            if (decoder_.eof())
                return true;
            this.orderInfo = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        XiaomiQGamePayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return XiaomiQGamePayRespBody;
    }());
    message.XiaomiQGamePayRespBody = XiaomiQGamePayRespBody;
    __reflect(XiaomiQGamePayRespBody.prototype, "message.XiaomiQGamePayRespBody", ["aone.AoneBody"]);
    var XiaomiQGamePayResponse = (function () {
        function XiaomiQGamePayResponse() {
            this.header = new aone.AoneRespHeader(XiaomiQGamePayResponse.ID);
            this.body = new XiaomiQGamePayRespBody();
        }
        XiaomiQGamePayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        XiaomiQGamePayResponse.prototype.to_bytes = function (encoder) { return false; };
        XiaomiQGamePayResponse.ID = 1867;
        return XiaomiQGamePayResponse;
    }());
    message.XiaomiQGamePayResponse = XiaomiQGamePayResponse;
    __reflect(XiaomiQGamePayResponse.prototype, "message.XiaomiQGamePayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ΢��С��Ϸ֧������
    // �ӿ�: http post + json, url·��: /api/pay_wxminigame.do
    // request WxMiniGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var WxMiniGamePayReqBody = (function () {
        function WxMiniGamePayReqBody() {
            this.pay_no = ""; // ������
            this.open_id = ""; // ΢���û�Ψһ��ʶ
            this.session_key = ""; // ΢��session_key
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        WxMiniGamePayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        WxMiniGamePayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pay_no
            encoder.write_string(this.pay_no);
            // open_id
            encoder.write_string(this.open_id);
            // session_key
            encoder.write_string(this.session_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WxMiniGamePayReqBody;
    }());
    message.WxMiniGamePayReqBody = WxMiniGamePayReqBody;
    __reflect(WxMiniGamePayReqBody.prototype, "message.WxMiniGamePayReqBody", ["aone.AoneBody"]);
    var WxMiniGamePayRequest = (function () {
        function WxMiniGamePayRequest() {
            this.header = new aone.AoneReqHeader(WxMiniGamePayRequest.ID);
            this.body = new WxMiniGamePayReqBody();
        }
        WxMiniGamePayRequest.prototype.parse_bytes = function (decoder) { return false; };
        WxMiniGamePayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        WxMiniGamePayRequest.ID = 1868;
        return WxMiniGamePayRequest;
    }());
    message.WxMiniGamePayRequest = WxMiniGamePayRequest;
    __reflect(WxMiniGamePayRequest.prototype, "message.WxMiniGamePayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ΢��С��Ϸ֧���ظ�
    // response WxMiniGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var WxMiniGamePayRespBody = (function () {
        function WxMiniGamePayRespBody() {
            this.pay_no = ""; // ������
            this.state = 0; // 0:�ۿ�ɹ���1�����㣬2����������
        }
        WxMiniGamePayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pay_no
            if (decoder_.eof())
                return true;
            this.pay_no = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // state
            if (decoder_.eof())
                return true;
            this.state = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        WxMiniGamePayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return WxMiniGamePayRespBody;
    }());
    message.WxMiniGamePayRespBody = WxMiniGamePayRespBody;
    __reflect(WxMiniGamePayRespBody.prototype, "message.WxMiniGamePayRespBody", ["aone.AoneBody"]);
    var WxMiniGamePayResponse = (function () {
        function WxMiniGamePayResponse() {
            this.header = new aone.AoneRespHeader(WxMiniGamePayResponse.ID);
            this.body = new WxMiniGamePayRespBody();
        }
        WxMiniGamePayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        WxMiniGamePayResponse.prototype.to_bytes = function (encoder) { return false; };
        WxMiniGamePayResponse.ID = 1869;
        return WxMiniGamePayResponse;
    }());
    message.WxMiniGamePayResponse = WxMiniGamePayResponse;
    __reflect(WxMiniGamePayResponse.prototype, "message.WxMiniGamePayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // OPPOС��Ϸ֧������
    // �ӿ�: http post + json, url·��: /api/pay_oppogame.do
    // request OppoGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var OppoGamePayReqBody = (function () {
        function OppoGamePayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.open_id = ""; // �û���oppo�����ݱ�ʶ(��¼ʱ�����token)
            this.app_version = ""; // ��Ϸ�汾
            this.engine_version = ""; // ��Ӧ������汾(ͨ��getSystemInfo��ȡplatformVersion)
        }
        OppoGamePayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        OppoGamePayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // open_id
            encoder.write_string(this.open_id);
            // app_version
            encoder.write_string(this.app_version);
            // engine_version
            encoder.write_string(this.engine_version);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return OppoGamePayReqBody;
    }());
    message.OppoGamePayReqBody = OppoGamePayReqBody;
    __reflect(OppoGamePayReqBody.prototype, "message.OppoGamePayReqBody", ["aone.AoneBody"]);
    var OppoGamePayRequest = (function () {
        function OppoGamePayRequest() {
            this.header = new aone.AoneReqHeader(OppoGamePayRequest.ID);
            this.body = new OppoGamePayReqBody();
        }
        OppoGamePayRequest.prototype.parse_bytes = function (decoder) { return false; };
        OppoGamePayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        OppoGamePayRequest.ID = 1870;
        return OppoGamePayRequest;
    }());
    message.OppoGamePayRequest = OppoGamePayRequest;
    __reflect(OppoGamePayRequest.prototype, "message.OppoGamePayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //OPPOС��Ϸ֧���ظ�
    // response OppoGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var OppoGamePayRespBody = (function () {
        function OppoGamePayRespBody() {
            this.timestamp = ""; // ʱ���
            this.orderNo = ""; // �µ�������
            this.paySign = ""; // ֧��ǩ��
        }
        OppoGamePayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // timestamp
            if (decoder_.eof())
                return true;
            this.timestamp = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // orderNo
            if (decoder_.eof())
                return true;
            this.orderNo = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // paySign
            if (decoder_.eof())
                return true;
            this.paySign = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        OppoGamePayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return OppoGamePayRespBody;
    }());
    message.OppoGamePayRespBody = OppoGamePayRespBody;
    __reflect(OppoGamePayRespBody.prototype, "message.OppoGamePayRespBody", ["aone.AoneBody"]);
    var OppoGamePayResponse = (function () {
        function OppoGamePayResponse() {
            this.header = new aone.AoneRespHeader(OppoGamePayResponse.ID);
            this.body = new OppoGamePayRespBody();
        }
        OppoGamePayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        OppoGamePayResponse.prototype.to_bytes = function (encoder) { return false; };
        OppoGamePayResponse.ID = 1871;
        return OppoGamePayResponse;
    }());
    message.OppoGamePayResponse = OppoGamePayResponse;
    __reflect(OppoGamePayResponse.prototype, "message.OppoGamePayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // vivo����Ϸ֧������
    // �ӿ�: http post + json, url·��: /api/pay_vivoqgame.do
    // request VivoQGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var VivoQGamePayReqBody = (function () {
        function VivoQGamePayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.vivo_version = ""; // vivo�ӿڰ汾��
        }
        VivoQGamePayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        VivoQGamePayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // vivo_version
            encoder.write_string(this.vivo_version);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return VivoQGamePayReqBody;
    }());
    message.VivoQGamePayReqBody = VivoQGamePayReqBody;
    __reflect(VivoQGamePayReqBody.prototype, "message.VivoQGamePayReqBody", ["aone.AoneBody"]);
    var VivoQGamePayRequest = (function () {
        function VivoQGamePayRequest() {
            this.header = new aone.AoneReqHeader(VivoQGamePayRequest.ID);
            this.body = new VivoQGamePayReqBody();
        }
        VivoQGamePayRequest.prototype.parse_bytes = function (decoder) { return false; };
        VivoQGamePayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        VivoQGamePayRequest.ID = 1872;
        return VivoQGamePayRequest;
    }());
    message.VivoQGamePayRequest = VivoQGamePayRequest;
    __reflect(VivoQGamePayRequest.prototype, "message.VivoQGamePayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //vivo����Ϸ֧���ظ�
    // response VivoQGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var VivoQGamePayRespBody = (function () {
        function VivoQGamePayRespBody() {
            this.respJson = "";
        }
        VivoQGamePayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // respJson
            if (decoder_.eof())
                return true;
            this.respJson = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        VivoQGamePayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return VivoQGamePayRespBody;
    }());
    message.VivoQGamePayRespBody = VivoQGamePayRespBody;
    __reflect(VivoQGamePayRespBody.prototype, "message.VivoQGamePayRespBody", ["aone.AoneBody"]);
    var VivoQGamePayResponse = (function () {
        function VivoQGamePayResponse() {
            this.header = new aone.AoneRespHeader(VivoQGamePayResponse.ID);
            this.body = new VivoQGamePayRespBody();
        }
        VivoQGamePayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        VivoQGamePayResponse.prototype.to_bytes = function (encoder) { return false; };
        VivoQGamePayResponse.ID = 1873;
        return VivoQGamePayResponse;
    }());
    message.VivoQGamePayResponse = VivoQGamePayResponse;
    __reflect(VivoQGamePayResponse.prototype, "message.VivoQGamePayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��Ϊ����Ϸ֧������
    // �ӿ�: http post + json, url·��: /api/pay_huaweiqgame.do
    // request HuaweiQGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var HuaweiQGamePayReqBody = (function () {
        function HuaweiQGamePayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        HuaweiQGamePayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        HuaweiQGamePayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return HuaweiQGamePayReqBody;
    }());
    message.HuaweiQGamePayReqBody = HuaweiQGamePayReqBody;
    __reflect(HuaweiQGamePayReqBody.prototype, "message.HuaweiQGamePayReqBody", ["aone.AoneBody"]);
    var HuaweiQGamePayRequest = (function () {
        function HuaweiQGamePayRequest() {
            this.header = new aone.AoneReqHeader(HuaweiQGamePayRequest.ID);
            this.body = new HuaweiQGamePayReqBody();
        }
        HuaweiQGamePayRequest.prototype.parse_bytes = function (decoder) { return false; };
        HuaweiQGamePayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        HuaweiQGamePayRequest.ID = 1874;
        return HuaweiQGamePayRequest;
    }());
    message.HuaweiQGamePayRequest = HuaweiQGamePayRequest;
    __reflect(HuaweiQGamePayRequest.prototype, "message.HuaweiQGamePayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��Ϊ����Ϸ֧���ظ�
    // response HuaweiQGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var HuaweiQGamePayRespBody = (function () {
        function HuaweiQGamePayRespBody() {
            this.orderInfo = "";
        }
        HuaweiQGamePayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // orderInfo
            if (decoder_.eof())
                return true;
            this.orderInfo = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        HuaweiQGamePayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return HuaweiQGamePayRespBody;
    }());
    message.HuaweiQGamePayRespBody = HuaweiQGamePayRespBody;
    __reflect(HuaweiQGamePayRespBody.prototype, "message.HuaweiQGamePayRespBody", ["aone.AoneBody"]);
    var HuaweiQGamePayResponse = (function () {
        function HuaweiQGamePayResponse() {
            this.header = new aone.AoneRespHeader(HuaweiQGamePayResponse.ID);
            this.body = new HuaweiQGamePayRespBody();
        }
        HuaweiQGamePayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        HuaweiQGamePayResponse.prototype.to_bytes = function (encoder) { return false; };
        HuaweiQGamePayResponse.ID = 1875;
        return HuaweiQGamePayResponse;
    }());
    message.HuaweiQGamePayResponse = HuaweiQGamePayResponse;
    __reflect(HuaweiQGamePayResponse.prototype, "message.HuaweiQGamePayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��˼���ý�֧������
    // �ӿ�: http post + json, url·��: /api/pay_baisibudejiewgame.do
    // request BaisibudejieWGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var BaisibudejieWGamePayReqBody = (function () {
        function BaisibudejieWGamePayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.open_id = "";
        }
        BaisibudejieWGamePayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        BaisibudejieWGamePayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // open_id
            encoder.write_string(this.open_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return BaisibudejieWGamePayReqBody;
    }());
    message.BaisibudejieWGamePayReqBody = BaisibudejieWGamePayReqBody;
    __reflect(BaisibudejieWGamePayReqBody.prototype, "message.BaisibudejieWGamePayReqBody", ["aone.AoneBody"]);
    var BaisibudejieWGamePayRequest = (function () {
        function BaisibudejieWGamePayRequest() {
            this.header = new aone.AoneReqHeader(BaisibudejieWGamePayRequest.ID);
            this.body = new BaisibudejieWGamePayReqBody();
        }
        BaisibudejieWGamePayRequest.prototype.parse_bytes = function (decoder) { return false; };
        BaisibudejieWGamePayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        BaisibudejieWGamePayRequest.ID = 1876;
        return BaisibudejieWGamePayRequest;
    }());
    message.BaisibudejieWGamePayRequest = BaisibudejieWGamePayRequest;
    __reflect(BaisibudejieWGamePayRequest.prototype, "message.BaisibudejieWGamePayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��˼���ý�֧���ظ�
    // response BaisibudejieWGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var BaisibudejieWGamePayRespBody = (function () {
        function BaisibudejieWGamePayRespBody() {
            this.pay_data = "";
        }
        BaisibudejieWGamePayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pay_data
            if (decoder_.eof())
                return true;
            this.pay_data = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        BaisibudejieWGamePayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return BaisibudejieWGamePayRespBody;
    }());
    message.BaisibudejieWGamePayRespBody = BaisibudejieWGamePayRespBody;
    __reflect(BaisibudejieWGamePayRespBody.prototype, "message.BaisibudejieWGamePayRespBody", ["aone.AoneBody"]);
    var BaisibudejieWGamePayResponse = (function () {
        function BaisibudejieWGamePayResponse() {
            this.header = new aone.AoneRespHeader(BaisibudejieWGamePayResponse.ID);
            this.body = new BaisibudejieWGamePayRespBody();
        }
        BaisibudejieWGamePayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        BaisibudejieWGamePayResponse.prototype.to_bytes = function (encoder) { return false; };
        BaisibudejieWGamePayResponse.ID = 1877;
        return BaisibudejieWGamePayResponse;
    }());
    message.BaisibudejieWGamePayResponse = BaisibudejieWGamePayResponse;
    __reflect(BaisibudejieWGamePayResponse.prototype, "message.BaisibudejieWGamePayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ����֧��ͳһ�µ�����
    // �ӿ�: http post + json, url·��: /api/pay_ipaynow.do
    // request IPayNowPay
    ////////////////////////////////////////////////////////////////////////////////
    var IPayNowPayReqBody = (function () {
        function IPayNowPayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.deviceType = ""; // 0600�����ںţ�0601���ֻ���ҳ
            this.payChannelType = ""; //  ���ں�=��12��֧������13��΢�ţ�25����Q���ֻ���ҳ=��20��������12��֧������13��΢�ţ� 25����Q
            this.outputType = "";
            this.consumerId = "";
            this.frontNotifyUrl = ""; // �̻�ǰ̨֪ͨURL
        }
        IPayNowPayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IPayNowPayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // deviceType
            encoder.write_string(this.deviceType);
            // payChannelType
            encoder.write_string(this.payChannelType);
            // outputType
            encoder.write_string(this.outputType);
            // consumerId
            encoder.write_string(this.consumerId);
            // frontNotifyUrl
            encoder.write_string(this.frontNotifyUrl);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IPayNowPayReqBody;
    }());
    message.IPayNowPayReqBody = IPayNowPayReqBody;
    __reflect(IPayNowPayReqBody.prototype, "message.IPayNowPayReqBody", ["aone.AoneBody"]);
    var IPayNowPayRequest = (function () {
        function IPayNowPayRequest() {
            this.header = new aone.AoneReqHeader(IPayNowPayRequest.ID);
            this.body = new IPayNowPayReqBody();
        }
        IPayNowPayRequest.prototype.parse_bytes = function (decoder) { return false; };
        IPayNowPayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IPayNowPayRequest.ID = 1878;
        return IPayNowPayRequest;
    }());
    message.IPayNowPayRequest = IPayNowPayRequest;
    __reflect(IPayNowPayRequest.prototype, "message.IPayNowPayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //����֧��ͳһ�µ��ظ�
    // response IPayNowPay
    ////////////////////////////////////////////////////////////////////////////////
    var IPayNowPayRespBody = (function () {
        function IPayNowPayRespBody() {
            this.pay_data = "";
        }
        IPayNowPayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pay_data
            if (decoder_.eof())
                return true;
            this.pay_data = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        IPayNowPayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IPayNowPayRespBody;
    }());
    message.IPayNowPayRespBody = IPayNowPayRespBody;
    __reflect(IPayNowPayRespBody.prototype, "message.IPayNowPayRespBody", ["aone.AoneBody"]);
    var IPayNowPayResponse = (function () {
        function IPayNowPayResponse() {
            this.header = new aone.AoneRespHeader(IPayNowPayResponse.ID);
            this.body = new IPayNowPayRespBody();
        }
        IPayNowPayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IPayNowPayResponse.prototype.to_bytes = function (encoder) { return false; };
        IPayNowPayResponse.ID = 1879;
        return IPayNowPayResponse;
    }());
    message.IPayNowPayResponse = IPayNowPayResponse;
    __reflect(IPayNowPayResponse.prototype, "message.IPayNowPayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡ΢�Ź��ں�js_ticket����
    // �ӿ�: http post + json, url·��: /api/get_wechat_js_ticket.do
    // request GetWechatJsTicket
    ////////////////////////////////////////////////////////////////////////////////
    var GetWechatJsTicketReqBody = (function () {
        function GetWechatJsTicketReqBody() {
            this.url = ""; // ��ǰ��ҳ��URL
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        GetWechatJsTicketReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GetWechatJsTicketReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // url
            encoder.write_string(this.url);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GetWechatJsTicketReqBody;
    }());
    message.GetWechatJsTicketReqBody = GetWechatJsTicketReqBody;
    __reflect(GetWechatJsTicketReqBody.prototype, "message.GetWechatJsTicketReqBody", ["aone.AoneBody"]);
    var GetWechatJsTicketRequest = (function () {
        function GetWechatJsTicketRequest() {
            this.header = new aone.AoneReqHeader(GetWechatJsTicketRequest.ID);
            this.body = new GetWechatJsTicketReqBody();
        }
        GetWechatJsTicketRequest.prototype.parse_bytes = function (decoder) { return false; };
        GetWechatJsTicketRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GetWechatJsTicketRequest.ID = 1880;
        return GetWechatJsTicketRequest;
    }());
    message.GetWechatJsTicketRequest = GetWechatJsTicketRequest;
    __reflect(GetWechatJsTicketRequest.prototype, "message.GetWechatJsTicketRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //��ȡ΢�Ź��ں�js_ticke�ظ�
    // response GetWechatJsTicket
    ////////////////////////////////////////////////////////////////////////////////
    var GetWechatJsTicketRespBody = (function () {
        function GetWechatJsTicketRespBody() {
            this.appid = ""; // ���ں�ID
            this.noncestr = ""; // ����ַ���
            this.timestamp = 0; // ʱ���
            this.signature = ""; // ǩ��
        }
        GetWechatJsTicketRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // appid
            if (decoder_.eof())
                return true;
            this.appid = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // noncestr
            if (decoder_.eof())
                return true;
            this.noncestr = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // timestamp
            if (decoder_.eof())
                return true;
            this.timestamp = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // signature
            if (decoder_.eof())
                return true;
            this.signature = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GetWechatJsTicketRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GetWechatJsTicketRespBody;
    }());
    message.GetWechatJsTicketRespBody = GetWechatJsTicketRespBody;
    __reflect(GetWechatJsTicketRespBody.prototype, "message.GetWechatJsTicketRespBody", ["aone.AoneBody"]);
    var GetWechatJsTicketResponse = (function () {
        function GetWechatJsTicketResponse() {
            this.header = new aone.AoneRespHeader(GetWechatJsTicketResponse.ID);
            this.body = new GetWechatJsTicketRespBody();
        }
        GetWechatJsTicketResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GetWechatJsTicketResponse.prototype.to_bytes = function (encoder) { return false; };
        GetWechatJsTicketResponse.ID = 1881;
        return GetWechatJsTicketResponse;
    }());
    message.GetWechatJsTicketResponse = GetWechatJsTicketResponse;
    __reflect(GetWechatJsTicketResponse.prototype, "message.GetWechatJsTicketResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ������H5֧������
    // �ӿ�: http post + json, url·��: /api/pay_yilewanwgame.do
    // request YilewanWGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var YilewanWGamePayReqBody = (function () {
        function YilewanWGamePayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.passport = ""; // ��ֵ�ʺţ�ʢ���û�
            this.uid = ""; // ��ֵ�˺ŵ�id��ʢ���û�uid
        }
        YilewanWGamePayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        YilewanWGamePayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // passport
            encoder.write_string(this.passport);
            // uid
            encoder.write_string(this.uid);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return YilewanWGamePayReqBody;
    }());
    message.YilewanWGamePayReqBody = YilewanWGamePayReqBody;
    __reflect(YilewanWGamePayReqBody.prototype, "message.YilewanWGamePayReqBody", ["aone.AoneBody"]);
    var YilewanWGamePayRequest = (function () {
        function YilewanWGamePayRequest() {
            this.header = new aone.AoneReqHeader(YilewanWGamePayRequest.ID);
            this.body = new YilewanWGamePayReqBody();
        }
        YilewanWGamePayRequest.prototype.parse_bytes = function (decoder) { return false; };
        YilewanWGamePayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        YilewanWGamePayRequest.ID = 1882;
        return YilewanWGamePayRequest;
    }());
    message.YilewanWGamePayRequest = YilewanWGamePayRequest;
    __reflect(YilewanWGamePayRequest.prototype, "message.YilewanWGamePayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ������H5֧���ظ�
    // response YilewanWGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var YilewanWGamePayRespBody = (function () {
        function YilewanWGamePayRespBody() {
            this.payInfo = "";
        }
        YilewanWGamePayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // payInfo
            if (decoder_.eof())
                return true;
            this.payInfo = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        YilewanWGamePayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return YilewanWGamePayRespBody;
    }());
    message.YilewanWGamePayRespBody = YilewanWGamePayRespBody;
    __reflect(YilewanWGamePayRespBody.prototype, "message.YilewanWGamePayRespBody", ["aone.AoneBody"]);
    var YilewanWGamePayResponse = (function () {
        function YilewanWGamePayResponse() {
            this.header = new aone.AoneRespHeader(YilewanWGamePayResponse.ID);
            this.body = new YilewanWGamePayRespBody();
        }
        YilewanWGamePayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        YilewanWGamePayResponse.prototype.to_bytes = function (encoder) { return false; };
        YilewanWGamePayResponse.ID = 1883;
        return YilewanWGamePayResponse;
    }());
    message.YilewanWGamePayResponse = YilewanWGamePayResponse;
    __reflect(YilewanWGamePayResponse.prototype, "message.YilewanWGamePayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Game real H5֧������
    // �ӿ�: http post + json, url·��: /api/pay_gamerealwgame.do
    // request GamerealWGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var GamerealWGamePayReqBody = (function () {
        function GamerealWGamePayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.uid = ""; // Game real �û�UID
        }
        GamerealWGamePayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GamerealWGamePayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // uid
            encoder.write_string(this.uid);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GamerealWGamePayReqBody;
    }());
    message.GamerealWGamePayReqBody = GamerealWGamePayReqBody;
    __reflect(GamerealWGamePayReqBody.prototype, "message.GamerealWGamePayReqBody", ["aone.AoneBody"]);
    var GamerealWGamePayRequest = (function () {
        function GamerealWGamePayRequest() {
            this.header = new aone.AoneReqHeader(GamerealWGamePayRequest.ID);
            this.body = new GamerealWGamePayReqBody();
        }
        GamerealWGamePayRequest.prototype.parse_bytes = function (decoder) { return false; };
        GamerealWGamePayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GamerealWGamePayRequest.ID = 1884;
        return GamerealWGamePayRequest;
    }());
    message.GamerealWGamePayRequest = GamerealWGamePayRequest;
    __reflect(GamerealWGamePayRequest.prototype, "message.GamerealWGamePayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Game real H5֧���ظ�
    // response GamerealWGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var GamerealWGamePayRespBody = (function () {
        function GamerealWGamePayRespBody() {
            this.payInfo = "";
        }
        GamerealWGamePayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // payInfo
            if (decoder_.eof())
                return true;
            this.payInfo = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GamerealWGamePayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GamerealWGamePayRespBody;
    }());
    message.GamerealWGamePayRespBody = GamerealWGamePayRespBody;
    __reflect(GamerealWGamePayRespBody.prototype, "message.GamerealWGamePayRespBody", ["aone.AoneBody"]);
    var GamerealWGamePayResponse = (function () {
        function GamerealWGamePayResponse() {
            this.header = new aone.AoneRespHeader(GamerealWGamePayResponse.ID);
            this.body = new GamerealWGamePayRespBody();
        }
        GamerealWGamePayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GamerealWGamePayResponse.prototype.to_bytes = function (encoder) { return false; };
        GamerealWGamePayResponse.ID = 1885;
        return GamerealWGamePayResponse;
    }());
    message.GamerealWGamePayResponse = GamerealWGamePayResponse;
    __reflect(GamerealWGamePayResponse.prototype, "message.GamerealWGamePayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // QQС��Ϸ֧������
    // �ӿ�: http post + json, url·��: /api/pay_qqgame.do
    // request QQGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var QQGamePayReqBody = (function () {
        function QQGamePayReqBody() {
            this.user_id = 0; // �û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.openid = "";
            this.session_key = "";
        }
        QQGamePayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QQGamePayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // openid
            encoder.write_string(this.openid);
            // session_key
            encoder.write_string(this.session_key);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QQGamePayReqBody;
    }());
    message.QQGamePayReqBody = QQGamePayReqBody;
    __reflect(QQGamePayReqBody.prototype, "message.QQGamePayReqBody", ["aone.AoneBody"]);
    var QQGamePayRequest = (function () {
        function QQGamePayRequest() {
            this.header = new aone.AoneReqHeader(QQGamePayRequest.ID);
            this.body = new QQGamePayReqBody();
        }
        QQGamePayRequest.prototype.parse_bytes = function (decoder) { return false; };
        QQGamePayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QQGamePayRequest.ID = 1886;
        return QQGamePayRequest;
    }());
    message.QQGamePayRequest = QQGamePayRequest;
    __reflect(QQGamePayRequest.prototype, "message.QQGamePayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // QQС��Ϸ֧���ظ�
    // response QQGamePay
    ////////////////////////////////////////////////////////////////////////////////
    var QQGamePayRespBody = (function () {
        function QQGamePayRespBody() {
            this.prepayId = ""; // ������
        }
        QQGamePayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // prepayId
            if (decoder_.eof())
                return true;
            this.prepayId = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QQGamePayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QQGamePayRespBody;
    }());
    message.QQGamePayRespBody = QQGamePayRespBody;
    __reflect(QQGamePayRespBody.prototype, "message.QQGamePayRespBody", ["aone.AoneBody"]);
    var QQGamePayResponse = (function () {
        function QQGamePayResponse() {
            this.header = new aone.AoneRespHeader(QQGamePayResponse.ID);
            this.body = new QQGamePayRespBody();
        }
        QQGamePayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QQGamePayResponse.prototype.to_bytes = function (encoder) { return false; };
        QQGamePayResponse.ID = 1887;
        return QQGamePayResponse;
    }());
    message.QQGamePayResponse = QQGamePayResponse;
    __reflect(QQGamePayResponse.prototype, "message.QQGamePayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����Ϸ(hortor)֧������
    // �ӿ�: http post + json, url·��: /api/pay_hortor.do
    // request HortorPay
    ////////////////////////////////////////////////////////////////////////////////
    var HortorPayReqBody = (function () {
        function HortorPayReqBody() {
            this.user_id = 0; // aone�û�ID
            this.hortor_user_id = ""; // hortor�û�ID
            this.product_id = ""; // ��ƷΨһID(������com.aonesoft.zqgame.item1������ָ��Ʒ������ȷ���Ŀ��ÿ�)
            this.product_quantity = 0; // ��Ʒ����
            this.cp_role_id = ""; // cp ��ɫID
            this.cp_group_id = ""; // cp ����ID
            this.cp_ext = ""; // ������ʱ������������չ���ֶΣ��ص�ʱԭ������(�޳�255�ֽ�)
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
        }
        HortorPayReqBody.prototype.parse_bytes = function (decoder) { return false; };
        HortorPayReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // hortor_user_id
            encoder.write_string(this.hortor_user_id);
            // product_id
            encoder.write_string(this.product_id);
            // product_quantity
            encoder.write_fixuint32(this.product_quantity);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_ext
            encoder.write_string(this.cp_ext);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return HortorPayReqBody;
    }());
    message.HortorPayReqBody = HortorPayReqBody;
    __reflect(HortorPayReqBody.prototype, "message.HortorPayReqBody", ["aone.AoneBody"]);
    var HortorPayRequest = (function () {
        function HortorPayRequest() {
            this.header = new aone.AoneReqHeader(HortorPayRequest.ID);
            this.body = new HortorPayReqBody();
        }
        HortorPayRequest.prototype.parse_bytes = function (decoder) { return false; };
        HortorPayRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        HortorPayRequest.ID = 1888;
        return HortorPayRequest;
    }());
    message.HortorPayRequest = HortorPayRequest;
    __reflect(HortorPayRequest.prototype, "message.HortorPayRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����Ϸ(hortor)֧���ظ�
    // response HortorPay
    ////////////////////////////////////////////////////////////////////////////////
    var HortorPayRespBody = (function () {
        function HortorPayRespBody() {
            this.prepayId = ""; // aone������
            this.order_id = ""; // hortor������
            this.app_id = ""; // hortor appid
            this.timestamp = ""; // hortor timestamp
            this.nonce_str = ""; // hortor nonce_str
            this.package = ""; // hortor package
            this.sign_type = ""; // hortor sign_type
            this.pay_sign = ""; // hortor pay_sign
        }
        HortorPayRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // prepayId
            if (decoder_.eof())
                return true;
            this.prepayId = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // order_id
            if (decoder_.eof())
                return true;
            this.order_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // app_id
            if (decoder_.eof())
                return true;
            this.app_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // timestamp
            if (decoder_.eof())
                return true;
            this.timestamp = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // nonce_str
            if (decoder_.eof())
                return true;
            this.nonce_str = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // package
            if (decoder_.eof())
                return true;
            this.package = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // sign_type
            if (decoder_.eof())
                return true;
            this.sign_type = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_sign
            if (decoder_.eof())
                return true;
            this.pay_sign = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        HortorPayRespBody.prototype.to_bytes = function (encoder) { return false; };
        return HortorPayRespBody;
    }());
    message.HortorPayRespBody = HortorPayRespBody;
    __reflect(HortorPayRespBody.prototype, "message.HortorPayRespBody", ["aone.AoneBody"]);
    var HortorPayResponse = (function () {
        function HortorPayResponse() {
            this.header = new aone.AoneRespHeader(HortorPayResponse.ID);
            this.body = new HortorPayRespBody();
        }
        HortorPayResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        HortorPayResponse.prototype.to_bytes = function (encoder) { return false; };
        HortorPayResponse.ID = 1889;
        return HortorPayResponse;
    }());
    message.HortorPayResponse = HortorPayResponse;
    __reflect(HortorPayResponse.prototype, "message.HortorPayResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////
    // �ʼ������ţ��������
    // �����ʼ�����
    // �ӿ�1: http post + json��url·����/api/send_mail.do?appid=xxx&sign=xxxx
    // request SendMail
    ////////////////////////////////////////////////////////////////////////////////
    var SendMailReqBody = (function () {
        function SendMailReqBody() {
            this.recipients = []; // �ʼ��������б�(�����ʼ���ַ)
            this.subject = ""; // �ʼ�����
            this.content = ""; // �ʼ�����(text/html;charset=utf-8)
            this.timeout = 0; // ��ʱʱ��(��ѡ����λ���룬Ϊ0����ⳬʱ�������Ŷ�ʱ������ָ��ʱ���Զ�����)
        }
        SendMailReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SendMailReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // recipients
            encoder.write_string_vector(this.recipients);
            // subject
            encoder.write_string(this.subject);
            // content
            encoder.write_string(this.content);
            // timeout
            encoder.write_fixuint32(this.timeout);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SendMailReqBody;
    }());
    message.SendMailReqBody = SendMailReqBody;
    __reflect(SendMailReqBody.prototype, "message.SendMailReqBody", ["aone.AoneBody"]);
    var SendMailRequest = (function () {
        function SendMailRequest() {
            this.header = new aone.AoneReqHeader(SendMailRequest.ID);
            this.body = new SendMailReqBody();
        }
        SendMailRequest.prototype.parse_bytes = function (decoder) { return false; };
        SendMailRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SendMailRequest.ID = 1900;
        return SendMailRequest;
    }());
    message.SendMailRequest = SendMailRequest;
    __reflect(SendMailRequest.prototype, "message.SendMailRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����ʼ��ظ�
    // response SendMail
    ////////////////////////////////////////////////////////////////////////////////
    var SendMailRespBody = (function () {
        function SendMailRespBody() {
        }
        SendMailRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SendMailRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SendMailRespBody;
    }());
    message.SendMailRespBody = SendMailRespBody;
    __reflect(SendMailRespBody.prototype, "message.SendMailRespBody", ["aone.AoneBody"]);
    var SendMailResponse = (function () {
        function SendMailResponse() {
            this.header = new aone.AoneRespHeader(SendMailResponse.ID);
            this.body = new SendMailRespBody();
        }
        SendMailResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SendMailResponse.prototype.to_bytes = function (encoder) { return false; };
        SendMailResponse.ID = 1901;
        return SendMailResponse;
    }());
    message.SendMailResponse = SendMailResponse;
    __reflect(SendMailResponse.prototype, "message.SendMailResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���Ͷ�������
    // �ӿ�1: http post + json��url·����/api/send_sms.do?appid=xxx&sign=xxxx
    // request SendSMS
    ////////////////////////////////////////////////////////////////////////////////
    var SendSMSReqBody = (function () {
        function SendSMSReqBody() {
            this.phones = []; // Ҫ�������ֻ����б�
            this.content = ""; // ��������
            this.timeout = 0; // ��ʱʱ��(��ѡ����λ���룬Ϊ0����ⳬʱ�������Ŷ�ʱ������ָ��ʱ���Զ�����)
            this.selected = 0; // ѡ����ŷ�����
        }
        SendSMSReqBody.prototype.parse_bytes = function (decoder) { return false; };
        SendSMSReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // phones
            encoder.write_string_vector(this.phones);
            // content
            encoder.write_string(this.content);
            // timeout
            encoder.write_fixuint32(this.timeout);
            // selected
            encoder.write_fixuint32(this.selected);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SendSMSReqBody;
    }());
    message.SendSMSReqBody = SendSMSReqBody;
    __reflect(SendSMSReqBody.prototype, "message.SendSMSReqBody", ["aone.AoneBody"]);
    var SendSMSRequest = (function () {
        function SendSMSRequest() {
            this.header = new aone.AoneReqHeader(SendSMSRequest.ID);
            this.body = new SendSMSReqBody();
        }
        SendSMSRequest.prototype.parse_bytes = function (decoder) { return false; };
        SendSMSRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        SendSMSRequest.ID = 1902;
        return SendSMSRequest;
    }());
    message.SendSMSRequest = SendSMSRequest;
    __reflect(SendSMSRequest.prototype, "message.SendSMSRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���Ͷ��Żظ�
    // response SendSMS
    ////////////////////////////////////////////////////////////////////////////////
    var SendSMSRespBody = (function () {
        function SendSMSRespBody() {
        }
        SendSMSRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        SendSMSRespBody.prototype.to_bytes = function (encoder) { return false; };
        return SendSMSRespBody;
    }());
    message.SendSMSRespBody = SendSMSRespBody;
    __reflect(SendSMSRespBody.prototype, "message.SendSMSRespBody", ["aone.AoneBody"]);
    var SendSMSResponse = (function () {
        function SendSMSResponse() {
            this.header = new aone.AoneRespHeader(SendSMSResponse.ID);
            this.body = new SendSMSRespBody();
        }
        SendSMSResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        SendSMSResponse.prototype.to_bytes = function (encoder) { return false; };
        SendSMSResponse.ID = 1903;
        return SendSMSResponse;
    }());
    message.SendSMSResponse = SendSMSResponse;
    __reflect(SendSMSResponse.prototype, "message.SendSMSResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ָ�����豸(�б�)������Ϣ����
    // �ӿ�1: http post + json��url·����/api/push_message.do?appid=xxx&sign=xxxx
    // request PushMessage
    ////////////////////////////////////////////////////////////////////////////////
    var PushMessageReqBody = (function () {
        function PushMessageReqBody() {
            this.tokens = []; // �豸��֤���б�(����Ϊ��)
            this.title = ""; // ����
            this.content = ""; // ����
            this.timeout = 0; // ��ʱʱ��(��ѡ����λ���룬Ϊ0����ⳬʱ�������Ŷ�ʱ������ָ��ʱ���Զ�����)
            this.push_style = ""; // ���ͷ����(�����ͷ����)
            this.push_channel = ""; // ��������(�������������붨��)
            this.channel = ""; // ��������
        }
        PushMessageReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PushMessageReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // tokens
            encoder.write_string_vector(this.tokens);
            // title
            encoder.write_string(this.title);
            // content
            encoder.write_string(this.content);
            // timeout
            encoder.write_fixuint32(this.timeout);
            // push_style
            encoder.write_string(this.push_style);
            // push_channel
            encoder.write_string(this.push_channel);
            // channel
            encoder.write_string(this.channel);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PushMessageReqBody;
    }());
    message.PushMessageReqBody = PushMessageReqBody;
    __reflect(PushMessageReqBody.prototype, "message.PushMessageReqBody", ["aone.AoneBody"]);
    var PushMessageRequest = (function () {
        function PushMessageRequest() {
            this.header = new aone.AoneReqHeader(PushMessageRequest.ID);
            this.body = new PushMessageReqBody();
        }
        PushMessageRequest.prototype.parse_bytes = function (decoder) { return false; };
        PushMessageRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PushMessageRequest.ID = 1904;
        return PushMessageRequest;
    }());
    message.PushMessageRequest = PushMessageRequest;
    __reflect(PushMessageRequest.prototype, "message.PushMessageRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ָ�����豸(�б�)������Ϣ�ظ�
    // response PushMessage
    ////////////////////////////////////////////////////////////////////////////////
    var PushMessageRespBody = (function () {
        function PushMessageRespBody() {
        }
        PushMessageRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        PushMessageRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PushMessageRespBody;
    }());
    message.PushMessageRespBody = PushMessageRespBody;
    __reflect(PushMessageRespBody.prototype, "message.PushMessageRespBody", ["aone.AoneBody"]);
    var PushMessageResponse = (function () {
        function PushMessageResponse() {
            this.header = new aone.AoneRespHeader(PushMessageResponse.ID);
            this.body = new PushMessageRespBody();
        }
        PushMessageResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PushMessageResponse.prototype.to_bytes = function (encoder) { return false; };
        PushMessageResponse.ID = 1905;
        return PushMessageResponse;
    }());
    message.PushMessageResponse = PushMessageResponse;
    __reflect(PushMessageResponse.prototype, "message.PushMessageResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����ָ����ǩ���豸������Ϣ����
    // �ӿ�1: http post + json��url·����/api/push_tag_message.do?appid=xxx&sign=xxxx
    // request PushTagMessage
    ////////////////////////////////////////////////////////////////////////////////
    var PushTagMessageReqBody = (function () {
        function PushTagMessageReqBody() {
            this.tag = ""; // ��ǩ
            this.title = ""; // ����
            this.content = ""; // ����
            this.timeout = 0; // ��ʱʱ��(��ѡ����λ���룬Ϊ0����ⳬʱ�������Ŷ�ʱ������ָ��ʱ���Զ�����)
            this.push_style = ""; // ���ͷ����(�����ͷ����)
            this.push_channel = ""; // ��������(�������������붨��)
            this.channel = ""; // ��������
        }
        PushTagMessageReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PushTagMessageReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // tag
            encoder.write_string(this.tag);
            // title
            encoder.write_string(this.title);
            // content
            encoder.write_string(this.content);
            // timeout
            encoder.write_fixuint32(this.timeout);
            // push_style
            encoder.write_string(this.push_style);
            // push_channel
            encoder.write_string(this.push_channel);
            // channel
            encoder.write_string(this.channel);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PushTagMessageReqBody;
    }());
    message.PushTagMessageReqBody = PushTagMessageReqBody;
    __reflect(PushTagMessageReqBody.prototype, "message.PushTagMessageReqBody", ["aone.AoneBody"]);
    var PushTagMessageRequest = (function () {
        function PushTagMessageRequest() {
            this.header = new aone.AoneReqHeader(PushTagMessageRequest.ID);
            this.body = new PushTagMessageReqBody();
        }
        PushTagMessageRequest.prototype.parse_bytes = function (decoder) { return false; };
        PushTagMessageRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PushTagMessageRequest.ID = 1906;
        return PushTagMessageRequest;
    }());
    message.PushTagMessageRequest = PushTagMessageRequest;
    __reflect(PushTagMessageRequest.prototype, "message.PushTagMessageRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����ָ����ǩ���豸������Ϣ�ظ�
    // response PushTagMessage
    ////////////////////////////////////////////////////////////////////////////////
    var PushTagMessageRespBody = (function () {
        function PushTagMessageRespBody() {
        }
        PushTagMessageRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        PushTagMessageRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PushTagMessageRespBody;
    }());
    message.PushTagMessageRespBody = PushTagMessageRespBody;
    __reflect(PushTagMessageRespBody.prototype, "message.PushTagMessageRespBody", ["aone.AoneBody"]);
    var PushTagMessageResponse = (function () {
        function PushTagMessageResponse() {
            this.header = new aone.AoneRespHeader(PushTagMessageResponse.ID);
            this.body = new PushTagMessageRespBody();
        }
        PushTagMessageResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PushTagMessageResponse.prototype.to_bytes = function (encoder) { return false; };
        PushTagMessageResponse.ID = 1907;
        return PushTagMessageResponse;
    }());
    message.PushTagMessageResponse = PushTagMessageResponse;
    __reflect(PushTagMessageResponse.prototype, "message.PushTagMessageResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ָ��Ӧ�ù㲥��Ϣ����
    // �ӿ�1: http post + json��url·����/api/push_broadcast_message.do?appid=xxx&sign=xxxx
    // apns��֧�ֹ㲥
    // request PushBroadcastMessage
    ////////////////////////////////////////////////////////////////////////////////
    var PushBroadcastMessageReqBody = (function () {
        function PushBroadcastMessageReqBody() {
            this.title = ""; // ����
            this.content = ""; // ����
            this.timeout = 0; // ��ʱʱ��(��ѡ����λ���룬Ϊ0����ⳬʱ�������Ŷ�ʱ������ָ��ʱ���Զ�����)
            this.push_style = ""; // ���ͷ����(�����ͷ����)
            this.push_channel = ""; // ��������(�������������붨��)
            this.channel = ""; // ��������
        }
        PushBroadcastMessageReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PushBroadcastMessageReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // title
            encoder.write_string(this.title);
            // content
            encoder.write_string(this.content);
            // timeout
            encoder.write_fixuint32(this.timeout);
            // push_style
            encoder.write_string(this.push_style);
            // push_channel
            encoder.write_string(this.push_channel);
            // channel
            encoder.write_string(this.channel);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PushBroadcastMessageReqBody;
    }());
    message.PushBroadcastMessageReqBody = PushBroadcastMessageReqBody;
    __reflect(PushBroadcastMessageReqBody.prototype, "message.PushBroadcastMessageReqBody", ["aone.AoneBody"]);
    var PushBroadcastMessageRequest = (function () {
        function PushBroadcastMessageRequest() {
            this.header = new aone.AoneReqHeader(PushBroadcastMessageRequest.ID);
            this.body = new PushBroadcastMessageReqBody();
        }
        PushBroadcastMessageRequest.prototype.parse_bytes = function (decoder) { return false; };
        PushBroadcastMessageRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PushBroadcastMessageRequest.ID = 1908;
        return PushBroadcastMessageRequest;
    }());
    message.PushBroadcastMessageRequest = PushBroadcastMessageRequest;
    __reflect(PushBroadcastMessageRequest.prototype, "message.PushBroadcastMessageRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ָ��Ӧ�ù㲥��Ϣ�ظ�
    // response PushBroadcastMessage
    ////////////////////////////////////////////////////////////////////////////////
    var PushBroadcastMessageRespBody = (function () {
        function PushBroadcastMessageRespBody() {
        }
        PushBroadcastMessageRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        PushBroadcastMessageRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PushBroadcastMessageRespBody;
    }());
    message.PushBroadcastMessageRespBody = PushBroadcastMessageRespBody;
    __reflect(PushBroadcastMessageRespBody.prototype, "message.PushBroadcastMessageRespBody", ["aone.AoneBody"]);
    var PushBroadcastMessageResponse = (function () {
        function PushBroadcastMessageResponse() {
            this.header = new aone.AoneRespHeader(PushBroadcastMessageResponse.ID);
            this.body = new PushBroadcastMessageRespBody();
        }
        PushBroadcastMessageResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PushBroadcastMessageResponse.prototype.to_bytes = function (encoder) { return false; };
        PushBroadcastMessageResponse.ID = 1909;
        return PushBroadcastMessageResponse;
    }());
    message.PushBroadcastMessageResponse = PushBroadcastMessageResponse;
    __reflect(PushBroadcastMessageResponse.prototype, "message.PushBroadcastMessageResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡվ��ָ����ĳ����Ʒ����Ϣ����
    // �ӿ�: http post + json��url·����/api/query_product_info.do?appid=xxx&sign=xxxx
    // request QueryProductInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryProductInfoReqBody = (function () {
        function QueryProductInfoReqBody() {
            this.product_id = 0; //��ƷID
        }
        QueryProductInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryProductInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // product_id
            encoder.write_fixuint32(this.product_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryProductInfoReqBody;
    }());
    message.QueryProductInfoReqBody = QueryProductInfoReqBody;
    __reflect(QueryProductInfoReqBody.prototype, "message.QueryProductInfoReqBody", ["aone.AoneBody"]);
    var QueryProductInfoRequest = (function () {
        function QueryProductInfoRequest() {
            this.header = new aone.AoneReqHeader(QueryProductInfoRequest.ID);
            this.body = new QueryProductInfoReqBody();
        }
        QueryProductInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryProductInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryProductInfoRequest.ID = 1920;
        return QueryProductInfoRequest;
    }());
    message.QueryProductInfoRequest = QueryProductInfoRequest;
    __reflect(QueryProductInfoRequest.prototype, "message.QueryProductInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡվ��������Ϣ�ظ�
    // response QueryProductInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryProductInfoRespBody = (function () {
        function QueryProductInfoRespBody() {
            this.website_product = new message.WebsiteProductInfo(); // ��Ʒ���������б�
        }
        QueryProductInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // website_product
            if (decoder_.eof())
                return true;
            if (!this.website_product.parse_bytes(decoder_))
                return false;
            return true;
        };
        QueryProductInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryProductInfoRespBody;
    }());
    message.QueryProductInfoRespBody = QueryProductInfoRespBody;
    __reflect(QueryProductInfoRespBody.prototype, "message.QueryProductInfoRespBody", ["aone.AoneBody"]);
    var QueryProductInfoResponse = (function () {
        function QueryProductInfoResponse() {
            this.header = new aone.AoneRespHeader(QueryProductInfoResponse.ID);
            this.body = new QueryProductInfoRespBody();
        }
        QueryProductInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryProductInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryProductInfoResponse.ID = 1921;
        return QueryProductInfoResponse;
    }());
    message.QueryProductInfoResponse = QueryProductInfoResponse;
    __reflect(QueryProductInfoResponse.prototype, "message.QueryProductInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡָ��վ��Ĳ�Ʒ�б�����
    // �ӿ�: http post + json��url·����/api/query_website_product_list.do?appid=xxx&sign=xxxx
    // request QueryWebsiteProductList
    ////////////////////////////////////////////////////////////////////////////////
    var QueryWebsiteProductListReqBody = (function () {
        function QueryWebsiteProductListReqBody() {
        }
        QueryWebsiteProductListReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryWebsiteProductListReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryWebsiteProductListReqBody;
    }());
    message.QueryWebsiteProductListReqBody = QueryWebsiteProductListReqBody;
    __reflect(QueryWebsiteProductListReqBody.prototype, "message.QueryWebsiteProductListReqBody", ["aone.AoneBody"]);
    var QueryWebsiteProductListRequest = (function () {
        function QueryWebsiteProductListRequest() {
            this.header = new aone.AoneReqHeader(QueryWebsiteProductListRequest.ID);
            this.body = new QueryWebsiteProductListReqBody();
        }
        QueryWebsiteProductListRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryWebsiteProductListRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryWebsiteProductListRequest.ID = 1922;
        return QueryWebsiteProductListRequest;
    }());
    message.QueryWebsiteProductListRequest = QueryWebsiteProductListRequest;
    __reflect(QueryWebsiteProductListRequest.prototype, "message.QueryWebsiteProductListRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡվ��������Ϣ�ظ�
    // response QueryWebsiteProductList
    ////////////////////////////////////////////////////////////////////////////////
    var QueryWebsiteProductListRespBody = (function () {
        function QueryWebsiteProductListRespBody() {
            this.website_products = []; // ��Ʒid�б�
            this.channel_name = ""; // ������ӳ��
        }
        QueryWebsiteProductListRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // website_products
            if (decoder_.eof())
                return true;
            this.website_products = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            // channel_name
            if (decoder_.eof())
                return true;
            this.channel_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryWebsiteProductListRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryWebsiteProductListRespBody;
    }());
    message.QueryWebsiteProductListRespBody = QueryWebsiteProductListRespBody;
    __reflect(QueryWebsiteProductListRespBody.prototype, "message.QueryWebsiteProductListRespBody", ["aone.AoneBody"]);
    var QueryWebsiteProductListResponse = (function () {
        function QueryWebsiteProductListResponse() {
            this.header = new aone.AoneRespHeader(QueryWebsiteProductListResponse.ID);
            this.body = new QueryWebsiteProductListRespBody();
        }
        QueryWebsiteProductListResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryWebsiteProductListResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryWebsiteProductListResponse.ID = 1923;
        return QueryWebsiteProductListResponse;
    }());
    message.QueryWebsiteProductListResponse = QueryWebsiteProductListResponse;
    __reflect(QueryWebsiteProductListResponse.prototype, "message.QueryWebsiteProductListResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡ�����б�����
    // �ӿ�1: http post + json��url·����/api/query_channels.do
    // request QueryAppChannels
    ////////////////////////////////////////////////////////////////////////////////
    var QueryAppChannelsReqBody = (function () {
        function QueryAppChannelsReqBody() {
            this.appid = 0; // Ӧ��ID(������url�е�appid��Ȼ�Ϊ0��Ϊ0ʱȡ���������б�)
            this.is_use_alias = false; // �Ƿ�ʹ������ID����
        }
        QueryAppChannelsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryAppChannelsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // appid
            encoder.write_fixuint32(this.appid);
            // is_use_alias
            encoder.write_bool(this.is_use_alias);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryAppChannelsReqBody;
    }());
    message.QueryAppChannelsReqBody = QueryAppChannelsReqBody;
    __reflect(QueryAppChannelsReqBody.prototype, "message.QueryAppChannelsReqBody", ["aone.AoneBody"]);
    var QueryAppChannelsRequest = (function () {
        function QueryAppChannelsRequest() {
            this.header = new aone.AoneReqHeader(QueryAppChannelsRequest.ID);
            this.body = new QueryAppChannelsReqBody();
        }
        QueryAppChannelsRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryAppChannelsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryAppChannelsRequest.ID = 1950;
        return QueryAppChannelsRequest;
    }());
    message.QueryAppChannelsRequest = QueryAppChannelsRequest;
    __reflect(QueryAppChannelsRequest.prototype, "message.QueryAppChannelsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡ�����б��ظ�
    // response QueryAppChannels
    ////////////////////////////////////////////////////////////////////////////////
    var QueryAppChannelsRespBody = (function () {
        function QueryAppChannelsRespBody() {
            this.channels = []; // �����б�
        }
        QueryAppChannelsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // channels
            if (decoder_.eof())
                return true;
            var channels_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channels_count; i++) {
                this.channels.push(new message.KVPair());
                if (!this.channels[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryAppChannelsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryAppChannelsRespBody;
    }());
    message.QueryAppChannelsRespBody = QueryAppChannelsRespBody;
    __reflect(QueryAppChannelsRespBody.prototype, "message.QueryAppChannelsRespBody", ["aone.AoneBody"]);
    var QueryAppChannelsResponse = (function () {
        function QueryAppChannelsResponse() {
            this.header = new aone.AoneRespHeader(QueryAppChannelsResponse.ID);
            this.body = new QueryAppChannelsRespBody();
        }
        QueryAppChannelsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryAppChannelsResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryAppChannelsResponse.ID = 1951;
        return QueryAppChannelsResponse;
    }());
    message.QueryAppChannelsResponse = QueryAppChannelsResponse;
    __reflect(QueryAppChannelsResponse.prototype, "message.QueryAppChannelsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡ�����б�����
    // �ӿ�1: http post + json��url·����/api/query_langs.do
    // request QueryAppLangs
    ////////////////////////////////////////////////////////////////////////////////
    var QueryAppLangsReqBody = (function () {
        function QueryAppLangsReqBody() {
            this.appid = 0; // Ӧ��ID(������url�е�appid��Ȼ�Ϊ0��Ϊ0ʱȡ���������б�)
        }
        QueryAppLangsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryAppLangsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // appid
            encoder.write_fixuint32(this.appid);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryAppLangsReqBody;
    }());
    message.QueryAppLangsReqBody = QueryAppLangsReqBody;
    __reflect(QueryAppLangsReqBody.prototype, "message.QueryAppLangsReqBody", ["aone.AoneBody"]);
    var QueryAppLangsRequest = (function () {
        function QueryAppLangsRequest() {
            this.header = new aone.AoneReqHeader(QueryAppLangsRequest.ID);
            this.body = new QueryAppLangsReqBody();
        }
        QueryAppLangsRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryAppLangsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryAppLangsRequest.ID = 1952;
        return QueryAppLangsRequest;
    }());
    message.QueryAppLangsRequest = QueryAppLangsRequest;
    __reflect(QueryAppLangsRequest.prototype, "message.QueryAppLangsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡ�����б��ظ�
    // response QueryAppLangs
    ////////////////////////////////////////////////////////////////////////////////
    var QueryAppLangsRespBody = (function () {
        function QueryAppLangsRespBody() {
            this.langs = []; // �����б�(���� -- ����)
        }
        QueryAppLangsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // langs
            if (decoder_.eof())
                return true;
            var langs_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < langs_count; i++) {
                this.langs.push(new message.KVPair());
                if (!this.langs[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryAppLangsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryAppLangsRespBody;
    }());
    message.QueryAppLangsRespBody = QueryAppLangsRespBody;
    __reflect(QueryAppLangsRespBody.prototype, "message.QueryAppLangsRespBody", ["aone.AoneBody"]);
    var QueryAppLangsResponse = (function () {
        function QueryAppLangsResponse() {
            this.header = new aone.AoneRespHeader(QueryAppLangsResponse.ID);
            this.body = new QueryAppLangsRespBody();
        }
        QueryAppLangsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryAppLangsResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryAppLangsResponse.ID = 1953;
        return QueryAppLangsResponse;
    }());
    message.QueryAppLangsResponse = QueryAppLangsResponse;
    __reflect(QueryAppLangsResponse.prototype, "message.QueryAppLangsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡ��Ʒ�б�����
    // channel: Ϊ��ʱȡ��Ӧ��������Ʒ������ֻȡ���ָ���������������Ʒ��������Ч���Ӧ��δ���������ʱ������Ʒ�б�Ϊ��
    // �ӿ�1: http post + json��url·����/api/query_products.do?appid=xxx
    // request QueryAppProducts
    ////////////////////////////////////////////////////////////////////////////////
    var QueryAppProductsReqBody = (function () {
        function QueryAppProductsReqBody() {
            this.channel = ""; // ����ID
        }
        QueryAppProductsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryAppProductsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // channel
            encoder.write_string(this.channel);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryAppProductsReqBody;
    }());
    message.QueryAppProductsReqBody = QueryAppProductsReqBody;
    __reflect(QueryAppProductsReqBody.prototype, "message.QueryAppProductsReqBody", ["aone.AoneBody"]);
    var QueryAppProductsRequest = (function () {
        function QueryAppProductsRequest() {
            this.header = new aone.AoneReqHeader(QueryAppProductsRequest.ID);
            this.body = new QueryAppProductsReqBody();
        }
        QueryAppProductsRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryAppProductsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryAppProductsRequest.ID = 1954;
        return QueryAppProductsRequest;
    }());
    message.QueryAppProductsRequest = QueryAppProductsRequest;
    __reflect(QueryAppProductsRequest.prototype, "message.QueryAppProductsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡ��Ʒ�б��ظ�
    // response QueryAppProducts
    ////////////////////////////////////////////////////////////////////////////////
    var QueryAppProductsRespBody = (function () {
        function QueryAppProductsRespBody() {
            this.products = []; // ��Ʒ�б�
            this.channel_products_ext = []; // ����֧����Ʒ�б���չ
        }
        QueryAppProductsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // products
            if (decoder_.eof())
                return true;
            var products_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < products_count; i++) {
                this.products.push(new message.PayProductInfo());
                if (!this.products[i].parse_bytes(decoder_))
                    return false;
            }
            // channel_products_ext
            if (decoder_.eof())
                return true;
            var channel_products_ext_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channel_products_ext_count; i++) {
                this.channel_products_ext.push(new message.PayProductExtInfo());
                if (!this.channel_products_ext[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryAppProductsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryAppProductsRespBody;
    }());
    message.QueryAppProductsRespBody = QueryAppProductsRespBody;
    __reflect(QueryAppProductsRespBody.prototype, "message.QueryAppProductsRespBody", ["aone.AoneBody"]);
    var QueryAppProductsResponse = (function () {
        function QueryAppProductsResponse() {
            this.header = new aone.AoneRespHeader(QueryAppProductsResponse.ID);
            this.body = new QueryAppProductsRespBody();
        }
        QueryAppProductsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryAppProductsResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryAppProductsResponse.ID = 1955;
        return QueryAppProductsResponse;
    }());
    message.QueryAppProductsResponse = QueryAppProductsResponse;
    __reflect(QueryAppProductsResponse.prototype, "message.QueryAppProductsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ����֧������ǩ������
    // �ӿ�: http post + json��url·����/api/ipaynow/sign.do?appid=xxx&sign=xxxx
    // request IPayNowSign
    ////////////////////////////////////////////////////////////////////////////////
    var IPayNowSignReqBody = (function () {
        function IPayNowSignReqBody() {
            this.channel = ""; // ��������
            this.content = ""; // ��Ҫǩ��������
        }
        IPayNowSignReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IPayNowSignReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // channel
            encoder.write_string(this.channel);
            // content
            encoder.write_string(this.content);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IPayNowSignReqBody;
    }());
    message.IPayNowSignReqBody = IPayNowSignReqBody;
    __reflect(IPayNowSignReqBody.prototype, "message.IPayNowSignReqBody", ["aone.AoneBody"]);
    var IPayNowSignRequest = (function () {
        function IPayNowSignRequest() {
            this.header = new aone.AoneReqHeader(IPayNowSignRequest.ID);
            this.body = new IPayNowSignReqBody();
        }
        IPayNowSignRequest.prototype.parse_bytes = function (decoder) { return false; };
        IPayNowSignRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IPayNowSignRequest.ID = 1956;
        return IPayNowSignRequest;
    }());
    message.IPayNowSignRequest = IPayNowSignRequest;
    __reflect(IPayNowSignRequest.prototype, "message.IPayNowSignRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ����֧������ǩ���ظ�
    // response IPayNowSign
    ////////////////////////////////////////////////////////////////////////////////
    var IPayNowSignRespBody = (function () {
        function IPayNowSignRespBody() {
            this.sign_content = ""; // ����ǩ���������
        }
        IPayNowSignRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sign_content
            if (decoder_.eof())
                return true;
            this.sign_content = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        IPayNowSignRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IPayNowSignRespBody;
    }());
    message.IPayNowSignRespBody = IPayNowSignRespBody;
    __reflect(IPayNowSignRespBody.prototype, "message.IPayNowSignRespBody", ["aone.AoneBody"]);
    var IPayNowSignResponse = (function () {
        function IPayNowSignResponse() {
            this.header = new aone.AoneRespHeader(IPayNowSignResponse.ID);
            this.body = new IPayNowSignRespBody();
        }
        IPayNowSignResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IPayNowSignResponse.prototype.to_bytes = function (encoder) { return false; };
        IPayNowSignResponse.ID = 1957;
        return IPayNowSignResponse;
    }());
    message.IPayNowSignResponse = IPayNowSignResponse;
    __reflect(IPayNowSignResponse.prototype, "message.IPayNowSignResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ֧��������ǩ������
    // �ӿ�: http post + json��url·����/api/alipay/sign.do?appid=xxx&sign=xxxx
    // request AoneAlipaySign
    ////////////////////////////////////////////////////////////////////////////////
    var AoneAlipaySignReqBody = (function () {
        function AoneAlipaySignReqBody() {
            this.channel = ""; // ��������
            this.content = ""; // ��Ҫǩ��������
        }
        AoneAlipaySignReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneAlipaySignReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // channel
            encoder.write_string(this.channel);
            // content
            encoder.write_string(this.content);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneAlipaySignReqBody;
    }());
    message.AoneAlipaySignReqBody = AoneAlipaySignReqBody;
    __reflect(AoneAlipaySignReqBody.prototype, "message.AoneAlipaySignReqBody", ["aone.AoneBody"]);
    var AoneAlipaySignRequest = (function () {
        function AoneAlipaySignRequest() {
            this.header = new aone.AoneReqHeader(AoneAlipaySignRequest.ID);
            this.body = new AoneAlipaySignReqBody();
        }
        AoneAlipaySignRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneAlipaySignRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneAlipaySignRequest.ID = 1958;
        return AoneAlipaySignRequest;
    }());
    message.AoneAlipaySignRequest = AoneAlipaySignRequest;
    __reflect(AoneAlipaySignRequest.prototype, "message.AoneAlipaySignRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ֧��������ǩ���ظ�
    // response AoneAlipaySign
    ////////////////////////////////////////////////////////////////////////////////
    var AoneAlipaySignRespBody = (function () {
        function AoneAlipaySignRespBody() {
            this.sign_content = ""; // ����ǩ���������
        }
        AoneAlipaySignRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sign_content
            if (decoder_.eof())
                return true;
            this.sign_content = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneAlipaySignRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneAlipaySignRespBody;
    }());
    message.AoneAlipaySignRespBody = AoneAlipaySignRespBody;
    __reflect(AoneAlipaySignRespBody.prototype, "message.AoneAlipaySignRespBody", ["aone.AoneBody"]);
    var AoneAlipaySignResponse = (function () {
        function AoneAlipaySignResponse() {
            this.header = new aone.AoneRespHeader(AoneAlipaySignResponse.ID);
            this.body = new AoneAlipaySignRespBody();
        }
        AoneAlipaySignResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneAlipaySignResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneAlipaySignResponse.ID = 1959;
        return AoneAlipaySignResponse;
    }());
    message.AoneAlipaySignResponse = AoneAlipaySignResponse;
    __reflect(AoneAlipaySignResponse.prototype, "message.AoneAlipaySignResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ɫ������־��¼
    // request RecordRoleLogin
    ////////////////////////////////////////////////////////////////////////////////
    var RecordRoleLoginReqBody = (function () {
        function RecordRoleLoginReqBody() {
            this.user_id = 0; // �û�id
            this.group_id = ""; // ����id
            this.role_id = ""; // ��ɫid
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.group_name = ""; // ��������
            this.role_name = ""; // ������ɫ����
        }
        RecordRoleLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RecordRoleLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // group_id
            encoder.write_string(this.group_id);
            // role_id
            encoder.write_string(this.role_id);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // group_name
            encoder.write_string(this.group_name);
            // role_name
            encoder.write_string(this.role_name);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RecordRoleLoginReqBody;
    }());
    message.RecordRoleLoginReqBody = RecordRoleLoginReqBody;
    __reflect(RecordRoleLoginReqBody.prototype, "message.RecordRoleLoginReqBody", ["aone.AoneBody"]);
    var RecordRoleLoginRequest = (function () {
        function RecordRoleLoginRequest() {
            this.header = new aone.AoneReqHeader(RecordRoleLoginRequest.ID);
            this.body = new RecordRoleLoginReqBody();
        }
        RecordRoleLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        RecordRoleLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RecordRoleLoginRequest.ID = 1960;
        return RecordRoleLoginRequest;
    }());
    message.RecordRoleLoginRequest = RecordRoleLoginRequest;
    __reflect(RecordRoleLoginRequest.prototype, "message.RecordRoleLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ɫ������־��¼�ظ�
    // response RecordRoleLogin
    ////////////////////////////////////////////////////////////////////////////////
    var RecordRoleLoginRespBody = (function () {
        function RecordRoleLoginRespBody() {
        }
        RecordRoleLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        RecordRoleLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RecordRoleLoginRespBody;
    }());
    message.RecordRoleLoginRespBody = RecordRoleLoginRespBody;
    __reflect(RecordRoleLoginRespBody.prototype, "message.RecordRoleLoginRespBody", ["aone.AoneBody"]);
    var RecordRoleLoginResponse = (function () {
        function RecordRoleLoginResponse() {
            this.header = new aone.AoneRespHeader(RecordRoleLoginResponse.ID);
            this.body = new RecordRoleLoginRespBody();
        }
        RecordRoleLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RecordRoleLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        RecordRoleLoginResponse.ID = 1961;
        return RecordRoleLoginResponse;
    }());
    message.RecordRoleLoginResponse = RecordRoleLoginResponse;
    __reflect(RecordRoleLoginResponse.prototype, "message.RecordRoleLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ѯ������Ϣ
    // �ӿ�: http post + json��url·����/api/query_share_info.do
    // request QueryShareInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryShareInfoReqBody = (function () {
        function QueryShareInfoReqBody() {
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.code = ""; //  ������/������
        }
        QueryShareInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryShareInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // code
            encoder.write_string(this.code);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryShareInfoReqBody;
    }());
    message.QueryShareInfoReqBody = QueryShareInfoReqBody;
    __reflect(QueryShareInfoReqBody.prototype, "message.QueryShareInfoReqBody", ["aone.AoneBody"]);
    var QueryShareInfoRequest = (function () {
        function QueryShareInfoRequest() {
            this.header = new aone.AoneReqHeader(QueryShareInfoRequest.ID);
            this.body = new QueryShareInfoReqBody();
        }
        QueryShareInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryShareInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryShareInfoRequest.ID = 1962;
        return QueryShareInfoRequest;
    }());
    message.QueryShareInfoRequest = QueryShareInfoRequest;
    __reflect(QueryShareInfoRequest.prototype, "message.QueryShareInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // response QueryShareInfo
    ////////////////////////////////////////////////////////////////////////////////
    var QueryShareInfoRespBody = (function () {
        function QueryShareInfoRespBody() {
            this.url = "";
            this.user_data = ""; // �û�����
        }
        QueryShareInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // url
            if (decoder_.eof())
                return true;
            this.url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // user_data
            if (decoder_.eof())
                return true;
            this.user_data = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryShareInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryShareInfoRespBody;
    }());
    message.QueryShareInfoRespBody = QueryShareInfoRespBody;
    __reflect(QueryShareInfoRespBody.prototype, "message.QueryShareInfoRespBody", ["aone.AoneBody"]);
    var QueryShareInfoResponse = (function () {
        function QueryShareInfoResponse() {
            this.header = new aone.AoneRespHeader(QueryShareInfoResponse.ID);
            this.body = new QueryShareInfoRespBody();
        }
        QueryShareInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryShareInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryShareInfoResponse.ID = 1963;
        return QueryShareInfoResponse;
    }());
    message.QueryShareInfoResponse = QueryShareInfoResponse;
    __reflect(QueryShareInfoResponse.prototype, "message.QueryShareInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ����������Ϣ
    // �ӿ�: http post + json��url·����/api/publish_share_info.do
    // request PublishShareInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PublishShareInfoReqBody = (function () {
        function PublishShareInfoReqBody() {
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.user_data = "";
        }
        PublishShareInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        PublishShareInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // user_data
            encoder.write_string(this.user_data);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PublishShareInfoReqBody;
    }());
    message.PublishShareInfoReqBody = PublishShareInfoReqBody;
    __reflect(PublishShareInfoReqBody.prototype, "message.PublishShareInfoReqBody", ["aone.AoneBody"]);
    var PublishShareInfoRequest = (function () {
        function PublishShareInfoRequest() {
            this.header = new aone.AoneReqHeader(PublishShareInfoRequest.ID);
            this.body = new PublishShareInfoReqBody();
        }
        PublishShareInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        PublishShareInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        PublishShareInfoRequest.ID = 1964;
        return PublishShareInfoRequest;
    }());
    message.PublishShareInfoRequest = PublishShareInfoRequest;
    __reflect(PublishShareInfoRequest.prototype, "message.PublishShareInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // response PublishShareInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PublishShareInfoRespBody = (function () {
        function PublishShareInfoRespBody() {
            this.url = "";
        }
        PublishShareInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // url
            if (decoder_.eof())
                return true;
            this.url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PublishShareInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return PublishShareInfoRespBody;
    }());
    message.PublishShareInfoRespBody = PublishShareInfoRespBody;
    __reflect(PublishShareInfoRespBody.prototype, "message.PublishShareInfoRespBody", ["aone.AoneBody"]);
    var PublishShareInfoResponse = (function () {
        function PublishShareInfoResponse() {
            this.header = new aone.AoneRespHeader(PublishShareInfoResponse.ID);
            this.body = new PublishShareInfoRespBody();
        }
        PublishShareInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        PublishShareInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        PublishShareInfoResponse.ID = 1965;
        return PublishShareInfoResponse;
    }());
    message.PublishShareInfoResponse = PublishShareInfoResponse;
    __reflect(PublishShareInfoResponse.prototype, "message.PublishShareInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡaone_group_id����
    // �ӿ�: http post + json��url·����/api/xxx?appid=xxx&sign=xxxx
    // request QueryAoneGroupId
    ////////////////////////////////////////////////////////////////////////////////
    var QueryAoneGroupIdReqBody = (function () {
        function QueryAoneGroupIdReqBody() {
            this.app_id = 0;
            this.cp_group_id = "";
            this.cp_group_name = "";
        }
        QueryAoneGroupIdReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryAoneGroupIdReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // app_id
            encoder.write_fixuint32(this.app_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // cp_group_name
            encoder.write_string(this.cp_group_name);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryAoneGroupIdReqBody;
    }());
    message.QueryAoneGroupIdReqBody = QueryAoneGroupIdReqBody;
    __reflect(QueryAoneGroupIdReqBody.prototype, "message.QueryAoneGroupIdReqBody", ["aone.AoneBody"]);
    var QueryAoneGroupIdRequest = (function () {
        function QueryAoneGroupIdRequest() {
            this.header = new aone.AoneReqHeader(QueryAoneGroupIdRequest.ID);
            this.body = new QueryAoneGroupIdReqBody();
        }
        QueryAoneGroupIdRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryAoneGroupIdRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryAoneGroupIdRequest.ID = 1966;
        return QueryAoneGroupIdRequest;
    }());
    message.QueryAoneGroupIdRequest = QueryAoneGroupIdRequest;
    __reflect(QueryAoneGroupIdRequest.prototype, "message.QueryAoneGroupIdRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ȡվ��������Ϣ�ظ�
    // response QueryAoneGroupId
    ////////////////////////////////////////////////////////////////////////////////
    var QueryAoneGroupIdRespBody = (function () {
        function QueryAoneGroupIdRespBody() {
            this.aone_group_id = 0;
        }
        QueryAoneGroupIdRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // aone_group_id
            if (decoder_.eof())
                return true;
            this.aone_group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryAoneGroupIdRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryAoneGroupIdRespBody;
    }());
    message.QueryAoneGroupIdRespBody = QueryAoneGroupIdRespBody;
    __reflect(QueryAoneGroupIdRespBody.prototype, "message.QueryAoneGroupIdRespBody", ["aone.AoneBody"]);
    var QueryAoneGroupIdResponse = (function () {
        function QueryAoneGroupIdResponse() {
            this.header = new aone.AoneRespHeader(QueryAoneGroupIdResponse.ID);
            this.body = new QueryAoneGroupIdRespBody();
        }
        QueryAoneGroupIdResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryAoneGroupIdResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryAoneGroupIdResponse.ID = 1967;
        return QueryAoneGroupIdResponse;
    }());
    message.QueryAoneGroupIdResponse = QueryAoneGroupIdResponse;
    __reflect(QueryAoneGroupIdResponse.prototype, "message.QueryAoneGroupIdResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����������ǩ������
    // �ӿ�: http post + json��url·����/api/ceb_sign.do?appid=xxx&sign=xxxx
    // request AoneCEBSign
    ////////////////////////////////////////////////////////////////////////////////
    var AoneCEBSignReqBody = (function () {
        function AoneCEBSignReqBody() {
            this.appid = ""; // Ӧ��ID
            this.channel = ""; // ��������
            this.content = ""; // ��Ҫǩ��������
        }
        AoneCEBSignReqBody.prototype.parse_bytes = function (decoder) { return false; };
        AoneCEBSignReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // appid
            encoder.write_string(this.appid);
            // channel
            encoder.write_string(this.channel);
            // content
            encoder.write_string(this.content);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AoneCEBSignReqBody;
    }());
    message.AoneCEBSignReqBody = AoneCEBSignReqBody;
    __reflect(AoneCEBSignReqBody.prototype, "message.AoneCEBSignReqBody", ["aone.AoneBody"]);
    var AoneCEBSignRequest = (function () {
        function AoneCEBSignRequest() {
            this.header = new aone.AoneReqHeader(AoneCEBSignRequest.ID);
            this.body = new AoneCEBSignReqBody();
        }
        AoneCEBSignRequest.prototype.parse_bytes = function (decoder) { return false; };
        AoneCEBSignRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        AoneCEBSignRequest.ID = 1968;
        return AoneCEBSignRequest;
    }());
    message.AoneCEBSignRequest = AoneCEBSignRequest;
    __reflect(AoneCEBSignRequest.prototype, "message.AoneCEBSignRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �����������ǩ���ظ�
    // response AoneCEBSign
    ////////////////////////////////////////////////////////////////////////////////
    var AoneCEBSignRespBody = (function () {
        function AoneCEBSignRespBody() {
            this.sign_content = ""; // ����ǩ���������
        }
        AoneCEBSignRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // sign_content
            if (decoder_.eof())
                return true;
            this.sign_content = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AoneCEBSignRespBody.prototype.to_bytes = function (encoder) { return false; };
        return AoneCEBSignRespBody;
    }());
    message.AoneCEBSignRespBody = AoneCEBSignRespBody;
    __reflect(AoneCEBSignRespBody.prototype, "message.AoneCEBSignRespBody", ["aone.AoneBody"]);
    var AoneCEBSignResponse = (function () {
        function AoneCEBSignResponse() {
            this.header = new aone.AoneRespHeader(AoneCEBSignResponse.ID);
            this.body = new AoneCEBSignRespBody();
        }
        AoneCEBSignResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        AoneCEBSignResponse.prototype.to_bytes = function (encoder) { return false; };
        AoneCEBSignResponse.ID = 1969;
        return AoneCEBSignResponse;
    }());
    message.AoneCEBSignResponse = AoneCEBSignResponse;
    __reflect(AoneCEBSignResponse.prototype, "message.AoneCEBSignResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ѯӦ�����û��Ƿ�󶨹��ֻ�������
    // �ӿ�: http post + json��url·����/api/query_user_phone_bind.do?appid=xxx&sign=xxxx
    // request QueryUserPhoneBind
    ////////////////////////////////////////////////////////////////////////////////
    var QueryUserPhoneBindReqBody = (function () {
        function QueryUserPhoneBindReqBody() {
            this.user_id = 0; // �û�ID
        }
        QueryUserPhoneBindReqBody.prototype.parse_bytes = function (decoder) { return false; };
        QueryUserPhoneBindReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return QueryUserPhoneBindReqBody;
    }());
    message.QueryUserPhoneBindReqBody = QueryUserPhoneBindReqBody;
    __reflect(QueryUserPhoneBindReqBody.prototype, "message.QueryUserPhoneBindReqBody", ["aone.AoneBody"]);
    var QueryUserPhoneBindRequest = (function () {
        function QueryUserPhoneBindRequest() {
            this.header = new aone.AoneReqHeader(QueryUserPhoneBindRequest.ID);
            this.body = new QueryUserPhoneBindReqBody();
        }
        QueryUserPhoneBindRequest.prototype.parse_bytes = function (decoder) { return false; };
        QueryUserPhoneBindRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        QueryUserPhoneBindRequest.ID = 1970;
        return QueryUserPhoneBindRequest;
    }());
    message.QueryUserPhoneBindRequest = QueryUserPhoneBindRequest;
    __reflect(QueryUserPhoneBindRequest.prototype, "message.QueryUserPhoneBindRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ѯӦ�����û��Ƿ�󶨹��ֻ��Żظ�
    // response QueryUserPhoneBind
    ////////////////////////////////////////////////////////////////////////////////
    var QueryUserPhoneBindRespBody = (function () {
        function QueryUserPhoneBindRespBody() {
            this.is_bind = false; //true:�Ѱ�;false:δ��
            this.phone = ""; //�ֻ�����(�Ѱ�Ϊ�ֻ����룬δ��Ϊ��)
        }
        QueryUserPhoneBindRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // is_bind
            if (decoder_.eof())
                return true;
            this.is_bind = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // phone
            if (decoder_.eof())
                return true;
            this.phone = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        QueryUserPhoneBindRespBody.prototype.to_bytes = function (encoder) { return false; };
        return QueryUserPhoneBindRespBody;
    }());
    message.QueryUserPhoneBindRespBody = QueryUserPhoneBindRespBody;
    __reflect(QueryUserPhoneBindRespBody.prototype, "message.QueryUserPhoneBindRespBody", ["aone.AoneBody"]);
    var QueryUserPhoneBindResponse = (function () {
        function QueryUserPhoneBindResponse() {
            this.header = new aone.AoneRespHeader(QueryUserPhoneBindResponse.ID);
            this.body = new QueryUserPhoneBindRespBody();
        }
        QueryUserPhoneBindResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        QueryUserPhoneBindResponse.prototype.to_bytes = function (encoder) { return false; };
        QueryUserPhoneBindResponse.ID = 1971;
        return QueryUserPhoneBindResponse;
    }());
    message.QueryUserPhoneBindResponse = QueryUserPhoneBindResponse;
    __reflect(QueryUserPhoneBindResponse.prototype, "message.QueryUserPhoneBindResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���������֤������
    // �ӿ�: http post + json��url·����/api/apply_code_by_phone.do?appid=xxx&sign=xxxx
    // request ApplyCodeByPhone
    ////////////////////////////////////////////////////////////////////////////////
    var ApplyCodeByPhoneReqBody = (function () {
        function ApplyCodeByPhoneReqBody() {
            this.type = ""; // ������֤������ (bind:��;...)
            this.phone = ""; // �ֻ�����(���ն�����֤����)
            this.user_id = 0; // �û�ID
        }
        ApplyCodeByPhoneReqBody.prototype.parse_bytes = function (decoder) { return false; };
        ApplyCodeByPhoneReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_string(this.type);
            // phone
            encoder.write_string(this.phone);
            // user_id
            encoder.write_fixuint32(this.user_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ApplyCodeByPhoneReqBody;
    }());
    message.ApplyCodeByPhoneReqBody = ApplyCodeByPhoneReqBody;
    __reflect(ApplyCodeByPhoneReqBody.prototype, "message.ApplyCodeByPhoneReqBody", ["aone.AoneBody"]);
    var ApplyCodeByPhoneRequest = (function () {
        function ApplyCodeByPhoneRequest() {
            this.header = new aone.AoneReqHeader(ApplyCodeByPhoneRequest.ID);
            this.body = new ApplyCodeByPhoneReqBody();
        }
        ApplyCodeByPhoneRequest.prototype.parse_bytes = function (decoder) { return false; };
        ApplyCodeByPhoneRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        ApplyCodeByPhoneRequest.ID = 1972;
        return ApplyCodeByPhoneRequest;
    }());
    message.ApplyCodeByPhoneRequest = ApplyCodeByPhoneRequest;
    __reflect(ApplyCodeByPhoneRequest.prototype, "message.ApplyCodeByPhoneRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ���������֤��ظ�
    // response ApplyCodeByPhone
    ////////////////////////////////////////////////////////////////////////////////
    var ApplyCodeByPhoneRespBody = (function () {
        function ApplyCodeByPhoneRespBody() {
        }
        ApplyCodeByPhoneRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        ApplyCodeByPhoneRespBody.prototype.to_bytes = function (encoder) { return false; };
        return ApplyCodeByPhoneRespBody;
    }());
    message.ApplyCodeByPhoneRespBody = ApplyCodeByPhoneRespBody;
    __reflect(ApplyCodeByPhoneRespBody.prototype, "message.ApplyCodeByPhoneRespBody", ["aone.AoneBody"]);
    var ApplyCodeByPhoneResponse = (function () {
        function ApplyCodeByPhoneResponse() {
            this.header = new aone.AoneRespHeader(ApplyCodeByPhoneResponse.ID);
            this.body = new ApplyCodeByPhoneRespBody();
        }
        ApplyCodeByPhoneResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ApplyCodeByPhoneResponse.prototype.to_bytes = function (encoder) { return false; };
        ApplyCodeByPhoneResponse.ID = 1973;
        return ApplyCodeByPhoneResponse;
    }());
    message.ApplyCodeByPhoneResponse = ApplyCodeByPhoneResponse;
    __reflect(ApplyCodeByPhoneResponse.prototype, "message.ApplyCodeByPhoneResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��֤������֤������
    // �ӿ�: http post + json��url·����/api/verify_code.do?appid=xxx&sign=xxxx
    // request VerifyCode
    ////////////////////////////////////////////////////////////////////////////////
    var VerifyCodeReqBody = (function () {
        function VerifyCodeReqBody() {
            this.type = ""; //������֤������ (bind:��;...)
            this.phone = ""; //�ֻ�����(���ն�����֤����)
            this.code = ""; //������֤��
        }
        VerifyCodeReqBody.prototype.parse_bytes = function (decoder) { return false; };
        VerifyCodeReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // type
            encoder.write_string(this.type);
            // phone
            encoder.write_string(this.phone);
            // code
            encoder.write_string(this.code);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return VerifyCodeReqBody;
    }());
    message.VerifyCodeReqBody = VerifyCodeReqBody;
    __reflect(VerifyCodeReqBody.prototype, "message.VerifyCodeReqBody", ["aone.AoneBody"]);
    var VerifyCodeRequest = (function () {
        function VerifyCodeRequest() {
            this.header = new aone.AoneReqHeader(VerifyCodeRequest.ID);
            this.body = new VerifyCodeReqBody();
        }
        VerifyCodeRequest.prototype.parse_bytes = function (decoder) { return false; };
        VerifyCodeRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        VerifyCodeRequest.ID = 1974;
        return VerifyCodeRequest;
    }());
    message.VerifyCodeRequest = VerifyCodeRequest;
    __reflect(VerifyCodeRequest.prototype, "message.VerifyCodeRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��֤������֤��ظ�
    // response VerifyCode
    ////////////////////////////////////////////////////////////////////////////////
    var VerifyCodeRespBody = (function () {
        function VerifyCodeRespBody() {
            this.is_success = false; //true:��֤ͨ��;false:��֤δͨ��
        }
        VerifyCodeRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // is_success
            if (decoder_.eof())
                return true;
            this.is_success = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        VerifyCodeRespBody.prototype.to_bytes = function (encoder) { return false; };
        return VerifyCodeRespBody;
    }());
    message.VerifyCodeRespBody = VerifyCodeRespBody;
    __reflect(VerifyCodeRespBody.prototype, "message.VerifyCodeRespBody", ["aone.AoneBody"]);
    var VerifyCodeResponse = (function () {
        function VerifyCodeResponse() {
            this.header = new aone.AoneRespHeader(VerifyCodeResponse.ID);
            this.body = new VerifyCodeRespBody();
        }
        VerifyCodeResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        VerifyCodeResponse.prototype.to_bytes = function (encoder) { return false; };
        VerifyCodeResponse.ID = 1975;
        return VerifyCodeResponse;
    }());
    message.VerifyCodeResponse = VerifyCodeResponse;
    __reflect(VerifyCodeResponse.prototype, "message.VerifyCodeResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �豸�����־��¼
    // request RecordDevicePoint
    ////////////////////////////////////////////////////////////////////////////////
    var RecordDevicePointReqBody = (function () {
        function RecordDevicePointReqBody() {
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.sdk_point = 0; // �����Ϣ
            this.is_first_login = false; // �Ƿ��һ�ε�½
        }
        RecordDevicePointReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RecordDevicePointReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // sdk_point
            encoder.write_fixuint32(this.sdk_point);
            // is_first_login
            encoder.write_bool(this.is_first_login);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RecordDevicePointReqBody;
    }());
    message.RecordDevicePointReqBody = RecordDevicePointReqBody;
    __reflect(RecordDevicePointReqBody.prototype, "message.RecordDevicePointReqBody", ["aone.AoneBody"]);
    var RecordDevicePointRequest = (function () {
        function RecordDevicePointRequest() {
            this.header = new aone.AoneReqHeader(RecordDevicePointRequest.ID);
            this.body = new RecordDevicePointReqBody();
        }
        RecordDevicePointRequest.prototype.parse_bytes = function (decoder) { return false; };
        RecordDevicePointRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RecordDevicePointRequest.ID = 1976;
        return RecordDevicePointRequest;
    }());
    message.RecordDevicePointRequest = RecordDevicePointRequest;
    __reflect(RecordDevicePointRequest.prototype, "message.RecordDevicePointRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // �豸�����־��¼�ظ�
    // response RecordDevicePoint
    ////////////////////////////////////////////////////////////////////////////////
    var RecordDevicePointRespBody = (function () {
        function RecordDevicePointRespBody() {
        }
        RecordDevicePointRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        RecordDevicePointRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RecordDevicePointRespBody;
    }());
    message.RecordDevicePointRespBody = RecordDevicePointRespBody;
    __reflect(RecordDevicePointRespBody.prototype, "message.RecordDevicePointRespBody", ["aone.AoneBody"]);
    var RecordDevicePointResponse = (function () {
        function RecordDevicePointResponse() {
            this.header = new aone.AoneRespHeader(RecordDevicePointResponse.ID);
            this.body = new RecordDevicePointRespBody();
        }
        RecordDevicePointResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RecordDevicePointResponse.prototype.to_bytes = function (encoder) { return false; };
        RecordDevicePointResponse.ID = 1977;
        return RecordDevicePointResponse;
    }());
    message.RecordDevicePointResponse = RecordDevicePointResponse;
    __reflect(RecordDevicePointResponse.prototype, "message.RecordDevicePointResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ɫ�����־��¼
    // request RecordRolePoint
    ////////////////////////////////////////////////////////////////////////////////
    var RecordRolePointReqBody = (function () {
        function RecordRolePointReqBody() {
            this.user_id = 0; // �û�id
            this.cp_role_id = ""; // CP��ɫID��֧�ַ����֣�
            this.cp_role_name = ""; // CP��ɫ��
            this.cp_group_id = ""; // cp����ID
            this.device_info = new message.DeviceInfo(); // �豸��Ϣ
            this.version_info = new message.AppVersionInfo(); // Ӧ�ó���汾��Ϣ
            this.game_point = 0; // �����Ϣ
        }
        RecordRolePointReqBody.prototype.parse_bytes = function (decoder) { return false; };
        RecordRolePointReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // cp_role_id
            encoder.write_string(this.cp_role_id);
            // cp_role_name
            encoder.write_string(this.cp_role_name);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            // game_point
            encoder.write_fixuint32(this.game_point);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RecordRolePointReqBody;
    }());
    message.RecordRolePointReqBody = RecordRolePointReqBody;
    __reflect(RecordRolePointReqBody.prototype, "message.RecordRolePointReqBody", ["aone.AoneBody"]);
    var RecordRolePointRequest = (function () {
        function RecordRolePointRequest() {
            this.header = new aone.AoneReqHeader(RecordRolePointRequest.ID);
            this.body = new RecordRolePointReqBody();
        }
        RecordRolePointRequest.prototype.parse_bytes = function (decoder) { return false; };
        RecordRolePointRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        RecordRolePointRequest.ID = 1978;
        return RecordRolePointRequest;
    }());
    message.RecordRolePointRequest = RecordRolePointRequest;
    __reflect(RecordRolePointRequest.prototype, "message.RecordRolePointRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // ��ɫ�����־��¼�ظ�
    // response RecordRolePoint
    ////////////////////////////////////////////////////////////////////////////////
    var RecordRolePointRespBody = (function () {
        function RecordRolePointRespBody() {
        }
        RecordRolePointRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        RecordRolePointRespBody.prototype.to_bytes = function (encoder) { return false; };
        return RecordRolePointRespBody;
    }());
    message.RecordRolePointRespBody = RecordRolePointRespBody;
    __reflect(RecordRolePointRespBody.prototype, "message.RecordRolePointRespBody", ["aone.AoneBody"]);
    var RecordRolePointResponse = (function () {
        function RecordRolePointResponse() {
            this.header = new aone.AoneRespHeader(RecordRolePointResponse.ID);
            this.body = new RecordRolePointRespBody();
        }
        RecordRolePointResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        RecordRolePointResponse.prototype.to_bytes = function (encoder) { return false; };
        RecordRolePointResponse.ID = 1979;
        return RecordRolePointResponse;
    }());
    message.RecordRolePointResponse = RecordRolePointResponse;
    __reflect(RecordRolePointResponse.prototype, "message.RecordRolePointResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(QuickLoginRequest.ID, function () { return new QuickLoginRequest(); });
    aone.MessageFactory.getInstance().register(QuickLoginResponse.ID, function () { return new QuickLoginResponse(); });
    aone.MessageFactory.getInstance().register(SDKLoginRequest.ID, function () { return new SDKLoginRequest(); });
    aone.MessageFactory.getInstance().register(SDKLoginResponse.ID, function () { return new SDKLoginResponse(); });
    aone.MessageFactory.getInstance().register(OAuthLoginRequest.ID, function () { return new OAuthLoginRequest(); });
    aone.MessageFactory.getInstance().register(OAuthLoginResponse.ID, function () { return new OAuthLoginResponse(); });
    aone.MessageFactory.getInstance().register(OAuthBindRequest.ID, function () { return new OAuthBindRequest(); });
    aone.MessageFactory.getInstance().register(OAuthBindResponse.ID, function () { return new OAuthBindResponse(); });
    aone.MessageFactory.getInstance().register(AoneBindRequest.ID, function () { return new AoneBindRequest(); });
    aone.MessageFactory.getInstance().register(AoneBindResponse.ID, function () { return new AoneBindResponse(); });
    aone.MessageFactory.getInstance().register(AoneRegisterRequest.ID, function () { return new AoneRegisterRequest(); });
    aone.MessageFactory.getInstance().register(AoneRegisterResponse.ID, function () { return new AoneRegisterResponse(); });
    aone.MessageFactory.getInstance().register(AoneLoginRequest.ID, function () { return new AoneLoginRequest(); });
    aone.MessageFactory.getInstance().register(AoneLoginResponse.ID, function () { return new AoneLoginResponse(); });
    aone.MessageFactory.getInstance().register(AoneChangePasswordRequest.ID, function () { return new AoneChangePasswordRequest(); });
    aone.MessageFactory.getInstance().register(AoneChangePasswordResponse.ID, function () { return new AoneChangePasswordResponse(); });
    aone.MessageFactory.getInstance().register(ApplyTokenByPhoneRequest.ID, function () { return new ApplyTokenByPhoneRequest(); });
    aone.MessageFactory.getInstance().register(ApplyTokenByPhoneResponse.ID, function () { return new ApplyTokenByPhoneResponse(); });
    aone.MessageFactory.getInstance().register(AoneBindPhoneRequest.ID, function () { return new AoneBindPhoneRequest(); });
    aone.MessageFactory.getInstance().register(AoneBindPhoneResponse.ID, function () { return new AoneBindPhoneResponse(); });
    aone.MessageFactory.getInstance().register(AoneUnBindPhoneRequest.ID, function () { return new AoneUnBindPhoneRequest(); });
    aone.MessageFactory.getInstance().register(AoneUnBindPhoneResponse.ID, function () { return new AoneUnBindPhoneResponse(); });
    aone.MessageFactory.getInstance().register(AoneResetPasswordByPhoneRequest.ID, function () { return new AoneResetPasswordByPhoneRequest(); });
    aone.MessageFactory.getInstance().register(AoneResetPasswordByPhoneResponse.ID, function () { return new AoneResetPasswordByPhoneResponse(); });
    aone.MessageFactory.getInstance().register(ApplyTokenByMailRequest.ID, function () { return new ApplyTokenByMailRequest(); });
    aone.MessageFactory.getInstance().register(ApplyTokenByMailResponse.ID, function () { return new ApplyTokenByMailResponse(); });
    aone.MessageFactory.getInstance().register(AoneBindMailRequest.ID, function () { return new AoneBindMailRequest(); });
    aone.MessageFactory.getInstance().register(AoneBindMailResponse.ID, function () { return new AoneBindMailResponse(); });
    aone.MessageFactory.getInstance().register(AoneUnBindMailRequest.ID, function () { return new AoneUnBindMailRequest(); });
    aone.MessageFactory.getInstance().register(AoneUnBindMailResponse.ID, function () { return new AoneUnBindMailResponse(); });
    aone.MessageFactory.getInstance().register(AoneResetPasswordByMailRequest.ID, function () { return new AoneResetPasswordByMailRequest(); });
    aone.MessageFactory.getInstance().register(AoneResetPasswordByMailResponse.ID, function () { return new AoneResetPasswordByMailResponse(); });
    aone.MessageFactory.getInstance().register(AoneAccountInfoRequest.ID, function () { return new AoneAccountInfoRequest(); });
    aone.MessageFactory.getInstance().register(AoneAccountInfoResponse.ID, function () { return new AoneAccountInfoResponse(); });
    aone.MessageFactory.getInstance().register(OAuthInfoRequest.ID, function () { return new OAuthInfoRequest(); });
    aone.MessageFactory.getInstance().register(OAuthInfoResponse.ID, function () { return new OAuthInfoResponse(); });
    aone.MessageFactory.getInstance().register(QuickRegisterRequest.ID, function () { return new QuickRegisterRequest(); });
    aone.MessageFactory.getInstance().register(QuickRegisterResponse.ID, function () { return new QuickRegisterResponse(); });
    aone.MessageFactory.getInstance().register(AoneAccountCertificateRequest.ID, function () { return new AoneAccountCertificateRequest(); });
    aone.MessageFactory.getInstance().register(AoneAccountCertificateResponse.ID, function () { return new AoneAccountCertificateResponse(); });
    aone.MessageFactory.getInstance().register(AoneSdkCheckVersionRequest.ID, function () { return new AoneSdkCheckVersionRequest(); });
    aone.MessageFactory.getInstance().register(AoneSdkCheckVersionResponse.ID, function () { return new AoneSdkCheckVersionResponse(); });
    aone.MessageFactory.getInstance().register(AccountIdentityInfoRequest.ID, function () { return new AccountIdentityInfoRequest(); });
    aone.MessageFactory.getInstance().register(AccountIdentityInfoResponse.ID, function () { return new AccountIdentityInfoResponse(); });
    aone.MessageFactory.getInstance().register(AccountCertificateRequest.ID, function () { return new AccountCertificateRequest(); });
    aone.MessageFactory.getInstance().register(AccountCertificateResponse.ID, function () { return new AccountCertificateResponse(); });
    aone.MessageFactory.getInstance().register(WxAppLoginRequest.ID, function () { return new WxAppLoginRequest(); });
    aone.MessageFactory.getInstance().register(WxAppLoginResponse.ID, function () { return new WxAppLoginResponse(); });
    aone.MessageFactory.getInstance().register(BaiduAppLoginRequest.ID, function () { return new BaiduAppLoginRequest(); });
    aone.MessageFactory.getInstance().register(BaiduAppLoginResponse.ID, function () { return new BaiduAppLoginResponse(); });
    aone.MessageFactory.getInstance().register(FBInstantLoginRequest.ID, function () { return new FBInstantLoginRequest(); });
    aone.MessageFactory.getInstance().register(FBInstantLoginResponse.ID, function () { return new FBInstantLoginResponse(); });
    aone.MessageFactory.getInstance().register(WxAppQueryOpenidRequest.ID, function () { return new WxAppQueryOpenidRequest(); });
    aone.MessageFactory.getInstance().register(WxAppQueryOpenidResponse.ID, function () { return new WxAppQueryOpenidResponse(); });
    aone.MessageFactory.getInstance().register(WechatOfficalAccountQueryOpenidRequest.ID, function () { return new WechatOfficalAccountQueryOpenidRequest(); });
    aone.MessageFactory.getInstance().register(WechatOfficalAccountQueryOpenidResponse.ID, function () { return new WechatOfficalAccountQueryOpenidResponse(); });
    aone.MessageFactory.getInstance().register(QueryChannelReviewVersionsRequest.ID, function () { return new QueryChannelReviewVersionsRequest(); });
    aone.MessageFactory.getInstance().register(QueryChannelReviewVersionsResponse.ID, function () { return new QueryChannelReviewVersionsResponse(); });
    aone.MessageFactory.getInstance().register(QQGameLoginRequest.ID, function () { return new QQGameLoginRequest(); });
    aone.MessageFactory.getInstance().register(QQGameLoginResponse.ID, function () { return new QQGameLoginResponse(); });
    aone.MessageFactory.getInstance().register(QQQueryOpenidRequest.ID, function () { return new QQQueryOpenidRequest(); });
    aone.MessageFactory.getInstance().register(QQQueryOpenidResponse.ID, function () { return new QQQueryOpenidResponse(); });
    aone.MessageFactory.getInstance().register(HortorLoginRequest.ID, function () { return new HortorLoginRequest(); });
    aone.MessageFactory.getInstance().register(HortorLoginResponse.ID, function () { return new HortorLoginResponse(); });
    aone.MessageFactory.getInstance().register(QueryChannelConfigRequest.ID, function () { return new QueryChannelConfigRequest(); });
    aone.MessageFactory.getInstance().register(QueryChannelConfigResponse.ID, function () { return new QueryChannelConfigResponse(); });
    aone.MessageFactory.getInstance().register(RecordSDKDownloadExceptionRequest.ID, function () { return new RecordSDKDownloadExceptionRequest(); });
    aone.MessageFactory.getInstance().register(RecordSDKDownloadExceptionResponse.ID, function () { return new RecordSDKDownloadExceptionResponse(); });
    aone.MessageFactory.getInstance().register(RecordGameDownloadExceptionRequest.ID, function () { return new RecordGameDownloadExceptionRequest(); });
    aone.MessageFactory.getInstance().register(RecordGameDownloadExceptionResponse.ID, function () { return new RecordGameDownloadExceptionResponse(); });
    aone.MessageFactory.getInstance().register(RecordSDKPayExceptionRequest.ID, function () { return new RecordSDKPayExceptionRequest(); });
    aone.MessageFactory.getInstance().register(RecordSDKPayExceptionResponse.ID, function () { return new RecordSDKPayExceptionResponse(); });
    aone.MessageFactory.getInstance().register(QueryIsEnableLocalPayRequest.ID, function () { return new QueryIsEnableLocalPayRequest(); });
    aone.MessageFactory.getInstance().register(QueryIsEnableLocalPayResponse.ID, function () { return new QueryIsEnableLocalPayResponse(); });
    aone.MessageFactory.getInstance().register(UserVerifyRequest.ID, function () { return new UserVerifyRequest(); });
    aone.MessageFactory.getInstance().register(UserVerifyResponse.ID, function () { return new UserVerifyResponse(); });
    aone.MessageFactory.getInstance().register(PayRequest.ID, function () { return new PayRequest(); });
    aone.MessageFactory.getInstance().register(PayResponse.ID, function () { return new PayResponse(); });
    aone.MessageFactory.getInstance().register(AlipaySignRequest.ID, function () { return new AlipaySignRequest(); });
    aone.MessageFactory.getInstance().register(AlipaySignResponse.ID, function () { return new AlipaySignResponse(); });
    aone.MessageFactory.getInstance().register(QueryExceptionPayOrdersRequest.ID, function () { return new QueryExceptionPayOrdersRequest(); });
    aone.MessageFactory.getInstance().register(QueryExceptionPayOrdersResponse.ID, function () { return new QueryExceptionPayOrdersResponse(); });
    aone.MessageFactory.getInstance().register(CommitReceiptRequest.ID, function () { return new CommitReceiptRequest(); });
    aone.MessageFactory.getInstance().register(CommitReceiptResponse.ID, function () { return new CommitReceiptResponse(); });
    aone.MessageFactory.getInstance().register(QueryOrderStatusRequest.ID, function () { return new QueryOrderStatusRequest(); });
    aone.MessageFactory.getInstance().register(QueryOrderStatusResponse.ID, function () { return new QueryOrderStatusResponse(); });
    aone.MessageFactory.getInstance().register(QueryPayNoStatusRequest.ID, function () { return new QueryPayNoStatusRequest(); });
    aone.MessageFactory.getInstance().register(QueryPayNoStatusResponse.ID, function () { return new QueryPayNoStatusResponse(); });
    aone.MessageFactory.getInstance().register(WxappPayRequest.ID, function () { return new WxappPayRequest(); });
    aone.MessageFactory.getInstance().register(WxappPayResponse.ID, function () { return new WxappPayResponse(); });
    aone.MessageFactory.getInstance().register(BaiduAppPayRequest.ID, function () { return new BaiduAppPayRequest(); });
    aone.MessageFactory.getInstance().register(BaiduAppPayResponse.ID, function () { return new BaiduAppPayResponse(); });
    aone.MessageFactory.getInstance().register(XiaomiQGamePayRequest.ID, function () { return new XiaomiQGamePayRequest(); });
    aone.MessageFactory.getInstance().register(XiaomiQGamePayResponse.ID, function () { return new XiaomiQGamePayResponse(); });
    aone.MessageFactory.getInstance().register(WxMiniGamePayRequest.ID, function () { return new WxMiniGamePayRequest(); });
    aone.MessageFactory.getInstance().register(WxMiniGamePayResponse.ID, function () { return new WxMiniGamePayResponse(); });
    aone.MessageFactory.getInstance().register(OppoGamePayRequest.ID, function () { return new OppoGamePayRequest(); });
    aone.MessageFactory.getInstance().register(OppoGamePayResponse.ID, function () { return new OppoGamePayResponse(); });
    aone.MessageFactory.getInstance().register(VivoQGamePayRequest.ID, function () { return new VivoQGamePayRequest(); });
    aone.MessageFactory.getInstance().register(VivoQGamePayResponse.ID, function () { return new VivoQGamePayResponse(); });
    aone.MessageFactory.getInstance().register(HuaweiQGamePayRequest.ID, function () { return new HuaweiQGamePayRequest(); });
    aone.MessageFactory.getInstance().register(HuaweiQGamePayResponse.ID, function () { return new HuaweiQGamePayResponse(); });
    aone.MessageFactory.getInstance().register(BaisibudejieWGamePayRequest.ID, function () { return new BaisibudejieWGamePayRequest(); });
    aone.MessageFactory.getInstance().register(BaisibudejieWGamePayResponse.ID, function () { return new BaisibudejieWGamePayResponse(); });
    aone.MessageFactory.getInstance().register(IPayNowPayRequest.ID, function () { return new IPayNowPayRequest(); });
    aone.MessageFactory.getInstance().register(IPayNowPayResponse.ID, function () { return new IPayNowPayResponse(); });
    aone.MessageFactory.getInstance().register(GetWechatJsTicketRequest.ID, function () { return new GetWechatJsTicketRequest(); });
    aone.MessageFactory.getInstance().register(GetWechatJsTicketResponse.ID, function () { return new GetWechatJsTicketResponse(); });
    aone.MessageFactory.getInstance().register(YilewanWGamePayRequest.ID, function () { return new YilewanWGamePayRequest(); });
    aone.MessageFactory.getInstance().register(YilewanWGamePayResponse.ID, function () { return new YilewanWGamePayResponse(); });
    aone.MessageFactory.getInstance().register(GamerealWGamePayRequest.ID, function () { return new GamerealWGamePayRequest(); });
    aone.MessageFactory.getInstance().register(GamerealWGamePayResponse.ID, function () { return new GamerealWGamePayResponse(); });
    aone.MessageFactory.getInstance().register(QQGamePayRequest.ID, function () { return new QQGamePayRequest(); });
    aone.MessageFactory.getInstance().register(QQGamePayResponse.ID, function () { return new QQGamePayResponse(); });
    aone.MessageFactory.getInstance().register(HortorPayRequest.ID, function () { return new HortorPayRequest(); });
    aone.MessageFactory.getInstance().register(HortorPayResponse.ID, function () { return new HortorPayResponse(); });
    aone.MessageFactory.getInstance().register(SendMailRequest.ID, function () { return new SendMailRequest(); });
    aone.MessageFactory.getInstance().register(SendMailResponse.ID, function () { return new SendMailResponse(); });
    aone.MessageFactory.getInstance().register(SendSMSRequest.ID, function () { return new SendSMSRequest(); });
    aone.MessageFactory.getInstance().register(SendSMSResponse.ID, function () { return new SendSMSResponse(); });
    aone.MessageFactory.getInstance().register(PushMessageRequest.ID, function () { return new PushMessageRequest(); });
    aone.MessageFactory.getInstance().register(PushMessageResponse.ID, function () { return new PushMessageResponse(); });
    aone.MessageFactory.getInstance().register(PushTagMessageRequest.ID, function () { return new PushTagMessageRequest(); });
    aone.MessageFactory.getInstance().register(PushTagMessageResponse.ID, function () { return new PushTagMessageResponse(); });
    aone.MessageFactory.getInstance().register(PushBroadcastMessageRequest.ID, function () { return new PushBroadcastMessageRequest(); });
    aone.MessageFactory.getInstance().register(PushBroadcastMessageResponse.ID, function () { return new PushBroadcastMessageResponse(); });
    aone.MessageFactory.getInstance().register(QueryProductInfoRequest.ID, function () { return new QueryProductInfoRequest(); });
    aone.MessageFactory.getInstance().register(QueryProductInfoResponse.ID, function () { return new QueryProductInfoResponse(); });
    aone.MessageFactory.getInstance().register(QueryWebsiteProductListRequest.ID, function () { return new QueryWebsiteProductListRequest(); });
    aone.MessageFactory.getInstance().register(QueryWebsiteProductListResponse.ID, function () { return new QueryWebsiteProductListResponse(); });
    aone.MessageFactory.getInstance().register(QueryAppChannelsRequest.ID, function () { return new QueryAppChannelsRequest(); });
    aone.MessageFactory.getInstance().register(QueryAppChannelsResponse.ID, function () { return new QueryAppChannelsResponse(); });
    aone.MessageFactory.getInstance().register(QueryAppLangsRequest.ID, function () { return new QueryAppLangsRequest(); });
    aone.MessageFactory.getInstance().register(QueryAppLangsResponse.ID, function () { return new QueryAppLangsResponse(); });
    aone.MessageFactory.getInstance().register(QueryAppProductsRequest.ID, function () { return new QueryAppProductsRequest(); });
    aone.MessageFactory.getInstance().register(QueryAppProductsResponse.ID, function () { return new QueryAppProductsResponse(); });
    aone.MessageFactory.getInstance().register(IPayNowSignRequest.ID, function () { return new IPayNowSignRequest(); });
    aone.MessageFactory.getInstance().register(IPayNowSignResponse.ID, function () { return new IPayNowSignResponse(); });
    aone.MessageFactory.getInstance().register(AoneAlipaySignRequest.ID, function () { return new AoneAlipaySignRequest(); });
    aone.MessageFactory.getInstance().register(AoneAlipaySignResponse.ID, function () { return new AoneAlipaySignResponse(); });
    aone.MessageFactory.getInstance().register(RecordRoleLoginRequest.ID, function () { return new RecordRoleLoginRequest(); });
    aone.MessageFactory.getInstance().register(RecordRoleLoginResponse.ID, function () { return new RecordRoleLoginResponse(); });
    aone.MessageFactory.getInstance().register(QueryShareInfoRequest.ID, function () { return new QueryShareInfoRequest(); });
    aone.MessageFactory.getInstance().register(QueryShareInfoResponse.ID, function () { return new QueryShareInfoResponse(); });
    aone.MessageFactory.getInstance().register(PublishShareInfoRequest.ID, function () { return new PublishShareInfoRequest(); });
    aone.MessageFactory.getInstance().register(PublishShareInfoResponse.ID, function () { return new PublishShareInfoResponse(); });
    aone.MessageFactory.getInstance().register(QueryAoneGroupIdRequest.ID, function () { return new QueryAoneGroupIdRequest(); });
    aone.MessageFactory.getInstance().register(QueryAoneGroupIdResponse.ID, function () { return new QueryAoneGroupIdResponse(); });
    aone.MessageFactory.getInstance().register(AoneCEBSignRequest.ID, function () { return new AoneCEBSignRequest(); });
    aone.MessageFactory.getInstance().register(AoneCEBSignResponse.ID, function () { return new AoneCEBSignResponse(); });
    aone.MessageFactory.getInstance().register(QueryUserPhoneBindRequest.ID, function () { return new QueryUserPhoneBindRequest(); });
    aone.MessageFactory.getInstance().register(QueryUserPhoneBindResponse.ID, function () { return new QueryUserPhoneBindResponse(); });
    aone.MessageFactory.getInstance().register(ApplyCodeByPhoneRequest.ID, function () { return new ApplyCodeByPhoneRequest(); });
    aone.MessageFactory.getInstance().register(ApplyCodeByPhoneResponse.ID, function () { return new ApplyCodeByPhoneResponse(); });
    aone.MessageFactory.getInstance().register(VerifyCodeRequest.ID, function () { return new VerifyCodeRequest(); });
    aone.MessageFactory.getInstance().register(VerifyCodeResponse.ID, function () { return new VerifyCodeResponse(); });
    aone.MessageFactory.getInstance().register(RecordDevicePointRequest.ID, function () { return new RecordDevicePointRequest(); });
    aone.MessageFactory.getInstance().register(RecordDevicePointResponse.ID, function () { return new RecordDevicePointResponse(); });
    aone.MessageFactory.getInstance().register(RecordRolePointRequest.ID, function () { return new RecordRolePointRequest(); });
    aone.MessageFactory.getInstance().register(RecordRolePointResponse.ID, function () { return new RecordRolePointResponse(); });
})(message || (message = {}));
//Date: 2019-1
//File: msg_xx_battle.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 本文档定义战斗公共类型
var message;
(function (message) {
    // 目标位置类型
    var ETargetPosType;
    (function (ETargetPosType) {
        ETargetPosType[ETargetPosType["TARGET_POS_NONE"] = 0] = "TARGET_POS_NONE";
        ETargetPosType[ETargetPosType["TARGET_POS_MINE"] = 1] = "TARGET_POS_MINE";
        ETargetPosType[ETargetPosType["TARGET_POS_ENEMY"] = 2] = "TARGET_POS_ENEMY";
        ETargetPosType[ETargetPosType["TARGET_POS_CNT"] = 3] = "TARGET_POS_CNT";
    })(ETargetPosType = message.ETargetPosType || (message.ETargetPosType = {}));
    // 技能类型
    var ESkillType;
    (function (ESkillType) {
        ESkillType[ESkillType["SKILL_TYPE_NONE"] = 0] = "SKILL_TYPE_NONE";
        ESkillType[ESkillType["SKILL_TYPE_COMMON"] = 1] = "SKILL_TYPE_COMMON";
        ESkillType[ESkillType["SKILL_TYPE_HANDLE"] = 2] = "SKILL_TYPE_HANDLE";
        ESkillType[ESkillType["SKILL_TYPE_DEATH"] = 3] = "SKILL_TYPE_DEATH";
        ESkillType[ESkillType["SKILL_TYPE_CNT"] = 4] = "SKILL_TYPE_CNT";
    })(ESkillType = message.ESkillType || (message.ESkillType = {}));
    // 伤害类型
    var EDamageType;
    (function (EDamageType) {
        EDamageType[EDamageType["DAMAGE_TYPE_NONE"] = 0] = "DAMAGE_TYPE_NONE";
        EDamageType[EDamageType["DAMAGE_TYPE_PHY"] = 1] = "DAMAGE_TYPE_PHY";
        EDamageType[EDamageType["DAMAGE_TYPE_MAGIC"] = 2] = "DAMAGE_TYPE_MAGIC";
        EDamageType[EDamageType["DAMAGE_TYPE_CNT"] = 3] = "DAMAGE_TYPE_CNT";
    })(EDamageType = message.EDamageType || (message.EDamageType = {}));
    // 特效类型
    var EEffectType;
    (function (EEffectType) {
        EEffectType[EEffectType["EFFECT_TYPE_NONE"] = 0] = "EFFECT_TYPE_NONE";
        EEffectType[EEffectType["EFFECT_TYPE_COLLISION"] = 1] = "EFFECT_TYPE_COLLISION";
        EEffectType[EEffectType["EFFECT_TYPE_TARGET"] = 2] = "EFFECT_TYPE_TARGET";
        EEffectType[EEffectType["EFFECT_TYPE_MISSILE"] = 3] = "EFFECT_TYPE_MISSILE";
        EEffectType[EEffectType["EFFECT_TYPE_CNT"] = 4] = "EFFECT_TYPE_CNT";
    })(EEffectType = message.EEffectType || (message.EEffectType = {}));
    // 通用目标类型
    var ETargetId;
    (function (ETargetId) {
        ETargetId[ETargetId["TARGET_COLLISION"] = 0] = "TARGET_COLLISION";
        ETargetId[ETargetId["TARGET_ALL"] = 1] = "TARGET_ALL";
        ETargetId[ETargetId["TARGET_RANDOM_ONE"] = 2] = "TARGET_RANDOM_ONE";
        ETargetId[ETargetId["TARGET_HP_MIN"] = 3] = "TARGET_HP_MIN";
        ETargetId[ETargetId["TARGET_HP_MAX"] = 4] = "TARGET_HP_MAX";
        ETargetId[ETargetId["TARGET_RAGE_MIN"] = 5] = "TARGET_RAGE_MIN";
        ETargetId[ETargetId["TARGET_SELF"] = 6] = "TARGET_SELF";
        ETargetId[ETargetId["TARGET_RAGE_MAX"] = 7] = "TARGET_RAGE_MAX";
        ETargetId[ETargetId["TARGET_BRING_HURT_ROLE"] = 8] = "TARGET_BRING_HURT_ROLE";
        ETargetId[ETargetId["TARGET_HURTING_ROLE"] = 9] = "TARGET_HURTING_ROLE";
        ETargetId[ETargetId["TARGET_RANDOM_TWO"] = 10] = "TARGET_RANDOM_TWO";
        ETargetId[ETargetId["TARGET_HP_PERCENT_MIN"] = 11] = "TARGET_HP_PERCENT_MIN";
        ETargetId[ETargetId["TARGET_HP_PERCENT_MAX"] = 12] = "TARGET_HP_PERCENT_MAX";
        ETargetId[ETargetId["TARGET_POS_1"] = 13] = "TARGET_POS_1";
        ETargetId[ETargetId["TARGET_POS_2"] = 14] = "TARGET_POS_2";
        ETargetId[ETargetId["TARGET_POS_3"] = 15] = "TARGET_POS_3";
        ETargetId[ETargetId["TARGET_DIS_NEAR"] = 16] = "TARGET_DIS_NEAR";
        ETargetId[ETargetId["TARGET_DIS_MID"] = 17] = "TARGET_DIS_MID";
        ETargetId[ETargetId["TARGET_DIS_FAR"] = 18] = "TARGET_DIS_FAR";
        ETargetId[ETargetId["TARGET_BOSS"] = 19] = "TARGET_BOSS";
        ETargetId[ETargetId["TARGET_POS_4"] = 20] = "TARGET_POS_4";
        ETargetId[ETargetId["TARGET_MAP"] = 21] = "TARGET_MAP";
        ETargetId[ETargetId["TARGET_FEATURE_ATTACK"] = 22] = "TARGET_FEATURE_ATTACK";
        ETargetId[ETargetId["TARGET_FEATURE_DEFENSE"] = 23] = "TARGET_FEATURE_DEFENSE";
        ETargetId[ETargetId["TARGET_FEATURE_ASSIST"] = 24] = "TARGET_FEATURE_ASSIST";
        ETargetId[ETargetId["TARGET_REVIVE_PERSON"] = 25] = "TARGET_REVIVE_PERSON";
        ETargetId[ETargetId["TARGET_PROPERTY_MAX"] = 26] = "TARGET_PROPERTY_MAX";
        ETargetId[ETargetId["TARGET_PROPERTY_MIN"] = 27] = "TARGET_PROPERTY_MIN";
        ETargetId[ETargetId["TARGET_CD_MAX"] = 28] = "TARGET_CD_MAX";
        ETargetId[ETargetId["TARGET_CD_MIN"] = 29] = "TARGET_CD_MIN";
        ETargetId[ETargetId["TARGET_DEBUFF_MAX"] = 30] = "TARGET_DEBUFF_MAX";
        ETargetId[ETargetId["TARGET_BUFF_MAX"] = 31] = "TARGET_BUFF_MAX";
        ETargetId[ETargetId["TARGET_CNT"] = 32] = "TARGET_CNT";
    })(ETargetId = message.ETargetId || (message.ETargetId = {}));
    // 动作闪现类型
    var EActionFlashType;
    (function (EActionFlashType) {
        EActionFlashType[EActionFlashType["FLASH_TYPE_NONE"] = 0] = "FLASH_TYPE_NONE";
        EActionFlashType[EActionFlashType["FLASH_TYPE_LASTPOS"] = 1] = "FLASH_TYPE_LASTPOS";
        EActionFlashType[EActionFlashType["FLASH_TYPE_ORIGIN"] = 2] = "FLASH_TYPE_ORIGIN";
        EActionFlashType[EActionFlashType["FLASH_TYPE_LOCAL"] = 3] = "FLASH_TYPE_LOCAL";
        EActionFlashType[EActionFlashType["FLASH_TYPE_DETAILPOS"] = 4] = "FLASH_TYPE_DETAILPOS";
        EActionFlashType[EActionFlashType["FLASH_TYPE_TARGET"] = 5] = "FLASH_TYPE_TARGET";
        EActionFlashType[EActionFlashType["FLASH_TYPE_CNT"] = 6] = "FLASH_TYPE_CNT";
    })(EActionFlashType = message.EActionFlashType || (message.EActionFlashType = {}));
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
})(message || (message = {}));
//Date: 2020-1
//File: msg_xx_common.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 本文档定义全局公共类型
// 定义了大部分公共枚举类型
var message;
(function (message) {
    // 语言版本
    var ELanguageType;
    (function (ELanguageType) {
        ELanguageType[ELanguageType["LANGUAGE_TYPE_NONO"] = 0] = "LANGUAGE_TYPE_NONO";
        ELanguageType[ELanguageType["LANGUAGE_TYPE_CHINESE"] = 1] = "LANGUAGE_TYPE_CHINESE";
        ELanguageType[ELanguageType["LANGUAGE_TYPE_MISCHINESE"] = 2] = "LANGUAGE_TYPE_MISCHINESE";
        ELanguageType[ELanguageType["LANGUAGE_TYPE_ENGLISH"] = 3] = "LANGUAGE_TYPE_ENGLISH";
        ELanguageType[ELanguageType["LANGUAGE_TYPE_VIETNAMESE"] = 4] = "LANGUAGE_TYPE_VIETNAMESE";
        ELanguageType[ELanguageType["LANGUAGE_TYPE_CNT"] = 5] = "LANGUAGE_TYPE_CNT";
    })(ELanguageType = message.ELanguageType || (message.ELanguageType = {}));
    // 认证类型
    var IdentificationType;
    (function (IdentificationType) {
        IdentificationType[IdentificationType["IDENTIFICATION_TYPE_NONO"] = 0] = "IDENTIFICATION_TYPE_NONO";
        IdentificationType[IdentificationType["IDENTIFICATION_TYPE_UNDERAGE"] = 1] = "IDENTIFICATION_TYPE_UNDERAGE";
        IdentificationType[IdentificationType["IDENTIFICATION_TYPE_ADULT"] = 2] = "IDENTIFICATION_TYPE_ADULT";
        IdentificationType[IdentificationType["IDENTIFICATION_TYPE_NOT"] = 3] = "IDENTIFICATION_TYPE_NOT";
        IdentificationType[IdentificationType["IDENTIFICATION_TYPE_END"] = 4] = "IDENTIFICATION_TYPE_END"; // 结束
    })(IdentificationType = message.IdentificationType || (message.IdentificationType = {}));
    // 手机号绑定类型
    var EBindPhone;
    (function (EBindPhone) {
        EBindPhone[EBindPhone["BIND_PHONE_NONO"] = 0] = "BIND_PHONE_NONO";
        EBindPhone[EBindPhone["BIND_PHONE_NOT_BIND"] = 1] = "BIND_PHONE_NOT_BIND";
        EBindPhone[EBindPhone["BIND_PHONE_BIND"] = 2] = "BIND_PHONE_BIND";
        EBindPhone[EBindPhone["BIND_PHONE_END"] = 3] = "BIND_PHONE_END"; // 类型结束
    })(EBindPhone = message.EBindPhone || (message.EBindPhone = {}));
    // 机器人类型
    var EAutoType;
    (function (EAutoType) {
        EAutoType[EAutoType["AUTO_TYPE_NONO"] = 0] = "AUTO_TYPE_NONO";
        EAutoType[EAutoType["AUTO_TYPE_MYSELF"] = 1] = "AUTO_TYPE_MYSELF";
        EAutoType[EAutoType["AUTO_TYPE_LADDER"] = 101] = "AUTO_TYPE_LADDER";
        EAutoType[EAutoType["AUTO_TYPE_SCRIPT"] = 200] = "AUTO_TYPE_SCRIPT";
        EAutoType[EAutoType["AUTO_TYPE_BUG"] = 201] = "AUTO_TYPE_BUG"; // 外挂号
    })(EAutoType = message.EAutoType || (message.EAutoType = {}));
    // 文本参数类型
    var ETextArgType;
    (function (ETextArgType) {
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_NONO"] = 0] = "TEXT_ARG_TYPE_NONO";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_GOODS"] = 1] = "TEXT_ARG_TYPE_GOODS";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_MOBS"] = 2] = "TEXT_ARG_TYPE_MOBS";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_WONDERLAND"] = 3] = "TEXT_ARG_TYPE_WONDERLAND";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_WONDERLAND_TREE"] = 4] = "TEXT_ARG_TYPE_WONDERLAND_TREE";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_LEAGUEMATCH_SCORE"] = 5] = "TEXT_ARG_TYPE_LEAGUEMATCH_SCORE";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_ARTIFACT"] = 6] = "TEXT_ARG_TYPE_ARTIFACT";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_GENERAL"] = 7] = "TEXT_ARG_TYPE_GENERAL";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_FORMATION_COMPOSE"] = 8] = "TEXT_ARG_TYPE_FORMATION_COMPOSE";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_LEAUGE_INSTANCE"] = 9] = "TEXT_ARG_TYPE_LEAUGE_INSTANCE";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_SCENE_BOSS"] = 10] = "TEXT_ARG_TYPE_SCENE_BOSS";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_GIFT"] = 11] = "TEXT_ARG_TYPE_GIFT";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_GROUP"] = 12] = "TEXT_ARG_TYPE_GROUP";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_SINGLECRAFT_SECTION"] = 13] = "TEXT_ARG_TYPE_SINGLECRAFT_SECTION";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_ADVISER"] = 14] = "TEXT_ARG_TYPE_ADVISER";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_FRUIT"] = 15] = "TEXT_ARG_TYPE_FRUIT";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_GIFT_BACK"] = 16] = "TEXT_ARG_TYPE_GIFT_BACK";
        ETextArgType[ETextArgType["TEXT_ARG_TYPE_END"] = 17] = "TEXT_ARG_TYPE_END"; // 枚举结束
    })(ETextArgType = message.ETextArgType || (message.ETextArgType = {}));
    // 客户端设置枚举
    var ClientOperation;
    (function (ClientOperation) {
        ClientOperation[ClientOperation["CLIENT_OPERATION_NONO"] = 0] = "CLIENT_OPERATION_NONO";
        ClientOperation[ClientOperation["CLIENT_OPERATION_POWERFULL"] = 1] = "CLIENT_OPERATION_POWERFULL";
        ClientOperation[ClientOperation["CLIENT_OPERATION_POWERREWARD"] = 2] = "CLIENT_OPERATION_POWERREWARD";
        ClientOperation[ClientOperation["CLIENT_OPERATION_ACTIVITYOPEN"] = 3] = "CLIENT_OPERATION_ACTIVITYOPEN";
        ClientOperation[ClientOperation["CLIENT_OPERATION_LADDER"] = 4] = "CLIENT_OPERATION_LADDER";
        ClientOperation[ClientOperation["CLIENT_OPERATION_LEAGUE_WAR"] = 5] = "CLIENT_OPERATION_LEAGUE_WAR";
        ClientOperation[ClientOperation["CLIENT_OPERATION_BOSS"] = 7] = "CLIENT_OPERATION_BOSS";
        ClientOperation[ClientOperation["CLIENT_OPERATION_END"] = 8] = "CLIENT_OPERATION_END"; // 枚举结束
    })(ClientOperation = message.ClientOperation || (message.ClientOperation = {}));
    // 功能开启
    var FunctionOpen;
    (function (FunctionOpen) {
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_NONO"] = 0] = "FUNCTION_OPEN_TYPE_NONO";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_LEAGUE"] = 1] = "FUNCTION_OPEN_TYPE_LEAGUE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_LADDER"] = 2] = "FUNCTION_OPEN_TYPE_LADDER";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_GENERAL_BREAK"] = 3] = "FUNCTION_OPEN_TYPE_GENERAL_BREAK";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_WONDERLAND"] = 4] = "FUNCTION_OPEN_TYPE_WONDERLAND";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_TOWER"] = 5] = "FUNCTION_OPEN_TYPE_TOWER";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_VILLAGE_MONEY"] = 6] = "FUNCTION_OPEN_TYPE_VILLAGE_MONEY";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_WANTED"] = 7] = "FUNCTION_OPEN_TYPE_WANTED";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_SKILLUP"] = 8] = "FUNCTION_OPEN_TYPE_SKILLUP";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_EQUIP"] = 9] = "FUNCTION_OPEN_TYPE_EQUIP";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_MISSIONWEEK"] = 10] = "FUNCTION_OPEN_TYPE_MISSIONWEEK";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_TALENT"] = 11] = "FUNCTION_OPEN_TYPE_TALENT";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_EQUIP_CARVE"] = 12] = "FUNCTION_OPEN_TYPE_EQUIP_CARVE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ADVISER"] = 13] = "FUNCTION_OPEN_TYPE_ADVISER";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_DARKLAND"] = 14] = "FUNCTION_OPEN_TYPE_DARKLAND";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ELITE"] = 15] = "FUNCTION_OPEN_TYPE_ELITE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_TRAINING"] = 16] = "FUNCTION_OPEN_TYPE_TRAINING";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_FUND"] = 17] = "FUNCTION_OPEN_TYPE_FUND";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ADVISER_FORMATION"] = 18] = "FUNCTION_OPEN_TYPE_ADVISER_FORMATION";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_SUPPORT"] = 19] = "FUNCTION_OPEN_TYPE_SUPPORT";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_BATTLE_TRUST"] = 20] = "FUNCTION_OPEN_TYPE_BATTLE_TRUST";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_SEVEN_DAY"] = 21] = "FUNCTION_OPEN_TYPE_SEVEN_DAY";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_GENERAL_UP"] = 22] = "FUNCTION_OPEN_TYPE_GENERAL_UP";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_GENERAL_STAR"] = 23] = "FUNCTION_OPEN_TYPE_GENERAL_STAR";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_GENERAL_QUALITY"] = 24] = "FUNCTION_OPEN_TYPE_GENERAL_QUALITY";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_DAYLY"] = 25] = "FUNCTION_OPEN_TYPE_DAYLY";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_MALL"] = 26] = "FUNCTION_OPEN_TYPE_MALL";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_CHEST"] = 27] = "FUNCTION_OPEN_TYPE_CHEST";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_VILLAGE_EXP"] = 28] = "FUNCTION_OPEN_TYPE_VILLAGE_EXP";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_GENERAL_FATE"] = 29] = "FUNCTION_OPEN_TYPE_GENERAL_FATE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ARTIFACT"] = 30] = "FUNCTION_OPEN_TYPE_ARTIFACT";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ARTIFACT_WASH"] = 31] = "FUNCTION_OPEN_TYPE_ARTIFACT_WASH";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ARTIFACT_MOUNT"] = 32] = "FUNCTION_OPEN_TYPE_ARTIFACT_MOUNT";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_IMMORTAL"] = 33] = "FUNCTION_OPEN_TYPE_IMMORTAL";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_CHAT"] = 34] = "FUNCTION_OPEN_TYPE_CHAT";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_RANK"] = 35] = "FUNCTION_OPEN_TYPE_RANK";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_WONDERLAND_2"] = 36] = "FUNCTION_OPEN_TYPE_WONDERLAND_2";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_WONDERLAND_3"] = 37] = "FUNCTION_OPEN_TYPE_WONDERLAND_3";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_GAMBLE_JADE"] = 38] = "FUNCTION_OPEN_TYPE_GAMBLE_JADE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_VILLAGE_SWEEP"] = 39] = "FUNCTION_OPEN_TYPE_VILLAGE_SWEEP";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_LADDER_QUICK"] = 40] = "FUNCTION_OPEN_TYPE_LADDER_QUICK";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_WORLD_FIRST"] = 41] = "FUNCTION_OPEN_TYPE_WORLD_FIRST";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_DEMON"] = 42] = "FUNCTION_OPEN_TYPE_DEMON";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_POTATO"] = 43] = "FUNCTION_OPEN_TYPE_POTATO";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_RECOVERY"] = 44] = "FUNCTION_OPEN_TYPE_RECOVERY";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_DEMON_BOSS"] = 45] = "FUNCTION_OPEN_TYPE_DEMON_BOSS";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_DEMON_RUNES"] = 46] = "FUNCTION_OPEN_TYPE_DEMON_RUNES";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_RECOVERY_GEN"] = 47] = "FUNCTION_OPEN_TYPE_RECOVERY_GEN";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_RECOVERY_EQU"] = 48] = "FUNCTION_OPEN_TYPE_RECOVERY_EQU";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ENEMY_CAMP_CAVE"] = 49] = "FUNCTION_OPEN_TYPE_ENEMY_CAMP_CAVE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ENEMY_CAMP_GOBI"] = 50] = "FUNCTION_OPEN_TYPE_ENEMY_CAMP_GOBI";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ENEMY_CAMP_NEVE"] = 51] = "FUNCTION_OPEN_TYPE_ENEMY_CAMP_NEVE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_SINGLE_CRAFT"] = 52] = "FUNCTION_OPEN_TYPE_SINGLE_CRAFT";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_SELL_GENERAL"] = 53] = "FUNCTION_OPEN_TYPE_SELL_GENERAL";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_MISSION_LICENCE"] = 54] = "FUNCTION_OPEN_TYPE_MISSION_LICENCE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_AWAKEN"] = 55] = "FUNCTION_OPEN_TYPE_AWAKEN";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_GENERAL_MAKE"] = 56] = "FUNCTION_OPEN_TYPE_GENERAL_MAKE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_PVP_SINGLE"] = 57] = "FUNCTION_OPEN_TYPE_PVP_SINGLE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_PVP_THIRD"] = 58] = "FUNCTION_OPEN_TYPE_PVP_THIRD";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_GROUP_FIGHT"] = 59] = "FUNCTION_OPEN_TYPE_GROUP_FIGHT";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_GENERAL_PSYCHIC"] = 60] = "FUNCTION_OPEN_TYPE_GENERAL_PSYCHIC";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_WANTED7"] = 61] = "FUNCTION_OPEN_TYPE_WANTED7";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_DARKLAND2"] = 62] = "FUNCTION_OPEN_TYPE_DARKLAND2";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_POTATO_UPLEVEL"] = 63] = "FUNCTION_OPEN_TYPE_POTATO_UPLEVEL";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_POTATO_UPSTAR"] = 64] = "FUNCTION_OPEN_TYPE_POTATO_UPSTAR";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ACTIVITY_BATTLE"] = 65] = "FUNCTION_OPEN_TYPE_ACTIVITY_BATTLE";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_ACTIVITY_BOSS"] = 66] = "FUNCTION_OPEN_TYPE_ACTIVITY_BOSS";
        FunctionOpen[FunctionOpen["FUNCTION_OPEN_TYPE_NED"] = 67] = "FUNCTION_OPEN_TYPE_NED"; // 类型结束
    })(FunctionOpen = message.FunctionOpen || (message.FunctionOpen = {}));
    // 联盟官职
    var ELeagueOfficial;
    (function (ELeagueOfficial) {
        ELeagueOfficial[ELeagueOfficial["LEAGUE_OFFICIAL_NONO"] = 0] = "LEAGUE_OFFICIAL_NONO";
        ELeagueOfficial[ELeagueOfficial["LEAGUE_OFFICIAL_NORMAL"] = 1] = "LEAGUE_OFFICIAL_NORMAL";
        ELeagueOfficial[ELeagueOfficial["LEAGUE_OFFICIAL_ELDER"] = 2] = "LEAGUE_OFFICIAL_ELDER";
        ELeagueOfficial[ELeagueOfficial["LEAGUE_OFFICIAL_LEADER"] = 3] = "LEAGUE_OFFICIAL_LEADER";
        ELeagueOfficial[ELeagueOfficial["LEAGUE_OFFICIAL_END"] = 4] = "LEAGUE_OFFICIAL_END"; // 类型结束
    })(ELeagueOfficial = message.ELeagueOfficial || (message.ELeagueOfficial = {}));
    // 联盟加入条件
    var LeagueJoinCondition;
    (function (LeagueJoinCondition) {
        LeagueJoinCondition[LeagueJoinCondition["LEAGUE_JOIN_NONO"] = 0] = "LEAGUE_JOIN_NONO";
        LeagueJoinCondition[LeagueJoinCondition["LEAGUE_JOIN_ALL"] = 1] = "LEAGUE_JOIN_ALL";
        LeagueJoinCondition[LeagueJoinCondition["LEAGUE_JOIN_VERIFY"] = 2] = "LEAGUE_JOIN_VERIFY";
        LeagueJoinCondition[LeagueJoinCondition["LEAGUE_JOIN_NOT"] = 3] = "LEAGUE_JOIN_NOT";
        LeagueJoinCondition[LeagueJoinCondition["LEAGUE_JOIN_END"] = 4] = "LEAGUE_JOIN_END"; // 加入条件结束
    })(LeagueJoinCondition = message.LeagueJoinCondition || (message.LeagueJoinCondition = {}));
    // 联盟日志类型
    var LeagueRecordType;
    (function (LeagueRecordType) {
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_NONO"] = 0] = "LEAGUE_RECORD_TYPE_NONO";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_JOIN"] = 1] = "LEAGUE_RECORD_TYPE_JOIN";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_QUIT"] = 2] = "LEAGUE_RECORD_TYPE_QUIT";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_KICK"] = 3] = "LEAGUE_RECORD_TYPE_KICK";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_ELDER"] = 4] = "LEAGUE_RECORD_TYPE_ELDER";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_UNELDER"] = 5] = "LEAGUE_RECORD_TYPE_UNELDER";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_TRANSFER"] = 6] = "LEAGUE_RECORD_TYPE_TRANSFER";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_MODIFY_NAME"] = 7] = "LEAGUE_RECORD_TYPE_MODIFY_NAME";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_MODIFY_PIC"] = 8] = "LEAGUE_RECORD_TYPE_MODIFY_PIC";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_MODIFY_PICFRAME"] = 9] = "LEAGUE_RECORD_TYPE_MODIFY_PICFRAME";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_JOIN_CONDITION"] = 10] = "LEAGUE_RECORD_TYPE_JOIN_CONDITION";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_JOIN_LEVEL"] = 11] = "LEAGUE_RECORD_TYPE_JOIN_LEVEL";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_MODIFY_NOTICE"] = 12] = "LEAGUE_RECORD_TYPE_MODIFY_NOTICE";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_MODIFY_INTRODUCE"] = 13] = "LEAGUE_RECORD_TYPE_MODIFY_INTRODUCE";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_LEVEL_UP"] = 14] = "LEAGUE_RECORD_TYPE_LEVEL_UP";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_SKILL_UP"] = 15] = "LEAGUE_RECORD_TYPE_SKILL_UP";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_SKILL_RESET"] = 16] = "LEAGUE_RECORD_TYPE_SKILL_RESET";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_IMPEACH"] = 17] = "LEAGUE_RECORD_TYPE_IMPEACH";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_UNIMPEACH"] = 18] = "LEAGUE_RECORD_TYPE_UNIMPEACH";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_IMPEACH_SUCCESS"] = 19] = "LEAGUE_RECORD_TYPE_IMPEACH_SUCCESS";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_FEED_NORMAL"] = 20] = "LEAGUE_RECORD_TYPE_FEED_NORMAL";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_FEED_SENIOR"] = 21] = "LEAGUE_RECORD_TYPE_FEED_SENIOR";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_ANIMAL_ADOPT"] = 22] = "LEAGUE_RECORD_TYPE_ANIMAL_ADOPT";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_BOSS_OPEN"] = 23] = "LEAGUE_RECORD_TYPE_BOSS_OPEN";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_BOSS_KILL"] = 24] = "LEAGUE_RECORD_TYPE_BOSS_KILL";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_BOSS_NOT_KILL"] = 25] = "LEAGUE_RECORD_TYPE_BOSS_NOT_KILL";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_PARTY_ADD"] = 26] = "LEAGUE_RECORD_TYPE_PARTY_ADD";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_DEMISE_ELDER"] = 27] = "LEAGUE_RECORD_TYPE_DEMISE_ELDER";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_DEMISE_NORMAL"] = 28] = "LEAGUE_RECORD_TYPE_DEMISE_NORMAL";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_INSTANCE_OPEN"] = 29] = "LEAGUE_RECORD_TYPE_INSTANCE_OPEN";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_INSTANCE_KILL"] = 30] = "LEAGUE_RECORD_TYPE_INSTANCE_KILL";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_INSTANCE_PASS"] = 31] = "LEAGUE_RECORD_TYPE_INSTANCE_PASS";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_INSTANCE_BUY_POWER"] = 32] = "LEAGUE_RECORD_TYPE_INSTANCE_BUY_POWER";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_INSTANCE_HURT"] = 33] = "LEAGUE_RECORD_TYPE_INSTANCE_HURT";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_MATCH_BATTLE"] = 34] = "LEAGUE_RECORD_TYPE_MATCH_BATTLE";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_MATCH_HISTORY"] = 35] = "LEAGUE_RECORD_TYPE_MATCH_HISTORY";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_MODIFY_RECRUIT"] = 36] = "LEAGUE_RECORD_TYPE_MODIFY_RECRUIT";
        LeagueRecordType[LeagueRecordType["LEAGUE_RECORD_TYPE_END"] = 37] = "LEAGUE_RECORD_TYPE_END"; // 类型结束
    })(LeagueRecordType = message.LeagueRecordType || (message.LeagueRecordType = {}));
    // 联盟推送类型
    var LeagueNoticeType;
    (function (LeagueNoticeType) {
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_NONO"] = 0] = "LEAGUE_NOTICE_TYPE_NONO";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_PIC"] = 1] = "LEAGUE_NOTICE_TYPE_PIC";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_JOIN_CONDITION"] = 2] = "LEAGUE_NOTICE_TYPE_JOIN_CONDITION";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_INTRODUCE"] = 3] = "LEAGUE_NOTICE_TYPE_INTRODUCE";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_NOTICE"] = 4] = "LEAGUE_NOTICE_TYPE_NOTICE";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_OFFICIAL"] = 5] = "LEAGUE_NOTICE_TYPE_OFFICIAL";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_NAME"] = 6] = "LEAGUE_NOTICE_TYPE_NAME";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_DELETE"] = 7] = "LEAGUE_NOTICE_TYPE_DELETE";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_ADD"] = 8] = "LEAGUE_NOTICE_TYPE_ADD";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_INSTANCE_BUY_TIME"] = 9] = "LEAGUE_NOTICE_INSTANCE_BUY_TIME";
        LeagueNoticeType[LeagueNoticeType["LEAGUE_NOTICE_TYPE_END"] = 10] = "LEAGUE_NOTICE_TYPE_END"; // 枚举结束
    })(LeagueNoticeType = message.LeagueNoticeType || (message.LeagueNoticeType = {}));
    // 邮件类型
    var MailType;
    (function (MailType) {
        MailType[MailType["MAIL_TYPE_UNKNOWN"] = 0] = "MAIL_TYPE_UNKNOWN";
        MailType[MailType["MAIL_TYPE_SYSTEM"] = 1] = "MAIL_TYPE_SYSTEM";
        MailType[MailType["MAIL_TYPE_LEAGUE"] = 2] = "MAIL_TYPE_LEAGUE";
        MailType[MailType["MAIL_TYPE_NORMAL"] = 3] = "MAIL_TYPE_NORMAL";
        MailType[MailType["MAIL_TYPE_LADDER"] = 4] = "MAIL_TYPE_LADDER";
        MailType[MailType["MAIL_TYPE_WONDERLAND"] = 5] = "MAIL_TYPE_WONDERLAND";
        MailType[MailType["MAIL_TYPE_SINGLECRAFT"] = 6] = "MAIL_TYPE_SINGLECRAFT";
        MailType[MailType["MAIL_TYPE_PVP"] = 7] = "MAIL_TYPE_PVP";
        MailType[MailType["MAIL_TYPE_END"] = 8] = "MAIL_TYPE_END"; //邮件类型结束
    })(MailType = message.MailType || (message.MailType = {}));
    // 社区版面类型
    var CommentType;
    (function (CommentType) {
        CommentType[CommentType["COMMENT_TYPE_UNKNOWN"] = 0] = "COMMENT_TYPE_UNKNOWN";
        CommentType[CommentType["COMMENT_TYPE_HUNTER"] = 1] = "COMMENT_TYPE_HUNTER";
        CommentType[CommentType["COMMENT_TYPE_TOWER"] = 2] = "COMMENT_TYPE_TOWER";
        CommentType[CommentType["COMMENT_TYPE_LICENCE"] = 3] = "COMMENT_TYPE_LICENCE";
        CommentType[CommentType["COMMENT_TYPE_INSTANCE"] = 4] = "COMMENT_TYPE_INSTANCE";
        CommentType[CommentType["COMMENT_TYPE_WANTED"] = 5] = "COMMENT_TYPE_WANTED";
        CommentType[CommentType["COMMENT_TYPE_TOTAL"] = 6] = "COMMENT_TYPE_TOTAL";
        CommentType[CommentType["COMMENT_TYPE_PUNITIVE"] = 7] = "COMMENT_TYPE_PUNITIVE";
        CommentType[CommentType["COMMENT_TYPE_RELIC"] = 8] = "COMMENT_TYPE_RELIC";
        CommentType[CommentType["COMMENT_TYPE_END"] = 9] = "COMMENT_TYPE_END"; // 类型结束
    })(CommentType = message.CommentType || (message.CommentType = {}));
    // 属性类型
    var AttriType;
    (function (AttriType) {
        AttriType[AttriType["ATTRI_TYPE_NONO"] = 0] = "ATTRI_TYPE_NONO";
        AttriType[AttriType["ATTRI_TYPE_HP"] = 1] = "ATTRI_TYPE_HP";
        AttriType[AttriType["ATTRI_TYPE_ATK"] = 2] = "ATTRI_TYPE_ATK";
        AttriType[AttriType["ATTRI_TYPE_DEF"] = 3] = "ATTRI_TYPE_DEF";
        AttriType[AttriType["ATTRI_TYPE_SKILL_ATK"] = 4] = "ATTRI_TYPE_SKILL_ATK";
        AttriType[AttriType["ATTRI_TYPE_SKILL_DEF"] = 5] = "ATTRI_TYPE_SKILL_DEF";
        AttriType[AttriType["ATTRI_TYPE_ATK_CRIT"] = 6] = "ATTRI_TYPE_ATK_CRIT";
        AttriType[AttriType["ATTRI_TYPE_SKILL_CRIT"] = 7] = "ATTRI_TYPE_SKILL_CRIT";
        AttriType[AttriType["ATTRI_TYPE_CRIT_EXTRA"] = 8] = "ATTRI_TYPE_CRIT_EXTRA";
        AttriType[AttriType["ATTRI_TYPE_CRIT_RESISTANCE"] = 9] = "ATTRI_TYPE_CRIT_RESISTANCE";
        AttriType[AttriType["ATTRI_TYPE_DODGE_RATE"] = 10] = "ATTRI_TYPE_DODGE_RATE";
        AttriType[AttriType["ATTRI_TYPE_HIT_RATE"] = 11] = "ATTRI_TYPE_HIT_RATE";
        AttriType[AttriType["ATTRI_TYPE_IGNORE_PHYDEF"] = 12] = "ATTRI_TYPE_IGNORE_PHYDEF";
        AttriType[AttriType["ATTRI_TYPE_IGNORE_MAGICDEF"] = 13] = "ATTRI_TYPE_IGNORE_MAGICDEF";
        AttriType[AttriType["ATTRI_TYPE_FINAL_EXTRA"] = 14] = "ATTRI_TYPE_FINAL_EXTRA";
        AttriType[AttriType["ATTRI_TYPE_FINAL_REDUCE"] = 15] = "ATTRI_TYPE_FINAL_REDUCE";
        AttriType[AttriType["ATTRI_TYPE_RAGE_REDUCE"] = 16] = "ATTRI_TYPE_RAGE_REDUCE";
        AttriType[AttriType["ATTRI_TYPE_ATK_ALL"] = 17] = "ATTRI_TYPE_ATK_ALL";
        AttriType[AttriType["ATTRI_TYPE_DEF_ALL"] = 18] = "ATTRI_TYPE_DEF_ALL";
        AttriType[AttriType["ATTRI_TYPE_ALL_CRIT"] = 19] = "ATTRI_TYPE_ALL_CRIT";
        AttriType[AttriType["ATTRI_TYPE_IGNORE_DEF_ALL"] = 20] = "ATTRI_TYPE_IGNORE_DEF_ALL";
        AttriType[AttriType["ATTRI_TYPE_UNIL_RESIS"] = 21] = "ATTRI_TYPE_UNIL_RESIS";
        AttriType[AttriType["ATTRI_TYPE_IGNORE_RESIS"] = 22] = "ATTRI_TYPE_IGNORE_RESIS";
        AttriType[AttriType["ATTRI_TYPE_FLOAT_RESIS"] = 23] = "ATTRI_TYPE_FLOAT_RESIS";
        AttriType[AttriType["ATTRI_TYPE_CD_SPEED"] = 24] = "ATTRI_TYPE_CD_SPEED";
        AttriType[AttriType["ATTRI_TYPE_SUPPORT_CONSUME"] = 25] = "ATTRI_TYPE_SUPPORT_CONSUME";
        AttriType[AttriType["ATTRI_TYPE_END"] = 26] = "ATTRI_TYPE_END"; // 类型结束
    })(AttriType = message.AttriType || (message.AttriType = {}));
    // 宝物属性加成对象
    var EPotatoAttriType;
    (function (EPotatoAttriType) {
        EPotatoAttriType[EPotatoAttriType["ATTRI_TYPE_NONO"] = 0] = "ATTRI_TYPE_NONO";
        EPotatoAttriType[EPotatoAttriType["ATTRI_TYPE_GENERAL_VALUE"] = 1] = "ATTRI_TYPE_GENERAL_VALUE";
        EPotatoAttriType[EPotatoAttriType["ATTRI_TYPE_GENERAL_PRE"] = 2] = "ATTRI_TYPE_GENERAL_PRE";
        EPotatoAttriType[EPotatoAttriType["ATTRI_TYPE_END"] = 3] = "ATTRI_TYPE_END"; // 类型结束
    })(EPotatoAttriType = message.EPotatoAttriType || (message.EPotatoAttriType = {}));
    // 孔类型
    var EHoleType;
    (function (EHoleType) {
        EHoleType[EHoleType["HOLE_TYPE_NONO"] = 0] = "HOLE_TYPE_NONO";
        EHoleType[EHoleType["HOLE_TYPE_ARTIFACT"] = 1] = "HOLE_TYPE_ARTIFACT";
        EHoleType[EHoleType["HOLE_TYPE_POTATO"] = 2] = "HOLE_TYPE_POTATO";
        EHoleType[EHoleType["HOLE_TYPE_END"] = 3] = "HOLE_TYPE_END"; // 类型结束
    })(EHoleType = message.EHoleType || (message.EHoleType = {}));
    // 品质
    var EQuality;
    (function (EQuality) {
        EQuality[EQuality["QUALITY_NONE"] = 0] = "QUALITY_NONE";
        EQuality[EQuality["QUALITY_F"] = 1] = "QUALITY_F";
        EQuality[EQuality["QUALITY_E"] = 2] = "QUALITY_E";
        EQuality[EQuality["QUALITY_D"] = 3] = "QUALITY_D";
        EQuality[EQuality["QUALITY_C"] = 4] = "QUALITY_C";
        EQuality[EQuality["QUALITY_B"] = 5] = "QUALITY_B";
        EQuality[EQuality["QUALITY_A"] = 6] = "QUALITY_A";
        EQuality[EQuality["QUALITY_S"] = 7] = "QUALITY_S";
        EQuality[EQuality["QUALITY_NUM"] = 10] = "QUALITY_NUM";
    })(EQuality = message.EQuality || (message.EQuality = {}));
    // 物品基本类型
    var EGoodsType;
    (function (EGoodsType) {
        EGoodsType[EGoodsType["GOODS_TYPE_NONO"] = 0] = "GOODS_TYPE_NONO";
        EGoodsType[EGoodsType["GOODS_TYPE_GENERAL"] = 1] = "GOODS_TYPE_GENERAL";
        EGoodsType[EGoodsType["GOODS_TYPE_RESOURCE"] = 2] = "GOODS_TYPE_RESOURCE";
        EGoodsType[EGoodsType["GOODS_TYPE_PROP"] = 3] = "GOODS_TYPE_PROP";
        EGoodsType[EGoodsType["GOODS_TYPE_GENERAL_SOUL"] = 4] = "GOODS_TYPE_GENERAL_SOUL";
        EGoodsType[EGoodsType["GOODS_TYPE_TALENT_BOOK"] = 5] = "GOODS_TYPE_TALENT_BOOK";
        EGoodsType[EGoodsType["GOODS_TYPE_PARTNER"] = 6] = "GOODS_TYPE_PARTNER";
        EGoodsType[EGoodsType["GOODS_TYPE_PET_HAT"] = 7] = "GOODS_TYPE_PET_HAT";
        EGoodsType[EGoodsType["GOODS_TYPE_EQUIP_FORGE"] = 8] = "GOODS_TYPE_EQUIP_FORGE";
        EGoodsType[EGoodsType["GOODS_TYPE_EQUIP_CARVE"] = 9] = "GOODS_TYPE_EQUIP_CARVE";
        EGoodsType[EGoodsType["GOODS_TYPE_POTATO"] = 10] = "GOODS_TYPE_POTATO";
        EGoodsType[EGoodsType["GOODS_TYPE_COLLECT"] = 11] = "GOODS_TYPE_COLLECT";
        EGoodsType[EGoodsType["GOODS_TYPE_JADE"] = 12] = "GOODS_TYPE_JADE";
        EGoodsType[EGoodsType["GOODS_TYPE_CIMELIA"] = 13] = "GOODS_TYPE_CIMELIA";
        EGoodsType[EGoodsType["GOODS_TYPE_PIC"] = 14] = "GOODS_TYPE_PIC";
        EGoodsType[EGoodsType["GOODS_TYPE_PIC_FRAME"] = 15] = "GOODS_TYPE_PIC_FRAME";
        EGoodsType[EGoodsType["GOODS_TYPE_TITLE"] = 16] = "GOODS_TYPE_TITLE";
        EGoodsType[EGoodsType["GOODS_TYPE_SECRET"] = 17] = "GOODS_TYPE_SECRET";
        EGoodsType[EGoodsType["GOODS_TYPE_FASHION"] = 18] = "GOODS_TYPE_FASHION";
        EGoodsType[EGoodsType["GOODS_TYPE_TRANSEFER"] = 19] = "GOODS_TYPE_TRANSEFER";
        EGoodsType[EGoodsType["GOODS_TYPE_CLIENT"] = 20] = "GOODS_TYPE_CLIENT";
        EGoodsType[EGoodsType["GOODS_TYPE_END"] = 21] = "GOODS_TYPE_END";
    })(EGoodsType = message.EGoodsType || (message.EGoodsType = {}));
    // 资源包资源ID对应类型
    var EResourceType;
    (function (EResourceType) {
        EResourceType[EResourceType["RESOURCE_NONO"] = 20000] = "RESOURCE_NONO";
        EResourceType[EResourceType["RESOURCE_MONEY"] = 20001] = "RESOURCE_MONEY";
        EResourceType[EResourceType["RESOURCE_TOKEN"] = 20002] = "RESOURCE_TOKEN";
        EResourceType[EResourceType["RESOURCE_POWER"] = 20003] = "RESOURCE_POWER";
        EResourceType[EResourceType["RESOURCE_LADDER"] = 20004] = "RESOURCE_LADDER";
        EResourceType[EResourceType["RESOURCE_LEAGUE_SCORE"] = 20005] = "RESOURCE_LEAGUE_SCORE";
        EResourceType[EResourceType["RESOURCE_PSYCHIC"] = 20006] = "RESOURCE_PSYCHIC";
        EResourceType[EResourceType["RESOURCE_LEAGUE"] = 20007] = "RESOURCE_LEAGUE";
        EResourceType[EResourceType["RESOURCE_RELIC_COIN"] = 20008] = "RESOURCE_RELIC_COIN";
        EResourceType[EResourceType["RESOURCE_PROMISE"] = 20009] = "RESOURCE_PROMISE";
        EResourceType[EResourceType["RESOURCE_LIEREN_COIN"] = 20010] = "RESOURCE_LIEREN_COIN";
        EResourceType[EResourceType["RESOURCE_ROLE_EXP"] = 20011] = "RESOURCE_ROLE_EXP";
        EResourceType[EResourceType["RESOURCE_VIP_EXP"] = 20012] = "RESOURCE_VIP_EXP";
        EResourceType[EResourceType["RESOURCE_GINSENG"] = 20013] = "RESOURCE_GINSENG";
        EResourceType[EResourceType["RESOURCE_LOTTERYSCORE"] = 20014] = "RESOURCE_LOTTERYSCORE";
        EResourceType[EResourceType["RESOURCE_GOLD_PLATE"] = 20015] = "RESOURCE_GOLD_PLATE";
        EResourceType[EResourceType["RESOURCE_WANTED_COIN"] = 20016] = "RESOURCE_WANTED_COIN";
        EResourceType[EResourceType["RESOURCE_ARREST_COIN"] = 20017] = "RESOURCE_ARREST_COIN";
        EResourceType[EResourceType["RESOURCE_HUNT_COIN"] = 20018] = "RESOURCE_HUNT_COIN";
        EResourceType[EResourceType["RESOURCE_HONOR_COIN"] = 20019] = "RESOURCE_HONOR_COIN";
        EResourceType[EResourceType["RESOURCE_BEER"] = 20020] = "RESOURCE_BEER";
        EResourceType[EResourceType["RESOURCE_REDWINE"] = 20021] = "RESOURCE_REDWINE";
        EResourceType[EResourceType["RESOURCE_CHAMPAGNE"] = 20022] = "RESOURCE_CHAMPAGNE";
        EResourceType[EResourceType["RESOURCE_SODA"] = 20023] = "RESOURCE_SODA";
        EResourceType[EResourceType["RESOURCE_DOLL_COIN"] = 20024] = "RESOURCE_DOLL_COIN";
        EResourceType[EResourceType["RESOURCE_DUST"] = 20025] = "RESOURCE_DUST";
        EResourceType[EResourceType["RESOURCE_CRYSTAL"] = 20026] = "RESOURCE_CRYSTAL";
        EResourceType[EResourceType["RESOURCE_PERMIT_EXP"] = 20027] = "RESOURCE_PERMIT_EXP";
        EResourceType[EResourceType["RESOURCE_AUCTIONSCORE"] = 20028] = "RESOURCE_AUCTIONSCORE";
        EResourceType[EResourceType["RESOURCE_STARDUST"] = 20029] = "RESOURCE_STARDUST";
        EResourceType[EResourceType["RESOURCE_STARSAND"] = 20030] = "RESOURCE_STARSAND";
        EResourceType[EResourceType["RESOURCE_LEAF"] = 20031] = "RESOURCE_LEAF";
        EResourceType[EResourceType["RESOURCE_RUM"] = 20032] = "RESOURCE_RUM"; // 朗姆酒
    })(EResourceType = message.EResourceType || (message.EResourceType = {}));
    // 聊天频道类型
    var ChatChannelType;
    (function (ChatChannelType) {
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_UNKONWN"] = 0] = "CHAT_CHANNEL_TYPE_UNKONWN";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_CROSS"] = 1] = "CHAT_CHANNEL_TYPE_CROSS";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_WORLD"] = 2] = "CHAT_CHANNEL_TYPE_WORLD";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_LEAGUE"] = 3] = "CHAT_CHANNEL_TYPE_LEAGUE";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_PERSONAL"] = 4] = "CHAT_CHANNEL_TYPE_PERSONAL";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_SYSTEM"] = 5] = "CHAT_CHANNEL_TYPE_SYSTEM";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_ANNOUNCEMENT"] = 6] = "CHAT_CHANNEL_TYPE_ANNOUNCEMENT";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_CHEST"] = 7] = "CHAT_CHANNEL_TYPE_CHEST";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_SCENE"] = 8] = "CHAT_CHANNEL_TYPE_SCENE";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_SCENE_SYSTEM"] = 9] = "CHAT_CHANNEL_TYPE_SCENE_SYSTEM";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_NEAR"] = 10] = "CHAT_CHANNEL_TYPE_NEAR";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_DARKLAND_SYSTEM"] = 11] = "CHAT_CHANNEL_TYPE_DARKLAND_SYSTEM";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_DARKLAND_CITY"] = 12] = "CHAT_CHANNEL_TYPE_DARKLAND_CITY";
        ChatChannelType[ChatChannelType["CHAT_CHANNEL_TYPE_END"] = 13] = "CHAT_CHANNEL_TYPE_END"; // 枚举结束
    })(ChatChannelType = message.ChatChannelType || (message.ChatChannelType = {}));
    // 聊天类型
    var EChatType;
    (function (EChatType) {
        EChatType[EChatType["CHAT_TYPE_CROSS"] = 0] = "CHAT_TYPE_CROSS";
        EChatType[EChatType["CHAT_TYPE_DARKLAND_CITY"] = 1] = "CHAT_TYPE_DARKLAND_CITY";
        EChatType[EChatType["CHAT_TYPE_SCENE_NEAR"] = 2] = "CHAT_TYPE_SCENE_NEAR";
        EChatType[EChatType["CHAT_TYPE_END"] = 3] = "CHAT_TYPE_END"; // 枚举结束
    })(EChatType = message.EChatType || (message.EChatType = {}));
    // 展示类型
    var ChatShowType;
    (function (ChatShowType) {
        ChatShowType[ChatShowType["CHAT_SHOW_TYPE_NONE"] = 0] = "CHAT_SHOW_TYPE_NONE";
        ChatShowType[ChatShowType["CHAT_SHOW_TYPE_GENERAL"] = 1] = "CHAT_SHOW_TYPE_GENERAL";
        ChatShowType[ChatShowType["CHAT_SHOW_TYPE_GOODS"] = 2] = "CHAT_SHOW_TYPE_GOODS";
        ChatShowType[ChatShowType["CHAT_SHOW_TYPE_WARREPORT"] = 3] = "CHAT_SHOW_TYPE_WARREPORT";
        ChatShowType[ChatShowType["CHAT_SHOW_TYPE_WARREPORT_BIG"] = 4] = "CHAT_SHOW_TYPE_WARREPORT_BIG";
        ChatShowType[ChatShowType["CHAT_SHOW_TYPE_RECRUIT"] = 5] = "CHAT_SHOW_TYPE_RECRUIT";
        ChatShowType[ChatShowType["CHAT_SHOW_TYPE_END"] = 6] = "CHAT_SHOW_TYPE_END";
    })(ChatShowType = message.ChatShowType || (message.ChatShowType = {}));
    // 进程类型
    var EProcessType;
    (function (EProcessType) {
        EProcessType[EProcessType["PROCESS_TYPE_NONO"] = 0] = "PROCESS_TYPE_NONO";
        EProcessType[EProcessType["PROCESS_TYPE_NEXTDAY"] = 1] = "PROCESS_TYPE_NEXTDAY";
        EProcessType[EProcessType["PROCESS_TYPE_ACTIVITIES"] = 101] = "PROCESS_TYPE_ACTIVITIES";
        EProcessType[EProcessType["PROCESS_TYPE_LADDER"] = 1001] = "PROCESS_TYPE_LADDER";
        EProcessType[EProcessType["PROCESS_TYPE_LOTTERY_DOUBLE"] = 1002] = "PROCESS_TYPE_LOTTERY_DOUBLE";
        EProcessType[EProcessType["PROCESS_TYPE_LEAGUE_MATCH"] = 1003] = "PROCESS_TYPE_LEAGUE_MATCH";
        EProcessType[EProcessType["PROCESS_TYPE_IMPEACH"] = 1004] = "PROCESS_TYPE_IMPEACH";
        EProcessType[EProcessType["PROCESS_TYPE_JOIN_LEAGUE"] = 1005] = "PROCESS_TYPE_JOIN_LEAGUE";
        EProcessType[EProcessType["PROCESS_TYPE_CHAT_FORBID"] = 1006] = "PROCESS_TYPE_CHAT_FORBID";
        EProcessType[EProcessType["PROCESS_TYPE_REWARD_POWER"] = 1007] = "PROCESS_TYPE_REWARD_POWER";
        EProcessType[EProcessType["PROCESS_TYPE_OPEN_POWER"] = 1008] = "PROCESS_TYPE_OPEN_POWER";
        EProcessType[EProcessType["PROCESS_TYPE_MALL_LADDER"] = 1009] = "PROCESS_TYPE_MALL_LADDER";
        EProcessType[EProcessType["PROCESS_TYPE_MALL_LEAGUE"] = 1010] = "PROCESS_TYPE_MALL_LEAGUE";
        EProcessType[EProcessType["PROCESS_TYPE_MALL_NORMAL"] = 1011] = "PROCESS_TYPE_MALL_NORMAL";
        EProcessType[EProcessType["PROCESS_TYPE_MALL_LOTTERY"] = 1012] = "PROCESS_TYPE_MALL_LOTTERY";
        EProcessType[EProcessType["PROCESS_TYPE_MISSION_SEVEN"] = 1013] = "PROCESS_TYPE_MISSION_SEVEN";
        EProcessType[EProcessType["PROCESS_TYPE_GAMBLE_NORMAL"] = 1014] = "PROCESS_TYPE_GAMBLE_NORMAL";
        EProcessType[EProcessType["PROCESS_TYPE_GAMBLE_SENIOR"] = 1015] = "PROCESS_TYPE_GAMBLE_SENIOR";
        EProcessType[EProcessType["PROCESS_TYPE_SCENE_BOSS"] = 1016] = "PROCESS_TYPE_SCENE_BOSS";
        EProcessType[EProcessType["PROCESS_TYPE_MALL_HONOR"] = 1018] = "PROCESS_TYPE_MALL_HONOR";
        EProcessType[EProcessType["PROCESS_TYPE_SINGLECRAFT"] = 1019] = "PROCESS_TYPE_SINGLECRAFT";
        EProcessType[EProcessType["PROCESS_TYPE_POST_FORBID"] = 1020] = "PROCESS_TYPE_POST_FORBID";
        EProcessType[EProcessType["PROCESS_TYPE_MALL_RELIC"] = 1021] = "PROCESS_TYPE_MALL_RELIC";
        EProcessType[EProcessType["PROCESS_TYPE_ACTIVITY_BOSS"] = 1022] = "PROCESS_TYPE_ACTIVITY_BOSS";
        EProcessType[EProcessType["PROCESS_TYPE_CONTEND"] = 1023] = "PROCESS_TYPE_CONTEND";
        EProcessType[EProcessType["PROCESS_TYPE_LEAGUE_BOSS"] = 1050] = "PROCESS_TYPE_LEAGUE_BOSS";
        EProcessType[EProcessType["PROCESS_TYPE_LEAGUE_PARTY"] = 1051] = "PROCESS_TYPE_LEAGUE_PARTY";
        EProcessType[EProcessType["PROCESS_TYPE_LEAGUE_FISHING"] = 1052] = "PROCESS_TYPE_LEAGUE_FISHING";
        EProcessType[EProcessType["PROCESS_TYPE_MALL_LEAGUE_SCORE"] = 1053] = "PROCESS_TYPE_MALL_LEAGUE_SCORE";
        EProcessType[EProcessType["PROCESS_TYPE_INTEGRAL_EGG"] = 1054] = "PROCESS_TYPE_INTEGRAL_EGG";
        EProcessType[EProcessType["PROCESS_TYPE_COMMENT_FORBID"] = 1055] = "PROCESS_TYPE_COMMENT_FORBID";
        EProcessType[EProcessType["PROCESS_TYPE_FIRST_REWARD"] = 1056] = "PROCESS_TYPE_FIRST_REWARD";
        EProcessType[EProcessType["PROCESS_TYPE_XUYUAN"] = 1057] = "PROCESS_TYPE_XUYUAN";
        EProcessType[EProcessType["PROCESS_TYPE_MISSION_ONE"] = 1058] = "PROCESS_TYPE_MISSION_ONE";
        EProcessType[EProcessType["PROCESS_TYPE_MISSION_TWO"] = 1059] = "PROCESS_TYPE_MISSION_TWO";
        EProcessType[EProcessType["PROCESS_TYPE_MISSION_MAQI"] = 1060] = "PROCESS_TYPE_MISSION_MAQI";
        EProcessType[EProcessType["PROCESS_TYPE_MISSION_KUBI"] = 1061] = "PROCESS_TYPE_MISSION_KUBI";
        EProcessType[EProcessType["PROCESS_TYPE_INSTANCE_POWER"] = 1062] = "PROCESS_TYPE_INSTANCE_POWER";
        EProcessType[EProcessType["PROCESS_TYPE_MISSION_WEEK"] = 1063] = "PROCESS_TYPE_MISSION_WEEK";
        EProcessType[EProcessType["PROCESS_TYPE_ACTIVITY_REDPACKET"] = 1064] = "PROCESS_TYPE_ACTIVITY_REDPACKET";
        EProcessType[EProcessType["PROCESS_TYPE_DARKLAND"] = 2000] = "PROCESS_TYPE_DARKLAND"; // 港口进程（0关闭1开启）
    })(EProcessType = message.EProcessType || (message.EProcessType = {}));
    // boss类型
    var EBossType;
    (function (EBossType) {
        EBossType[EBossType["BOSS_TYPE_NONO"] = 0] = "BOSS_TYPE_NONO";
        EBossType[EBossType["BOSS_TYPE_WORLD"] = 1] = "BOSS_TYPE_WORLD";
        EBossType[EBossType["BOSS_TYPE_LEAGUE"] = 2] = "BOSS_TYPE_LEAGUE";
        EBossType[EBossType["BOSS_TYPE_END"] = 3] = "BOSS_TYPE_END"; // 类型结束
    })(EBossType = message.EBossType || (message.EBossType = {}));
    // 回收类型
    var ERecoveryType;
    (function (ERecoveryType) {
        ERecoveryType[ERecoveryType["RECOVERY_TYPE_NONO"] = 0] = "RECOVERY_TYPE_NONO";
        ERecoveryType[ERecoveryType["RECOVERY_TYPE_GENERAL_LEVEL"] = 1] = "RECOVERY_TYPE_GENERAL_LEVEL";
        ERecoveryType[ERecoveryType["RECOVERY_TYPE_GENERAL_STEP"] = 2] = "RECOVERY_TYPE_GENERAL_STEP";
        ERecoveryType[ERecoveryType["RECOVERY_TYPE_GENERAL_SKILL"] = 3] = "RECOVERY_TYPE_GENERAL_SKILL";
        ERecoveryType[ERecoveryType["RECOVERY_TYPE_GENERAL_TALENT"] = 4] = "RECOVERY_TYPE_GENERAL_TALENT";
        ERecoveryType[ERecoveryType["RECOVERY_TYPE_EQUIP_SKILL"] = 5] = "RECOVERY_TYPE_EQUIP_SKILL";
        ERecoveryType[ERecoveryType["RECOVERY_TYPE_EQUIP_FORGE"] = 6] = "RECOVERY_TYPE_EQUIP_FORGE";
        ERecoveryType[ERecoveryType["RECOVERY_TYPE_EQUIP_CARVE"] = 7] = "RECOVERY_TYPE_EQUIP_CARVE";
        ERecoveryType[ERecoveryType["RECOVERY_TYPE_END"] = 8] = "RECOVERY_TYPE_END"; // 类型结束
    })(ERecoveryType = message.ERecoveryType || (message.ERecoveryType = {}));
    // 排行类型
    // 日志入库统一处理前500名
    var ERankType;
    (function (ERankType) {
        ERankType[ERankType["RANK_TYPE_NONO"] = 0] = "RANK_TYPE_NONO";
        ERankType[ERankType["RANK_TYPE_LEVEL"] = 1] = "RANK_TYPE_LEVEL";
        ERankType[ERankType["RANK_TYPE_LADDER"] = 2] = "RANK_TYPE_LADDER";
        ERankType[ERankType["RANK_TYPE_LEAGUE"] = 3] = "RANK_TYPE_LEAGUE";
        ERankType[ERankType["RANK_TYPE_TOWER"] = 4] = "RANK_TYPE_TOWER";
        ERankType[ERankType["RANK_TYPE_HIGH_TOWER"] = 5] = "RANK_TYPE_HIGH_TOWER";
        ERankType[ERankType["RANK_TYPE_RELIC_INSTANCE"] = 6] = "RANK_TYPE_RELIC_INSTANCE";
        ERankType[ERankType["RANK_TYPE_END"] = 7] = "RANK_TYPE_END"; // 排行类型数量
    })(ERankType = message.ERankType || (message.ERankType = {}));
    // 工会排行类型
    var ELeagueRankType;
    (function (ELeagueRankType) {
        ELeagueRankType[ELeagueRankType["RANK_TYPE_NONO"] = 0] = "RANK_TYPE_NONO";
        ELeagueRankType[ELeagueRankType["RANK_TYPE_LEVEL"] = 1] = "RANK_TYPE_LEVEL";
        ELeagueRankType[ELeagueRankType["RANK_TYPE_POWER"] = 2] = "RANK_TYPE_POWER";
        ELeagueRankType[ELeagueRankType["RANK_TYPE_DAN"] = 3] = "RANK_TYPE_DAN";
        ELeagueRankType[ELeagueRankType["RANK_TYPE_ACTIVE"] = 4] = "RANK_TYPE_ACTIVE";
        ELeagueRankType[ELeagueRankType["RANK_TYPE_END"] = 5] = "RANK_TYPE_END"; // 类型结束
    })(ELeagueRankType = message.ELeagueRankType || (message.ELeagueRankType = {}));
    // 阵型类型
    var EFormationType;
    (function (EFormationType) {
        EFormationType[EFormationType["FORMATION_TYPE_NONO"] = 0] = "FORMATION_TYPE_NONO";
        EFormationType[EFormationType["FORMATION_TYPE_INSTANCE_NORMAL"] = 1] = "FORMATION_TYPE_INSTANCE_NORMAL";
        EFormationType[EFormationType["FORMATION_TYPE_INSTANCE_ELITE"] = 2] = "FORMATION_TYPE_INSTANCE_ELITE";
        EFormationType[EFormationType["FORMATION_TYPE_INSTANCE_MONEY"] = 3] = "FORMATION_TYPE_INSTANCE_MONEY";
        EFormationType[EFormationType["FORMATION_TYPE_INSTANCE_EXP"] = 4] = "FORMATION_TYPE_INSTANCE_EXP";
        EFormationType[EFormationType["FORMATION_TYPE_INSTANCE_TOWER"] = 5] = "FORMATION_TYPE_INSTANCE_TOWER";
        EFormationType[EFormationType["FORMATION_TYPE_LADDER_DEFENCE"] = 6] = "FORMATION_TYPE_LADDER_DEFENCE";
        EFormationType[EFormationType["FORMATION_TYPE_LADDER_ATTACK"] = 7] = "FORMATION_TYPE_LADDER_ATTACK";
        EFormationType[EFormationType["FORMATION_TYPE_WANTED"] = 8] = "FORMATION_TYPE_WANTED";
        EFormationType[EFormationType["FORMATION_TYPE_TRAINING"] = 9] = "FORMATION_TYPE_TRAINING";
        EFormationType[EFormationType["FORMATION_TYPE_LEAGUE_BOSS"] = 10] = "FORMATION_TYPE_LEAGUE_BOSS";
        EFormationType[EFormationType["FORMATION_TYPE_LEAGUE_INSTANCE"] = 11] = "FORMATION_TYPE_LEAGUE_INSTANCE";
        EFormationType[EFormationType["FORMATION_TYPE_ACTIVITY_BOSS"] = 12] = "FORMATION_TYPE_ACTIVITY_BOSS";
        EFormationType[EFormationType["FORMATION_TYPE_WONDERLAND"] = 13] = "FORMATION_TYPE_WONDERLAND";
        EFormationType[EFormationType["FORMATION_TYPE_MISSION_LICENCE"] = 14] = "FORMATION_TYPE_MISSION_LICENCE";
        EFormationType[EFormationType["FORMATION_TYPE_CRAFT"] = 15] = "FORMATION_TYPE_CRAFT";
        EFormationType[EFormationType["FORMATION_TYPE_CRAFT_ATTACK"] = 16] = "FORMATION_TYPE_CRAFT_ATTACK";
        EFormationType[EFormationType["FORMATION_TYPE_ZORK"] = 17] = "FORMATION_TYPE_ZORK";
        EFormationType[EFormationType["FORMATION_TYPE_WANTED_ENEMY_CAMP"] = 18] = "FORMATION_TYPE_WANTED_ENEMY_CAMP";
        EFormationType[EFormationType["FORMATION_TYPE_GENERAL_LIFE_STAT"] = 19] = "FORMATION_TYPE_GENERAL_LIFE_STAT";
        EFormationType[EFormationType["FORMATION_TYPE_INSTANCE_HIGH_TOWER"] = 20] = "FORMATION_TYPE_INSTANCE_HIGH_TOWER";
        EFormationType[EFormationType["FORMATION_TYPE_PVP_SIMPLE"] = 21] = "FORMATION_TYPE_PVP_SIMPLE";
        EFormationType[EFormationType["FORMATION_TYPE_PVP_THIRD"] = 22] = "FORMATION_TYPE_PVP_THIRD";
        EFormationType[EFormationType["FORMATION_TYPE_GROUP_FIGHT"] = 23] = "FORMATION_TYPE_GROUP_FIGHT";
        EFormationType[EFormationType["FORMATION_TYPE_MATCH_ATTACK"] = 24] = "FORMATION_TYPE_MATCH_ATTACK";
        EFormationType[EFormationType["FORMATION_TYPE_MATCH_DEFENSE"] = 25] = "FORMATION_TYPE_MATCH_DEFENSE";
        EFormationType[EFormationType["FORMATION_TYPE_RELIC"] = 26] = "FORMATION_TYPE_RELIC";
        EFormationType[EFormationType["FORMATION_TYPE_CONTEND_ATTACK"] = 27] = "FORMATION_TYPE_CONTEND_ATTACK";
        EFormationType[EFormationType["FORMATION_TYPE_CONTEND_DEFENSE"] = 28] = "FORMATION_TYPE_CONTEND_DEFENSE";
        EFormationType[EFormationType["FORMATION_TYPE_ACTIVITY"] = 29] = "FORMATION_TYPE_ACTIVITY";
        EFormationType[EFormationType["FORMATION_TYPE_SPRING_BATTLE"] = 30] = "FORMATION_TYPE_SPRING_BATTLE";
        EFormationType[EFormationType["FORMATION_TYPE_SPRING_DEFENSE"] = 31] = "FORMATION_TYPE_SPRING_DEFENSE";
        EFormationType[EFormationType["FORMATION_TYPE_ACTIVITY_RAND"] = 32] = "FORMATION_TYPE_ACTIVITY_RAND";
        EFormationType[EFormationType["FORMATION_TYPE_CNT"] = 33] = "FORMATION_TYPE_CNT"; // 类型数量
    })(EFormationType = message.EFormationType || (message.EFormationType = {}));
    // 怪物类型
    var EMobType;
    (function (EMobType) {
        EMobType[EMobType["MOB_TYPE_NONO"] = 0] = "MOB_TYPE_NONO";
        EMobType[EMobType["MOB_TYPE_LEAGUE_INSTANCE"] = 1] = "MOB_TYPE_LEAGUE_INSTANCE";
        EMobType[EMobType["MOB_TYPE_WONDERLAND"] = 2] = "MOB_TYPE_WONDERLAND";
        EMobType[EMobType["MOB_TYPE_WANTED"] = 3] = "MOB_TYPE_WANTED";
        EMobType[EMobType["MOB_TYPE_END"] = 5] = "MOB_TYPE_END"; // 类型结束
    })(EMobType = message.EMobType || (message.EMobType = {}));
    // 武将资质类型
    var EGeneralAptitude;
    (function (EGeneralAptitude) {
        EGeneralAptitude[EGeneralAptitude["GENERAL_APTITUDE_NONO"] = 10] = "GENERAL_APTITUDE_NONO";
        EGeneralAptitude[EGeneralAptitude["GENERAL_APTITUDE_C"] = 11] = "GENERAL_APTITUDE_C";
        EGeneralAptitude[EGeneralAptitude["GENERAL_APTITUDE_B"] = 12] = "GENERAL_APTITUDE_B";
        EGeneralAptitude[EGeneralAptitude["GENERAL_APTITUDE_A"] = 13] = "GENERAL_APTITUDE_A";
        EGeneralAptitude[EGeneralAptitude["GENERAL_APTITUDE_S"] = 14] = "GENERAL_APTITUDE_S";
        EGeneralAptitude[EGeneralAptitude["GENERAL_APTITUDE_END"] = 15] = "GENERAL_APTITUDE_END"; // 类型结束
    })(EGeneralAptitude = message.EGeneralAptitude || (message.EGeneralAptitude = {}));
    // 武将特性类型
    var EGeneralFeature;
    (function (EGeneralFeature) {
        EGeneralFeature[EGeneralFeature["GENERAL_FEATURE_NONO"] = 0] = "GENERAL_FEATURE_NONO";
        EGeneralFeature[EGeneralFeature["GENERAL_FEATURE_ATTACK"] = 1] = "GENERAL_FEATURE_ATTACK";
        EGeneralFeature[EGeneralFeature["GENERAL_FEATURE_DEFENCE"] = 2] = "GENERAL_FEATURE_DEFENCE";
        EGeneralFeature[EGeneralFeature["GENERAL_FEATURE_SKILL"] = 3] = "GENERAL_FEATURE_SKILL";
        EGeneralFeature[EGeneralFeature["GENERAL_FEATURE_END"] = 4] = "GENERAL_FEATURE_END"; // 类型结束
    })(EGeneralFeature = message.EGeneralFeature || (message.EGeneralFeature = {}));
    // 猎人系类型
    var EGeneralType;
    (function (EGeneralType) {
        EGeneralType[EGeneralType["GENERAL_TYPE_NONO"] = 0] = "GENERAL_TYPE_NONO";
        EGeneralType[EGeneralType["GENERAL_TYPE_QIANGHUA"] = 1] = "GENERAL_TYPE_QIANGHUA";
        EGeneralType[EGeneralType["GENERAL_TYPE_FANGCHU"] = 2] = "GENERAL_TYPE_FANGCHU";
        EGeneralType[EGeneralType["GENERAL_TYPE_XIANHUA"] = 3] = "GENERAL_TYPE_XIANHUA";
        EGeneralType[EGeneralType["GENERAL_TYPE_TEZHI"] = 4] = "GENERAL_TYPE_TEZHI";
        EGeneralType[EGeneralType["GENERAL_TYPE_BIANHUA"] = 5] = "GENERAL_TYPE_BIANHUA";
        EGeneralType[EGeneralType["GENERAL_TYPE_CAOZUO"] = 6] = "GENERAL_TYPE_CAOZUO";
        EGeneralType[EGeneralType["GENERAL_TYPE_END"] = 7] = "GENERAL_TYPE_END"; // 类型结束
    })(EGeneralType = message.EGeneralType || (message.EGeneralType = {}));
    // 卡片派系类型
    var ECardType;
    (function (ECardType) {
        ECardType[ECardType["CARD_TYPE_NONO"] = 0] = "CARD_TYPE_NONO";
        ECardType[ECardType["CARD_TYPE_CHAN"] = 1] = "CARD_TYPE_CHAN";
        ECardType[ECardType["CARD_TYPE_JUE"] = 2] = "CARD_TYPE_JUE";
        ECardType[ECardType["CARD_TYPE_LIAN"] = 3] = "CARD_TYPE_LIAN";
        ECardType[ECardType["CARD_TYPE_FA"] = 4] = "CARD_TYPE_FA";
        ECardType[ECardType["CARD_TYPE_YUAN"] = 5] = "CARD_TYPE_YUAN";
        ECardType[ECardType["CARD_TYPE_JIAN"] = 6] = "CARD_TYPE_JIAN";
        ECardType[ECardType["CARD_TYPE_YING"] = 7] = "CARD_TYPE_YING";
        ECardType[ECardType["CARD_TYPE_END"] = 8] = "CARD_TYPE_END"; // 类型结束
    })(ECardType = message.ECardType || (message.ECardType = {}));
    // 特殊念兽类型
    var EAdviserType;
    (function (EAdviserType) {
        EAdviserType[EAdviserType["ADVISER_TYPE_POWER"] = 10] = "ADVISER_TYPE_POWER";
        EAdviserType[EAdviserType["ADVISER_TYPE_MONEY"] = 11] = "ADVISER_TYPE_MONEY";
        EAdviserType[EAdviserType["ADVISER_TYPE_TOKEN"] = 12] = "ADVISER_TYPE_TOKEN"; // 钻石念兽
    })(EAdviserType = message.EAdviserType || (message.EAdviserType = {}));
    // 宠物状态
    var EPetStatusType;
    (function (EPetStatusType) {
        EPetStatusType[EPetStatusType["PET_TYPE_STANDBY"] = 0] = "PET_TYPE_STANDBY";
        EPetStatusType[EPetStatusType["PET_TYPE_IN_POSTION"] = 1] = "PET_TYPE_IN_POSTION";
        EPetStatusType[EPetStatusType["PET_TYPE_END"] = 2] = "PET_TYPE_END";
    })(EPetStatusType = message.EPetStatusType || (message.EPetStatusType = {}));
    // 场景枚举
    var ESceneType;
    (function (ESceneType) {
        ESceneType[ESceneType["SCENE_TYPE_NONO"] = 0] = "SCENE_TYPE_NONO";
        ESceneType[ESceneType["SCENE_TYPE_WONDERLAND"] = 1] = "SCENE_TYPE_WONDERLAND";
        ESceneType[ESceneType["SCENE_TYPE_BOSS"] = 2] = "SCENE_TYPE_BOSS";
        ESceneType[ESceneType["SCENE_TYPE_DARKLAND"] = 3] = "SCENE_TYPE_DARKLAND";
        ESceneType[ESceneType["SCENE_TYPE_END"] = 4] = "SCENE_TYPE_END"; // 枚举结束
    })(ESceneType = message.ESceneType || (message.ESceneType = {}));
    // 场景中元素类型
    var ESceneItemType;
    (function (ESceneItemType) {
        ESceneItemType[ESceneItemType["SCENE_ITEM_TYPE_ROLE"] = 0] = "SCENE_ITEM_TYPE_ROLE";
        ESceneItemType[ESceneItemType["SCENE_ITEM_TYPE_BUILD"] = 1] = "SCENE_ITEM_TYPE_BUILD";
        ESceneItemType[ESceneItemType["SCENE_ITEM_TYPE_COLLECTION"] = 2] = "SCENE_ITEM_TYPE_COLLECTION";
        ESceneItemType[ESceneItemType["SCENE_ITEM_TYPE_MOBS"] = 3] = "SCENE_ITEM_TYPE_MOBS";
        ESceneItemType[ESceneItemType["SCENE_ITEM_TYPE_MOBS_PRODUCE"] = 4] = "SCENE_ITEM_TYPE_MOBS_PRODUCE";
        ESceneItemType[ESceneItemType["SCENE_ITEM_TYPE_BOSS"] = 5] = "SCENE_ITEM_TYPE_BOSS";
        ESceneItemType[ESceneItemType["SCENE_ITEM_TYPE_END"] = 6] = "SCENE_ITEM_TYPE_END"; // 类型结束
    })(ESceneItemType = message.ESceneItemType || (message.ESceneItemType = {}));
    // 场景中建筑元素类型
    var ESceneBuildType;
    (function (ESceneBuildType) {
        ESceneBuildType[ESceneBuildType["SCENE_BUILD_TYPE_NONO"] = 0] = "SCENE_BUILD_TYPE_NONO";
        ESceneBuildType[ESceneBuildType["SCENE_BUILD_TYPE_OBSTACLE"] = 1] = "SCENE_BUILD_TYPE_OBSTACLE";
        ESceneBuildType[ESceneBuildType["SCENE_BUILD_TYPE_VICE_TOWER"] = 2] = "SCENE_BUILD_TYPE_VICE_TOWER";
        ESceneBuildType[ESceneBuildType["SCENE_BUILD_TYPE_MAIN_TOWER"] = 3] = "SCENE_BUILD_TYPE_MAIN_TOWER";
        ESceneBuildType[ESceneBuildType["SCENE_BUILD_TYPE_CANNON"] = 4] = "SCENE_BUILD_TYPE_CANNON";
        ESceneBuildType[ESceneBuildType["SCENE_BUILD_TYPE_END"] = 5] = "SCENE_BUILD_TYPE_END"; // 类型结束
    })(ESceneBuildType = message.ESceneBuildType || (message.ESceneBuildType = {}));
    // 场景中元素状态
    var ESceneItemState;
    (function (ESceneItemState) {
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_NONO"] = 0] = "SCENE_ITEM_STATE_NONO";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_MOVE"] = 1] = "SCENE_ITEM_STATE_MOVE";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_LEAVE"] = 2] = "SCENE_ITEM_STATE_LEAVE";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_DEAD"] = 3] = "SCENE_ITEM_STATE_DEAD";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_JOIN"] = 4] = "SCENE_ITEM_STATE_JOIN";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_RELIVE"] = 5] = "SCENE_ITEM_STATE_RELIVE";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_FASTER"] = 6] = "SCENE_ITEM_STATE_FASTER";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_ADDBLOOD"] = 7] = "SCENE_ITEM_STATE_ADDBLOOD";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_CHANGE_MODE"] = 8] = "SCENE_ITEM_STATE_CHANGE_MODE";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_COLLECTION"] = 9] = "SCENE_ITEM_STATE_COLLECTION";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_COLLECTION_BREAK"] = 10] = "SCENE_ITEM_STATE_COLLECTION_BREAK";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_FRUIT_RIPE"] = 11] = "SCENE_ITEM_STATE_FRUIT_RIPE";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_BATTLE"] = 12] = "SCENE_ITEM_STATE_BATTLE";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_BATTLED"] = 13] = "SCENE_ITEM_STATE_BATTLED";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_DECLARE"] = 14] = "SCENE_ITEM_STATE_DECLARE";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_DECLARED"] = 15] = "SCENE_ITEM_STATE_DECLARED";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_KILL_RANK"] = 16] = "SCENE_ITEM_STATE_KILL_RANK";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_BOMB"] = 17] = "SCENE_ITEM_STATE_BOMB";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_FROZEN"] = 18] = "SCENE_ITEM_STATE_FROZEN";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_FRUIT_DOUBLE"] = 19] = "SCENE_ITEM_STATE_FRUIT_DOUBLE";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_MACHINE_FASTER"] = 20] = "SCENE_ITEM_STATE_MACHINE_FASTER";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_MACHINE_ADDBLOOD"] = 21] = "SCENE_ITEM_STATE_MACHINE_ADDBLOOD";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_CANNON"] = 22] = "SCENE_ITEM_STATE_CANNON";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_CANNON_LAUNCH"] = 23] = "SCENE_ITEM_STATE_CANNON_LAUNCH";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_CANNON_COLLECTION"] = 29] = "SCENE_ITEM_STATE_CANNON_COLLECTION";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_CANNON_BUILD"] = 30] = "SCENE_ITEM_STATE_CANNON_BUILD";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_ATTACKBOSS"] = 31] = "SCENE_ITEM_STATE_ATTACKBOSS";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_BOSS_SKILL_READY"] = 32] = "SCENE_ITEM_STATE_BOSS_SKILL_READY";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_BOSS_SKILL_LAUNCH"] = 33] = "SCENE_ITEM_STATE_BOSS_SKILL_LAUNCH";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_BOSS_HURTED"] = 34] = "SCENE_ITEM_STATE_BOSS_HURTED";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_VIEW_JOIN"] = 101] = "SCENE_ITEM_STATE_VIEW_JOIN";
        ESceneItemState[ESceneItemState["SCENE_ITEM_STATE_VIEW_LEAVE"] = 102] = "SCENE_ITEM_STATE_VIEW_LEAVE"; // 离开视野(表示移动到某个点结束)
    })(ESceneItemState = message.ESceneItemState || (message.ESceneItemState = {}));
    // 战斗模式
    var EBattleMode;
    (function (EBattleMode) {
        EBattleMode[EBattleMode["BATTLE_MODE_PEACE"] = 0] = "BATTLE_MODE_PEACE";
        EBattleMode[EBattleMode["BATTLE_MODE_FIGHTING"] = 1] = "BATTLE_MODE_FIGHTING";
        EBattleMode[EBattleMode["BATTLE_MODE_KILLING"] = 2] = "BATTLE_MODE_KILLING";
        EBattleMode[EBattleMode["BATTLE_MODE_END"] = 4] = "BATTLE_MODE_END"; // 枚举结束
    })(EBattleMode = message.EBattleMode || (message.EBattleMode = {}));
    // 场景机关枚举
    var ESceneMachine;
    (function (ESceneMachine) {
        ESceneMachine[ESceneMachine["SCENE_MACHINE_NONO"] = 0] = "SCENE_MACHINE_NONO";
        ESceneMachine[ESceneMachine["SCENE_MACHINE_BOMB"] = 1] = "SCENE_MACHINE_BOMB";
        ESceneMachine[ESceneMachine["SCENE_MACHINE_FROZEN"] = 2] = "SCENE_MACHINE_FROZEN";
        ESceneMachine[ESceneMachine["SCENE_MACHINE_ADDSPEED"] = 3] = "SCENE_MACHINE_ADDSPEED";
        ESceneMachine[ESceneMachine["SCENE_MACHINE_ADDBLOOD"] = 4] = "SCENE_MACHINE_ADDBLOOD";
        ESceneMachine[ESceneMachine["SCENE_MACHINE_ADDFRUIT"] = 5] = "SCENE_MACHINE_ADDFRUIT";
        ESceneMachine[ESceneMachine["SCENE_MACHINE_END"] = 6] = "SCENE_MACHINE_END"; // 枚举结束
    })(ESceneMachine = message.ESceneMachine || (message.ESceneMachine = {}));
    // 个人商店类型
    var EMallType;
    (function (EMallType) {
        EMallType[EMallType["MALL_TYPE_NONO"] = 0] = "MALL_TYPE_NONO";
        EMallType[EMallType["MALL_TYPE_ORDINARY"] = 1] = "MALL_TYPE_ORDINARY";
        EMallType[EMallType["MALL_TYPE_LADDER"] = 2] = "MALL_TYPE_LADDER";
        EMallType[EMallType["MALL_TYPE_LEAGUE"] = 3] = "MALL_TYPE_LEAGUE";
        EMallType[EMallType["MALL_TYPE_HONOR"] = 4] = "MALL_TYPE_HONOR";
        EMallType[EMallType["MALL_TYPE_LOTTERY"] = 5] = "MALL_TYPE_LOTTERY";
        EMallType[EMallType["MALL_TYPE_LEAGUE_SCORE"] = 6] = "MALL_TYPE_LEAGUE_SCORE";
        EMallType[EMallType["MALL_TYPE_RELIC"] = 7] = "MALL_TYPE_RELIC";
        EMallType[EMallType["MALL_TYPE_END"] = 8] = "MALL_TYPE_END"; // 商店类型结束
    })(EMallType = message.EMallType || (message.EMallType = {}));
    // 抽卡类型
    var ELotteryType;
    (function (ELotteryType) {
        ELotteryType[ELotteryType["ELotteryType_TYPE_NONO"] = 0] = "ELotteryType_TYPE_NONO";
        ELotteryType[ELotteryType["ELotteryType_TYPE_BEER"] = 1] = "ELotteryType_TYPE_BEER";
        ELotteryType[ELotteryType["ELotteryType_TYPE_REDWINE"] = 2] = "ELotteryType_TYPE_REDWINE";
        ELotteryType[ELotteryType["ELotteryType_TYPE_CHAMPAGNE"] = 3] = "ELotteryType_TYPE_CHAMPAGNE";
        ELotteryType[ELotteryType["ELotteryType_TYPE_SODA"] = 4] = "ELotteryType_TYPE_SODA";
        ELotteryType[ELotteryType["ELotteryType_TYPE_RUM"] = 5] = "ELotteryType_TYPE_RUM";
        ELotteryType[ELotteryType["ELotteryType_TYPE_END"] = 6] = "ELotteryType_TYPE_END"; // 枚举结束
    })(ELotteryType = message.ELotteryType || (message.ELotteryType = {}));
    // 兑换商城类型
    var EExchangeMallType;
    (function (EExchangeMallType) {
        EExchangeMallType[EExchangeMallType["EXCHANGEMALL_TYPE_NONO"] = 0] = "EXCHANGEMALL_TYPE_NONO";
        EExchangeMallType[EExchangeMallType["EXCHANGEMALL_TYPE_WONDERLAND"] = 1] = "EXCHANGEMALL_TYPE_WONDERLAND";
        EExchangeMallType[EExchangeMallType["EXCHANGEMALL_TYPE_LEAGUE"] = 2] = "EXCHANGEMALL_TYPE_LEAGUE";
        EExchangeMallType[EExchangeMallType["EXCHANGEMALL_TYPE_DEMON"] = 3] = "EXCHANGEMALL_TYPE_DEMON";
        EExchangeMallType[EExchangeMallType["EXCHANGEMALL_TYPE_END"] = 4] = "EXCHANGEMALL_TYPE_END"; // 枚举结束
    })(EExchangeMallType = message.EExchangeMallType || (message.EExchangeMallType = {}));
    // 物品获得展示类型
    var EGoodsShow;
    (function (EGoodsShow) {
        EGoodsShow[EGoodsShow["GOODS_SHOW_NONO"] = 0] = "GOODS_SHOW_NONO";
        EGoodsShow[EGoodsShow["GOODS_SHOW_LOTTERY"] = 1] = "GOODS_SHOW_LOTTERY";
        EGoodsShow[EGoodsShow["GOODS_SHOW_CHEST"] = 2] = "GOODS_SHOW_CHEST";
        EGoodsShow[EGoodsShow["GOODS_SHOW_WANTED"] = 3] = "GOODS_SHOW_WANTED";
        EGoodsShow[EGoodsShow["GOODS_SHOW_FIRSTCHARGE"] = 4] = "GOODS_SHOW_FIRSTCHARGE";
        EGoodsShow[EGoodsShow["GOODS_SHOW_WONDERFRUIT"] = 5] = "GOODS_SHOW_WONDERFRUIT";
        EGoodsShow[EGoodsShow["GOODS_SHOW_JAMBLEJADE"] = 6] = "GOODS_SHOW_JAMBLEJADE";
        EGoodsShow[EGoodsShow["GOODS_SHOW_INTEGRAL"] = 7] = "GOODS_SHOW_INTEGRAL";
        EGoodsShow[EGoodsShow["GOODS_SHOW_END"] = 8] = "GOODS_SHOW_END"; // 类型结束
    })(EGoodsShow = message.EGoodsShow || (message.EGoodsShow = {}));
    // 礼包类型
    var EGiftType;
    (function (EGiftType) {
        EGiftType[EGiftType["GIFT_TYPE_NONO"] = 0] = "GIFT_TYPE_NONO";
        EGiftType[EGiftType["GIFT_TYPE_LEVEL"] = 1] = "GIFT_TYPE_LEVEL";
        EGiftType[EGiftType["GIFT_TYPE_BACK"] = 2] = "GIFT_TYPE_BACK";
        EGiftType[EGiftType["GIFT_TYPE_POTATO_STAR"] = 3] = "GIFT_TYPE_POTATO_STAR";
        EGiftType[EGiftType["GIFT_TYPE_GENERAL_STAR"] = 4] = "GIFT_TYPE_GENERAL_STAR";
        EGiftType[EGiftType["GIFT_TYPE_GENERAL_QUAILTY"] = 5] = "GIFT_TYPE_GENERAL_QUAILTY";
        EGiftType[EGiftType["GIFT_TYPE_PAY"] = 6] = "GIFT_TYPE_PAY";
        EGiftType[EGiftType["GIFT_TYPE_H5"] = 7] = "GIFT_TYPE_H5";
        EGiftType[EGiftType["GIFT_TYPE_LICENCE"] = 8] = "GIFT_TYPE_LICENCE";
        EGiftType[EGiftType["GIFT_TYPE_SMALL"] = 9] = "GIFT_TYPE_SMALL";
        EGiftType[EGiftType["GIFT_TYPE_GENERAL_QUAILTY_ONLY"] = 10] = "GIFT_TYPE_GENERAL_QUAILTY_ONLY";
        EGiftType[EGiftType["GIFT_TYPE_WANTED"] = 11] = "GIFT_TYPE_WANTED";
        EGiftType[EGiftType["GIFT_TYPE_END"] = 12] = "GIFT_TYPE_END"; // 类型结束
    })(EGiftType = message.EGiftType || (message.EGiftType = {}));
    // 礼包形式
    var EGiftForm;
    (function (EGiftForm) {
        EGiftForm[EGiftForm["GIFT_FORM_NONO"] = 0] = "GIFT_FORM_NONO";
        EGiftForm[EGiftForm["GIFT_FORM_TIMES"] = 1] = "GIFT_FORM_TIMES";
        EGiftForm[EGiftForm["GIFT_FORM_DAILY_BUY"] = 2] = "GIFT_FORM_DAILY_BUY";
        EGiftForm[EGiftForm["GIFT_FORM_DAILY_REWARD"] = 3] = "GIFT_FORM_DAILY_REWARD";
        EGiftForm[EGiftForm["GIFT_FORM_WEEK_BUY"] = 4] = "GIFT_FORM_WEEK_BUY";
        EGiftForm[EGiftForm["GIFT_FORM_DAILY_BUY_REWARD"] = 5] = "GIFT_FORM_DAILY_BUY_REWARD";
        EGiftForm[EGiftForm["GIFT_FORM_LEVEL_BUY"] = 6] = "GIFT_FORM_LEVEL_BUY";
        EGiftForm[EGiftForm["GIFT_FORM_END"] = 7] = "GIFT_FORM_END"; // 类型结束
    })(EGiftForm = message.EGiftForm || (message.EGiftForm = {}));
    // 支付类型
    var EPayType;
    (function (EPayType) {
        EPayType[EPayType["PAY_TYPE_NONO"] = 0] = "PAY_TYPE_NONO";
        EPayType[EPayType["PAY_TYPE_RMB"] = 1] = "PAY_TYPE_RMB";
        EPayType[EPayType["PAY_TYPE_TOKEN"] = 2] = "PAY_TYPE_TOKEN";
        EPayType[EPayType["PAY_TYPE_FREE"] = 3] = "PAY_TYPE_FREE";
        EPayType[EPayType["PAY_TYPE_END"] = 4] = "PAY_TYPE_END"; // 类型结束
    })(EPayType = message.EPayType || (message.EPayType = {}));
    // 星耀等级类型
    var VStarLevelType;
    (function (VStarLevelType) {
        VStarLevelType[VStarLevelType["STAR_LEVEL_NONE"] = 0] = "STAR_LEVEL_NONE";
        VStarLevelType[VStarLevelType["STAR_LEVEL_ONE"] = 1] = "STAR_LEVEL_ONE";
        VStarLevelType[VStarLevelType["STAR_LEVEL_TWO"] = 2] = "STAR_LEVEL_TWO";
        VStarLevelType[VStarLevelType["STAR_LEVEL_THREE"] = 3] = "STAR_LEVEL_THREE";
        VStarLevelType[VStarLevelType["STAR_LEVEL_FOUR"] = 4] = "STAR_LEVEL_FOUR";
        VStarLevelType[VStarLevelType["STAR_LEVEL_FIVE"] = 5] = "STAR_LEVEL_FIVE";
        VStarLevelType[VStarLevelType["STAR_LEVEL_SIX"] = 6] = "STAR_LEVEL_SIX";
        VStarLevelType[VStarLevelType["STAR_LEVEL_SEVEN"] = 7] = "STAR_LEVEL_SEVEN";
        VStarLevelType[VStarLevelType["STAR_LEVEL_END"] = 8] = "STAR_LEVEL_END"; // 未知
    })(VStarLevelType = message.VStarLevelType || (message.VStarLevelType = {}));
    // 通行证日常任务
    var PermitMissionType;
    (function (PermitMissionType) {
        PermitMissionType[PermitMissionType["PERMIT_MISSION_TYPE_NONE"] = 0] = "PERMIT_MISSION_TYPE_NONE";
        PermitMissionType[PermitMissionType["PERMIT_MISSION_TYPE_LOGIN"] = 1] = "PERMIT_MISSION_TYPE_LOGIN";
        PermitMissionType[PermitMissionType["PERMIT_MISSION_TYPE_PAY"] = 2] = "PERMIT_MISSION_TYPE_PAY";
        PermitMissionType[PermitMissionType["PERMIT_MISSION_TYPE_ACTIVE"] = 3] = "PERMIT_MISSION_TYPE_ACTIVE";
        PermitMissionType[PermitMissionType["PERMIT_MISSION_TYPE_END"] = 4] = "PERMIT_MISSION_TYPE_END"; // 任务总数
    })(PermitMissionType = message.PermitMissionType || (message.PermitMissionType = {}));
    // 任务类型
    var MissionType;
    (function (MissionType) {
        MissionType[MissionType["MISSION_TYPE_NONE"] = 0] = "MISSION_TYPE_NONE";
        MissionType[MissionType["MISSION_TYPE_ACHIEVE"] = 1] = "MISSION_TYPE_ACHIEVE";
        MissionType[MissionType["MISSION_TYPE_DAILY"] = 2] = "MISSION_TYPE_DAILY";
        MissionType[MissionType["MISSION_TYPE_MAIN"] = 3] = "MISSION_TYPE_MAIN";
        MissionType[MissionType["MISSION_TYPE_SEVEN"] = 4] = "MISSION_TYPE_SEVEN";
        MissionType[MissionType["MISSION_TYPE_LICENCE"] = 5] = "MISSION_TYPE_LICENCE";
        MissionType[MissionType["MISSION_TYPE_RACE"] = 6] = "MISSION_TYPE_RACE";
        MissionType[MissionType["MISSION_TYPE_JEWEL"] = 7] = "MISSION_TYPE_JEWEL";
        MissionType[MissionType["MISSION_TYPE_MISSION_ONE"] = 8] = "MISSION_TYPE_MISSION_ONE";
        MissionType[MissionType["MISSION_TYPE_MISSION_TWO"] = 9] = "MISSION_TYPE_MISSION_TWO";
        MissionType[MissionType["MISSION_TYPE_MISSION_MAQI"] = 10] = "MISSION_TYPE_MISSION_MAQI";
        MissionType[MissionType["MISSION_TYPE_MISSION_KUBI"] = 11] = "MISSION_TYPE_MISSION_KUBI";
        MissionType[MissionType["MISSION_TYPE_WEEK"] = 12] = "MISSION_TYPE_WEEK";
        MissionType[MissionType["MISSION_TYPE_HIGH_LICENCE"] = 13] = "MISSION_TYPE_HIGH_LICENCE";
        MissionType[MissionType["MISSION_TYPE_WEEK_REFRESH"] = 14] = "MISSION_TYPE_WEEK_REFRESH";
        MissionType[MissionType["MISSION_TYPE_MONTH_REFRESH"] = 15] = "MISSION_TYPE_MONTH_REFRESH";
        MissionType[MissionType["MISSION_TYPE_END"] = 16] = "MISSION_TYPE_END"; // 任务总数
    })(MissionType = message.MissionType || (message.MissionType = {}));
    // 宝石任务检测类型
    var MissionJewelCheck;
    (function (MissionJewelCheck) {
        MissionJewelCheck[MissionJewelCheck["MISSION_JEWEL_CHECK_NONE"] = 0] = "MISSION_JEWEL_CHECK_NONE";
        MissionJewelCheck[MissionJewelCheck["MISSION_JEWEL_CHECK_POTATO_STAR"] = 1] = "MISSION_JEWEL_CHECK_POTATO_STAR";
        MissionJewelCheck[MissionJewelCheck["MISSION_JEWEL_CHECK_POTATO_UPSTAR"] = 2] = "MISSION_JEWEL_CHECK_POTATO_UPSTAR";
        MissionJewelCheck[MissionJewelCheck["MISSION_JEWEL_CHECK_GENERAL_STAR"] = 3] = "MISSION_JEWEL_CHECK_GENERAL_STAR";
        MissionJewelCheck[MissionJewelCheck["MISSION_JEWEL_CHECK_GENERAL_UPSTAR"] = 4] = "MISSION_JEWEL_CHECK_GENERAL_UPSTAR";
        MissionJewelCheck[MissionJewelCheck["MISSION_JEWEL_CHECK_GOODS"] = 5] = "MISSION_JEWEL_CHECK_GOODS";
        MissionJewelCheck[MissionJewelCheck["MISSION_JEWEL_CHECK_END"] = 6] = "MISSION_JEWEL_CHECK_END"; // 未知
    })(MissionJewelCheck = message.MissionJewelCheck || (message.MissionJewelCheck = {}));
    // 任务类型
    var MissionSubType;
    (function (MissionSubType) {
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_NONO"] = 0] = "MISSION_SUB_TYPE_NONO";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_UPLEVEL"] = 1] = "MISSION_SUB_TYPE_UPLEVEL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_NORMAL_INSTANCE"] = 2] = "MISSION_SUB_TYPE_NORMAL_INSTANCE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_ELITE_INSTANCE"] = 3] = "MISSION_SUB_TYPE_ELITE_INSTANCE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_VISITOR"] = 4] = "MISSION_SUB_TYPE_GENERAL_VISITOR";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_BUY_POWER"] = 5] = "MISSION_SUB_TYPE_BUY_POWER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_CNT"] = 6] = "MISSION_SUB_TYPE_GENERAL_CNT";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_UPLEVEL"] = 7] = "MISSION_SUB_TYPE_GENERAL_UPLEVEL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_QUALITY"] = 8] = "MISSION_SUB_TYPE_GENERAL_QUALITY";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_UPSTAR"] = 9] = "MISSION_SUB_TYPE_GENERAL_UPSTAR";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_STAR"] = 10] = "MISSION_SUB_TYPE_GENERAL_STAR";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_NORMAL_MONTH"] = 11] = "MISSION_SUB_TYPE_NORMAL_MONTH";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_SENIOR_MONTH"] = 12] = "MISSION_SUB_TYPE_SENIOR_MONTH";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_LEVEL_NUM"] = 13] = "MISSION_SUB_TYPE_GENERAL_LEVEL_NUM";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_AWAKEN"] = 14] = "MISSION_SUB_TYPE_GENERAL_AWAKEN";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_QUALITY_NUM"] = 15] = "MISSION_SUB_TYPE_GENERAL_QUALITY_NUM";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_ADD_CHARGE"] = 16] = "MISSION_SUB_TYPE_ADD_CHARGE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WONDERLAND_COLLECTION"] = 17] = "MISSION_SUB_TYPE_WONDERLAND_COLLECTION";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_USE_MONEY"] = 18] = "MISSION_SUB_TYPE_USE_MONEY";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_USE_LADDERSCORE"] = 19] = "MISSION_SUB_TYPE_USE_LADDERSCORE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LADDER"] = 20] = "MISSION_SUB_TYPE_LADDER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_FREIND"] = 21] = "MISSION_SUB_TYPE_FREIND";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_ENEMY"] = 22] = "MISSION_SUB_TYPE_ENEMY";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_USE_LEAGUECOIN"] = 23] = "MISSION_SUB_TYPE_USE_LEAGUECOIN";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LICENCE"] = 24] = "MISSION_SUB_TYPE_LICENCE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_TOWER"] = 25] = "MISSION_SUB_TYPE_TOWER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LEAGUE_JOIN"] = 26] = "MISSION_SUB_TYPE_LEAGUE_JOIN";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LEAGUE_DONATE"] = 27] = "MISSION_SUB_TYPE_LEAGUE_DONATE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CHAT_WORLD"] = 28] = "MISSION_SUB_TYPE_CHAT_WORLD";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_FOUR_USEBUFF"] = 29] = "MISSION_SUB_TYPE_WANTED_FOUR_USEBUFF";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_FIVE_USEBUFF"] = 30] = "MISSION_SUB_TYPE_WANTED_FIVE_USEBUFF";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_NORMAL_INSTANCE_NUMBER"] = 31] = "MISSION_SUB_TYPE_NORMAL_INSTANCE_NUMBER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_ELITE_INSTANCE_NUMBER"] = 32] = "MISSION_SUB_TYPE_ELITE_INSTANCE_NUMBER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_SIX_USEBUFF"] = 33] = "MISSION_SUB_TYPE_WANTED_SIX_USEBUFF";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_TOWER_NUMBER"] = 34] = "MISSION_SUB_TYPE_TOWER_NUMBER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LADDER_NUMBER"] = 35] = "MISSION_SUB_TYPE_LADDER_NUMBER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_SKILL_UPLEVEL_NUMBER"] = 36] = "MISSION_SUB_TYPE_SKILL_UPLEVEL_NUMBER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_BUYMONEY"] = 37] = "MISSION_SUB_TYPE_BUYMONEY";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_USE_POWER"] = 38] = "MISSION_SUB_TYPE_USE_POWER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_NUMBER"] = 39] = "MISSION_SUB_TYPE_WANTED_NUMBER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_ADVISER_UPLEVEL"] = 40] = "MISSION_SUB_TYPE_ADVISER_UPLEVEL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_SIX_BATTLEVALUE"] = 44] = "MISSION_SUB_TYPE_SIX_BATTLEVALUE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_EXCHANGE_TIMES"] = 45] = "MISSION_SUB_TYPE_EXCHANGE_TIMES";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LEAGUE_FISHING"] = 46] = "MISSION_SUB_TYPE_LEAGUE_FISHING";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_ADVISER_UPLEVEL_NUMBER"] = 47] = "MISSION_SUB_TYPE_ADVISER_UPLEVEL_NUMBER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LICENCE_DAILY_REWARD"] = 48] = "MISSION_SUB_TYPE_LICENCE_DAILY_REWARD";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_QUALITY_NUMBER"] = 49] = "MISSION_SUB_TYPE_GENERAL_QUALITY_NUMBER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_ADD_CHARGE1"] = 50] = "MISSION_SUB_TYPE_ADD_CHARGE1";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LEAGUE_INSTANCE"] = 51] = "MISSION_SUB_TYPE_LEAGUE_INSTANCE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_POTATO_BREAK_TIME"] = 52] = "MISSION_SUB_TYPE_POTATO_BREAK_TIME";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_TIMES"] = 53] = "MISSION_SUB_TYPE_WANTED_TIMES";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_PRAISE"] = 54] = "MISSION_SUB_TYPE_PRAISE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_SOUL"] = 55] = "MISSION_SUB_TYPE_WANTED_SOUL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_ARREST"] = 56] = "MISSION_SUB_TYPE_WANTED_ARREST";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_HUNT"] = 57] = "MISSION_SUB_TYPE_WANTED_HUNT";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GET_RUNES"] = 58] = "MISSION_SUB_TYPE_GET_RUNES";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CHANGE_RUNES"] = 59] = "MISSION_SUB_TYPE_CHANGE_RUNES";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_BATTLE_STEP"] = 60] = "MISSION_SUB_TYPE_BATTLE_STEP";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_POTATO_NUM"] = 61] = "MISSION_SUB_TYPE_POTATO_NUM";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_INSTANCE_SEARCH"] = 62] = "MISSION_SUB_TYPE_INSTANCE_SEARCH";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WONDERLAND_BATTLE"] = 63] = "MISSION_SUB_TYPE_WONDERLAND_BATTLE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_POTATO_UPLEVEL"] = 64] = "MISSION_SUB_TYPE_POTATO_UPLEVEL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_POTATO_UPLEVEL_TIME"] = 65] = "MISSION_SUB_TYPE_POTATO_UPLEVEL_TIME";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_OPEN_CARDBAG"] = 66] = "MISSION_SUB_TYPE_OPEN_CARDBAG";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GIVE_POWER"] = 67] = "MISSION_SUB_TYPE_GIVE_POWER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_POTATO_STAR"] = 68] = "MISSION_SUB_TYPE_POTATO_STAR";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_FOUR"] = 69] = "MISSION_SUB_TYPE_WANTED_FOUR";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_FIVE"] = 70] = "MISSION_SUB_TYPE_WANTED_FIVE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_SIX"] = 71] = "MISSION_SUB_TYPE_WANTED_SIX";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_UPSTARTIME"] = 72] = "MISSION_SUB_TYPE_GENERAL_UPSTARTIME";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GROUPBATTLE_TIME"] = 73] = "MISSION_SUB_TYPE_GROUPBATTLE_TIME";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_PVP_BATTLE_TIME"] = 74] = "MISSION_SUB_TYPE_PVP_BATTLE_TIME";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_JEWEL_NUM"] = 75] = "MISSION_SUB_TYPE_JEWEL_NUM";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_SEVEN"] = 76] = "MISSION_SUB_TYPE_WANTED_SEVEN";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED_SEVEN_USEBUFF"] = 77] = "MISSION_SUB_TYPE_WANTED_SEVEN_USEBUFF";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LOTTERY_BEER"] = 78] = "MISSION_SUB_TYPE_LOTTERY_BEER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CARD_NUM"] = 79] = "MISSION_SUB_TYPE_CARD_NUM";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_AWAKEN_TIME"] = 80] = "MISSION_SUB_TYPE_AWAKEN_TIME";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_WANTED"] = 81] = "MISSION_SUB_TYPE_WANTED";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CARD_UPLEVEL"] = 82] = "MISSION_SUB_TYPE_CARD_UPLEVEL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CARD_FA_NUM"] = 83] = "MISSION_SUB_TYPE_CARD_FA_NUM";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CARD_FA_LEVEL"] = 84] = "MISSION_SUB_TYPE_CARD_FA_LEVEL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CARD_JIAN_NUM"] = 85] = "MISSION_SUB_TYPE_CARD_JIAN_NUM";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CARD_JIAN_LEVEL"] = 86] = "MISSION_SUB_TYPE_CARD_JIAN_LEVEL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_APT_NUM"] = 87] = "MISSION_SUB_TYPE_GENERAL_APT_NUM";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_FISH_ZI"] = 88] = "MISSION_SUB_TYPE_FISH_ZI";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_EQUIP_UPLEVEL"] = 89] = "MISSION_SUB_TYPE_EQUIP_UPLEVEL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_BEER_EGG"] = 90] = "MISSION_SUB_TYPE_BEER_EGG";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_USE_GOODS"] = 91] = "MISSION_SUB_TYPE_USE_GOODS";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_EGG_TIMES"] = 92] = "MISSION_SUB_TYPE_EGG_TIMES";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_XUYUAN_TIMES"] = 93] = "MISSION_SUB_TYPE_XUYUAN_TIMES";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_RELIC_COIN"] = 94] = "MISSION_SUB_TYPE_RELIC_COIN";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_HUNTER_UPSTARTIME"] = 95] = "MISSION_SUB_TYPE_HUNTER_UPSTARTIME";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_HIGH_TOWER"] = 96] = "MISSION_SUB_TYPE_HIGH_TOWER";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_RELIC_DAMAGE_ONE"] = 97] = "MISSION_SUB_TYPE_RELIC_DAMAGE_ONE";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_GENERAL_BREAK"] = 98] = "MISSION_SUB_TYPE_GENERAL_BREAK";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_TYPE_SEARCH"] = 99] = "MISSION_SUB_TYPE_TYPE_SEARCH";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_LEAGUESKILL"] = 100] = "MISSION_SUB_TYPE_LEAGUESKILL";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_SEARCH_ZI"] = 101] = "MISSION_SUB_TYPE_SEARCH_ZI";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_SEARCH_CHENG"] = 102] = "MISSION_SUB_TYPE_SEARCH_CHENG";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_SEARCH_HONG"] = 103] = "MISSION_SUB_TYPE_SEARCH_HONG";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CARD_ZI"] = 104] = "MISSION_SUB_TYPE_CARD_ZI";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CARD_CHENG"] = 105] = "MISSION_SUB_TYPE_CARD_CHENG";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_CARD_HONG"] = 106] = "MISSION_SUB_TYPE_CARD_HONG";
        MissionSubType[MissionSubType["MISSION_SUB_TYPE_END"] = 107] = "MISSION_SUB_TYPE_END"; // 类型结束
    })(MissionSubType = message.MissionSubType || (message.MissionSubType = {}));
    // 称号触发类型
    var TitleCheckType;
    (function (TitleCheckType) {
        TitleCheckType[TitleCheckType["TITLE_CHECK_TYPE_NONE"] = 0] = "TITLE_CHECK_TYPE_NONE";
        TitleCheckType[TitleCheckType["TITLE_CHECK_FRIENDS"] = 1] = "TITLE_CHECK_FRIENDS";
        TitleCheckType[TitleCheckType["TITLE_CHECK_BREAK_NUM"] = 2] = "TITLE_CHECK_BREAK_NUM";
        TitleCheckType[TitleCheckType["TITLE_CHECK_TRANSFER_NUM"] = 3] = "TITLE_CHECK_TRANSFER_NUM";
        TitleCheckType[TitleCheckType["TITLE_CHECK_AWAKEN_LEVEL"] = 4] = "TITLE_CHECK_AWAKEN_LEVEL";
        TitleCheckType[TitleCheckType["TITLE_CHECK_BREAK_LEVEL"] = 5] = "TITLE_CHECK_BREAK_LEVEL";
        TitleCheckType[TitleCheckType["TITLE_CHECK_SIGN_TIME"] = 6] = "TITLE_CHECK_SIGN_TIME";
        TitleCheckType[TitleCheckType["TITLE_CHECK_HIGH_TOWER"] = 7] = "TITLE_CHECK_HIGH_TOWER";
        TitleCheckType[TitleCheckType["TITLE_CHECK_WANTEND"] = 8] = "TITLE_CHECK_WANTEND";
        TitleCheckType[TitleCheckType["TITLE_CHECK_BUY_FASHION"] = 9] = "TITLE_CHECK_BUY_FASHION";
        TitleCheckType[TitleCheckType["TITLE_CHECK_BATTLE_VALUE"] = 10] = "TITLE_CHECK_BATTLE_VALUE";
        TitleCheckType[TitleCheckType["TITLE_CHECK_OWN_GENERAL"] = 11] = "TITLE_CHECK_OWN_GENERAL";
        TitleCheckType[TitleCheckType["TITLE_CHECK_SGENERAL_NUM"] = 12] = "TITLE_CHECK_SGENERAL_NUM";
        TitleCheckType[TitleCheckType["TITLE_CHECK_SCORD_NUM"] = 13] = "TITLE_CHECK_SCORD_NUM";
        TitleCheckType[TitleCheckType["TITLE_CHECK_LEAGUE"] = 14] = "TITLE_CHECK_LEAGUE";
        TitleCheckType[TitleCheckType["TITLE_CHECK_TYPE_END"] = 15] = "TITLE_CHECK_TYPE_END"; // 类型结束
    })(TitleCheckType = message.TitleCheckType || (message.TitleCheckType = {}));
    // 社交类型
    var ERelationType;
    (function (ERelationType) {
        ERelationType[ERelationType["RELATION_TYPE_NONO"] = 0] = "RELATION_TYPE_NONO";
        ERelationType[ERelationType["RELATION_TYPE_FRIEND"] = 1] = "RELATION_TYPE_FRIEND";
        ERelationType[ERelationType["RELATION_TYPE_ENEMY"] = 2] = "RELATION_TYPE_ENEMY";
        ERelationType[ERelationType["RELATION_TYPE_BLACK"] = 3] = "RELATION_TYPE_BLACK";
        ERelationType[ERelationType["RELATION_TYPE_END"] = 4] = "RELATION_TYPE_END"; // 社交类型结束
    })(ERelationType = message.ERelationType || (message.ERelationType = {}));
    // 组队战类型
    var EGroupBattleType;
    (function (EGroupBattleType) {
        EGroupBattleType[EGroupBattleType["GROUPBATTLE_TYPE_NONO"] = 0] = "GROUPBATTLE_TYPE_NONO";
        EGroupBattleType[EGroupBattleType["GROUPBATTLE_TYPE_ONE"] = 1] = "GROUPBATTLE_TYPE_ONE";
        EGroupBattleType[EGroupBattleType["GROUPBATTLE_TYPE_END"] = 2] = "GROUPBATTLE_TYPE_END"; // 类型结束
    })(EGroupBattleType = message.EGroupBattleType || (message.EGroupBattleType = {}));
    // 通缉令难度
    var EWantedType;
    (function (EWantedType) {
        EWantedType[EWantedType["WANTED_TYPE_NONO"] = 0] = "WANTED_TYPE_NONO";
        EWantedType[EWantedType["WANTED_TYPE_EASY"] = 1] = "WANTED_TYPE_EASY";
        EWantedType[EWantedType["WANTED_TYPE_HARD"] = 2] = "WANTED_TYPE_HARD";
        EWantedType[EWantedType["WANTED_TYPE_HELL"] = 3] = "WANTED_TYPE_HELL";
        EWantedType[EWantedType["WANTED_TYPE_FOUR"] = 4] = "WANTED_TYPE_FOUR";
        EWantedType[EWantedType["WANTED_TYPE_FIVE"] = 5] = "WANTED_TYPE_FIVE";
        EWantedType[EWantedType["WANTED_TYPE_SIX"] = 6] = "WANTED_TYPE_SIX";
        EWantedType[EWantedType["WANTED_TYPE_SEVEN"] = 7] = "WANTED_TYPE_SEVEN";
        EWantedType[EWantedType["WANTED_TYPE_END"] = 8] = "WANTED_TYPE_END"; // 类型结束
    })(EWantedType = message.EWantedType || (message.EWantedType = {}));
    var EWantedEnemyCampType;
    (function (EWantedEnemyCampType) {
        EWantedEnemyCampType[EWantedEnemyCampType["ENEMY_CAMP_TYPE_NONO"] = 0] = "ENEMY_CAMP_TYPE_NONO";
        EWantedEnemyCampType[EWantedEnemyCampType["ENEMY_CAMP_TYPE_CAVE"] = 1] = "ENEMY_CAMP_TYPE_CAVE";
        EWantedEnemyCampType[EWantedEnemyCampType["ENEMY_CAMP_TYPE_GOBI"] = 2] = "ENEMY_CAMP_TYPE_GOBI";
        EWantedEnemyCampType[EWantedEnemyCampType["ENEMY_CAMP_TYPE_NEVE"] = 3] = "ENEMY_CAMP_TYPE_NEVE";
        EWantedEnemyCampType[EWantedEnemyCampType["ENEMY_CAMP_TYPE_END"] = 4] = "ENEMY_CAMP_TYPE_END"; // 类型结束
    })(EWantedEnemyCampType = message.EWantedEnemyCampType || (message.EWantedEnemyCampType = {}));
    // 分享类型
    var ShareType;
    (function (ShareType) {
        ShareType[ShareType["SHARE_TYPE_NONO"] = 0] = "SHARE_TYPE_NONO";
        ShareType[ShareType["SHARE_TYPE_VILLAGE_COMBO"] = 1] = "SHARE_TYPE_VILLAGE_COMBO";
        ShareType[ShareType["SHARE_TYPE_VILLAGE_HURT"] = 2] = "SHARE_TYPE_VILLAGE_HURT";
        ShareType[ShareType["SHARE_TYPE_LEVEL"] = 3] = "SHARE_TYPE_LEVEL";
        ShareType[ShareType["SHARE_TYPE_LADDER"] = 4] = "SHARE_TYPE_LADDER";
        ShareType[ShareType["SHARE_TYPE_TOWER"] = 5] = "SHARE_TYPE_TOWER";
        ShareType[ShareType["SHARE_TYPE_END"] = 6] = "SHARE_TYPE_END"; // 结束
    })(ShareType = message.ShareType || (message.ShareType = {}));
    // 战斗星级枚举
    var EBattleStar;
    (function (EBattleStar) {
        EBattleStar[EBattleStar["BATTLE_STAR_NONO"] = 0] = "BATTLE_STAR_NONO";
        EBattleStar[EBattleStar["BATTLE_STAR_1"] = 1] = "BATTLE_STAR_1";
        EBattleStar[EBattleStar["BATTLE_STAR_2"] = 2] = "BATTLE_STAR_2";
        EBattleStar[EBattleStar["BATTLE_STAR_3"] = 3] = "BATTLE_STAR_3";
        EBattleStar[EBattleStar["BATTLE_STAR_END"] = 4] = "BATTLE_STAR_END";
    })(EBattleStar = message.EBattleStar || (message.EBattleStar = {}));
    // facebook分享类型
    var EFacebookType;
    (function (EFacebookType) {
        EFacebookType[EFacebookType["FACEBOOK_TYPE_NONO"] = 0] = "FACEBOOK_TYPE_NONO";
        EFacebookType[EFacebookType["FACEBOOK_TYPE_LEVEL"] = 1] = "FACEBOOK_TYPE_LEVEL";
        EFacebookType[EFacebookType["FACEBOOK_TYPE_VIP"] = 2] = "FACEBOOK_TYPE_VIP";
        EFacebookType[EFacebookType["FACEBOOK_TYPE_GENERAL"] = 3] = "FACEBOOK_TYPE_GENERAL";
        EFacebookType[EFacebookType["FACEBOOK_TYPE_CARVE"] = 4] = "FACEBOOK_TYPE_CARVE";
        EFacebookType[EFacebookType["FACEBOOK_TYPE_FORGE"] = 5] = "FACEBOOK_TYPE_FORGE";
        EFacebookType[EFacebookType["FACEBOOK_TYPE_END"] = 6] = "FACEBOOK_TYPE_END"; // 枚举结束
    })(EFacebookType = message.EFacebookType || (message.EFacebookType = {}));
    // 战斗结果
    var BattleResultState;
    (function (BattleResultState) {
        BattleResultState[BattleResultState["BATTLE_RESULT_STATE_NO"] = 0] = "BATTLE_RESULT_STATE_NO";
        BattleResultState[BattleResultState["BATTLE_RESULT_STATE_WIN"] = 1] = "BATTLE_RESULT_STATE_WIN";
        BattleResultState[BattleResultState["BATTLE_RESULT_STATE_FAIL"] = 2] = "BATTLE_RESULT_STATE_FAIL";
        BattleResultState[BattleResultState["BATTLE_RESULT_STATE_DRAW"] = 3] = "BATTLE_RESULT_STATE_DRAW"; // 战斗平局
    })(BattleResultState = message.BattleResultState || (message.BattleResultState = {}));
    // 宠物技能被动类型
    var PetSkillType;
    (function (PetSkillType) {
        PetSkillType[PetSkillType["PET_SKILL_TYPE_NONO"] = 0] = "PET_SKILL_TYPE_NONO";
        PetSkillType[PetSkillType["PET_SKILL_TYPE_ATTRI"] = 1] = "PET_SKILL_TYPE_ATTRI";
        PetSkillType[PetSkillType["PET_SKILL_TYPE_QIANG"] = 2] = "PET_SKILL_TYPE_QIANG";
        PetSkillType[PetSkillType["PET_SKILL_TYPE_CAIJI"] = 3] = "PET_SKILL_TYPE_CAIJI";
        PetSkillType[PetSkillType["PET_SKILL_TYPE_FUHUO"] = 4] = "PET_SKILL_TYPE_FUHUO";
        PetSkillType[PetSkillType["PET_SKILL_TYPE_BLOOD"] = 5] = "PET_SKILL_TYPE_BLOOD";
        PetSkillType[PetSkillType["PET_SKILL_TYPE_END"] = 6] = "PET_SKILL_TYPE_END"; // 活动类型数量
    })(PetSkillType = message.PetSkillType || (message.PetSkillType = {}));
    // 活动类型
    var ActivityNoticeType;
    (function (ActivityNoticeType) {
        ActivityNoticeType[ActivityNoticeType["ACT_NOTICE_NONE"] = 0] = "ACT_NOTICE_NONE";
        ActivityNoticeType[ActivityNoticeType["ACT_NOTICE_COM"] = 1] = "ACT_NOTICE_COM";
        ActivityNoticeType[ActivityNoticeType["ACT_NOTICE_HOT"] = 2] = "ACT_NOTICE_HOT";
        ActivityNoticeType[ActivityNoticeType["ACT_NOTICE_NEW"] = 3] = "ACT_NOTICE_NEW";
        ActivityNoticeType[ActivityNoticeType["ACT_NOTICE_END"] = 4] = "ACT_NOTICE_END"; // 活动类型数量
    })(ActivityNoticeType = message.ActivityNoticeType || (message.ActivityNoticeType = {}));
    // 活动buff类型
    var ActivityBuffType;
    (function (ActivityBuffType) {
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_NONE"] = 0] = "ACTIVITY_BUFF_TYPE_NONE";
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_NORMAL_GOODS"] = 1] = "ACTIVITY_BUFF_TYPE_NORMAL_GOODS";
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_ELITE_GOODS"] = 2] = "ACTIVITY_BUFF_TYPE_ELITE_GOODS";
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_ELITE_SOUL"] = 3] = "ACTIVITY_BUFF_TYPE_ELITE_SOUL";
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_VILLAGE"] = 4] = "ACTIVITY_BUFF_TYPE_VILLAGE";
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_TOWER"] = 5] = "ACTIVITY_BUFF_TYPE_TOWER";
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_WANTED"] = 6] = "ACTIVITY_BUFF_TYPE_WANTED";
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_SEARCH_GOODS"] = 7] = "ACTIVITY_BUFF_TYPE_SEARCH_GOODS";
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_LOTTERYSCORE"] = 8] = "ACTIVITY_BUFF_TYPE_LOTTERYSCORE";
        ActivityBuffType[ActivityBuffType["ACTIVITY_BUFF_TYPE_CNT"] = 9] = "ACTIVITY_BUFF_TYPE_CNT"; // buff数量
    })(ActivityBuffType = message.ActivityBuffType || (message.ActivityBuffType = {}));
    // 消耗类型
    var ConsumeType;
    (function (ConsumeType) {
        ConsumeType[ConsumeType["CONSUME_TYPE_NONE"] = 0] = "CONSUME_TYPE_NONE";
        ConsumeType[ConsumeType["CONSUME_TYPE_TOKEN"] = 1] = "CONSUME_TYPE_TOKEN";
        ConsumeType[ConsumeType["CONSUME_TYPE_POWER"] = 2] = "CONSUME_TYPE_POWER";
        ConsumeType[ConsumeType["CONSUME_TYPE_MONEY"] = 3] = "CONSUME_TYPE_MONEY";
        ConsumeType[ConsumeType["CONSUME_TYPE_WANTED"] = 4] = "CONSUME_TYPE_WANTED";
        ConsumeType[ConsumeType["CONSUME_TYPE_LOTTERY"] = 5] = "CONSUME_TYPE_LOTTERY";
        ConsumeType[ConsumeType["CONSUME_TYPE_LADDER"] = 6] = "CONSUME_TYPE_LADDER";
        ConsumeType[ConsumeType["CONSUME_TYPE_NORMAL_INSTANCE"] = 7] = "CONSUME_TYPE_NORMAL_INSTANCE";
        ConsumeType[ConsumeType["CONSUME_TYPE_ELITE_INSTANCE"] = 8] = "CONSUME_TYPE_ELITE_INSTANCE";
        ConsumeType[ConsumeType["CONSUME_TYPE_WONDERLAND_FRUIT"] = 9] = "CONSUME_TYPE_WONDERLAND_FRUIT";
        ConsumeType[ConsumeType["CONSUME_TYPE_LOTTERY_BEER"] = 10] = "CONSUME_TYPE_LOTTERY_BEER";
        ConsumeType[ConsumeType["CONSUME_TYPE_LOTTERY_REDWINE"] = 11] = "CONSUME_TYPE_LOTTERY_REDWINE";
        ConsumeType[ConsumeType["CONSUME_TYPE_WONDERLAND_KILL"] = 12] = "CONSUME_TYPE_WONDERLAND_KILL";
        ConsumeType[ConsumeType["CONSUME_TYPE_FREIND_EXP"] = 13] = "CONSUME_TYPE_FREIND_EXP";
        ConsumeType[ConsumeType["CONSUME_TYPE_GAINRUNES"] = 14] = "CONSUME_TYPE_GAINRUNES";
        ConsumeType[ConsumeType["CONSUME_TYPE_CHANGERUNES"] = 15] = "CONSUME_TYPE_CHANGERUNES";
        ConsumeType[ConsumeType["CONSUME_TYPE_INTEGRAL"] = 16] = "CONSUME_TYPE_INTEGRAL";
        ConsumeType[ConsumeType["CONSUME_TYPE_XUYUAN"] = 17] = "CONSUME_TYPE_XUYUAN";
        ConsumeType[ConsumeType["CONSUME_TYPE_LOTTERY_RUM"] = 18] = "CONSUME_TYPE_LOTTERY_RUM";
        ConsumeType[ConsumeType["CONSUME_TYPE_END"] = 18] = "CONSUME_TYPE_END"; // consume数量
    })(ConsumeType = message.ConsumeType || (message.ConsumeType = {}));
    // 专题献礼活动任务类型
    var ActivityMissionType;
    (function (ActivityMissionType) {
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_TYPE_NONO"] = 0] = "ACTIVITY_MISSION_TYPE_NONO";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_LOGIN"] = 1] = "ACTIVITY_MISSION_LOGIN";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_NORMAL_INSTANCE_NUMBER"] = 2] = "ACTIVITY_MISSION_NORMAL_INSTANCE_NUMBER";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_ELITE_INSTANCE_NUMBER"] = 3] = "ACTIVITY_MISSION_ELITE_INSTANCE_NUMBER";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_LADDER_NUMBER"] = 4] = "ACTIVITY_MISSION_LADDER_NUMBER";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_WONDERLAND_COLLECTION"] = 5] = "ACTIVITY_MISSION_WONDERLAND_COLLECTION";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_LEAGUE_FISHING"] = 6] = "ACTIVITY_MISSION_LEAGUE_FISHING";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_ARTIFACT_WASH"] = 7] = "ACTIVITY_MISSION_ARTIFACT_WASH";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_GENERAL_VISITOR"] = 8] = "ACTIVITY_MISSION_GENERAL_VISITOR";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_ELITE_CHEST"] = 9] = "ACTIVITY_MISSION_ELITE_CHEST";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_REDUCE_TOKEN"] = 10] = "ACTIVITY_MISSION_REDUCE_TOKEN";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_ADD_TOKEN"] = 11] = "ACTIVITY_MISSION_ADD_TOKEN";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_REDUCE_MONGEY"] = 12] = "ACTIVITY_MISSION_REDUCE_MONGEY";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_ADVISER_UPLEVEL_NUMBER"] = 13] = "ACTIVITY_MISSION_ADVISER_UPLEVEL_NUMBER";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_CHAT_WORLD"] = 14] = "ACTIVITY_MISSION_CHAT_WORLD";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_EXP_INSTANCE_NUMBER"] = 15] = "ACTIVITY_MISSION_EXP_INSTANCE_NUMBER";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_TOWER_NUMBER"] = 16] = "ACTIVITY_MISSION_TOWER_NUMBER";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_BUYMONEY"] = 17] = "ACTIVITY_MISSION_BUYMONEY";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_LEAGUE_INSTANCE"] = 18] = "ACTIVITY_MISSION_LEAGUE_INSTANCE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_JADE_WASH"] = 19] = "ACTIVITY_MISSION_JADE_WASH";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_JADE_COMPOSE"] = 20] = "ACTIVITY_MISSION_JADE_COMPOSE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_JADE_GAMBLE"] = 21] = "ACTIVITY_MISSION_JADE_GAMBLE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_BUY_POWER"] = 22] = "ACTIVITY_MISSION_BUY_POWER";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_GAINRUNES"] = 23] = "ACTIVITY_MISSION_GAINRUNES";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_CHANGERUNES"] = 24] = "ACTIVITY_MISSION_CHANGERUNES";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_INSTANCE_SEARCH"] = 25] = "ACTIVITY_MISSION_INSTANCE_SEARCH";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_WONDERLAND_BATTLE"] = 26] = "ACTIVITY_MISSION_WONDERLAND_BATTLE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_POTATO_UPLEVEL_TIME"] = 27] = "ACTIVITY_MISSION_SUB_TYPE_POTATO_UPLEVEL_TIME";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_OPEN_CARDBAG"] = 28] = "ACTIVITY_MISSION_SUB_TYPE_OPEN_CARDBAG";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_UP_QUALITY"] = 29] = "ACTIVITY_MISSION_SUB_TYPE_UP_QUALITY";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_POTATO_UPSTAR_THREE"] = 30] = "ACTIVITY_MISSION_SUB_TYPE_POTATO_UPSTAR_THREE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_POTATO_UPSTAR_FOUR"] = 31] = "ACTIVITY_MISSION_SUB_TYPE_POTATO_UPSTAR_FOUR";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_POTATO_UPSTAR_FIVE"] = 32] = "ACTIVITY_MISSION_SUB_TYPE_POTATO_UPSTAR_FIVE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_REDUCE_POWER"] = 33] = "ACTIVITY_MISSION_REDUCE_POWER";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_GET_POTATO_STAR_THREE"] = 34] = "ACTIVITY_MISSION_GET_POTATO_STAR_THREE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_GET_POTATO_STAR_FOUR"] = 35] = "ACTIVITY_MISSION_GET_POTATO_STAR_FOUR";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_GET_POTATO_STAR_FIVE"] = 36] = "ACTIVITY_MISSION_GET_POTATO_STAR_FIVE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR"] = 37] = "ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR_FIVE"] = 38] = "ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR_FIVE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR_SIX"] = 39] = "ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR_SIX";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_PVP_BATTLE"] = 40] = "ACTIVITY_MISSION_SUB_TYPE_PVP_BATTLE";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_GROUPBATTLE_TIME"] = 41] = "ACTIVITY_MISSION_SUB_TYPE_GROUPBATTLE_TIME";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR_FOUR"] = 42] = "ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR_FOUR";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR_NUM"] = 43] = "ACTIVITY_MISSION_SUB_TYPE_HUNTER_UPSTAR_NUM";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_SUB_TYPE_HUNTER_AWAKEN_NUM"] = 44] = "ACTIVITY_MISSION_SUB_TYPE_HUNTER_AWAKEN_NUM";
        ActivityMissionType[ActivityMissionType["ACTIVITY_MISSION_TYPE_END"] = 45] = "ACTIVITY_MISSION_TYPE_END"; // 类型结束
    })(ActivityMissionType = message.ActivityMissionType || (message.ActivityMissionType = {}));
    // 活动副本星级检测类型
    var ActivityInstanceStarType;
    (function (ActivityInstanceStarType) {
        ActivityInstanceStarType[ActivityInstanceStarType["ACT_INSTANCE_TYPE_NONO"] = 0] = "ACT_INSTANCE_TYPE_NONO";
        ActivityInstanceStarType[ActivityInstanceStarType["ACT_INSTANCE_TYPE_BATTLE_WIN"] = 1] = "ACT_INSTANCE_TYPE_BATTLE_WIN";
        ActivityInstanceStarType[ActivityInstanceStarType["ACT_INSTANCE_TYPE_GENERAL_TYPE"] = 2] = "ACT_INSTANCE_TYPE_GENERAL_TYPE";
        ActivityInstanceStarType[ActivityInstanceStarType["ACT_INSTANCE_TYPE_GENERAL_ID"] = 3] = "ACT_INSTANCE_TYPE_GENERAL_ID";
        ActivityInstanceStarType[ActivityInstanceStarType["ACT_INSTANCE_TYPE_END"] = 4] = "ACT_INSTANCE_TYPE_END";
    })(ActivityInstanceStarType = message.ActivityInstanceStarType || (message.ActivityInstanceStarType = {}));
    // 活动类型
    var ActivityType;
    (function (ActivityType) {
        ActivityType[ActivityType["ACT_TYPE_NONO"] = 0] = "ACT_TYPE_NONO";
        ActivityType[ActivityType["ACT_TYPE_CONTINUELOGIN"] = 1] = "ACT_TYPE_CONTINUELOGIN";
        ActivityType[ActivityType["ACT_TYPE_CHARGEDAILY"] = 2] = "ACT_TYPE_CHARGEDAILY";
        ActivityType[ActivityType["ACT_TYPE_CHARGEADD"] = 3] = "ACT_TYPE_CHARGEADD";
        ActivityType[ActivityType["ACT_TYPE_BUFFS"] = 4] = "ACT_TYPE_BUFFS";
        ActivityType[ActivityType["ACT_TYPE_OTHER"] = 5] = "ACT_TYPE_OTHER";
        ActivityType[ActivityType["ACT_TYPE_COLLECT"] = 6] = "ACT_TYPE_COLLECT";
        ActivityType[ActivityType["ACT_TYPE_CONSUME"] = 7] = "ACT_TYPE_CONSUME";
        ActivityType[ActivityType["ACT_TYPE_UPLEVEL"] = 8] = "ACT_TYPE_UPLEVEL";
        ActivityType[ActivityType["ACT_TYPE_VIPMALL"] = 9] = "ACT_TYPE_VIPMALL";
        ActivityType[ActivityType["ACT_TYPE_DISCOUNT"] = 10] = "ACT_TYPE_DISCOUNT";
        ActivityType[ActivityType["ACT_TYPE_DAILYADD"] = 11] = "ACT_TYPE_DAILYADD";
        ActivityType[ActivityType["ACT_TYPE_ADVERTISEMENT"] = 12] = "ACT_TYPE_ADVERTISEMENT";
        ActivityType[ActivityType["ACT_TYPE_CHARGE_BACK"] = 13] = "ACT_TYPE_CHARGE_BACK";
        ActivityType[ActivityType["ACT_TYPE_WISHTREE"] = 14] = "ACT_TYPE_WISHTREE";
        ActivityType[ActivityType["ACT_TYPE_MISSION"] = 15] = "ACT_TYPE_MISSION";
        ActivityType[ActivityType["ACT_TYPE_BENEFIT"] = 16] = "ACT_TYPE_BENEFIT";
        ActivityType[ActivityType["ACT_TYPE_CHARGERANK"] = 17] = "ACT_TYPE_CHARGERANK";
        ActivityType[ActivityType["ACT_TYPE_MONTHFIT"] = 18] = "ACT_TYPE_MONTHFIT";
        ActivityType[ActivityType["ACT_TYPE_LOTTERY_DOUBLING"] = 19] = "ACT_TYPE_LOTTERY_DOUBLING";
        ActivityType[ActivityType["ACT_TYPE_SECRET_MALL"] = 20] = "ACT_TYPE_SECRET_MALL";
        ActivityType[ActivityType["ACT_TYPE_INSTANCE_BATTLE"] = 21] = "ACT_TYPE_INSTANCE_BATTLE";
        ActivityType[ActivityType["ACT_TYPE_BOSS_BATTLE"] = 22] = "ACT_TYPE_BOSS_BATTLE";
        ActivityType[ActivityType["ACT_TYPE_LOTTERY_POND"] = 23] = "ACT_TYPE_LOTTERY_POND";
        ActivityType[ActivityType["ACT_TYPE_CONSUME_BACK"] = 24] = "ACT_TYPE_CONSUME_BACK";
        ActivityType[ActivityType["ACT_TYPE_AUCTION"] = 25] = "ACT_TYPE_AUCTION";
        ActivityType[ActivityType["ACT_TYPE_EVENT_GIFT"] = 26] = "ACT_TYPE_EVENT_GIFT";
        ActivityType[ActivityType["ACT_TYPE_RANK"] = 27] = "ACT_TYPE_RANK";
        ActivityType[ActivityType["ACT_TYPE_INSTANCE_RAND"] = 28] = "ACT_TYPE_INSTANCE_RAND";
        ActivityType[ActivityType["ACT_TYPE_RED_PACKET"] = 29] = "ACT_TYPE_RED_PACKET";
        ActivityType[ActivityType["ACT_TYPE_END"] = 30] = "ACT_TYPE_END"; // 类型结束
    })(ActivityType = message.ActivityType || (message.ActivityType = {}));
    //ACT_TYPE_MONEY_CAT = 6;		// 招财猫
    //ACT_TYPE_HOLIDAY = 6;			// 节日
    //ACT_TYPE_GUESS = 7;			// 猜猜看
    //ACT_TYPE_BIGWHEEL = 12;		// 大转盘
    //ACT_TYPE_CROSSFIGHT = 13;		// 跨服战
    ////////////////////////////////////////////////////////////////////////////////////////
    // 跨服数据信息
    ////////////////////////////////////////////////////////////////////////////////////////
    // 跨服服务状态
    var CraftStateType;
    (function (CraftStateType) {
        CraftStateType[CraftStateType["CRAFT_STATE_TYPE_NONO"] = 0] = "CRAFT_STATE_TYPE_NONO";
        CraftStateType[CraftStateType["CRAFT_STATE_TYPE_READY"] = 1] = "CRAFT_STATE_TYPE_READY";
        CraftStateType[CraftStateType["CRAFT_STATE_TYPE_FIGHTING"] = 2] = "CRAFT_STATE_TYPE_FIGHTING";
        CraftStateType[CraftStateType["CRAFT_STATE_TYPE_FINISH"] = 3] = "CRAFT_STATE_TYPE_FINISH";
        CraftStateType[CraftStateType["CRAFT_STATE_TYPE_END"] = 4] = "CRAFT_STATE_TYPE_END"; // 类型结束
    })(CraftStateType = message.CraftStateType || (message.CraftStateType = {}));
    var ContendStateType;
    (function (ContendStateType) {
        ContendStateType[ContendStateType["CONTEND_STATE_TYPE_READY"] = 1] = "CONTEND_STATE_TYPE_READY";
        ContendStateType[ContendStateType["CONTEND_STATE_TYPE_FIGHT"] = 2] = "CONTEND_STATE_TYPE_FIGHT";
        ContendStateType[ContendStateType["CONTEND_STATE_TYPE_CLOSE"] = 3] = "CONTEND_STATE_TYPE_CLOSE";
        ContendStateType[ContendStateType["CONTEND_STATE_TYPE_SHOW"] = 4] = "CONTEND_STATE_TYPE_SHOW"; // 展示阶段
    })(ContendStateType = message.ContendStateType || (message.ContendStateType = {}));
    ////////////////////////////////////////////////////////////////////////
    // 联盟联赛相关
    // 联盟据点类型
    var LeagueFortressType;
    (function (LeagueFortressType) {
        LeagueFortressType[LeagueFortressType["LEAGUE_FORTRESS_TYPE_UNKNOWN"] = 0] = "LEAGUE_FORTRESS_TYPE_UNKNOWN";
        LeagueFortressType[LeagueFortressType["LEAGUE_FORTRESS_TYPE_HARD"] = 1] = "LEAGUE_FORTRESS_TYPE_HARD";
        LeagueFortressType[LeagueFortressType["LEAGUE_FORTRESS_TYPE_COMMON_ONE"] = 2] = "LEAGUE_FORTRESS_TYPE_COMMON_ONE";
        LeagueFortressType[LeagueFortressType["LEAGUE_FORTRESS_TYPE_COMMON_TWO"] = 3] = "LEAGUE_FORTRESS_TYPE_COMMON_TWO";
        LeagueFortressType[LeagueFortressType["LEAGUE_FORTRESS_TYPE_EASY_ONE"] = 4] = "LEAGUE_FORTRESS_TYPE_EASY_ONE";
        LeagueFortressType[LeagueFortressType["LEAGUE_FORTRESS_TYPE_EASY_TWO"] = 5] = "LEAGUE_FORTRESS_TYPE_EASY_TWO";
        LeagueFortressType[LeagueFortressType["LEAGUE_FORTRESS_TYPE_END"] = 6] = "LEAGUE_FORTRESS_TYPE_END"; // 类型结束
    })(LeagueFortressType = message.LeagueFortressType || (message.LeagueFortressType = {}));
    // 联赛状态
    var LeagueMatchStateType;
    (function (LeagueMatchStateType) {
        LeagueMatchStateType[LeagueMatchStateType["LEAGUEMATCH_TYPE_NONO"] = 0] = "LEAGUEMATCH_TYPE_NONO";
        LeagueMatchStateType[LeagueMatchStateType["LEAGUEMATCH_TYPE_READY"] = 1] = "LEAGUEMATCH_TYPE_READY";
        LeagueMatchStateType[LeagueMatchStateType["LEAGUEMATCH_TYPE_BATTLE"] = 2] = "LEAGUEMATCH_TYPE_BATTLE";
        LeagueMatchStateType[LeagueMatchStateType["LEAGUEMATCH_TYPE_END"] = 3] = "LEAGUEMATCH_TYPE_END"; // 未知类型
    })(LeagueMatchStateType = message.LeagueMatchStateType || (message.LeagueMatchStateType = {}));
    ////////////////////////////////////////////////////////////////////////
    // 跨服场景相关
    // 势力类型
    var TribeType;
    (function (TribeType) {
        TribeType[TribeType["TRIBE_TYPE_NONO"] = 0] = "TRIBE_TYPE_NONO";
        TribeType[TribeType["TRIBE_TYPE_ONE"] = 1] = "TRIBE_TYPE_ONE";
        TribeType[TribeType["TRIBE_TYPE_TWO"] = 2] = "TRIBE_TYPE_TWO";
        TribeType[TribeType["TRIBE_TYPE_THREE"] = 3] = "TRIBE_TYPE_THREE";
        TribeType[TribeType["TRIBE_TYPE_FOUR"] = 4] = "TRIBE_TYPE_FOUR";
        TribeType[TribeType["TRIBE_TYPE_END"] = 5] = "TRIBE_TYPE_END"; // 未知类型
    })(TribeType = message.TribeType || (message.TribeType = {}));
    ////////////////////////////////////////////////////////////////////////
    // 微信分享的任务类型
    var ShareTaskType;
    (function (ShareTaskType) {
        ShareTaskType[ShareTaskType["SHARE_TASK_TYPE_NONO"] = 0] = "SHARE_TASK_TYPE_NONO";
        ShareTaskType[ShareTaskType["SHARE_TASK_TYPE_CREATE_ROLE"] = 1] = "SHARE_TASK_TYPE_CREATE_ROLE";
        ShareTaskType[ShareTaskType["SHARE_TASK_TYPE_SIX_STAR"] = 2] = "SHARE_TASK_TYPE_SIX_STAR";
        ShareTaskType[ShareTaskType["SHARE_TASK_TYPE_FIRST_CHARGE"] = 3] = "SHARE_TASK_TYPE_FIRST_CHARGE";
        ShareTaskType[ShareTaskType["SHARE_TASK_TYPE_GENERAL_S"] = 4] = "SHARE_TASK_TYPE_GENERAL_S";
        ShareTaskType[ShareTaskType["SHARE_TASK_TYPE_END"] = 5] = "SHARE_TASK_TYPE_END"; // 未知类型
    })(ShareTaskType = message.ShareTaskType || (message.ShareTaskType = {}));
    ////////////////////////////////////////////////////////////////////////////////
    // 数据对
    // struct IIKVPairs
    ////////////////////////////////////////////////////////////////////////////////
    var IIKVPairs = (function () {
        function IIKVPairs() {
            this.key = 0;
            this.value = 0;
        }
        IIKVPairs.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // key
            if (decoder_.eof())
                return true;
            this.key = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        IIKVPairs.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // key
            encoder.write_fixuint32(this.key);
            // value
            encoder.write_fixuint32(this.value);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IIKVPairs;
    }());
    message.IIKVPairs = IIKVPairs;
    __reflect(IIKVPairs.prototype, "message.IIKVPairs", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 一组Id
    // struct IdGroup
    ////////////////////////////////////////////////////////////////////////////////
    var IdGroup = (function () {
        function IdGroup() {
            this.ids = []; // 一组Id
        }
        IdGroup.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // ids
            if (decoder_.eof())
                return true;
            this.ids = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        IdGroup.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // ids
            encoder.write_uint32_vector(this.ids);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IdGroup;
    }());
    message.IdGroup = IdGroup;
    __reflect(IdGroup.prototype, "message.IdGroup", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
})(message || (message = {}));
//Date: 2019-1
//File: msg_xx_config.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 中心服务配置
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 日志系统信息
    // struct LogInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LogInfo = (function () {
        function LogInfo() {
            this.level = 0; // 日志级别(level 0:none, 1:crash, 2:error, 3:warning, 4:notice, 5:info, 6:debug, 7:trace)
            this.keep_days = 0; // 日志保留天数
            this.port = 0; // 监听端口(0表示不监听)
        }
        LogInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // level
            if (decoder_.eof())
                return true;
            this.level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // keep_days
            if (decoder_.eof())
                return true;
            this.keep_days = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // port
            if (decoder_.eof())
                return true;
            this.port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LogInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // level
            encoder.write_fixuint32(this.level);
            // keep_days
            encoder.write_fixuint32(this.keep_days);
            // port
            encoder.write_uint16(this.port);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LogInfo;
    }());
    message.LogInfo = LogInfo;
    __reflect(LogInfo.prototype, "message.LogInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 服务信息
    // struct ServerInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ServerInfo = (function () {
        function ServerInfo() {
            this.host = ""; // 服务地址或IP
            this.port = 0; // 服务监听端口
        }
        ServerInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // host
            if (decoder_.eof())
                return true;
            this.host = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // port
            if (decoder_.eof())
                return true;
            this.port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ServerInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // host
            encoder.write_string(this.host);
            // port
            encoder.write_uint16(this.port);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ServerInfo;
    }());
    message.ServerInfo = ServerInfo;
    __reflect(ServerInfo.prototype, "message.ServerInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // (安全通信)服务信息
    // struct SecurityServerInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SecurityServerInfo = (function () {
        function SecurityServerInfo() {
            this.host = ""; // 服务地址或IP
            this.port = 0; // 服务监听端口
            this.key = ""; // RC4加密key
        }
        SecurityServerInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // host
            if (decoder_.eof())
                return true;
            this.host = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // port
            if (decoder_.eof())
                return true;
            this.port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // key
            if (decoder_.eof())
                return true;
            this.key = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        SecurityServerInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // host
            encoder.write_string(this.host);
            // port
            encoder.write_uint16(this.port);
            // key
            encoder.write_string(this.key);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SecurityServerInfo;
    }());
    message.SecurityServerInfo = SecurityServerInfo;
    __reflect(SecurityServerInfo.prototype, "message.SecurityServerInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 监听信息
    // struct ListenInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ListenInfo = (function () {
        function ListenInfo() {
            this.ip = ""; // 监听IP(若监听本机所有IP则置为空)
            this.port = 0; // 监听端口
        }
        ListenInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // ip
            if (decoder_.eof())
                return true;
            this.ip = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // port
            if (decoder_.eof())
                return true;
            this.port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ListenInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // ip
            encoder.write_string(this.ip);
            // port
            encoder.write_uint16(this.port);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ListenInfo;
    }());
    message.ListenInfo = ListenInfo;
    __reflect(ListenInfo.prototype, "message.ListenInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // (安全通信)监听信息
    // struct SecurityListenInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SecurityListenInfo = (function () {
        function SecurityListenInfo() {
            this.ip = ""; // 监听IP(若监听本机所有IP则置为空)
            this.port = 0; // 监听端口
            this.key = ""; // RC4加密key
        }
        SecurityListenInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // ip
            if (decoder_.eof())
                return true;
            this.ip = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // port
            if (decoder_.eof())
                return true;
            this.port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // key
            if (decoder_.eof())
                return true;
            this.key = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        SecurityListenInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // ip
            encoder.write_string(this.ip);
            // port
            encoder.write_uint16(this.port);
            // key
            encoder.write_string(this.key);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SecurityListenInfo;
    }());
    message.SecurityListenInfo = SecurityListenInfo;
    __reflect(SecurityListenInfo.prototype, "message.SecurityListenInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // redis数据库信息
    // struct RedisInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RedisInfo = (function () {
        function RedisInfo() {
            this.host = ""; // 主机或IP
            this.port = 0; // 端口
            this.password = ""; // redis数据库密码
            this.db = 0; // 选择的库
            this.conn_count = 0; // 与redis保持连接数
        }
        RedisInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // host
            if (decoder_.eof())
                return true;
            this.host = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // port
            if (decoder_.eof())
                return true;
            this.port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // password
            if (decoder_.eof())
                return true;
            this.password = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // db
            if (decoder_.eof())
                return true;
            this.db = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // conn_count
            if (decoder_.eof())
                return true;
            this.conn_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RedisInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // host
            encoder.write_string(this.host);
            // port
            encoder.write_uint16(this.port);
            // password
            encoder.write_string(this.password);
            // db
            encoder.write_fixuint32(this.db);
            // conn_count
            encoder.write_fixuint32(this.conn_count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RedisInfo;
    }());
    message.RedisInfo = RedisInfo;
    __reflect(RedisInfo.prototype, "message.RedisInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // mysql数据库信息
    // struct MysqlInfo
    ////////////////////////////////////////////////////////////////////////////////
    var MysqlInfo = (function () {
        function MysqlInfo() {
            this.host = ""; // 主机或IP
            this.port = 0; // 端口
            this.user = ""; // 用户名
            this.password = ""; // 密码
            this.scheme = ""; // 选择库
            this.name = ""; // 该库名字(库名字不要重复)
            this.group = ""; // 该库所属分组(用于作集群负载)
        }
        MysqlInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // host
            if (decoder_.eof())
                return true;
            this.host = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // port
            if (decoder_.eof())
                return true;
            this.port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // user
            if (decoder_.eof())
                return true;
            this.user = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // password
            if (decoder_.eof())
                return true;
            this.password = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // scheme
            if (decoder_.eof())
                return true;
            this.scheme = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // group
            if (decoder_.eof())
                return true;
            this.group = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        MysqlInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // host
            encoder.write_string(this.host);
            // port
            encoder.write_uint16(this.port);
            // user
            encoder.write_string(this.user);
            // password
            encoder.write_string(this.password);
            // scheme
            encoder.write_string(this.scheme);
            // name
            encoder.write_string(this.name);
            // group
            encoder.write_string(this.group);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return MysqlInfo;
    }());
    message.MysqlInfo = MysqlInfo;
    __reflect(MysqlInfo.prototype, "message.MysqlInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // leveldb数据库信息
    // struct LeveldbInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LeveldbInfo = (function () {
        function LeveldbInfo() {
            this.path = ""; // 存储路径
        }
        LeveldbInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // path
            if (decoder_.eof())
                return true;
            this.path = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LeveldbInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // path
            encoder.write_string(this.path);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LeveldbInfo;
    }());
    message.LeveldbInfo = LeveldbInfo;
    __reflect(LeveldbInfo.prototype, "message.LeveldbInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // SMTP服务配置
    // struct SMTPInfo
    ////////////////////////////////////////////////////////////////////////////////
    var SMTPInfo = (function () {
        function SMTPInfo() {
            this.host = ""; // smtp服务主机域名或IP
            this.port = 0; // smtp服务监听端口
            this.user = ""; // 登陆账号(邮件地址)
            this.password = ""; // 登陆密码
        }
        SMTPInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // host
            if (decoder_.eof())
                return true;
            this.host = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // port
            if (decoder_.eof())
                return true;
            this.port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // user
            if (decoder_.eof())
                return true;
            this.user = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // password
            if (decoder_.eof())
                return true;
            this.password = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        SMTPInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // host
            encoder.write_string(this.host);
            // port
            encoder.write_uint16(this.port);
            // user
            encoder.write_string(this.user);
            // password
            encoder.write_string(this.password);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return SMTPInfo;
    }());
    message.SMTPInfo = SMTPInfo;
    __reflect(SMTPInfo.prototype, "message.SMTPInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // APNS服务配置
    // struct ApnsInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ApnsInfo = (function () {
        function ApnsInfo() {
            this.appid = 0; // 本配置对应的应用ID
            this.host = ""; // apns主机域名或IP (测试：gateway.sandbox.push.apple.com)
            this.port = 0; // apns服务监听端口 (测试：2195)
            this.cert_file = ""; // 公钥文件本地路径(pem格式)
            this.key_file = ""; // 公钥key文件本地路径(pem格式)
        }
        ApnsInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // appid
            if (decoder_.eof())
                return true;
            this.appid = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // host
            if (decoder_.eof())
                return true;
            this.host = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // port
            if (decoder_.eof())
                return true;
            this.port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // cert_file
            if (decoder_.eof())
                return true;
            this.cert_file = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // key_file
            if (decoder_.eof())
                return true;
            this.key_file = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ApnsInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // appid
            encoder.write_fixuint32(this.appid);
            // host
            encoder.write_string(this.host);
            // port
            encoder.write_uint16(this.port);
            // cert_file
            encoder.write_string(this.cert_file);
            // key_file
            encoder.write_string(this.key_file);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ApnsInfo;
    }());
    message.ApnsInfo = ApnsInfo;
    __reflect(ApnsInfo.prototype, "message.ApnsInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 除中心外其他服务的配置信息
    // struct ServerConfigInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ServerConfigInfo = (function () {
        function ServerConfigInfo() {
            this.server_id = 0; // 服务ID
            this.password = ""; // 服务向中心验证密码
            this.center_host = ""; // 中心地址
            this.center_port = 0; // 中心监听地址
            this.web_port = 0; // websocket监听端口
        }
        ServerConfigInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // server_id
            if (decoder_.eof())
                return true;
            this.server_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // password
            if (decoder_.eof())
                return true;
            this.password = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // center_host
            if (decoder_.eof())
                return true;
            this.center_host = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // center_port
            if (decoder_.eof())
                return true;
            this.center_port = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // web_port
            if (decoder_.eof())
                return true;
            this.web_port = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ServerConfigInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // server_id
            encoder.write_fixuint32(this.server_id);
            // password
            encoder.write_string(this.password);
            // center_host
            encoder.write_string(this.center_host);
            // center_port
            encoder.write_fixuint32(this.center_port);
            // web_port
            encoder.write_fixuint32(this.web_port);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ServerConfigInfo;
    }());
    message.ServerConfigInfo = ServerConfigInfo;
    __reflect(ServerConfigInfo.prototype, "message.ServerConfigInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 中心服配置信息
    // struct Config_CenterServer
    ////////////////////////////////////////////////////////////////////////////////
    var Config_CenterServer = (function () {
        function Config_CenterServer() {
            this.aone_listen_port = 0; // Aone协议对外监听端口
            this.http_listen_port = 0; // HTTP协议对外监听端口
            this.log = new LogInfo(); // 日志系统配置
            this.db = new RedisInfo(); // redis数据库配置
        }
        Config_CenterServer.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // aone_listen_port
            if (decoder_.eof())
                return true;
            this.aone_listen_port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // http_listen_port
            if (decoder_.eof())
                return true;
            this.http_listen_port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // log
            if (decoder_.eof())
                return true;
            if (!this.log.parse_bytes(decoder_))
                return false;
            // db
            if (decoder_.eof())
                return true;
            if (!this.db.parse_bytes(decoder_))
                return false;
            return true;
        };
        Config_CenterServer.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // aone_listen_port
            encoder.write_uint16(this.aone_listen_port);
            // http_listen_port
            encoder.write_uint16(this.http_listen_port);
            // log
            this.log.to_bytes(encoder);
            // db
            this.db.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return Config_CenterServer;
    }());
    message.Config_CenterServer = Config_CenterServer;
    __reflect(Config_CenterServer.prototype, "message.Config_CenterServer", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // apirecordserver配置
    // struct Config_ApiRecordServer
    ////////////////////////////////////////////////////////////////////////////////
    var Config_ApiRecordServer = (function () {
        function Config_ApiRecordServer() {
            this.listen_aone_rc4 = new SecurityListenInfo(); // Aone协议RC4加密监听
            this.log_info = new LogInfo(); // 日志系统配置
            this.mysql_info = new MysqlInfo(); // mysql数据库配置
            this.leveldb_info = new LeveldbInfo(); // leveldb数据库配置
            this.api_server = new ServerInfo(); // api服http地址信息
        }
        Config_ApiRecordServer.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // listen_aone_rc4
            if (decoder_.eof())
                return true;
            if (!this.listen_aone_rc4.parse_bytes(decoder_))
                return false;
            // log_info
            if (decoder_.eof())
                return true;
            if (!this.log_info.parse_bytes(decoder_))
                return false;
            // mysql_info
            if (decoder_.eof())
                return true;
            if (!this.mysql_info.parse_bytes(decoder_))
                return false;
            // leveldb_info
            if (decoder_.eof())
                return true;
            if (!this.leveldb_info.parse_bytes(decoder_))
                return false;
            // api_server
            if (decoder_.eof())
                return true;
            if (!this.api_server.parse_bytes(decoder_))
                return false;
            return true;
        };
        Config_ApiRecordServer.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // listen_aone_rc4
            this.listen_aone_rc4.to_bytes(encoder);
            // log_info
            this.log_info.to_bytes(encoder);
            // mysql_info
            this.mysql_info.to_bytes(encoder);
            // leveldb_info
            this.leveldb_info.to_bytes(encoder);
            // api_server
            this.api_server.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return Config_ApiRecordServer;
    }());
    message.Config_ApiRecordServer = Config_ApiRecordServer;
    __reflect(Config_ApiRecordServer.prototype, "message.Config_ApiRecordServer", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // apiserver配置
    // struct Config_ApiServer
    ////////////////////////////////////////////////////////////////////////////////
    var Config_ApiServer = (function () {
        function Config_ApiServer() {
            this.listen_aone_rc4 = new SecurityListenInfo(); // Aone协议RC4加密监听
            this.listen_http = new ListenInfo(); // Http协议监听
            this.log_info = new LogInfo(); // 日志系统配置
            this.mysql_info = new MysqlInfo(); // mysql数据库配置
            this.redis_infos = []; // Redis数据库列表
            this.account_servers = []; // 账号服务列表
            this.sms_server = new SecurityServerInfo(); // 短信服务
            this.mail_server = new SecurityServerInfo(); // 邮件服务
            this.push_server = new SecurityServerInfo(); // 推送服务
            this.record_server = new SecurityServerInfo(); // 日志服务
            this.datacenter_server = new ServerConfigInfo(); //数据中心服务
            this.listen_websocket = new ListenInfo(); // WebSocket协议监听
        }
        Config_ApiServer.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // listen_aone_rc4
            if (decoder_.eof())
                return true;
            if (!this.listen_aone_rc4.parse_bytes(decoder_))
                return false;
            // listen_http
            if (decoder_.eof())
                return true;
            if (!this.listen_http.parse_bytes(decoder_))
                return false;
            // log_info
            if (decoder_.eof())
                return true;
            if (!this.log_info.parse_bytes(decoder_))
                return false;
            // mysql_info
            if (decoder_.eof())
                return true;
            if (!this.mysql_info.parse_bytes(decoder_))
                return false;
            // redis_infos
            if (decoder_.eof())
                return true;
            var redis_infos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < redis_infos_count; i++) {
                this.redis_infos.push(new RedisInfo());
                if (!this.redis_infos[i].parse_bytes(decoder_))
                    return false;
            }
            // account_servers
            if (decoder_.eof())
                return true;
            var account_servers_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < account_servers_count; i++) {
                this.account_servers.push(new SecurityServerInfo());
                if (!this.account_servers[i].parse_bytes(decoder_))
                    return false;
            }
            // sms_server
            if (decoder_.eof())
                return true;
            if (!this.sms_server.parse_bytes(decoder_))
                return false;
            // mail_server
            if (decoder_.eof())
                return true;
            if (!this.mail_server.parse_bytes(decoder_))
                return false;
            // push_server
            if (decoder_.eof())
                return true;
            if (!this.push_server.parse_bytes(decoder_))
                return false;
            // record_server
            if (decoder_.eof())
                return true;
            if (!this.record_server.parse_bytes(decoder_))
                return false;
            // datacenter_server
            if (decoder_.eof())
                return true;
            if (!this.datacenter_server.parse_bytes(decoder_))
                return false;
            // listen_websocket
            if (decoder_.eof())
                return true;
            if (!this.listen_websocket.parse_bytes(decoder_))
                return false;
            return true;
        };
        Config_ApiServer.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // listen_aone_rc4
            this.listen_aone_rc4.to_bytes(encoder);
            // listen_http
            this.listen_http.to_bytes(encoder);
            // log_info
            this.log_info.to_bytes(encoder);
            // mysql_info
            this.mysql_info.to_bytes(encoder);
            // redis_infos
            encoder.write_fixuint32(Object.keys(this.redis_infos).length);
            for (var k in this.redis_infos) {
                if (!this.redis_infos[k].to_bytes(encoder))
                    return false;
            }
            // account_servers
            encoder.write_fixuint32(Object.keys(this.account_servers).length);
            for (var k in this.account_servers) {
                if (!this.account_servers[k].to_bytes(encoder))
                    return false;
            }
            // sms_server
            this.sms_server.to_bytes(encoder);
            // mail_server
            this.mail_server.to_bytes(encoder);
            // push_server
            this.push_server.to_bytes(encoder);
            // record_server
            this.record_server.to_bytes(encoder);
            // datacenter_server
            this.datacenter_server.to_bytes(encoder);
            // listen_websocket
            this.listen_websocket.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return Config_ApiServer;
    }());
    message.Config_ApiServer = Config_ApiServer;
    __reflect(Config_ApiServer.prototype, "message.Config_ApiServer", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 支付服务(payserver)配置
    // struct Config_PayServer
    ////////////////////////////////////////////////////////////////////////////////
    var Config_PayServer = (function () {
        function Config_PayServer() {
            this.listen_aone_rc4 = new SecurityListenInfo(); // Aone协议RC4加密监听
            this.listen_http = new ListenInfo(); // Http协议监听
            this.log_info = new LogInfo(); // 日志系统配置
            this.mysql_info = new MysqlInfo(); // mysql数据库配置
            this.leveldb_info = new LeveldbInfo(); // leveldb数据库配置
            this.record_server = new SecurityServerInfo(); // 日志服务
        }
        Config_PayServer.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // listen_aone_rc4
            if (decoder_.eof())
                return true;
            if (!this.listen_aone_rc4.parse_bytes(decoder_))
                return false;
            // listen_http
            if (decoder_.eof())
                return true;
            if (!this.listen_http.parse_bytes(decoder_))
                return false;
            // log_info
            if (decoder_.eof())
                return true;
            if (!this.log_info.parse_bytes(decoder_))
                return false;
            // mysql_info
            if (decoder_.eof())
                return true;
            if (!this.mysql_info.parse_bytes(decoder_))
                return false;
            // leveldb_info
            if (decoder_.eof())
                return true;
            if (!this.leveldb_info.parse_bytes(decoder_))
                return false;
            // record_server
            if (decoder_.eof())
                return true;
            if (!this.record_server.parse_bytes(decoder_))
                return false;
            return true;
        };
        Config_PayServer.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // listen_aone_rc4
            this.listen_aone_rc4.to_bytes(encoder);
            // listen_http
            this.listen_http.to_bytes(encoder);
            // log_info
            this.log_info.to_bytes(encoder);
            // mysql_info
            this.mysql_info.to_bytes(encoder);
            // leveldb_info
            this.leveldb_info.to_bytes(encoder);
            // record_server
            this.record_server.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return Config_PayServer;
    }());
    message.Config_PayServer = Config_PayServer;
    __reflect(Config_PayServer.prototype, "message.Config_PayServer", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 账号服务(accountserver)配置
    // struct Config_AccountServer
    ////////////////////////////////////////////////////////////////////////////////
    var Config_AccountServer = (function () {
        function Config_AccountServer() {
            this.listen_aone_rc4 = new SecurityListenInfo(); // Aone协议RC4加密监听
            this.log_info = new LogInfo(); // 日志系统配置
            this.mysql_info = new MysqlInfo(); // mysql数据库配置
            this.redis_infos = []; // Redis数据库配置
            this.leveldb_info = new LeveldbInfo(); // leveldb数据库配置
            this.record_server = new SecurityServerInfo(); // 日志服务
        }
        Config_AccountServer.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // listen_aone_rc4
            if (decoder_.eof())
                return true;
            if (!this.listen_aone_rc4.parse_bytes(decoder_))
                return false;
            // log_info
            if (decoder_.eof())
                return true;
            if (!this.log_info.parse_bytes(decoder_))
                return false;
            // mysql_info
            if (decoder_.eof())
                return true;
            if (!this.mysql_info.parse_bytes(decoder_))
                return false;
            // redis_infos
            if (decoder_.eof())
                return true;
            var redis_infos_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < redis_infos_count; i++) {
                this.redis_infos.push(new RedisInfo());
                if (!this.redis_infos[i].parse_bytes(decoder_))
                    return false;
            }
            // leveldb_info
            if (decoder_.eof())
                return true;
            if (!this.leveldb_info.parse_bytes(decoder_))
                return false;
            // record_server
            if (decoder_.eof())
                return true;
            if (!this.record_server.parse_bytes(decoder_))
                return false;
            return true;
        };
        Config_AccountServer.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // listen_aone_rc4
            this.listen_aone_rc4.to_bytes(encoder);
            // log_info
            this.log_info.to_bytes(encoder);
            // mysql_info
            this.mysql_info.to_bytes(encoder);
            // redis_infos
            encoder.write_fixuint32(Object.keys(this.redis_infos).length);
            for (var k in this.redis_infos) {
                if (!this.redis_infos[k].to_bytes(encoder))
                    return false;
            }
            // leveldb_info
            this.leveldb_info.to_bytes(encoder);
            // record_server
            this.record_server.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return Config_AccountServer;
    }());
    message.Config_AccountServer = Config_AccountServer;
    __reflect(Config_AccountServer.prototype, "message.Config_AccountServer", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 邮件服务(sendserver)配置
    // struct Config_MailServer
    ////////////////////////////////////////////////////////////////////////////////
    var Config_MailServer = (function () {
        function Config_MailServer() {
            this.listen_aone_rc4 = new SecurityListenInfo(); // Aone协议RC4加密监听
            this.log_info = new LogInfo(); // 日志系统配置
            this.redis_info = new RedisInfo(); // redis数据库配置
            this.smtp_info = new SMTPInfo(); // SMTP服务信息
        }
        Config_MailServer.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // listen_aone_rc4
            if (decoder_.eof())
                return true;
            if (!this.listen_aone_rc4.parse_bytes(decoder_))
                return false;
            // log_info
            if (decoder_.eof())
                return true;
            if (!this.log_info.parse_bytes(decoder_))
                return false;
            // redis_info
            if (decoder_.eof())
                return true;
            if (!this.redis_info.parse_bytes(decoder_))
                return false;
            // smtp_info
            if (decoder_.eof())
                return true;
            if (!this.smtp_info.parse_bytes(decoder_))
                return false;
            return true;
        };
        Config_MailServer.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // listen_aone_rc4
            this.listen_aone_rc4.to_bytes(encoder);
            // log_info
            this.log_info.to_bytes(encoder);
            // redis_info
            this.redis_info.to_bytes(encoder);
            // smtp_info
            this.smtp_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return Config_MailServer;
    }());
    message.Config_MailServer = Config_MailServer;
    __reflect(Config_MailServer.prototype, "message.Config_MailServer", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 推送服务(pushserver)配置
    // struct Config_PushServer
    ////////////////////////////////////////////////////////////////////////////////
    var Config_PushServer = (function () {
        function Config_PushServer() {
            this.listen_aone_rc4 = new SecurityListenInfo(); // Aone协议RC4加密监听
            this.log_info = new LogInfo(); // 日志系统配置
            this.redis_info = new RedisInfo(); // redis数据库配置
            this.apns_production = 0; //0 ios生产环境,1 ios开发环境
            this.apns = []; // apns列表
        }
        Config_PushServer.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // listen_aone_rc4
            if (decoder_.eof())
                return true;
            if (!this.listen_aone_rc4.parse_bytes(decoder_))
                return false;
            // log_info
            if (decoder_.eof())
                return true;
            if (!this.log_info.parse_bytes(decoder_))
                return false;
            // redis_info
            if (decoder_.eof())
                return true;
            if (!this.redis_info.parse_bytes(decoder_))
                return false;
            // apns_production
            if (decoder_.eof())
                return true;
            this.apns_production = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // apns
            if (decoder_.eof())
                return true;
            var apns_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < apns_count; i++) {
                this.apns.push(new ApnsInfo());
                if (!this.apns[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        Config_PushServer.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // listen_aone_rc4
            this.listen_aone_rc4.to_bytes(encoder);
            // log_info
            this.log_info.to_bytes(encoder);
            // redis_info
            this.redis_info.to_bytes(encoder);
            // apns_production
            encoder.write_uint16(this.apns_production);
            // apns
            encoder.write_fixuint32(Object.keys(this.apns).length);
            for (var k in this.apns) {
                if (!this.apns[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return Config_PushServer;
    }());
    message.Config_PushServer = Config_PushServer;
    __reflect(Config_PushServer.prototype, "message.Config_PushServer", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 短信服务(smsserver)配置
    // struct Config_SmsServer
    ////////////////////////////////////////////////////////////////////////////////
    var Config_SmsServer = (function () {
        function Config_SmsServer() {
            this.listen_aone_rc4 = new SecurityListenInfo(); // Aone协议RC4加密监听
            this.log_info = new LogInfo(); // 日志系统配置
            this.redis_info = new RedisInfo(); // redis数据库配置
        }
        Config_SmsServer.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // listen_aone_rc4
            if (decoder_.eof())
                return true;
            if (!this.listen_aone_rc4.parse_bytes(decoder_))
                return false;
            // log_info
            if (decoder_.eof())
                return true;
            if (!this.log_info.parse_bytes(decoder_))
                return false;
            // redis_info
            if (decoder_.eof())
                return true;
            if (!this.redis_info.parse_bytes(decoder_))
                return false;
            return true;
        };
        Config_SmsServer.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // listen_aone_rc4
            this.listen_aone_rc4.to_bytes(encoder);
            // log_info
            this.log_info.to_bytes(encoder);
            // redis_info
            this.redis_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return Config_SmsServer;
    }());
    message.Config_SmsServer = Config_SmsServer;
    __reflect(Config_SmsServer.prototype, "message.Config_SmsServer", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
})(message || (message = {}));
//Date: 2019-1
//File: msg_xx_entryserver.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 本文档定义入口服务通用协议
// 与各个第三方登陆平台相关的参数，不从客户端传递，配置在入口服即可。
// AuthKey算法。
// 首字母为标志位，表示使用哪种加密算法。目前传'A'
//
// 算法AuthKeyA()密码加密传输算法
// 1. 把用户密码做32位MD5计算，得到32位字符串1，并转换为大写得到字符串2。
// 2. 在'0'~'9'和'A'~'F'中随机生成两个字符，替换字符串2第0和第31两个字符，得到字符串3。
// 3. 对字符串3再做一次32位MD5计算得到字符串4，并转换为大写得到字符串5。
// 4. 使用刚得到的两个随机值分别替换字符串5的第0和第31两个字符，得到字符串6。
// 5. 'A'与字符串6连接即为验证码(auth_key)。
//
// auth_key = AuthKeyA(device_id)
//
var message;
(function (message) {
    ////////////////////////////////////////////////////////////////////////////////
    // 游戏分区信息
    // struct GameGroupInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GameGroupInfo = (function () {
        function GameGroupInfo() {
            this.group_id = 0; // 分区ID
            this.group_name = ""; // 分区名
            this.server_ip = ""; // 对外服务IP地址(维护和爆满状态时置空)
            this.server_port = 0; // 对外服务端口(维护和爆满状态时置0)
            this.status = 0; // 检测状态
            this.is_recommend = false; // 是否为推荐区
            this.is_initialed = false; // 是否为新区
        }
        GameGroupInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // group_id
            if (decoder_.eof())
                return true;
            this.group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // server_ip
            if (decoder_.eof())
                return true;
            this.server_ip = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // server_port
            if (decoder_.eof())
                return true;
            this.server_port = decoder_.read_uint16();
            if (decoder_.has_error())
                return false;
            // status
            if (decoder_.eof())
                return true;
            this.status = decoder_.read_enum();
            if (decoder_.has_error())
                return false;
            // is_recommend
            if (decoder_.eof())
                return true;
            this.is_recommend = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_initialed
            if (decoder_.eof())
                return true;
            this.is_initialed = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GameGroupInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // group_name
            encoder.write_string(this.group_name);
            // server_ip
            encoder.write_string(this.server_ip);
            // server_port
            encoder.write_uint16(this.server_port);
            // status
            encoder.write_enum(this.status);
            // is_recommend
            encoder.write_bool(this.is_recommend);
            // is_initialed
            encoder.write_bool(this.is_initialed);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GameGroupInfo;
    }());
    message.GameGroupInfo = GameGroupInfo;
    __reflect(GameGroupInfo.prototype, "message.GameGroupInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 检测客户端版本请求
    // request CheckVersion
    ////////////////////////////////////////////////////////////////////////////////
    var CheckVersionReqBody = (function () {
        function CheckVersionReqBody() {
            this.auth_key = ""; // 验证码 = AuthKeyA(device_id)
            this.device_info = new message.DeviceInfo(); // 客户端设备信息
            this.version_info = new message.AppVersionInfo(); // APP应用信息
        }
        CheckVersionReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CheckVersionReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CheckVersionReqBody;
    }());
    message.CheckVersionReqBody = CheckVersionReqBody;
    __reflect(CheckVersionReqBody.prototype, "message.CheckVersionReqBody", ["aone.AoneBody"]);
    var CheckVersionRequest = (function () {
        function CheckVersionRequest() {
            this.header = new aone.AoneReqHeader(CheckVersionRequest.ID);
            this.body = new CheckVersionReqBody();
        }
        CheckVersionRequest.prototype.parse_bytes = function (decoder) { return false; };
        CheckVersionRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CheckVersionRequest.ID = 1500;
        return CheckVersionRequest;
    }());
    message.CheckVersionRequest = CheckVersionRequest;
    __reflect(CheckVersionRequest.prototype, "message.CheckVersionRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 检测客户端版本回复
    // response CheckVersion
    ////////////////////////////////////////////////////////////////////////////////
    var CheckVersionRespBody = (function () {
        function CheckVersionRespBody() {
            this.major_version = 0; // 主版本
            this.minor_version = 0; // 子版本
            this.revision_version = 0; // 修正版本
            this.status = 0; // 检测状态
            this.notice = ""; // 公告或版本描述
            this.download_url = ""; // 最新版本下载URL地址
            this.update_url = ""; // 最新版本更新URL地址
            this.big_patcher_url = ""; // 微端资源下载URL地址
        }
        CheckVersionRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // major_version
            if (decoder_.eof())
                return true;
            this.major_version = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // minor_version
            if (decoder_.eof())
                return true;
            this.minor_version = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // revision_version
            if (decoder_.eof())
                return true;
            this.revision_version = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // status
            if (decoder_.eof())
                return true;
            this.status = decoder_.read_enum();
            if (decoder_.has_error())
                return false;
            // notice
            if (decoder_.eof())
                return true;
            this.notice = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // download_url
            if (decoder_.eof())
                return true;
            this.download_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // update_url
            if (decoder_.eof())
                return true;
            this.update_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // big_patcher_url
            if (decoder_.eof())
                return true;
            this.big_patcher_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        CheckVersionRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CheckVersionRespBody;
    }());
    message.CheckVersionRespBody = CheckVersionRespBody;
    __reflect(CheckVersionRespBody.prototype, "message.CheckVersionRespBody", ["aone.AoneBody"]);
    var CheckVersionResponse = (function () {
        function CheckVersionResponse() {
            this.header = new aone.AoneRespHeader(CheckVersionResponse.ID);
            this.body = new CheckVersionRespBody();
        }
        CheckVersionResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CheckVersionResponse.prototype.to_bytes = function (encoder) { return false; };
        CheckVersionResponse.ID = 1501;
        return CheckVersionResponse;
    }());
    message.CheckVersionResponse = CheckVersionResponse;
    __reflect(CheckVersionResponse.prototype, "message.CheckVersionResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取游戏分区列表请求
    // 根据版本和渠道，拉取的是所有分区中的一部分
    // request GetGameGroups
    ////////////////////////////////////////////////////////////////////////////////
    var GetGameGroupsReqBody = (function () {
        function GetGameGroupsReqBody() {
            this.auth_key = ""; // 验证码 = AuthKeyA(device_id)
            this.device_info = new message.DeviceInfo(); // 客户端设备信息
            this.version_info = new message.AppVersionInfo(); // APP应用信息
        }
        GetGameGroupsReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GetGameGroupsReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GetGameGroupsReqBody;
    }());
    message.GetGameGroupsReqBody = GetGameGroupsReqBody;
    __reflect(GetGameGroupsReqBody.prototype, "message.GetGameGroupsReqBody", ["aone.AoneBody"]);
    var GetGameGroupsRequest = (function () {
        function GetGameGroupsRequest() {
            this.header = new aone.AoneReqHeader(GetGameGroupsRequest.ID);
            this.body = new GetGameGroupsReqBody();
        }
        GetGameGroupsRequest.prototype.parse_bytes = function (decoder) { return false; };
        GetGameGroupsRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GetGameGroupsRequest.ID = 1502;
        return GetGameGroupsRequest;
    }());
    message.GetGameGroupsRequest = GetGameGroupsRequest;
    __reflect(GetGameGroupsRequest.prototype, "message.GetGameGroupsRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取游戏服务列表回复
    // response GetGameGroups
    ////////////////////////////////////////////////////////////////////////////////
    var GetGameGroupsRespBody = (function () {
        function GetGameGroupsRespBody() {
            this.groups = []; // 分区列表
        }
        GetGameGroupsRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // groups
            if (decoder_.eof())
                return true;
            var groups_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < groups_count; i++) {
                this.groups.push(new GameGroupInfo());
                if (!this.groups[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GetGameGroupsRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GetGameGroupsRespBody;
    }());
    message.GetGameGroupsRespBody = GetGameGroupsRespBody;
    __reflect(GetGameGroupsRespBody.prototype, "message.GetGameGroupsRespBody", ["aone.AoneBody"]);
    var GetGameGroupsResponse = (function () {
        function GetGameGroupsResponse() {
            this.header = new aone.AoneRespHeader(GetGameGroupsResponse.ID);
            this.body = new GetGameGroupsRespBody();
        }
        GetGameGroupsResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GetGameGroupsResponse.prototype.to_bytes = function (encoder) { return false; };
        GetGameGroupsResponse.ID = 1503;
        return GetGameGroupsResponse;
    }());
    message.GetGameGroupsResponse = GetGameGroupsResponse;
    __reflect(GetGameGroupsResponse.prototype, "message.GetGameGroupsResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 创建角色请求
    // request CreateRole
    ////////////////////////////////////////////////////////////////////////////////
    var CreateRoleReqBody = (function () {
        function CreateRoleReqBody() {
            this.user_id = 0; // 用户ID
            this.user_account = ""; // 用户账号
            this.user_token = 0; // 用户身份验证码
            this.group_id = 0; // 指定分区(自动选择时置0)
            this.role_type = 0; // 角色类型
            this.role_name = ""; // 角色名
            this.role_features = []; // 角色属性列表
            this.auth_key = ""; // 验证码 = AuthKeyA(device_id)
            this.device_info = new message.DeviceInfo(); // 客户端设备信息
            this.version_info = new message.AppVersionInfo(); // APP应用信息
        }
        CreateRoleReqBody.prototype.parse_bytes = function (decoder) { return false; };
        CreateRoleReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // user_account
            encoder.write_string(this.user_account);
            // user_token
            encoder.write_fixuint32(this.user_token);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // role_type
            encoder.write_fixuint32(this.role_type);
            // role_name
            encoder.write_string(this.role_name);
            // role_features
            encoder.write_fixuint32(Object.keys(this.role_features).length);
            for (var k in this.role_features) {
                if (!this.role_features[k].to_bytes(encoder))
                    return false;
            }
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return CreateRoleReqBody;
    }());
    message.CreateRoleReqBody = CreateRoleReqBody;
    __reflect(CreateRoleReqBody.prototype, "message.CreateRoleReqBody", ["aone.AoneBody"]);
    var CreateRoleRequest = (function () {
        function CreateRoleRequest() {
            this.header = new aone.AoneReqHeader(CreateRoleRequest.ID);
            this.body = new CreateRoleReqBody();
        }
        CreateRoleRequest.prototype.parse_bytes = function (decoder) { return false; };
        CreateRoleRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        CreateRoleRequest.ID = 1504;
        return CreateRoleRequest;
    }());
    message.CreateRoleRequest = CreateRoleRequest;
    __reflect(CreateRoleRequest.prototype, "message.CreateRoleRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 创建角色回复
    // response CreateRole
    ////////////////////////////////////////////////////////////////////////////////
    var CreateRoleRespBody = (function () {
        function CreateRoleRespBody() {
            this.role = new message.RoleShortInfo(); // 角色创建信息
        }
        CreateRoleRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // role
            if (decoder_.eof())
                return true;
            if (!this.role.parse_bytes(decoder_))
                return false;
            return true;
        };
        CreateRoleRespBody.prototype.to_bytes = function (encoder) { return false; };
        return CreateRoleRespBody;
    }());
    message.CreateRoleRespBody = CreateRoleRespBody;
    __reflect(CreateRoleRespBody.prototype, "message.CreateRoleRespBody", ["aone.AoneBody"]);
    var CreateRoleResponse = (function () {
        function CreateRoleResponse() {
            this.header = new aone.AoneRespHeader(CreateRoleResponse.ID);
            this.body = new CreateRoleRespBody();
        }
        CreateRoleResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        CreateRoleResponse.prototype.to_bytes = function (encoder) { return false; };
        CreateRoleResponse.ID = 1505;
        return CreateRoleResponse;
    }());
    message.CreateRoleResponse = CreateRoleResponse;
    __reflect(CreateRoleResponse.prototype, "message.CreateRoleResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 用户登陆请求
    // request UserLogin
    ////////////////////////////////////////////////////////////////////////////////
    var UserLoginReqBody = (function () {
        function UserLoginReqBody() {
            this.user_id = 0; // 用户ID
            this.token = ""; // 登陆验证码
            this.auth_key = ""; // 验证码 = AuthKeyA(device_id)
            this.device_info = new message.DeviceInfo(); // 客户端设备信息
            this.version_info = new message.AppVersionInfo(); // APP应用信息
        }
        UserLoginReqBody.prototype.parse_bytes = function (decoder) { return false; };
        UserLoginReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // token
            encoder.write_string(this.token);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return UserLoginReqBody;
    }());
    message.UserLoginReqBody = UserLoginReqBody;
    __reflect(UserLoginReqBody.prototype, "message.UserLoginReqBody", ["aone.AoneBody"]);
    var UserLoginRequest = (function () {
        function UserLoginRequest() {
            this.header = new aone.AoneReqHeader(UserLoginRequest.ID);
            this.body = new UserLoginReqBody();
        }
        UserLoginRequest.prototype.parse_bytes = function (decoder) { return false; };
        UserLoginRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        UserLoginRequest.ID = 1506;
        return UserLoginRequest;
    }());
    message.UserLoginRequest = UserLoginRequest;
    __reflect(UserLoginRequest.prototype, "message.UserLoginRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 用户登陆回复
    // response UserLogin
    ////////////////////////////////////////////////////////////////////////////////
    var UserLoginRespBody = (function () {
        function UserLoginRespBody() {
            this.user_token = 0; // (本平台)用户身份验证码
            this.roles = []; // 角色列表信息
            this.groups = []; // 分区列表
        }
        UserLoginRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_token
            if (decoder_.eof())
                return true;
            this.user_token = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // roles
            if (decoder_.eof())
                return true;
            var roles_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roles_count; i++) {
                this.roles.push(new message.RoleShortInfo());
                if (!this.roles[i].parse_bytes(decoder_))
                    return false;
            }
            // groups
            if (decoder_.eof())
                return true;
            var groups_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < groups_count; i++) {
                this.groups.push(new GameGroupInfo());
                if (!this.groups[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UserLoginRespBody.prototype.to_bytes = function (encoder) { return false; };
        return UserLoginRespBody;
    }());
    message.UserLoginRespBody = UserLoginRespBody;
    __reflect(UserLoginRespBody.prototype, "message.UserLoginRespBody", ["aone.AoneBody"]);
    var UserLoginResponse = (function () {
        function UserLoginResponse() {
            this.header = new aone.AoneRespHeader(UserLoginResponse.ID);
            this.body = new UserLoginRespBody();
        }
        UserLoginResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        UserLoginResponse.prototype.to_bytes = function (encoder) { return false; };
        UserLoginResponse.ID = 1507;
        return UserLoginResponse;
    }());
    message.UserLoginResponse = UserLoginResponse;
    __reflect(UserLoginResponse.prototype, "message.UserLoginResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取指定角色信息请求
    // request GetRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GetRoleInfoReqBody = (function () {
        function GetRoleInfoReqBody() {
            this.role_id = 0; // 角色ID
            this.auth_key = ""; // 验证码 = AuthKeyA(device_id)
            this.device_info = new message.DeviceInfo(); // 客户端设备信息
            this.version_info = new message.AppVersionInfo(); // APP应用信息
        }
        GetRoleInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        GetRoleInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // auth_key
            encoder.write_string(this.auth_key);
            // device_info
            this.device_info.to_bytes(encoder);
            // version_info
            this.version_info.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GetRoleInfoReqBody;
    }());
    message.GetRoleInfoReqBody = GetRoleInfoReqBody;
    __reflect(GetRoleInfoReqBody.prototype, "message.GetRoleInfoReqBody", ["aone.AoneBody"]);
    var GetRoleInfoRequest = (function () {
        function GetRoleInfoRequest() {
            this.header = new aone.AoneReqHeader(GetRoleInfoRequest.ID);
            this.body = new GetRoleInfoReqBody();
        }
        GetRoleInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        GetRoleInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        GetRoleInfoRequest.ID = 1508;
        return GetRoleInfoRequest;
    }());
    message.GetRoleInfoRequest = GetRoleInfoRequest;
    __reflect(GetRoleInfoRequest.prototype, "message.GetRoleInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取指定角色信息回复
    // response GetRoleInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GetRoleInfoRespBody = (function () {
        function GetRoleInfoRespBody() {
            this.role = new message.RoleShortInfo(); // 角色信息
        }
        GetRoleInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // role
            if (decoder_.eof())
                return true;
            if (!this.role.parse_bytes(decoder_))
                return false;
            return true;
        };
        GetRoleInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return GetRoleInfoRespBody;
    }());
    message.GetRoleInfoRespBody = GetRoleInfoRespBody;
    __reflect(GetRoleInfoRespBody.prototype, "message.GetRoleInfoRespBody", ["aone.AoneBody"]);
    var GetRoleInfoResponse = (function () {
        function GetRoleInfoResponse() {
            this.header = new aone.AoneRespHeader(GetRoleInfoResponse.ID);
            this.body = new GetRoleInfoRespBody();
        }
        GetRoleInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        GetRoleInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        GetRoleInfoResponse.ID = 1509;
        return GetRoleInfoResponse;
    }());
    message.GetRoleInfoResponse = GetRoleInfoResponse;
    __reflect(GetRoleInfoResponse.prototype, "message.GetRoleInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    //
    // request IE_GetRoleShortInfoByUserId
    ////////////////////////////////////////////////////////////////////////////////
    var IE_GetRoleShortInfoByUserIdReqBody = (function () {
        function IE_GetRoleShortInfoByUserIdReqBody() {
            this.user_id = 0;
        }
        IE_GetRoleShortInfoByUserIdReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IE_GetRoleShortInfoByUserIdReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IE_GetRoleShortInfoByUserIdReqBody;
    }());
    message.IE_GetRoleShortInfoByUserIdReqBody = IE_GetRoleShortInfoByUserIdReqBody;
    __reflect(IE_GetRoleShortInfoByUserIdReqBody.prototype, "message.IE_GetRoleShortInfoByUserIdReqBody", ["aone.AoneBody"]);
    var IE_GetRoleShortInfoByUserIdRequest = (function () {
        function IE_GetRoleShortInfoByUserIdRequest() {
            this.header = new aone.AoneReqHeader(IE_GetRoleShortInfoByUserIdRequest.ID);
            this.body = new IE_GetRoleShortInfoByUserIdReqBody();
        }
        IE_GetRoleShortInfoByUserIdRequest.prototype.parse_bytes = function (decoder) { return false; };
        IE_GetRoleShortInfoByUserIdRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IE_GetRoleShortInfoByUserIdRequest.ID = 1510;
        return IE_GetRoleShortInfoByUserIdRequest;
    }());
    message.IE_GetRoleShortInfoByUserIdRequest = IE_GetRoleShortInfoByUserIdRequest;
    __reflect(IE_GetRoleShortInfoByUserIdRequest.prototype, "message.IE_GetRoleShortInfoByUserIdRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // response IE_GetRoleShortInfoByUserId
    ////////////////////////////////////////////////////////////////////////////////
    var IE_GetRoleShortInfoByUserIdRespBody = (function () {
        function IE_GetRoleShortInfoByUserIdRespBody() {
            this.roles = []; // 角色信息
        }
        IE_GetRoleShortInfoByUserIdRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // roles
            if (decoder_.eof())
                return true;
            var roles_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < roles_count; i++) {
                this.roles.push(new message.RoleShortInfo());
                if (!this.roles[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IE_GetRoleShortInfoByUserIdRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IE_GetRoleShortInfoByUserIdRespBody;
    }());
    message.IE_GetRoleShortInfoByUserIdRespBody = IE_GetRoleShortInfoByUserIdRespBody;
    __reflect(IE_GetRoleShortInfoByUserIdRespBody.prototype, "message.IE_GetRoleShortInfoByUserIdRespBody", ["aone.AoneBody"]);
    var IE_GetRoleShortInfoByUserIdResponse = (function () {
        function IE_GetRoleShortInfoByUserIdResponse() {
            this.header = new aone.AoneRespHeader(IE_GetRoleShortInfoByUserIdResponse.ID);
            this.body = new IE_GetRoleShortInfoByUserIdRespBody();
        }
        IE_GetRoleShortInfoByUserIdResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IE_GetRoleShortInfoByUserIdResponse.prototype.to_bytes = function (encoder) { return false; };
        IE_GetRoleShortInfoByUserIdResponse.ID = 1511;
        return IE_GetRoleShortInfoByUserIdResponse;
    }());
    message.IE_GetRoleShortInfoByUserIdResponse = IE_GetRoleShortInfoByUserIdResponse;
    __reflect(IE_GetRoleShortInfoByUserIdResponse.prototype, "message.IE_GetRoleShortInfoByUserIdResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 获取角色网页储值信息
    // request IE_GetH5RolePayInfo
    ////////////////////////////////////////////////////////////////////////////////
    var IE_GetH5RolePayInfoReqBody = (function () {
        function IE_GetH5RolePayInfoReqBody() {
            this.role_id = 0;
        }
        IE_GetH5RolePayInfoReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IE_GetH5RolePayInfoReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // role_id
            encoder.write_fixuint32(this.role_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IE_GetH5RolePayInfoReqBody;
    }());
    message.IE_GetH5RolePayInfoReqBody = IE_GetH5RolePayInfoReqBody;
    __reflect(IE_GetH5RolePayInfoReqBody.prototype, "message.IE_GetH5RolePayInfoReqBody", ["aone.AoneBody"]);
    var IE_GetH5RolePayInfoRequest = (function () {
        function IE_GetH5RolePayInfoRequest() {
            this.header = new aone.AoneReqHeader(IE_GetH5RolePayInfoRequest.ID);
            this.body = new IE_GetH5RolePayInfoReqBody();
        }
        IE_GetH5RolePayInfoRequest.prototype.parse_bytes = function (decoder) { return false; };
        IE_GetH5RolePayInfoRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IE_GetH5RolePayInfoRequest.ID = 1512;
        return IE_GetH5RolePayInfoRequest;
    }());
    message.IE_GetH5RolePayInfoRequest = IE_GetH5RolePayInfoRequest;
    __reflect(IE_GetH5RolePayInfoRequest.prototype, "message.IE_GetH5RolePayInfoRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // response IE_GetH5RolePayInfo
    ////////////////////////////////////////////////////////////////////////////////
    var IE_GetH5RolePayInfoRespBody = (function () {
        function IE_GetH5RolePayInfoRespBody() {
            this.h5_pay_info = new message.H5RolePayInfo();
        }
        IE_GetH5RolePayInfoRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // h5_pay_info
            if (decoder_.eof())
                return true;
            if (!this.h5_pay_info.parse_bytes(decoder_))
                return false;
            return true;
        };
        IE_GetH5RolePayInfoRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IE_GetH5RolePayInfoRespBody;
    }());
    message.IE_GetH5RolePayInfoRespBody = IE_GetH5RolePayInfoRespBody;
    __reflect(IE_GetH5RolePayInfoRespBody.prototype, "message.IE_GetH5RolePayInfoRespBody", ["aone.AoneBody"]);
    var IE_GetH5RolePayInfoResponse = (function () {
        function IE_GetH5RolePayInfoResponse() {
            this.header = new aone.AoneRespHeader(IE_GetH5RolePayInfoResponse.ID);
            this.body = new IE_GetH5RolePayInfoRespBody();
        }
        IE_GetH5RolePayInfoResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IE_GetH5RolePayInfoResponse.prototype.to_bytes = function (encoder) { return false; };
        IE_GetH5RolePayInfoResponse.ID = 1513;
        return IE_GetH5RolePayInfoResponse;
    }());
    message.IE_GetH5RolePayInfoResponse = IE_GetH5RolePayInfoResponse;
    __reflect(IE_GetH5RolePayInfoResponse.prototype, "message.IE_GetH5RolePayInfoResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取累计充值奖励
    // request IE_ReceiveChargeReward
    ////////////////////////////////////////////////////////////////////////////////
    var IE_ReceiveChargeRewardReqBody = (function () {
        function IE_ReceiveChargeRewardReqBody() {
            this.role_id = 0;
            this.index = 0;
        }
        IE_ReceiveChargeRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IE_ReceiveChargeRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // index
            encoder.write_fixuint32(this.index);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IE_ReceiveChargeRewardReqBody;
    }());
    message.IE_ReceiveChargeRewardReqBody = IE_ReceiveChargeRewardReqBody;
    __reflect(IE_ReceiveChargeRewardReqBody.prototype, "message.IE_ReceiveChargeRewardReqBody", ["aone.AoneBody"]);
    var IE_ReceiveChargeRewardRequest = (function () {
        function IE_ReceiveChargeRewardRequest() {
            this.header = new aone.AoneReqHeader(IE_ReceiveChargeRewardRequest.ID);
            this.body = new IE_ReceiveChargeRewardReqBody();
        }
        IE_ReceiveChargeRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        IE_ReceiveChargeRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IE_ReceiveChargeRewardRequest.ID = 1514;
        return IE_ReceiveChargeRewardRequest;
    }());
    message.IE_ReceiveChargeRewardRequest = IE_ReceiveChargeRewardRequest;
    __reflect(IE_ReceiveChargeRewardRequest.prototype, "message.IE_ReceiveChargeRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // response IE_ReceiveChargeReward
    ////////////////////////////////////////////////////////////////////////////////
    var IE_ReceiveChargeRewardRespBody = (function () {
        function IE_ReceiveChargeRewardRespBody() {
        }
        IE_ReceiveChargeRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        IE_ReceiveChargeRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IE_ReceiveChargeRewardRespBody;
    }());
    message.IE_ReceiveChargeRewardRespBody = IE_ReceiveChargeRewardRespBody;
    __reflect(IE_ReceiveChargeRewardRespBody.prototype, "message.IE_ReceiveChargeRewardRespBody", ["aone.AoneBody"]);
    var IE_ReceiveChargeRewardResponse = (function () {
        function IE_ReceiveChargeRewardResponse() {
            this.header = new aone.AoneRespHeader(IE_ReceiveChargeRewardResponse.ID);
            this.body = new IE_ReceiveChargeRewardRespBody();
        }
        IE_ReceiveChargeRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IE_ReceiveChargeRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        IE_ReceiveChargeRewardResponse.ID = 1515;
        return IE_ReceiveChargeRewardResponse;
    }());
    message.IE_ReceiveChargeRewardResponse = IE_ReceiveChargeRewardResponse;
    __reflect(IE_ReceiveChargeRewardResponse.prototype, "message.IE_ReceiveChargeRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 领取H5海外奖励
    // request IE_ReceiveH5OverSeaReward
    ////////////////////////////////////////////////////////////////////////////////
    var IE_ReceiveH5OverSeaRewardReqBody = (function () {
        function IE_ReceiveH5OverSeaRewardReqBody() {
            this.role_id = 0;
            this.index = "";
            this.count = 0;
        }
        IE_ReceiveH5OverSeaRewardReqBody.prototype.parse_bytes = function (decoder) { return false; };
        IE_ReceiveH5OverSeaRewardReqBody.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // index
            encoder.write_string(this.index);
            // count
            encoder.write_fixuint32(this.count);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return IE_ReceiveH5OverSeaRewardReqBody;
    }());
    message.IE_ReceiveH5OverSeaRewardReqBody = IE_ReceiveH5OverSeaRewardReqBody;
    __reflect(IE_ReceiveH5OverSeaRewardReqBody.prototype, "message.IE_ReceiveH5OverSeaRewardReqBody", ["aone.AoneBody"]);
    var IE_ReceiveH5OverSeaRewardRequest = (function () {
        function IE_ReceiveH5OverSeaRewardRequest() {
            this.header = new aone.AoneReqHeader(IE_ReceiveH5OverSeaRewardRequest.ID);
            this.body = new IE_ReceiveH5OverSeaRewardReqBody();
        }
        IE_ReceiveH5OverSeaRewardRequest.prototype.parse_bytes = function (decoder) { return false; };
        IE_ReceiveH5OverSeaRewardRequest.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // header
            this.header.to_bytes(encoder);
            // body
            this.body.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        IE_ReceiveH5OverSeaRewardRequest.ID = 1516;
        return IE_ReceiveH5OverSeaRewardRequest;
    }());
    message.IE_ReceiveH5OverSeaRewardRequest = IE_ReceiveH5OverSeaRewardRequest;
    __reflect(IE_ReceiveH5OverSeaRewardRequest.prototype, "message.IE_ReceiveH5OverSeaRewardRequest", ["aone.AoneRequest", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // response IE_ReceiveH5OverSeaReward
    ////////////////////////////////////////////////////////////////////////////////
    var IE_ReceiveH5OverSeaRewardRespBody = (function () {
        function IE_ReceiveH5OverSeaRewardRespBody() {
        }
        IE_ReceiveH5OverSeaRewardRespBody.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            return true;
        };
        IE_ReceiveH5OverSeaRewardRespBody.prototype.to_bytes = function (encoder) { return false; };
        return IE_ReceiveH5OverSeaRewardRespBody;
    }());
    message.IE_ReceiveH5OverSeaRewardRespBody = IE_ReceiveH5OverSeaRewardRespBody;
    __reflect(IE_ReceiveH5OverSeaRewardRespBody.prototype, "message.IE_ReceiveH5OverSeaRewardRespBody", ["aone.AoneBody"]);
    var IE_ReceiveH5OverSeaRewardResponse = (function () {
        function IE_ReceiveH5OverSeaRewardResponse() {
            this.header = new aone.AoneRespHeader(IE_ReceiveH5OverSeaRewardResponse.ID);
            this.body = new IE_ReceiveH5OverSeaRewardRespBody();
        }
        IE_ReceiveH5OverSeaRewardResponse.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // header
            if (!this.header.parse_bytes(decoder_))
                return false;
            // body
            if (this.header.result == 0) {
                if (!this.body.parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        IE_ReceiveH5OverSeaRewardResponse.prototype.to_bytes = function (encoder) { return false; };
        IE_ReceiveH5OverSeaRewardResponse.ID = 1517;
        return IE_ReceiveH5OverSeaRewardResponse;
    }());
    message.IE_ReceiveH5OverSeaRewardResponse = IE_ReceiveH5OverSeaRewardResponse;
    __reflect(IE_ReceiveH5OverSeaRewardResponse.prototype, "message.IE_ReceiveH5OverSeaRewardResponse", ["aone.AoneResponse", "aone.AoneMessage"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
    aone.MessageFactory.getInstance().register(CheckVersionRequest.ID, function () { return new CheckVersionRequest(); });
    aone.MessageFactory.getInstance().register(CheckVersionResponse.ID, function () { return new CheckVersionResponse(); });
    aone.MessageFactory.getInstance().register(GetGameGroupsRequest.ID, function () { return new GetGameGroupsRequest(); });
    aone.MessageFactory.getInstance().register(GetGameGroupsResponse.ID, function () { return new GetGameGroupsResponse(); });
    aone.MessageFactory.getInstance().register(CreateRoleRequest.ID, function () { return new CreateRoleRequest(); });
    aone.MessageFactory.getInstance().register(CreateRoleResponse.ID, function () { return new CreateRoleResponse(); });
    aone.MessageFactory.getInstance().register(UserLoginRequest.ID, function () { return new UserLoginRequest(); });
    aone.MessageFactory.getInstance().register(UserLoginResponse.ID, function () { return new UserLoginResponse(); });
    aone.MessageFactory.getInstance().register(GetRoleInfoRequest.ID, function () { return new GetRoleInfoRequest(); });
    aone.MessageFactory.getInstance().register(GetRoleInfoResponse.ID, function () { return new GetRoleInfoResponse(); });
    aone.MessageFactory.getInstance().register(IE_GetRoleShortInfoByUserIdRequest.ID, function () { return new IE_GetRoleShortInfoByUserIdRequest(); });
    aone.MessageFactory.getInstance().register(IE_GetRoleShortInfoByUserIdResponse.ID, function () { return new IE_GetRoleShortInfoByUserIdResponse(); });
    aone.MessageFactory.getInstance().register(IE_GetH5RolePayInfoRequest.ID, function () { return new IE_GetH5RolePayInfoRequest(); });
    aone.MessageFactory.getInstance().register(IE_GetH5RolePayInfoResponse.ID, function () { return new IE_GetH5RolePayInfoResponse(); });
    aone.MessageFactory.getInstance().register(IE_ReceiveChargeRewardRequest.ID, function () { return new IE_ReceiveChargeRewardRequest(); });
    aone.MessageFactory.getInstance().register(IE_ReceiveChargeRewardResponse.ID, function () { return new IE_ReceiveChargeRewardResponse(); });
    aone.MessageFactory.getInstance().register(IE_ReceiveH5OverSeaRewardRequest.ID, function () { return new IE_ReceiveH5OverSeaRewardRequest(); });
    aone.MessageFactory.getInstance().register(IE_ReceiveH5OverSeaRewardResponse.ID, function () { return new IE_ReceiveH5OverSeaRewardResponse(); });
})(message || (message = {}));
//Date: 2020-1
//File: msg_xx_error.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 本文档用于定义全局错误码(协议号与错误码使用相同的区间)
// 错误码/协议号分配：(客户端自身的错误码均使用负数表示,以区别)
// 0: 表示成功
//   1  -- 99:  保留(与系统错误码兼容)
// 100  -- 199: 管理后台服务(公共)(W)
// 200  -- 999: 保留
// 1000 -- 1499:  账号服务(A)
// 1500 -- 1699:  入口服务(E)
// 1700 -- 1999:  API服务(I)
// 2000 -- 2499:  支付服务(P)
// 2500 -- 2999:  角色服务(R)
// 3000 -- 3199:  (API)日志记录服务(L)
// 3200 -- 3499:  (角色)日志记录服务(L)
// 3500 -- 3999:  (游戏)日志记录服务(L)
// 4000 -- 4899:  中心服务(C)
// 4900 -- 4999:  公共协议(X)
// 5000 -- 5399:  排名服务(N)
// 5400 -- 5499:  邮件发送服务(M)
// 5500 -- 5899:  推送服务(U)
// 5900 -- 5999:  短信发送服务(S)
// 6000 -- 6099:  适配服务(D)
// 6100 -- 6199:  管理后台公共部分(W)
// 6200 -- 6999:  管理后台扩展部分(W)
// 7000 -- 9999:  保留给公共模块
// 10000 -- 19999:  游戏服务(G)
// 游戏服相关协议从10000开始
// msg_cg_activity.protocol		10000 - 10099
// msg_cg_boss.protocol			10100 - 10299
// msg_gchat.protocol			11000 - 11299
// msg_wg_chat.protocol			11300 - 11399
// msg_gr.protocol				12000 - 12999
// msg_gr_ext.protocol			13000 - 13999
// msg_cg_artifact.protocol		14000 - 14999
// msg_gd_util.protocol			15000 - 15999
// msg_wg_gmserver_ex.protocol	16600 - 16999
// msg_wg_comment.protocl		16500 - 16599
// msg_cg_sign.protocol			17000 - 17999
// msg_cg_relation.protocol		18000 - 18499
// msg_gdarkland.protocol		18500 - 18999
// msg_cg_general.protocol		19000 - 19099
// msg_cg_potato.protocol		19100 - 19199
// msg_wg_public.protocol		19200 - 19399
// msg_gunknown.protocol		19400 - 19499
// msg_cg_instance.protocol		20000 - 20999
// msg_wr.protocol				21000 - 21999
// msg_cg_ladder.protocol		22000 - 22999
// msg_cg_league.protocol		23000 - 23499
// msg_cg_league_ex.protocol	23500 - 23699
// msg_cg_league_war.protocol	23700 - 23799
// msg_cg_league_match.protocol	23800 - 23999
// msg_cg_adviser.protocol		24000 - 24099
// msg_cg_wonderland.protocol	24100 - 24999
// msg_cg_mail.protocol			25000 - 25599
// msg_cg_pet.protocol			25600 - 25699
// msg_cg_mission.protocol		26000 - 26999
// msg_cg_util.protocol			27000 - 27999
// msg_cg_battle.protoco		28000 - 28999
// msg_cg_rank.protocol			29000 - 29999
// msg_cg_tower.protocol		30000 - 30999
// msg_cg_simulate.protocol		31000 - 31999
// msg_cg_login.protocol		32000 - 32999
// msg_cg_wanted.protocol		33000 - 33999
// msg_cg_mall.protocol			34000 - 34999
// msg_cg_notice.protocol		36000 - 36999
// msg_inside.protocol			37000 - 37599
// msg_gemail.protocol			37600 - 37699
// msg_grank.protocl			37700 - 37799
// msg_gpublic.protocol			37800 - 37899
// msg_wg_email.protocol		37900 - 37999
// msg_cg_role.protocol			38000 - 38999
// msg_cg_cipher.protocol		39100 - 39199
// msg_gcomment.protocol		39200 - 39299
// msg_cg_comment.protocol		39300 - 39399
// msg_cg_singlecraft.protocol	39400 - 39699
// msg_gg_singlecraft.protocol	39700 - 39799
// msg_cg_chat.protocol			39800 - 39899
// msg_gcomment.protocol		39900 - 39999
// msg_cg_darkland.protocol		40000 - 40499
// 参与压缩的协议
// 23731、24131、36202、32001、32003、32021、10000、25002、28102、29000、29002、38002、23010、23606、23620、23008、23006、23064、18006
var message;
(function (message) {
    // 全局错误码定义
    // ErrorCode
    var EC;
    (function (EC) {
        EC[EC["SUCCESS"] = 0] = "SUCCESS";
        EC[EC["AGENT_ERROR"] = 100] = "AGENT_ERROR";
        EC[EC["AGENT_INVALID_ARG"] = 101] = "AGENT_INVALID_ARG";
        EC[EC["AGENT_AUTH_FAILED"] = 102] = "AGENT_AUTH_FAILED";
        EC[EC["AGENT_UNMATCHED_TYPE"] = 103] = "AGENT_UNMATCHED_TYPE";
        EC[EC["AGENT_INVALID_ROLEID_OR_SESSION"] = 104] = "AGENT_INVALID_ROLEID_OR_SESSION";
        EC[EC["AGENT_NOSUPPORT_RESTART"] = 105] = "AGENT_NOSUPPORT_RESTART";
        EC[EC["AGENT_FILE_OPERAT_FORBID"] = 106] = "AGENT_FILE_OPERAT_FORBID";
        EC[EC["AGENT_CANNOT_FIND_FILE"] = 107] = "AGENT_CANNOT_FIND_FILE";
        EC[EC["AGENT_FILE_TOO_BIG"] = 108] = "AGENT_FILE_TOO_BIG";
        EC[EC["AGENT_CAN_NOT_FIND_ROLE"] = 109] = "AGENT_CAN_NOT_FIND_ROLE";
        EC[EC["AGENT_CAN_NOT_FIND_UNION"] = 110] = "AGENT_CAN_NOT_FIND_UNION";
        EC[EC["AGENT_ITEM_EXIST"] = 111] = "AGENT_ITEM_EXIST";
        EC[EC["AGENT_ITEM_COUNT_TO_BIG"] = 112] = "AGENT_ITEM_COUNT_TO_BIG";
        EC[EC["AGENT_FULL"] = 113] = "AGENT_FULL";
        EC[EC["AGENT_CANNOT_FIND_UNION"] = 114] = "AGENT_CANNOT_FIND_UNION";
        EC[EC["AGENT_CAN_NOT_ZERO"] = 115] = "AGENT_CAN_NOT_ZERO";
        EC[EC["AGENET_CAN_NOT_EMPTY"] = 116] = "AGENET_CAN_NOT_EMPTY";
        EC[EC["AGENT_ERROR_LIMIT"] = 199] = "AGENT_ERROR_LIMIT";
        EC[EC["AGENT_FILE_TYPE_ERROR"] = 200] = "AGENT_FILE_TYPE_ERROR";
        EC[EC["AGENT_FILE_CODING_ERROR"] = 201] = "AGENT_FILE_CODING_ERROR";
        EC[EC["AGENT_FILE_LOAD"] = 202] = "AGENT_FILE_LOAD";
        EC[EC["AGENT_FILE_STUFF"] = 203] = "AGENT_FILE_STUFF";
        EC[EC["AGENT_FILE_CHECK"] = 204] = "AGENT_FILE_CHECK";
        EC[EC["AGENT_FILE_SAVE"] = 205] = "AGENT_FILE_SAVE";
        EC[EC["AGENT_TIME_ERROR"] = 206] = "AGENT_TIME_ERROR";
        EC[EC["AGENT_FILE_UPDATING"] = 207] = "AGENT_FILE_UPDATING";
        EC[EC["AGENT_SET_OPEN_SERVER"] = 208] = "AGENT_SET_OPEN_SERVER";
        EC[EC["XA_ERROR"] = 1000] = "XA_ERROR";
        EC[EC["XA_INVALID_ARG"] = 1001] = "XA_INVALID_ARG";
        EC[EC["XA_NOT_SUPPORT"] = 1002] = "XA_NOT_SUPPORT";
        EC[EC["XA_VERIFY_KEY"] = 1003] = "XA_VERIFY_KEY";
        EC[EC["XA_UID_DISABLE"] = 1004] = "XA_UID_DISABLE";
        EC[EC["XA_NOT_FOUND_UID"] = 1005] = "XA_NOT_FOUND_UID";
        EC[EC["XA_NOT_FOUND_ACCOUNT"] = 1006] = "XA_NOT_FOUND_ACCOUNT";
        EC[EC["XA_ACCOUNT_EXIST"] = 1007] = "XA_ACCOUNT_EXIST";
        EC[EC["XA_INVALID_TOKEN"] = 1008] = "XA_INVALID_TOKEN";
        EC[EC["XA_INVALID_PASSWD"] = 1009] = "XA_INVALID_PASSWD";
        EC[EC["XA_DUPLICATE_BIND"] = 1010] = "XA_DUPLICATE_BIND";
        EC[EC["XA_DATABASE_ERROR"] = 1011] = "XA_DATABASE_ERROR";
        EC[EC["XA_SENDMAIL_FAILED"] = 1012] = "XA_SENDMAIL_FAILED";
        EC[EC["XA_OPERATE_TIMEOUT"] = 1013] = "XA_OPERATE_TIMEOUT";
        EC[EC["XA_OPEN_API_ERROR"] = 1014] = "XA_OPEN_API_ERROR";
        EC[EC["XA_NOT_FOUND_DEVICEID"] = 1015] = "XA_NOT_FOUND_DEVICEID";
        EC[EC["XA_NOT_FOUND_SINA_ACCOUNT"] = 1017] = "XA_NOT_FOUND_SINA_ACCOUNT";
        EC[EC["XA_NOT_FOUND_TENCENT_ACCOUNT"] = 1018] = "XA_NOT_FOUND_TENCENT_ACCOUNT";
        EC[EC["XA_NOT_FOUND_FACEBOOK_ACCOUNT"] = 1019] = "XA_NOT_FOUND_FACEBOOK_ACCOUNT";
        EC[EC["XA_NOT_FOUND_AONE_ACCOUNT_BY_UID"] = 1020] = "XA_NOT_FOUND_AONE_ACCOUNT_BY_UID";
        EC[EC["XA_NOT_FOUND_AONE_ACCOUNT_BY_PHONE"] = 1021] = "XA_NOT_FOUND_AONE_ACCOUNT_BY_PHONE";
        EC[EC["XA_NOT_FOUND_AONE_ACCOUNT_BY_MAIL"] = 1022] = "XA_NOT_FOUND_AONE_ACCOUNT_BY_MAIL";
        EC[EC["XA_NOT_FOUND_AONE_ACCOUNT_BY_WEIXIN"] = 1023] = "XA_NOT_FOUND_AONE_ACCOUNT_BY_WEIXIN";
        EC[EC["XA_NOT_FOUND_CHANNEL_NAME"] = 1024] = "XA_NOT_FOUND_CHANNEL_NAME";
        EC[EC["XA_PHONE_ALREADY_BIND"] = 1201] = "XA_PHONE_ALREADY_BIND";
        EC[EC["XA_MAIL_ALREADY_BIND"] = 1202] = "XA_MAIL_ALREADY_BIND";
        EC[EC["XA_INVALID_SESSION"] = 1297] = "XA_INVALID_SESSION";
        EC[EC["XA_INVALID_TICKET"] = 1298] = "XA_INVALID_TICKET";
        EC[EC["XA_ERROR_LIMIT"] = 1299] = "XA_ERROR_LIMIT";
        EC[EC["XE_ERROR"] = 1500] = "XE_ERROR";
        EC[EC["XE_TIMEOUT"] = 1501] = "XE_TIMEOUT";
        EC[EC["XE_INVALID_ARG"] = 1502] = "XE_INVALID_ARG";
        EC[EC["XE_NOT_SUPPORT"] = 1503] = "XE_NOT_SUPPORT";
        EC[EC["XE_INVALID_VERIFY_KEY"] = 1504] = "XE_INVALID_VERIFY_KEY";
        EC[EC["XE_INVALID_GAME_CODE"] = 1505] = "XE_INVALID_GAME_CODE";
        EC[EC["XE_INVALID_CLIENT_VERSION"] = 1506] = "XE_INVALID_CLIENT_VERSION";
        EC[EC["XE_FORBID"] = 1507] = "XE_FORBID";
        EC[EC["XE_CREATEROLE_FORBID"] = 1508] = "XE_CREATEROLE_FORBID";
        EC[EC["XE_ERROR_LIMIT"] = 1699] = "XE_ERROR_LIMIT";
        EC[EC["XI_ERROR"] = 1700] = "XI_ERROR";
        EC[EC["XI_TIMEOUT"] = 1701] = "XI_TIMEOUT";
        EC[EC["XI_INVALID_ARG"] = 1702] = "XI_INVALID_ARG";
        EC[EC["XI_INVALID_STATUS"] = 1703] = "XI_INVALID_STATUS";
        EC[EC["XI_INVALID_VERIFY_KEY"] = 1704] = "XI_INVALID_VERIFY_KEY";
        EC[EC["XI_DB_ERROR"] = 1705] = "XI_DB_ERROR";
        EC[EC["XI_INVALID_USER_TOKEN"] = 1706] = "XI_INVALID_USER_TOKEN";
        EC[EC["XI_NOT_FOUND_USER_TOKEN"] = 1707] = "XI_NOT_FOUND_USER_TOKEN";
        EC[EC["XI_INVALID_PHONE"] = 1708] = "XI_INVALID_PHONE";
        EC[EC["XI_INVALID_MAIL"] = 1709] = "XI_INVALID_MAIL";
        EC[EC["XI_INVALID_AONE_ACCOUNT"] = 1710] = "XI_INVALID_AONE_ACCOUNT";
        EC[EC["XI_INVALID_PASSWORD"] = 1711] = "XI_INVALID_PASSWORD";
        EC[EC["XI_NOT_FOUND_APP"] = 1712] = "XI_NOT_FOUND_APP";
        EC[EC["XI_INVALID_SIGN"] = 1713] = "XI_INVALID_SIGN";
        EC[EC["XI_INVALID_JSON"] = 1714] = "XI_INVALID_JSON";
        EC[EC["XI_INVALID_JSON_STRUCT"] = 1715] = "XI_INVALID_JSON_STRUCT";
        EC[EC["XI_NOT_FOUND_CHANNEL_CONFIG"] = 1716] = "XI_NOT_FOUND_CHANNEL_CONFIG";
        EC[EC["XI_NOT_FOUND_CHANNEL_PRODUCTS"] = 1717] = "XI_NOT_FOUND_CHANNEL_PRODUCTS";
        EC[EC["XI_NOT_VALID_ENTRY_SERVER"] = 1718] = "XI_NOT_VALID_ENTRY_SERVER";
        EC[EC["XI_INVALID_AONE_ACCOUNT_LEN"] = 1719] = "XI_INVALID_AONE_ACCOUNT_LEN";
        EC[EC["XI_INVALID_AONE_ACCOUNT_CHA"] = 1720] = "XI_INVALID_AONE_ACCOUNT_CHA";
        EC[EC["XI_UNSUPPORT_CHANNEL"] = 1721] = "XI_UNSUPPORT_CHANNEL";
        EC[EC["XI_LIMITAPICALL_CHANGEPWD"] = 1722] = "XI_LIMITAPICALL_CHANGEPWD";
        EC[EC["XI_INVALID_REAL_NAME"] = 1723] = "XI_INVALID_REAL_NAME";
        EC[EC["XI_INVALID_IDENTITY_NUMBER"] = 1724] = "XI_INVALID_IDENTITY_NUMBER";
        EC[EC["XI_FORBID_LOGIN"] = 1725] = "XI_FORBID_LOGIN";
        EC[EC["XI_IP_NOT_MATCHE"] = 1726] = "XI_IP_NOT_MATCHE";
        EC[EC["XI_COIN_NOT_ENOUGH"] = 1727] = "XI_COIN_NOT_ENOUGH";
        EC[EC["XI_ID_CARD_AUTH_FAIL"] = 1728] = "XI_ID_CARD_AUTH_FAIL";
        EC[EC["XI_LIMITAPICALL_SMSSEND"] = 1729] = "XI_LIMITAPICALL_SMSSEND";
        EC[EC["XI_PHONE_ALREADY_BIND"] = 1730] = "XI_PHONE_ALREADY_BIND";
        EC[EC["XI_ERROR_LIMIT"] = 1999] = "XI_ERROR_LIMIT";
        EC[EC["XP_ERROR"] = 2000] = "XP_ERROR";
        EC[EC["XP_OPERATE_TIMEOUT"] = 2001] = "XP_OPERATE_TIMEOUT";
        EC[EC["XP_NOT_AUTH"] = 2002] = "XP_NOT_AUTH";
        EC[EC["XP_GENERATE_PAYNO"] = 2003] = "XP_GENERATE_PAYNO";
        EC[EC["XP_SERVERID_NOT_MATCH"] = 2004] = "XP_SERVERID_NOT_MATCH";
        EC[EC["XP_DB_ERROR"] = 2005] = "XP_DB_ERROR";
        EC[EC["XP_INVALID_ARG"] = 2006] = "XP_INVALID_ARG";
        EC[EC["XP_UNSUPPORT_PAYCHANNEL"] = 2007] = "XP_UNSUPPORT_PAYCHANNEL";
        EC[EC["XP_EMPTY_PRODUCTS"] = 2008] = "XP_EMPTY_PRODUCTS";
        EC[EC["XP_THIRDPARTY_COMM_ERR"] = 2009] = "XP_THIRDPARTY_COMM_ERR";
        EC[EC["XP_THIRDPARTY_INVALID_PARAM"] = 2010] = "XP_THIRDPARTY_INVALID_PARAM";
        EC[EC["XP_DEVICE_LIMITED"] = 2011] = "XP_DEVICE_LIMITED";
        EC[EC["XP_PAY_FAILED"] = 2012] = "XP_PAY_FAILED";
        EC[EC["XP_PAY_UNFINISHED"] = 2013] = "XP_PAY_UNFINISHED";
        EC[EC["XP_ERROR_LIMIT"] = 2499] = "XP_ERROR_LIMIT";
        EC[EC["XR_ERROR"] = 2500] = "XR_ERROR";
        EC[EC["XR_OPERATE_TIMEOUT"] = 2501] = "XR_OPERATE_TIMEOUT";
        EC[EC["XR_INVALID_ARG"] = 2502] = "XR_INVALID_ARG";
        EC[EC["XR_SERVER_ALREADY_CONNECTED"] = 2503] = "XR_SERVER_ALREADY_CONNECTED";
        EC[EC["XR_REDIS_ERROR"] = 2504] = "XR_REDIS_ERROR";
        EC[EC["XR_MYSQL_ERROR"] = 2505] = "XR_MYSQL_ERROR";
        EC[EC["XR_AUTH_INVALID_USERTOKEN"] = 2506] = "XR_AUTH_INVALID_USERTOKEN";
        EC[EC["XR_AUTH_INVALID_TICKET"] = 2507] = "XR_AUTH_INVALID_TICKET";
        EC[EC["XR_CHAR_CREATE_NAME_IN_USE"] = 2508] = "XR_CHAR_CREATE_NAME_IN_USE";
        EC[EC["XR_CHAR_CREATE_ACCOUNT_LIMIT"] = 2509] = "XR_CHAR_CREATE_ACCOUNT_LIMIT";
        EC[EC["XR_CHAR_CREATE_SERVER_LIMIT"] = 2510] = "XR_CHAR_CREATE_SERVER_LIMIT";
        EC[EC["XR_CHAR_CREATE_DISABLED"] = 2511] = "XR_CHAR_CREATE_DISABLED";
        EC[EC["XR_CHAR_LOGIN_NO_WORLD"] = 2512] = "XR_CHAR_LOGIN_NO_WORLD";
        EC[EC["XR_CHAR_LOGIN_DISABLED"] = 2513] = "XR_CHAR_LOGIN_DISABLED";
        EC[EC["XR_CHAR_NAME_PROFANE"] = 2514] = "XR_CHAR_NAME_PROFANE";
        EC[EC["XR_CHAR_COIN_NOT_ENOUGH"] = 2515] = "XR_CHAR_COIN_NOT_ENOUGH";
        EC[EC["XR_DB_ERROR"] = 2516] = "XR_DB_ERROR";
        EC[EC["XR_PAY_SIGN_UNMATCH"] = 2517] = "XR_PAY_SIGN_UNMATCH";
        EC[EC["XR_NAME_INVALID"] = 2518] = "XR_NAME_INVALID";
        EC[EC["XR_NOT_FOUND_ROLE"] = 2519] = "XR_NOT_FOUND_ROLE";
        EC[EC["XR_ERROR_LIMIT"] = 2999] = "XR_ERROR_LIMIT";
        EC[EC["XL_ERROR"] = 3000] = "XL_ERROR";
        EC[EC["XL_ALREADY_CONNECTED"] = 3001] = "XL_ALREADY_CONNECTED";
        EC[EC["XL_ERROR_LIMIT"] = 3499] = "XL_ERROR_LIMIT";
        EC[EC["XL_GAME_ERROR"] = 3500] = "XL_GAME_ERROR";
        EC[EC["XL_GAME_ERROR_LIMIT"] = 3999] = "XL_GAME_ERROR_LIMIT";
        EC[EC["XC_ERROR"] = 4000] = "XC_ERROR";
        EC[EC["XC_INVALID_ARG"] = 4001] = "XC_INVALID_ARG";
        EC[EC["XC_NOT_SUPPORT"] = 4002] = "XC_NOT_SUPPORT";
        EC[EC["XC_DB_ERROR"] = 4003] = "XC_DB_ERROR";
        EC[EC["XC_INVALID_SESSION"] = 4004] = "XC_INVALID_SESSION";
        EC[EC["XC_SERVER_ID_NOT_EXIST"] = 4005] = "XC_SERVER_ID_NOT_EXIST";
        EC[EC["XC_REPEAT_REGISTER"] = 4006] = "XC_REPEAT_REGISTER";
        EC[EC["XC_INVALID_PASSWORD"] = 4007] = "XC_INVALID_PASSWORD";
        EC[EC["XC_ALREADY_REGISTER"] = 4008] = "XC_ALREADY_REGISTER";
        EC[EC["XC_INVALID_TICKET"] = 4009] = "XC_INVALID_TICKET";
        EC[EC["XC_TRANSFER_TIMEOUT"] = 4010] = "XC_TRANSFER_TIMEOUT";
        EC[EC["XC_TRANSFER_ERROR"] = 4011] = "XC_TRANSFER_ERROR";
        EC[EC["XC_CODE_NOT_EXIST"] = 4012] = "XC_CODE_NOT_EXIST";
        EC[EC["XC_CODE_ALREADY_USED"] = 4013] = "XC_CODE_ALREADY_USED";
        EC[EC["XC_CODE_COUNT_LIMIT"] = 4014] = "XC_CODE_COUNT_LIMIT";
        EC[EC["XC_CODE_PLATFORM_LIMIT"] = 4015] = "XC_CODE_PLATFORM_LIMIT";
        EC[EC["XC_CODE_GROUP_LIMIT"] = 4016] = "XC_CODE_GROUP_LIMIT";
        EC[EC["XC_CODE_TIME_LIMIT"] = 4017] = "XC_CODE_TIME_LIMIT";
        EC[EC["XC_ERROR_LIMIT"] = 4799] = "XC_ERROR_LIMIT";
        EC[EC["XK_ERROR"] = 4800] = "XK_ERROR";
        EC[EC["XK_ERROR_LIMIT"] = 4899] = "XK_ERROR_LIMIT";
        EC[EC["XN_ERROR"] = 5000] = "XN_ERROR";
        EC[EC["XN_TIMEOUT"] = 5001] = "XN_TIMEOUT";
        EC[EC["XN_INVALID_ARG"] = 5002] = "XN_INVALID_ARG";
        EC[EC["XN_NOT_SUPPORT"] = 5003] = "XN_NOT_SUPPORT";
        EC[EC["XN_SAVE_FAIL"] = 5004] = "XN_SAVE_FAIL";
        EC[EC["XN_ERROR_LIMIT"] = 5499] = "XN_ERROR_LIMIT";
        EC[EC["XU_ERROR"] = 5500] = "XU_ERROR";
        EC[EC["XU_ERROR_LIMIT"] = 5899] = "XU_ERROR_LIMIT";
        EC[EC["XS_ERROR"] = 5900] = "XS_ERROR";
        EC[EC["XS_ERROR_LIMIT"] = 5999] = "XS_ERROR_LIMIT";
        EC[EC["XD_ERROR"] = 6000] = "XD_ERROR";
        EC[EC["XD_NO_AUTH"] = 6001] = "XD_NO_AUTH";
        EC[EC["XD_SERVER_NOT_FOUND"] = 6002] = "XD_SERVER_NOT_FOUND";
        EC[EC["XD_JSON_CONVERT_FAILED"] = 6003] = "XD_JSON_CONVERT_FAILED";
        EC[EC["XD_REQUEST_PATH_NOT_FOUND"] = 6004] = "XD_REQUEST_PATH_NOT_FOUND";
        EC[EC["XD_SEND_TO_SERVER_FAILED"] = 6005] = "XD_SEND_TO_SERVER_FAILED";
        EC[EC["XD_ERROR_CONFIG_ITEM_ERROR"] = 6006] = "XD_ERROR_CONFIG_ITEM_ERROR";
        EC[EC["XD_ERROR_OFFLINE"] = 6007] = "XD_ERROR_OFFLINE";
        EC[EC["XD_REGIST_CENTER_SERVER_ERROR"] = 6008] = "XD_REGIST_CENTER_SERVER_ERROR";
        EC[EC["XD_REGIST_ROLE_SERVER_ERROR"] = 6009] = "XD_REGIST_ROLE_SERVER_ERROR";
        EC[EC["XD_REGIST_IP_NOT_MATCHE"] = 6010] = "XD_REGIST_IP_NOT_MATCHE";
        EC[EC["XD_REGIST_PORT_NOT_MATCHE"] = 6011] = "XD_REGIST_PORT_NOT_MATCHE";
        EC[EC["XD_HEATBEAT_FAILED"] = 6012] = "XD_HEATBEAT_FAILED";
        EC[EC["XD_TIME_OUT"] = 6013] = "XD_TIME_OUT";
        EC[EC["XD_ERROR_LIMIT"] = 6099] = "XD_ERROR_LIMIT";
        EC[EC["XG_ERROR"] = 10000] = "XG_ERROR";
        EC[EC["XG_TIMEOUT"] = 10001] = "XG_TIMEOUT";
        EC[EC["XG_INVALID_ARG"] = 10002] = "XG_INVALID_ARG";
        EC[EC["XG_NOT_SUPPORT"] = 10003] = "XG_NOT_SUPPORT";
        EC[EC["XG_INVALID_GAME_CODE"] = 10004] = "XG_INVALID_GAME_CODE";
        EC[EC["XG_INVALID_ROLEID_OR_SESSION"] = 10005] = "XG_INVALID_ROLEID_OR_SESSION";
        EC[EC["XG_INVALID_LOGIN"] = 10006] = "XG_INVALID_LOGIN";
        EC[EC["XG_NAME_WRONG"] = 10007] = "XG_NAME_WRONG";
        EC[EC["XG_NAME_TOO_LONG"] = 10008] = "XG_NAME_TOO_LONG";
        EC[EC["XG_NAME_REPEATED"] = 10009] = "XG_NAME_REPEATED";
        EC[EC["XG_INVALID_NOT_LOGIN"] = 10010] = "XG_INVALID_NOT_LOGIN";
        EC[EC["XG_ROLE_NOT_FINDED"] = 10050] = "XG_ROLE_NOT_FINDED";
        EC[EC["XG_SENSITIVE_WORD"] = 10051] = "XG_SENSITIVE_WORD";
        EC[EC["XG_ROLE_TYPE_FAILED"] = 10052] = "XG_ROLE_TYPE_FAILED";
        EC[EC["XG_ROLE_STOPED"] = 10053] = "XG_ROLE_STOPED";
        EC[EC["XG_SERVER_STOPED"] = 10054] = "XG_SERVER_STOPED";
        EC[EC["XG_FREE_NUM_EMPTY"] = 10055] = "XG_FREE_NUM_EMPTY";
        EC[EC["XG_DBSERVER_ERR"] = 10056] = "XG_DBSERVER_ERR";
        EC[EC["XG_MODIFY_SAME_NAME"] = 10057] = "XG_MODIFY_SAME_NAME";
        EC[EC["XG_SERCH_WORD_NOT_EMPTY"] = 10058] = "XG_SERCH_WORD_NOT_EMPTY";
        EC[EC["XG_LOGIN_FORBIND"] = 10059] = "XG_LOGIN_FORBIND";
        EC[EC["XG_SERVER_RESTART"] = 10060] = "XG_SERVER_RESTART";
        EC[EC["XG_PAY_MATCH_ERROR"] = 10061] = "XG_PAY_MATCH_ERROR";
        EC[EC["XG_CHAT_REPEATED"] = 10062] = "XG_CHAT_REPEATED";
        EC[EC["XG_ROLE_GROUP_NOT_MATCH"] = 10063] = "XG_ROLE_GROUP_NOT_MATCH";
        EC[EC["XG_OPENFUNCTION_LEAGUE"] = 10100] = "XG_OPENFUNCTION_LEAGUE";
        EC[EC["XG_OPENFUNCTION_LADDER"] = 10101] = "XG_OPENFUNCTION_LADDER";
        EC[EC["XG_OPENFUNCTION_MINE"] = 10102] = "XG_OPENFUNCTION_MINE";
        EC[EC["XG_OPENFUNCTION_VISITOR"] = 10103] = "XG_OPENFUNCTION_VISITOR";
        EC[EC["XG_OPENFUNCTION_TOWER"] = 10104] = "XG_OPENFUNCTION_TOWER";
        EC[EC["XG_OPENFUNCTION_VILLAGE"] = 10105] = "XG_OPENFUNCTION_VILLAGE";
        EC[EC["XG_OPENFUNCTION_WANTED"] = 10106] = "XG_OPENFUNCTION_WANTED";
        EC[EC["XG_OPENFUNCTION_GENERALSKILL"] = 10107] = "XG_OPENFUNCTION_GENERALSKILL";
        EC[EC["XG_OPENFUNCTION_GENERALEQUIP"] = 10108] = "XG_OPENFUNCTION_GENERALEQUIP";
        EC[EC["XG_OPENFUNCTION_GENERALFORGE"] = 10109] = "XG_OPENFUNCTION_GENERALFORGE";
        EC[EC["XG_OPENFUNCTION_GENERALTALENT"] = 10110] = "XG_OPENFUNCTION_GENERALTALENT";
        EC[EC["XG_OPENFUNCTION_GENERALCARVE"] = 10111] = "XG_OPENFUNCTION_GENERALCARVE";
        EC[EC["XG_OPENFUNCTION_ADVISER"] = 10112] = "XG_OPENFUNCTION_ADVISER";
        EC[EC["XG_OPENFUNCTION_INSTANCE"] = 10113] = "XG_OPENFUNCTION_INSTANCE";
        EC[EC["XG_OPENFUNCTION_TRAINING"] = 10114] = "XG_OPENFUNCTION_TRAINING";
        EC[EC["XG_OPENFUNCTION_TALENT"] = 10115] = "XG_OPENFUNCTION_TALENT";
        EC[EC["XG_OPENFUNCTION_ELITE"] = 10116] = "XG_OPENFUNCTION_ELITE";
        EC[EC["XG_OPENFUNCTION_FORMATION"] = 10117] = "XG_OPENFUNCTION_FORMATION";
        EC[EC["XG_OPENFUNCTION_SEVENDAY"] = 10118] = "XG_OPENFUNCTION_SEVENDAY";
        EC[EC["XG_OPENFUNCTION_CHAT"] = 10119] = "XG_OPENFUNCTION_CHAT";
        EC[EC["XG_OPENFUNCTION_LADDER_QUICK"] = 10120] = "XG_OPENFUNCTION_LADDER_QUICK";
        EC[EC["XG_OPENFUNCTION_CONTEND"] = 10121] = "XG_OPENFUNCTION_CONTEND";
        EC[EC["XG_OPENFUNCTION_NOT_OPEN"] = 10122] = "XG_OPENFUNCTION_NOT_OPEN";
        EC[EC["XG_OPENFUNCTION_ENEMY_CAMP"] = 10123] = "XG_OPENFUNCTION_ENEMY_CAMP";
        EC[EC["XG_OPENFUNCTION_SINGLE_CRAFT"] = 10124] = "XG_OPENFUNCTION_SINGLE_CRAFT";
        EC[EC["XG_LICENCE_LEVEL_NOT_ENOUGH"] = 10200] = "XG_LICENCE_LEVEL_NOT_ENOUGH";
        EC[EC["XG_ROLE_IS_EXIST"] = 10201] = "XG_ROLE_IS_EXIST";
        EC[EC["XG_ROLE_LEVEL_IS_NOT_ENOUGH"] = 10202] = "XG_ROLE_LEVEL_IS_NOT_ENOUGH";
        EC[EC["XG_LACK_POWER"] = 10203] = "XG_LACK_POWER";
        EC[EC["XG_NICK_LEN_IS_ERROR"] = 10204] = "XG_NICK_LEN_IS_ERROR";
        EC[EC["XG_CLIENT_LOGIN_FAILED"] = 10205] = "XG_CLIENT_LOGIN_FAILED";
        EC[EC["XG_CLIENT_KICKED"] = 10206] = "XG_CLIENT_KICKED";
        EC[EC["XG_ACCOUNT_ISNOT_BIND"] = 10207] = "XG_ACCOUNT_ISNOT_BIND";
        EC[EC["XG_REWARD_BINDACCOUNT"] = 10208] = "XG_REWARD_BINDACCOUNT";
        EC[EC["XG_LACK_TOKEN"] = 10209] = "XG_LACK_TOKEN";
        EC[EC["XG_LACK_MONEY"] = 10210] = "XG_LACK_MONEY";
        EC[EC["XG_CANNOTFIND_GOODS"] = 10211] = "XG_CANNOTFIND_GOODS";
        EC[EC["XG_GOODS_NOT_ENOUGH"] = 10212] = "XG_GOODS_NOT_ENOUGH";
        EC[EC["XG_GOODS_CANNOT_SELL"] = 10213] = "XG_GOODS_CANNOT_SELL";
        EC[EC["XG_PACKAGE_SELL_NUM_IS_ERROR"] = 10214] = "XG_PACKAGE_SELL_NUM_IS_ERROR";
        EC[EC["XG_BATTLE_ATTACKED_FRIEND"] = 10215] = "XG_BATTLE_ATTACKED_FRIEND";
        EC[EC["XG_BATTLE_ATTACKED_SAME_LEAUGE"] = 10216] = "XG_BATTLE_ATTACKED_SAME_LEAUGE";
        EC[EC["XG_LACK_HONOR_COIN"] = 10217] = "XG_LACK_HONOR_COIN";
        EC[EC["XG_ACTIVATION_TYPE_ERROR"] = 10220] = "XG_ACTIVATION_TYPE_ERROR";
        EC[EC["XG_ACTIVATION_NUMBER_NOTFIND"] = 10230] = "XG_ACTIVATION_NUMBER_NOTFIND";
        EC[EC["XG_ACTIVATION_NUMBER_FINISH"] = 10231] = "XG_ACTIVATION_NUMBER_FINISH";
        EC[EC["XG_WARPAPER_NOT_FIND"] = 10232] = "XG_WARPAPER_NOT_FIND";
        EC[EC["XG_PROCESS_COOLING"] = 10233] = "XG_PROCESS_COOLING";
        EC[EC["XG_PROCESS_NOT_COOLING"] = 10234] = "XG_PROCESS_NOT_COOLING";
        EC[EC["XG_LADDER_BUY_LIMIT"] = 10235] = "XG_LADDER_BUY_LIMIT";
        EC[EC["XG_POWER_BUY_LIMIT"] = 10236] = "XG_POWER_BUY_LIMIT";
        EC[EC["XG_LACK_LADDERSCORE"] = 10237] = "XG_LACK_LADDERSCORE";
        EC[EC["XG_MALL_LIMIT_COUNTS"] = 10238] = "XG_MALL_LIMIT_COUNTS";
        EC[EC["XG_GOODS_NOT_USED"] = 10239] = "XG_GOODS_NOT_USED";
        EC[EC["XG_PLATE_BUY_LIMIT"] = 10240] = "XG_PLATE_BUY_LIMIT";
        EC[EC["XG_IMMORTAL_CANNOT_GET"] = 10241] = "XG_IMMORTAL_CANNOT_GET";
        EC[EC["XG_FASHION_NOT_ENOUGH"] = 10242] = "XG_FASHION_NOT_ENOUGH";
        EC[EC["XG_CHEST_TYPE_ERROR"] = 10243] = "XG_CHEST_TYPE_ERROR";
        EC[EC["XG_VIP_LEVEL_NOT_ENOUGH"] = 10245] = "XG_VIP_LEVEL_NOT_ENOUGH";
        EC[EC["XG_POWER_FULL"] = 10246] = "XG_POWER_FULL";
        EC[EC["XG_ROLE_PIC_ERROR"] = 10247] = "XG_ROLE_PIC_ERROR";
        EC[EC["XG_ROLE_PICFRAME_ERROR"] = 10248] = "XG_ROLE_PICFRAME_ERROR";
        EC[EC["XG_LACK_CHAMPAGNE"] = 10249] = "XG_LACK_CHAMPAGNE";
        EC[EC["XG_LACK_LEAGUECOIN"] = 10250] = "XG_LACK_LEAGUECOIN";
        EC[EC["XG_SIGN_FAILD"] = 10251] = "XG_SIGN_FAILD";
        EC[EC["XG_LIEREN_COIN_NOT_ENOUGH"] = 10252] = "XG_LIEREN_COIN_NOT_ENOUGH";
        EC[EC["XG_SIGN_RECEIVE_FAILD"] = 10253] = "XG_SIGN_RECEIVE_FAILD";
        EC[EC["XG_REWARD_POWER_NOT_TIME"] = 10254] = "XG_REWARD_POWER_NOT_TIME";
        EC[EC["XG_REWARD_POWER_ALREADY"] = 10255] = "XG_REWARD_POWER_ALREADY";
        EC[EC["XG_ROLE_TITLE_ERROR"] = 10256] = "XG_ROLE_TITLE_ERROR";
        EC[EC["XG_ROLE_TITLE_VICETITLE_SAME"] = 10257] = "XG_ROLE_TITLE_VICETITLE_SAME";
        EC[EC["XG_BUYMONEY_NOT_ENOUGH"] = 10258] = "XG_BUYMONEY_NOT_ENOUGH";
        EC[EC["XG_LACK_PSYCHICFRUIT"] = 10259] = "XG_LACK_PSYCHICFRUIT";
        EC[EC["XG_SIGN_ALREADY"] = 10260] = "XG_SIGN_ALREADY";
        EC[EC["XG_SELL_GOODS_EMPTY"] = 10261] = "XG_SELL_GOODS_EMPTY";
        EC[EC["XG_LADDER_CHALLENGE_SELF"] = 10262] = "XG_LADDER_CHALLENGE_SELF";
        EC[EC["XG_FORMATION_TYPE_ERROR"] = 10263] = "XG_FORMATION_TYPE_ERROR";
        EC[EC["XG_FORMATION_MAIN_GENERAL"] = 10264] = "XG_FORMATION_MAIN_GENERAL";
        EC[EC["XG_FORMATION_SUPPORT_GENERAL"] = 10265] = "XG_FORMATION_SUPPORT_GENERAL";
        EC[EC["XG_FORMATION_RESERVE_GENERAL"] = 10266] = "XG_FORMATION_RESERVE_GENERAL";
        EC[EC["XG_FORMATION_GENERAL_REPEATED"] = 10267] = "XG_FORMATION_GENERAL_REPEATED";
        EC[EC["XG_FORMATION_GENERAL_LEVEL"] = 10268] = "XG_FORMATION_GENERAL_LEVEL";
        EC[EC["XG_LACK_BEER"] = 10269] = "XG_LACK_BEER";
        EC[EC["XG_LACK_REDWINE"] = 10270] = "XG_LACK_REDWINE";
        EC[EC["XG_CHARGE_ENMPTY"] = 10271] = "XG_CHARGE_ENMPTY";
        EC[EC["XG_GIFT_ALREADY_BUY"] = 10272] = "XG_GIFT_ALREADY_BUY";
        EC[EC["XG_LEVEL_TOO_HIGHT"] = 10273] = "XG_LEVEL_TOO_HIGHT";
        EC[EC["XG_LACK_LOTTERY_SCORE"] = 10274] = "XG_LACK_LOTTERY_SCORE";
        EC[EC["XG_LADDER_BATTLING"] = 10275] = "XG_LADDER_BATTLING";
        EC[EC["XG_PLUGIN_CHECK_SPEEDUP"] = 10276] = "XG_PLUGIN_CHECK_SPEEDUP";
        EC[EC["XG_LACK_WANTEDCOIN"] = 10277] = "XG_LACK_WANTEDCOIN";
        EC[EC["XG_CHARGE_LACK"] = 10278] = "XG_CHARGE_LACK";
        EC[EC["XG_LACK_GOLDPLATE"] = 10279] = "XG_LACK_GOLDPLATE";
        EC[EC["XG_POTATO_BUY_COUNT_IS_MAX"] = 10280] = "XG_POTATO_BUY_COUNT_IS_MAX";
        EC[EC["XG_LOTTERY_REWARD_ALREADY"] = 10281] = "XG_LOTTERY_REWARD_ALREADY";
        EC[EC["XG_LOTTERY_REWARD_COOLING"] = 10282] = "XG_LOTTERY_REWARD_COOLING";
        EC[EC["XG_LOTTERY_REWARD_TIME_NOT_ENOUGH"] = 10283] = "XG_LOTTERY_REWARD_TIME_NOT_ENOUGH";
        EC[EC["XG_USE_GOODS_TOO"] = 10284] = "XG_USE_GOODS_TOO";
        EC[EC["XG_ROLE_CREATING"] = 10285] = "XG_ROLE_CREATING";
        EC[EC["XG_LOCK_LEAGUE_SCORE"] = 10286] = "XG_LOCK_LEAGUE_SCORE";
        EC[EC["XG_FACEBOOK_REWARD_ALREADY"] = 10287] = "XG_FACEBOOK_REWARD_ALREADY";
        EC[EC["XG_FACEBOOK_GENERAL_NOT_ENOUGH"] = 10288] = "XG_FACEBOOK_GENERAL_NOT_ENOUGH";
        EC[EC["XG_PRAISE_COUNT_IS_ENOUGH"] = 10289] = "XG_PRAISE_COUNT_IS_ENOUGH";
        EC[EC["XG_PRAISE_COUNT_OTHER_IS_ENOUGH"] = 10290] = "XG_PRAISE_COUNT_OTHER_IS_ENOUGH";
        EC[EC["XG_PRAISE_REWARD_ALREADY"] = 10291] = "XG_PRAISE_REWARD_ALREADY";
        EC[EC["XG_PRAISE_COUNT_ISNOT_ENOUGH"] = 10292] = "XG_PRAISE_COUNT_ISNOT_ENOUGH";
        EC[EC["XG_PRAISED_COUNT_ISNOT_ENOUGH"] = 10293] = "XG_PRAISED_COUNT_ISNOT_ENOUGH";
        EC[EC["XG_PRAISE_NOT_OPERATION"] = 10294] = "XG_PRAISE_NOT_OPERATION";
        EC[EC["XG_RUNES_NOT_GAIN"] = 10295] = "XG_RUNES_NOT_GAIN";
        EC[EC["XG_RUNES_IS_GAIN"] = 10296] = "XG_RUNES_IS_GAIN";
        EC[EC["XG_GAIN_RUNES_NOT_ENOUGH"] = 10297] = "XG_GAIN_RUNES_NOT_ENOUGH";
        EC[EC["XG_GAIN_RUNES_REWARD_ISMAX"] = 10298] = "XG_GAIN_RUNES_REWARD_ISMAX";
        EC[EC["XG_EXCHANGE_MALL_IS_CDING"] = 10299] = "XG_EXCHANGE_MALL_IS_CDING";
        EC[EC["XG_GENERAL_NO_EXSIT"] = 10300] = "XG_GENERAL_NO_EXSIT";
        EC[EC["XG_GENERAL_OWN"] = 10301] = "XG_GENERAL_OWN";
        EC[EC["XG_GENERAL_UNOWN"] = 10302] = "XG_GENERAL_UNOWN";
        EC[EC["XG_GENERAL_UP_QUALITY_ERROR"] = 10303] = "XG_GENERAL_UP_QUALITY_ERROR";
        EC[EC["XG_GENERAL_QUALITY_MAX"] = 10304] = "XG_GENERAL_QUALITY_MAX";
        EC[EC["XG_GENERAL_LEVEL_MAX"] = 10305] = "XG_GENERAL_LEVEL_MAX";
        EC[EC["XG_GENERAL_LEVEL_LOWER"] = 10306] = "XG_GENERAL_LEVEL_LOWER";
        EC[EC["XG_GENERAL_LEVEL_OVER_ROLELEVEL"] = 10307] = "XG_GENERAL_LEVEL_OVER_ROLELEVEL";
        EC[EC["XG_GENERAL_SKILL_ERROR"] = 10308] = "XG_GENERAL_SKILL_ERROR";
        EC[EC["XG_GENERAL_BREAK_MAX"] = 10309] = "XG_GENERAL_BREAK_MAX";
        EC[EC["XG_GENERAL_STAR_MAX"] = 10310] = "XG_GENERAL_STAR_MAX";
        EC[EC["XG_GENERAL_BRUST_ERROR"] = 10311] = "XG_GENERAL_BRUST_ERROR";
        EC[EC["XG_EQUIPLEVEL_OVER_GENERALLEVEL"] = 10312] = "XG_EQUIPLEVEL_OVER_GENERALLEVEL";
        EC[EC["XG_BRUST_FORMATION_ERROR"] = 10313] = "XG_BRUST_FORMATION_ERROR";
        EC[EC["XG_FORMATION_IS_EMPTY"] = 10314] = "XG_FORMATION_IS_EMPTY";
        EC[EC["XG_EQUIPSMELT_MATERIAL_ISNOT_ENOUGH"] = 10315] = "XG_EQUIPSMELT_MATERIAL_ISNOT_ENOUGH";
        EC[EC["XG_EQUIPSMELT_LOCKATTRI_ERROR"] = 10316] = "XG_EQUIPSMELT_LOCKATTRI_ERROR";
        EC[EC["XG_EQUIPSMELT_EQUIPLEVEL_ISNOT_ENOUGH"] = 10317] = "XG_EQUIPSMELT_EQUIPLEVEL_ISNOT_ENOUGH";
        EC[EC["XG_EQUIPSMELT_EQUIPLEVEL_ISNOT_QUALITY"] = 10318] = "XG_EQUIPSMELT_EQUIPLEVEL_ISNOT_QUALITY";
        EC[EC["XG_GENERAL_PARTNER_ALREADY_ACTIVATE"] = 10319] = "XG_GENERAL_PARTNER_ALREADY_ACTIVATE";
        EC[EC["XG_GENERAL_SKILL_LEVEL_MAX"] = 10320] = "XG_GENERAL_SKILL_LEVEL_MAX";
        EC[EC["XG_GENERAL_BREAK_LEVEL_MIN"] = 10321] = "XG_GENERAL_BREAK_LEVEL_MIN";
        EC[EC["XG_GENERAL_EQUIP_NO_EXSIT"] = 10322] = "XG_GENERAL_EQUIP_NO_EXSIT";
        EC[EC["XG_GENERAL_EQUIP_QUALITY_MAX"] = 10323] = "XG_GENERAL_EQUIP_QUALITY_MAX";
        EC[EC["XG_SKILL_NO_EXSIT"] = 10324] = "XG_SKILL_NO_EXSIT";
        EC[EC["XG_GENERAL_EQUIP_CARVE_MAX"] = 10325] = "XG_GENERAL_EQUIP_CARVE_MAX";
        EC[EC["XG_GENERAL_BREAK_STAR_MIN"] = 10326] = "XG_GENERAL_BREAK_STAR_MIN";
        EC[EC["XG_GENERAL_BREAK_AWAKEN_MIN"] = 10327] = "XG_GENERAL_BREAK_AWAKEN_MIN";
        EC[EC["XG_ADVISER_NO_EXSIT"] = 10328] = "XG_ADVISER_NO_EXSIT";
        EC[EC["XG_ADVISER_LOCK"] = 10329] = "XG_ADVISER_LOCK";
        EC[EC["XG_ADVISER_LEVEL_MAX"] = 10330] = "XG_ADVISER_LEVEL_MAX";
        EC[EC["XG_GENERAL_SIZE_NOT_ENOUGH"] = 10331] = "XG_GENERAL_SIZE_NOT_ENOUGH";
        EC[EC["XG_GENERAL_NOT_FIT"] = 10332] = "XG_GENERAL_NOT_FIT";
        EC[EC["XG_ADVISER_NOT_REWARD"] = 10333] = "XG_ADVISER_NOT_REWARD";
        EC[EC["XG_ADVISER_LEVEL_NOT_ENOUGH"] = 10334] = "XG_ADVISER_LEVEL_NOT_ENOUGH";
        EC[EC["XG_BREAK_SKILL_UNOWN"] = 10335] = "XG_BREAK_SKILL_UNOWN";
        EC[EC["XG_EQUIPSMELT_EQUIPLEVEL_IS_MAX"] = 10336] = "XG_EQUIPSMELT_EQUIPLEVEL_IS_MAX";
        EC[EC["XG_GENERAL_TALENT_BOOK_NO_EXSIT"] = 10337] = "XG_GENERAL_TALENT_BOOK_NO_EXSIT";
        EC[EC["XG_ADVISER_OVER_ROLELEVEL"] = 10338] = "XG_ADVISER_OVER_ROLELEVEL";
        EC[EC["XG_GENERAL_TALENT_OVER_GENERALLEVEL"] = 10339] = "XG_GENERAL_TALENT_OVER_GENERALLEVEL";
        EC[EC["XG_GENERAL_FORMATION_TYPE_ERROR"] = 10340] = "XG_GENERAL_FORMATION_TYPE_ERROR";
        EC[EC["XG_GENERAL_FORMATION_NAME_INVALID"] = 10341] = "XG_GENERAL_FORMATION_NAME_INVALID";
        EC[EC["XG_BRUST_GENERAL_REPEATED"] = 10342] = "XG_BRUST_GENERAL_REPEATED";
        EC[EC["XG_EQUIPSMELT_OVER_GENERAL_QUALITY"] = 10343] = "XG_EQUIPSMELT_OVER_GENERAL_QUALITY";
        EC[EC["XG_EQUIP_LEVEL_ISNOT_ENOUGH"] = 10344] = "XG_EQUIP_LEVEL_ISNOT_ENOUGH";
        EC[EC["XG_EQUIP_FORGE_ISNOT_ENOUGH"] = 10345] = "XG_EQUIP_FORGE_ISNOT_ENOUGH";
        EC[EC["XG_GENERAL_TALEN_STUDY"] = 10346] = "XG_GENERAL_TALEN_STUDY";
        EC[EC["XG_CANNOT_BUY"] = 10347] = "XG_CANNOT_BUY";
        EC[EC["XG_STRATEGY_NOT_UNLOCK"] = 10348] = "XG_STRATEGY_NOT_UNLOCK";
        EC[EC["XG_GENERAL_LEVEL_LOWER_FATE"] = 10349] = "XG_GENERAL_LEVEL_LOWER_FATE";
        EC[EC["XG_ARTIFACT_IS_EXSIT"] = 10350] = "XG_ARTIFACT_IS_EXSIT";
        EC[EC["XG_ARTIFACT_ISNOT_EXSIT"] = 10351] = "XG_ARTIFACT_ISNOT_EXSIT";
        EC[EC["XG_ARTIFACT_WASH_ATTRI_EMPTY"] = 10352] = "XG_ARTIFACT_WASH_ATTRI_EMPTY";
        EC[EC["XG_ARTIFACT_NOT_BREAK"] = 10353] = "XG_ARTIFACT_NOT_BREAK";
        EC[EC["XG_ARTIFACT_LOCK_MORE"] = 10354] = "XG_ARTIFACT_LOCK_MORE";
        EC[EC["XG_ARTIFACT_BREAK_MAX"] = 10355] = "XG_ARTIFACT_BREAK_MAX";
        EC[EC["XG_SKILL_AWAKEN"] = 10356] = "XG_SKILL_AWAKEN";
        EC[EC["XG_SKILL_NOT_MAX"] = 10357] = "XG_SKILL_NOT_MAX";
        EC[EC["XG_LACK_AWAKENBOOK"] = 10358] = "XG_LACK_AWAKENBOOK";
        EC[EC["XG_SKILL_NOT_AWAKEN"] = 10359] = "XG_SKILL_NOT_AWAKEN";
        EC[EC["XG_COMPOSE_OPEN"] = 10360] = "XG_COMPOSE_OPEN";
        EC[EC["XG_COMPOSE_NOT_OPEN"] = 10361] = "XG_COMPOSE_NOT_OPEN";
        EC[EC["XG_COMPOSE_MAX_LEVEL"] = 10362] = "XG_COMPOSE_MAX_LEVEL";
        EC[EC["XG_COMPOSE_MAX_EXP"] = 10363] = "XG_COMPOSE_MAX_EXP";
        EC[EC["XG_COMPOSE_NOT_COMPLETE"] = 10364] = "XG_COMPOSE_NOT_COMPLETE";
        EC[EC["XG_ADVISER_COMPOSE_NOT_FIND"] = 10365] = "XG_ADVISER_COMPOSE_NOT_FIND";
        EC[EC["XG_ADVISER_COMPOSE_REWARD"] = 10366] = "XG_ADVISER_COMPOSE_REWARD";
        EC[EC["XG_ARTIFACT_WASH_ATTRI_ISNOT_EMPTY"] = 10367] = "XG_ARTIFACT_WASH_ATTRI_ISNOT_EMPTY";
        EC[EC["XG_JADE_COMPOSE_LEVEL_MAX"] = 10368] = "XG_JADE_COMPOSE_LEVEL_MAX";
        EC[EC["XG_JADE_GAMBLE_JADE_TIME_NOT_ENOUGH"] = 10369] = "XG_JADE_GAMBLE_JADE_TIME_NOT_ENOUGH";
        EC[EC["XG_ARTIFACT_JADE_NOT_FIND"] = 10370] = "XG_ARTIFACT_JADE_NOT_FIND";
        EC[EC["XG_ARTIFACT_JADE_TYPE_NOT_MATCH"] = 10371] = "XG_ARTIFACT_JADE_TYPE_NOT_MATCH";
        EC[EC["XG_ARTIFACT_POS_NOT_OPEN"] = 10372] = "XG_ARTIFACT_POS_NOT_OPEN";
        EC[EC["XG_JADE_AUTO_REFRESH_TOKEN_ERROR"] = 10373] = "XG_JADE_AUTO_REFRESH_TOKEN_ERROR";
        EC[EC["XG_JADE_REFRESH_EMPTY"] = 10374] = "XG_JADE_REFRESH_EMPTY";
        EC[EC["XG_JADE_REFRESH_EXPECT"] = 10375] = "XG_JADE_REFRESH_EXPECT";
        EC[EC["XG_JADE_REFRESH_TYPE_EXPECT_SAME"] = 10376] = "XG_JADE_REFRESH_TYPE_EXPECT_SAME";
        EC[EC["XG_JADE_REFRESH_TOKEN_TOO_MUCH"] = 10377] = "XG_JADE_REFRESH_TOKEN_TOO_MUCH";
        EC[EC["XG_JADE_REFRESH_TOKEN_TOO_LOW"] = 10378] = "XG_JADE_REFRESH_TOKEN_TOO_LOW";
        EC[EC["XG_JADE_REFRESH_TYPE_ERROR"] = 10379] = "XG_JADE_REFRESH_TYPE_ERROR";
        EC[EC["XG_CARVE_COMPOSE_LEVEL_MAX"] = 10380] = "XG_CARVE_COMPOSE_LEVEL_MAX";
        EC[EC["XG_GENERAL_SKILL_PROR_LIMIT"] = 10381] = "XG_GENERAL_SKILL_PROR_LIMIT";
        EC[EC["XG_POTATO_ISNOT_EXSIT"] = 10382] = "XG_POTATO_ISNOT_EXSIT";
        EC[EC["XG_POTATO_BREAK_MAX"] = 10383] = "XG_POTATO_BREAK_MAX";
        EC[EC["XG_POTATO_JADE_NOT_FIND"] = 10384] = "XG_POTATO_JADE_NOT_FIND";
        EC[EC["XG_POTATO_POS_NOT_OPEN"] = 10385] = "XG_POTATO_POS_NOT_OPEN";
        EC[EC["XG_POTATO_JADE_TYPE_NOT_MATCH"] = 10386] = "XG_POTATO_JADE_TYPE_NOT_MATCH";
        EC[EC["XG_POTATO_CAN_NOT_RESET"] = 10387] = "XG_POTATO_CAN_NOT_RESET";
        EC[EC["XG_POTATO_SIZE_ISNOT_ENOUGH"] = 10388] = "XG_POTATO_SIZE_ISNOT_ENOUGH";
        EC[EC["XG_POTATO_BREAK_GOOD_NOT_MATCH"] = 10389] = "XG_POTATO_BREAK_GOOD_NOT_MATCH";
        EC[EC["XG_POTATO_APPRAISE_GOOD_NOT_MATCH"] = 10390] = "XG_POTATO_APPRAISE_GOOD_NOT_MATCH";
        EC[EC["XG_GENERAL_LIFE_UNOWN"] = 10391] = "XG_GENERAL_LIFE_UNOWN";
        EC[EC["XG_GENERAL_LIFE_STAT_UNOWN"] = 10392] = "XG_GENERAL_LIFE_STAT_UNOWN";
        EC[EC["XG_GENERAL_LIFE_STAT_NOT_SATISFY"] = 10394] = "XG_GENERAL_LIFE_STAT_NOT_SATISFY";
        EC[EC["XG_GENERAL_LIFE_STAT_ACTIVATED"] = 10395] = "XG_GENERAL_LIFE_STAT_ACTIVATED";
        EC[EC["XG_GENERAL_LIFE_STAT_IS_BATTLE"] = 10396] = "XG_GENERAL_LIFE_STAT_IS_BATTLE";
        EC[EC["XG_GENERAL_LIFE_STAT_CANNOT_USE_PROP"] = 10397] = "XG_GENERAL_LIFE_STAT_CANNOT_USE_PROP";
        EC[EC["XG_SKILLPOINT_IS_NOT_ENOUGH"] = 10398] = "XG_SKILLPOINT_IS_NOT_ENOUGH";
        EC[EC["XG_SKILL_LEVEL_IS_TOO_HIGH"] = 10399] = "XG_SKILL_LEVEL_IS_TOO_HIGH";
        EC[EC["XG_CHAT_FORBIT"] = 10400] = "XG_CHAT_FORBIT";
        EC[EC["XG_CHAT_FREQUENCY_LIMIT"] = 10401] = "XG_CHAT_FREQUENCY_LIMIT";
        EC[EC["XG_CHAT_CANNOT_SPEAK_CHANEL"] = 10402] = "XG_CHAT_CANNOT_SPEAK_CHANEL";
        EC[EC["XG_CHAT_CANNOT_SPEAK_TO_YOURSELF"] = 10403] = "XG_CHAT_CANNOT_SPEAK_TO_YOURSELF";
        EC[EC["XG_CHAT_CONTEXT_TOO_LENGTH"] = 10404] = "XG_CHAT_CONTEXT_TOO_LENGTH";
        EC[EC["XG_CHAT_PRIVATE_ISNOT_ONLINE"] = 10405] = "XG_CHAT_PRIVATE_ISNOT_ONLINE";
        EC[EC["XG_CHAT_TYPE_NOT_PERSONAL"] = 10406] = "XG_CHAT_TYPE_NOT_PERSONAL";
        EC[EC["XG_INSTANCE_ID_ERROR"] = 10450] = "XG_INSTANCE_ID_ERROR";
        EC[EC["XG_INSTANCE_MODID_ERROR"] = 10451] = "XG_INSTANCE_MODID_ERROR";
        EC[EC["XG_INSTANCE_LIMIT_MOB_TIMES"] = 10452] = "XG_INSTANCE_LIMIT_MOB_TIMES";
        EC[EC["XG_INSTANCE_NOTOPEN"] = 10453] = "XG_INSTANCE_NOTOPEN";
        EC[EC["XG_INSTANCE_NOT_SWEEP"] = 10454] = "XG_INSTANCE_NOT_SWEEP";
        EC[EC["XG_INSTANCE_INVALID"] = 10455] = "XG_INSTANCE_INVALID";
        EC[EC["XG_INSTANCE_QUALITY_NOT_ENOUGH"] = 10456] = "XG_INSTANCE_QUALITY_NOT_ENOUGH";
        EC[EC["XG_INSTANCE_BUY_TIMES_MAX"] = 10457] = "XG_INSTANCE_BUY_TIMES_MAX";
        EC[EC["XG_INSTANCE_EXP_NOT_ENOUGH"] = 10458] = "XG_INSTANCE_EXP_NOT_ENOUGH";
        EC[EC["XG_INSTANCE_MONEY_NOT_ENOUGH"] = 10459] = "XG_INSTANCE_MONEY_NOT_ENOUGH";
        EC[EC["XG_INSTANCE_STAR_REWARD"] = 10460] = "XG_INSTANCE_STAR_REWARD";
        EC[EC["XG_INSTANCE_CHAPTER_NOT_FIND"] = 10461] = "XG_INSTANCE_CHAPTER_NOT_FIND";
        EC[EC["XG_INSTANCE_CHAPTER_ISNOT_ENOUGH"] = 10462] = "XG_INSTANCE_CHAPTER_ISNOT_ENOUGH";
        EC[EC["XG_TOWER_SWEEP_NOT_REWARD"] = 10463] = "XG_TOWER_SWEEP_NOT_REWARD";
        EC[EC["XG_TOWER_CANNOT_SWEEP"] = 10464] = "XG_TOWER_CANNOT_SWEEP";
        EC[EC["XG_TOWER_MAX_LAYER"] = 10465] = "XG_TOWER_MAX_LAYER";
        EC[EC["XG_TOWER_SWEEP_MAX_LAYER"] = 10466] = "XG_TOWER_SWEEP_MAX_LAYER";
        EC[EC["XG_TOWER_SWEEPING"] = 10467] = "XG_TOWER_SWEEPING";
        EC[EC["XG_TOWER_SWEEP_REWARD"] = 10468] = "XG_TOWER_SWEEP_REWARD";
        EC[EC["XG_TOWER_ONT_TOWERING"] = 10469] = "XG_TOWER_ONT_TOWERING";
        EC[EC["XG_INSTANCE_NOT_OPEN_SWEEP"] = 10470] = "XG_INSTANCE_NOT_OPEN_SWEEP";
        EC[EC["XG_TOWER_NOT_CHALLENGE"] = 10471] = "XG_TOWER_NOT_CHALLENGE";
        EC[EC["XG_TOWER_REWARD_FINISHED"] = 10472] = "XG_TOWER_REWARD_FINISHED";
        EC[EC["XG_TRAINING_FINISHED"] = 10473] = "XG_TRAINING_FINISHED";
        EC[EC["XG_TRAINING_NOT_FINISHED"] = 10474] = "XG_TRAINING_NOT_FINISHED";
        EC[EC["XG_TRAINING_REWARDED"] = 10475] = "XG_TRAINING_REWARDED";
        EC[EC["XG_TRAINING_NOTALL_FINISH"] = 10476] = "XG_TRAINING_NOTALL_FINISH";
        EC[EC["XG_TOWER_BATTLEVALUE_NOT_ENOUGH"] = 10478] = "XG_TOWER_BATTLEVALUE_NOT_ENOUGH";
        EC[EC["XG_TOWER_NOT_FIND"] = 10479] = "XG_TOWER_NOT_FIND";
        EC[EC["XG_INSTANCE_CHEST"] = 10480] = "XG_INSTANCE_CHEST";
        EC[EC["XG_INSTANCE_NOTWIN_MOB"] = 10481] = "XG_INSTANCE_NOTWIN_MOB";
        EC[EC["XG_INSTANCE_CDING"] = 10482] = "XG_INSTANCE_CDING";
        EC[EC["XG_INSTANCE_BATTLE_ERROR"] = 10483] = "XG_INSTANCE_BATTLE_ERROR";
        EC[EC["XG_INSTANCE_IS_SEARCHING"] = 10484] = "XG_INSTANCE_IS_SEARCHING";
        EC[EC["XG_INSTANCE_GENERAL_SEARCHING"] = 10485] = "XG_INSTANCE_GENERAL_SEARCHING";
        EC[EC["XG_INSTANCE_GENERAL_ERROR"] = 10486] = "XG_INSTANCE_GENERAL_ERROR";
        EC[EC["XG_INSTANCE_SEARCH_NOT_FINSISH"] = 10487] = "XG_INSTANCE_SEARCH_NOT_FINSISH";
        EC[EC["XG_INSTANCE_SEARCH_IS_NOTSEARCH"] = 10488] = "XG_INSTANCE_SEARCH_IS_NOTSEARCH";
        EC[EC["XG_INSTANCE_SEARCH_TIME_LIMIT"] = 10489] = "XG_INSTANCE_SEARCH_TIME_LIMIT";
        EC[EC["XG_RELATION_CANNOT_ADD_MYSELF"] = 10500] = "XG_RELATION_CANNOT_ADD_MYSELF";
        EC[EC["XG_RELATION_FRIEND_APPLY_LENGTH"] = 10501] = "XG_RELATION_FRIEND_APPLY_LENGTH";
        EC[EC["XG_RELATION_FRIEND_APPLY_NOT_EXIST"] = 10502] = "XG_RELATION_FRIEND_APPLY_NOT_EXIST";
        EC[EC["XG_RELATION_IN_BLACKLIST"] = 10503] = "XG_RELATION_IN_BLACKLIST";
        EC[EC["XG_RELATION_OTHER_FRIEND_LIST_FULL"] = 10504] = "XG_RELATION_OTHER_FRIEND_LIST_FULL";
        EC[EC["XG_RELATION_APPLY_LIST_FULL"] = 10505] = "XG_RELATION_APPLY_LIST_FULL";
        EC[EC["XG_RELATION_FRIEND_EXIST"] = 10506] = "XG_RELATION_FRIEND_EXIST";
        EC[EC["XG_RELATION_ENEMY_EXIST"] = 10507] = "XG_RELATION_ENEMY_EXIST";
        EC[EC["XG_RELATION_BLIGHTER_EXIST"] = 10508] = "XG_RELATION_BLIGHTER_EXIST";
        EC[EC["XG_RELATION_FRIEND_NOT_EXIST"] = 10509] = "XG_RELATION_FRIEND_NOT_EXIST";
        EC[EC["XG_RELATION_BLIGHTER_NOT_EXIST"] = 10510] = "XG_RELATION_BLIGHTER_NOT_EXIST";
        EC[EC["XG_RELATION_ENEMY_NOT_EXIST"] = 10511] = "XG_RELATION_ENEMY_NOT_EXIST";
        EC[EC["XG_RELATION_FRIEND_LIST_FULL"] = 10512] = "XG_RELATION_FRIEND_LIST_FULL";
        EC[EC["XG_RELATION_BLACK_LIST_FULL"] = 10513] = "XG_RELATION_BLACK_LIST_FULL";
        EC[EC["XG_RELATION_ENEMY_LIST_FULL"] = 10514] = "XG_RELATION_ENEMY_LIST_FULL";
        EC[EC["XG_RELATION_GIVEPOWERED"] = 10515] = "XG_RELATION_GIVEPOWERED";
        EC[EC["XG_RELATION_NOT_REWARDPOWER"] = 10516] = "XG_RELATION_NOT_REWARDPOWER";
        EC[EC["XG_RELATION_ALREAY_REWARDPOWER"] = 10517] = "XG_RELATION_ALREAY_REWARDPOWER";
        EC[EC["XG_RELATION_REWARDPOWER_FULL"] = 10518] = "XG_RELATION_REWARDPOWER_FULL";
        EC[EC["XG_RELATION_APPLY_LIST_EXIST"] = 10519] = "XG_RELATION_APPLY_LIST_EXIST";
        EC[EC["XG_RELATION_FRIEND_IS_EMPTY"] = 10520] = "XG_RELATION_FRIEND_IS_EMPTY";
        EC[EC["XG_EMAIL_NOT_EXIST"] = 10550] = "XG_EMAIL_NOT_EXIST";
        EC[EC["XG_EMAIL_TITLE_INVALID"] = 10551] = "XG_EMAIL_TITLE_INVALID";
        EC[EC["XG_EMAIL_CONTENT_INVALID"] = 10552] = "XG_EMAIL_CONTENT_INVALID";
        EC[EC["XG_EMAIL_ISNOT_ATTACHMENT"] = 10553] = "XG_EMAIL_ISNOT_ATTACHMENT";
        EC[EC["XG_EMAIL_SEND_YOURSELF"] = 10554] = "XG_EMAIL_SEND_YOURSELF";
        EC[EC["XG_EMAIL_TYPE_ILLEGAL"] = 10555] = "XG_EMAIL_TYPE_ILLEGAL";
        EC[EC["XG_EMAIL_SENDER_INVALID"] = 10556] = "XG_EMAIL_SENDER_INVALID";
        EC[EC["XG_EMAIL_RECEIVER_INVALID"] = 10557] = "XG_EMAIL_RECEIVER_INVALID";
        EC[EC["XG_EMAIL_BLIGHTER_CANNOT_SEND"] = 10558] = "XG_EMAIL_BLIGHTER_CANNOT_SEND";
        EC[EC["XG_EMAIL_YOU_IN_HIS_ENEMYS_OR_BLIGHTERS"] = 10559] = "XG_EMAIL_YOU_IN_HIS_ENEMYS_OR_BLIGHTERS";
        EC[EC["XG_EMAIL_IS_ATTACHMENT"] = 10560] = "XG_EMAIL_IS_ATTACHMENT";
        EC[EC["XG_LEAGUE_NOTFIND"] = 10600] = "XG_LEAGUE_NOTFIND";
        EC[EC["XG_LEAGUE_NAME_EXIST"] = 10601] = "XG_LEAGUE_NAME_EXIST";
        EC[EC["XG_LEAGUE_YOURSLEF_NOT_LEAGUE"] = 10602] = "XG_LEAGUE_YOURSLEF_NOT_LEAGUE";
        EC[EC["XG_LEAGUE_LEVEL_NOT_ENOUGH"] = 10603] = "XG_LEAGUE_LEVEL_NOT_ENOUGH";
        EC[EC["XG_LEAGUE_NAME_LIMIT"] = 10604] = "XG_LEAGUE_NAME_LIMIT";
        EC[EC["XG_LEAGUE_INFO_LIMIT"] = 10605] = "XG_LEAGUE_INFO_LIMIT";
        EC[EC["XG_LEAGUE_ACOUSTICS_LIMIT"] = 10606] = "XG_LEAGUE_ACOUSTICS_LIMIT";
        EC[EC["XG_LEAGUE_NUM_LIMIT"] = 10607] = "XG_LEAGUE_NUM_LIMIT";
        EC[EC["XG_LEAGUE_MENMBER_NOT_FIND"] = 10608] = "XG_LEAGUE_MENMBER_NOT_FIND";
        EC[EC["XG_LEAGUE_KICKOUT_YOURSELF"] = 10609] = "XG_LEAGUE_KICKOUT_YOURSELF";
        EC[EC["XG_LEAGUE_OFFICE_NOT_OPERATE"] = 10610] = "XG_LEAGUE_OFFICE_NOT_OPERATE";
        EC[EC["XG_LEAGUE_ADDJOIN_TIME_SMALL"] = 10611] = "XG_LEAGUE_ADDJOIN_TIME_SMALL";
        EC[EC["XG_LEAGUE_ALREADY_MENMBER"] = 10612] = "XG_LEAGUE_ALREADY_MENMBER";
        EC[EC["XG_LEAGUE_ALREADY_HAS_LEAGUE"] = 10613] = "XG_LEAGUE_ALREADY_HAS_LEAGUE";
        EC[EC["XG_LEAGUE_LEADER_NOT_KICKOUT"] = 10614] = "XG_LEAGUE_LEADER_NOT_KICKOUT";
        EC[EC["XG_LEAGUE_LEADER_NOT_QUIT"] = 10615] = "XG_LEAGUE_LEADER_NOT_QUIT";
        EC[EC["XG_LEAGUE_OPERATE_TO_YOURSELF"] = 10617] = "XG_LEAGUE_OPERATE_TO_YOURSELF";
        EC[EC["XG_LEAGUE_APPLY_LIST_MAX"] = 10618] = "XG_LEAGUE_APPLY_LIST_MAX";
        EC[EC["XG_LEAGUE_ALREADY_APPLIED"] = 10619] = "XG_LEAGUE_ALREADY_APPLIED";
        EC[EC["XG_LEAGUE_PROFFER_NOTENOUGH"] = 10620] = "XG_LEAGUE_PROFFER_NOTENOUGH";
        EC[EC["XG_LEAGUE_APPLY_LIST_EMPTY"] = 10621] = "XG_LEAGUE_APPLY_LIST_EMPTY";
        EC[EC["XG_LEAGUE_APPLY_NOT_EXIST"] = 10622] = "XG_LEAGUE_APPLY_NOT_EXIST";
        EC[EC["XG_LEAGUE_IMPEACH_NOT_HAVE"] = 10623] = "XG_LEAGUE_IMPEACH_NOT_HAVE";
        EC[EC["XG_LEAGUE_IMPEACH_NOT_YOURSELF"] = 10624] = "XG_LEAGUE_IMPEACH_NOT_YOURSELF";
        EC[EC["XG_LEAGUE_IMPEACH_NOT_LEADER"] = 10625] = "XG_LEAGUE_IMPEACH_NOT_LEADER";
        EC[EC["XG_LEAGUE_IMPEACH_HVAE_IMPEACH"] = 10626] = "XG_LEAGUE_IMPEACH_HVAE_IMPEACH";
        EC[EC["XG_LEAGUE_IMPEACH_NOT_IMPEACH"] = 10627] = "XG_LEAGUE_IMPEACH_NOT_IMPEACH";
        EC[EC["XG_LEAGUE_ROLE_APPLY_LEAGUE_COUNT"] = 10629] = "XG_LEAGUE_ROLE_APPLY_LEAGUE_COUNT";
        EC[EC["XG_LEAGUE_QUIT_TIME_TOO_SHORT"] = 10630] = "XG_LEAGUE_QUIT_TIME_TOO_SHORT";
        EC[EC["XG_LEAGUE_NOT_JOIN"] = 10631] = "XG_LEAGUE_NOT_JOIN";
        EC[EC["XG_LEAGUE_PIC_ERROR"] = 10632] = "XG_LEAGUE_PIC_ERROR";
        EC[EC["XG_LEAGUE_PICFRAME_ERROR"] = 10633] = "XG_LEAGUE_PICFRAME_ERROR";
        EC[EC["XG_LEAGUE_PRESENTED"] = 10634] = "XG_LEAGUE_PRESENTED";
        EC[EC["XG_LEAGUE_PRESENT_TYPE_ERROR"] = 10635] = "XG_LEAGUE_PRESENT_TYPE_ERROR";
        EC[EC["XG_LEAGUE_SKILL_NOT_FIND"] = 10636] = "XG_LEAGUE_SKILL_NOT_FIND";
        EC[EC["XG_LEAGUE_SKILL_LEVEL_MAX"] = 10637] = "XG_LEAGUE_SKILL_LEVEL_MAX";
        EC[EC["XG_LEAGUE_SKILL_EXP_NOT_ENOUGH"] = 10638] = "XG_LEAGUE_SKILL_EXP_NOT_ENOUGH";
        EC[EC["XG_LEAGUE_SKILL_RESET_EMPTY"] = 10639] = "XG_LEAGUE_SKILL_RESET_EMPTY";
        EC[EC["XG_LEAGUE_SKILL_SELECT_EMPTY"] = 10640] = "XG_LEAGUE_SKILL_SELECT_EMPTY";
        EC[EC["XG_LEAGUE_OFFICIAL_NOT_ENTOUGH"] = 10641] = "XG_LEAGUE_OFFICIAL_NOT_ENTOUGH";
        EC[EC["XG_LEAGUE_OFFICIAL_ROLE_MAX"] = 10642] = "XG_LEAGUE_OFFICIAL_ROLE_MAX";
        EC[EC["XG_LEAGUE_ANIMAL_NOT_FIND"] = 10643] = "XG_LEAGUE_ANIMAL_NOT_FIND";
        EC[EC["XG_LEAGUE_ANIMAL_EXIST"] = 10644] = "XG_LEAGUE_ANIMAL_EXIST";
        EC[EC["XG_LEAGUE_ANIMAL_FEED_TYPE"] = 10645] = "XG_LEAGUE_ANIMAL_FEED_TYPE";
        EC[EC["XG_LEAGUE_ANIMAL_FEED_SENIOR"] = 10646] = "XG_LEAGUE_ANIMAL_FEED_SENIOR";
        EC[EC["XG_LEAGUE_ANIMAL_FEED_NORMAL"] = 10647] = "XG_LEAGUE_ANIMAL_FEED_NORMAL";
        EC[EC["XG_LEAGUE_BOSS_NOT_FIND"] = 10648] = "XG_LEAGUE_BOSS_NOT_FIND";
        EC[EC["XG_LEAGUE_BOSS_EXIST"] = 10649] = "XG_LEAGUE_BOSS_EXIST";
        EC[EC["XG_LEAGUE_BOSS_GROW_NOT_ENOUGH"] = 10650] = "XG_LEAGUE_BOSS_GROW_NOT_ENOUGH";
        EC[EC["XG_LEAGUE_LACK_RES"] = 10651] = "XG_LEAGUE_LACK_RES";
        EC[EC["XG_LEAGUE_BOSS_INSPIRE_ENOUGH"] = 10652] = "XG_LEAGUE_BOSS_INSPIRE_ENOUGH";
        EC[EC["XG_LEAGUE_BOSS_BATTLE_TIME"] = 10653] = "XG_LEAGUE_BOSS_BATTLE_TIME";
        EC[EC["XG_LEAGUE_BOSS_DEAD"] = 10654] = "XG_LEAGUE_BOSS_DEAD";
        EC[EC["XG_LEAGUE_PARTY_ALREADY"] = 10655] = "XG_LEAGUE_PARTY_ALREADY";
        EC[EC["XG_LEAGUE_PARTY_ADD_ALREADY"] = 10656] = "XG_LEAGUE_PARTY_ADD_ALREADY";
        EC[EC["XG_LEAGUE_PARTY_ADD_EXIST"] = 10657] = "XG_LEAGUE_PARTY_ADD_EXIST";
        EC[EC["XG_LEAGUE_PARTY_TIME_OUT"] = 10658] = "XG_LEAGUE_PARTY_TIME_OUT";
        EC[EC["XG_LEAGUE_PARTY_NOT_JOIN"] = 10659] = "XG_LEAGUE_PARTY_NOT_JOIN";
        EC[EC["XG_LEAGUE_PARTY_ADD_NOT_EXIST"] = 10660] = "XG_LEAGUE_PARTY_ADD_NOT_EXIST";
        EC[EC["XG_LEAGUE_PARTY_OPENED"] = 10661] = "XG_LEAGUE_PARTY_OPENED";
        EC[EC["XG_LEAGUE_FISHING_NUMBER"] = 10662] = "XG_LEAGUE_FISHING_NUMBER";
        EC[EC["XG_LEAGUE_FISHING_REWARD_ALREADY"] = 10663] = "XG_LEAGUE_FISHING_REWARD_ALREADY";
        EC[EC["XG_LEAGUE_FISHING_NOT_REWARD"] = 10664] = "XG_LEAGUE_FISHING_NOT_REWARD";
        EC[EC["XG_LEAGUE_FISHING_NOT_FINISH"] = 10665] = "XG_LEAGUE_FISHING_NOT_FINISH";
        EC[EC["XG_LEAGUE_FISHING_NOT_START"] = 10666] = "XG_LEAGUE_FISHING_NOT_START";
        EC[EC["XG_LEAGUE_INSTNACE_NOT_FIND"] = 10667] = "XG_LEAGUE_INSTNACE_NOT_FIND";
        EC[EC["XG_LEAGUE_INSTNACE_OTHER_OPEN"] = 10668] = "XG_LEAGUE_INSTNACE_OTHER_OPEN";
        EC[EC["XG_LEAGUE_INSTNACE_LEADER_LEVEL_NOT_ENOUGH"] = 10669] = "XG_LEAGUE_INSTNACE_LEADER_LEVEL_NOT_ENOUGH";
        EC[EC["XG_LEAGUE_LACK_ENLIVEN"] = 10670] = "XG_LEAGUE_LACK_ENLIVEN";
        EC[EC["XG_LEAGUE_INSTANCE_SUPPLY_NOT_REWARD"] = 10671] = "XG_LEAGUE_INSTANCE_SUPPLY_NOT_REWARD";
        EC[EC["XG_LEAGUE_INSTANCE_BATTLING"] = 10672] = "XG_LEAGUE_INSTANCE_BATTLING";
        EC[EC["XG_LEAGUE_INSTANCE_MOBS_WIN"] = 10673] = "XG_LEAGUE_INSTANCE_MOBS_WIN";
        EC[EC["XG_LEAGUE_INSTANCE_TIME_NOT_ENOUGH"] = 10674] = "XG_LEAGUE_INSTANCE_TIME_NOT_ENOUGH";
        EC[EC["XG_LEAGUE_INSTANCE_BUY_TIME_MAX"] = 10675] = "XG_LEAGUE_INSTANCE_BUY_TIME_MAX";
        EC[EC["XG_LEAGUE_INSTANCE_MOBS_ELITES_NOT_WIN"] = 10676] = "XG_LEAGUE_INSTANCE_MOBS_ELITES_NOT_WIN";
        EC[EC["XG_LEAGUE_NOT_FIND_APPROPRIATE"] = 10677] = "XG_LEAGUE_NOT_FIND_APPROPRIATE";
        EC[EC["XG_LEAGUE_NOT_OPERATOR"] = 10678] = "XG_LEAGUE_NOT_OPERATOR";
        EC[EC["XG_LEAGUE_ANIMAL_IS_ADOPTED"] = 10679] = "XG_LEAGUE_ANIMAL_IS_ADOPTED";
        EC[EC["XG_LEAGUE_OTHER_OFFICIAL_NOT_ENTOUGH"] = 10680] = "XG_LEAGUE_OTHER_OFFICIAL_NOT_ENTOUGH";
        EC[EC["XG_LEAGUE_ROLE_LEVEL_IS_NOT_ENOUGH"] = 10681] = "XG_LEAGUE_ROLE_LEVEL_IS_NOT_ENOUGH";
        EC[EC["XG_LEAGUE_INSTANCE_NOT_OPEN"] = 10682] = "XG_LEAGUE_INSTANCE_NOT_OPEN";
        EC[EC["XG_LEAGUE_INSTANCE_DAY_ALREADY_OPEN"] = 10683] = "XG_LEAGUE_INSTANCE_DAY_ALREADY_OPEN";
        EC[EC["XG_LEAGUE_CHEST_IS_REWARD"] = 10684] = "XG_LEAGUE_CHEST_IS_REWARD";
        EC[EC["XG_LEAGUE_QUIET_TIME_ISLIMIT"] = 10685] = "XG_LEAGUE_QUIET_TIME_ISLIMIT";
        EC[EC["XG_BREAK_SKILL_MAX_LEVEL"] = 10686] = "XG_BREAK_SKILL_MAX_LEVEL";
        EC[EC["XG_LEAGUE_RANK_MAX_RANGE"] = 10687] = "XG_LEAGUE_RANK_MAX_RANGE";
        EC[EC["XG_BREAK_SKILL_GENERAL_NUM_ERROR"] = 10688] = "XG_BREAK_SKILL_GENERAL_NUM_ERROR";
        EC[EC["XG_LEAGUE_RECRUITINFO_LIMIT"] = 10689] = "XG_LEAGUE_RECRUITINFO_LIMIT";
        EC[EC["XG_POTATO_STAR_ISNOT_ENOUGH"] = 10690] = "XG_POTATO_STAR_ISNOT_ENOUGH";
        EC[EC["XG_POTATO_ATTRIID_ERROR"] = 10691] = "XG_POTATO_ATTRIID_ERROR";
        EC[EC["XG_POTATO_ATTRIID_NOT_FIND"] = 10692] = "XG_POTATO_ATTRIID_NOT_FIND";
        EC[EC["XG_POTATO_ATTRIID_NOT_GROWTH"] = 10693] = "XG_POTATO_ATTRIID_NOT_GROWTH";
        EC[EC["XG_MISSION_ACTIVE_NOT_ENOUGH"] = 10700] = "XG_MISSION_ACTIVE_NOT_ENOUGH";
        EC[EC["XG_MISSION_ACTIVE_REWARD"] = 10701] = "XG_MISSION_ACTIVE_REWARD";
        EC[EC["XG_MISSION_NOT_FIND"] = 10702] = "XG_MISSION_NOT_FIND";
        EC[EC["XG_MISSION_FINISH_REWARD"] = 10703] = "XG_MISSION_FINISH_REWARD";
        EC[EC["XG_MISSION_NOT_FINISH"] = 10704] = "XG_MISSION_NOT_FINISH";
        EC[EC["XG_MISSION_NOT_OPEN"] = 10705] = "XG_MISSION_NOT_OPEN";
        EC[EC["XG_MISSION_LICENCE_NOT_OPEN"] = 10706] = "XG_MISSION_LICENCE_NOT_OPEN";
        EC[EC["XG_MISSION_LICENCE_IS_REWARD"] = 10707] = "XG_MISSION_LICENCE_IS_REWARD";
        EC[EC["XG_MISSION_LICENCE_NOT_SAME"] = 10708] = "XG_MISSION_LICENCE_NOT_SAME";
        EC[EC["XG_ACTIVITY_REWARDED"] = 10800] = "XG_ACTIVITY_REWARDED";
        EC[EC["XG_ACTIVITY_NOT_OPEN"] = 10801] = "XG_ACTIVITY_NOT_OPEN";
        EC[EC["XG_MONTH_TODAY_REWARD"] = 10802] = "XG_MONTH_TODAY_REWARD";
        EC[EC["XG_FUND_BUY_ALREADY"] = 10803] = "XG_FUND_BUY_ALREADY";
        EC[EC["XG_FUND_NOT_BUY"] = 10804] = "XG_FUND_NOT_BUY";
        EC[EC["XG_FUND_REWARD_ALREADY"] = 10805] = "XG_FUND_REWARD_ALREADY";
        EC[EC["XG_ACTIVITY_ZONE_ERROR"] = 10806] = "XG_ACTIVITY_ZONE_ERROR";
        EC[EC["XG_ACTIVITY_CHARGE_NOT_ENOUGH"] = 10807] = "XG_ACTIVITY_CHARGE_NOT_ENOUGH";
        EC[EC["XG_ACTIVITY_COLLECT_NOT_ENOUGH"] = 10808] = "XG_ACTIVITY_COLLECT_NOT_ENOUGH";
        EC[EC["XG_ACTIVITY_MALL_BUYED"] = 10809] = "XG_ACTIVITY_MALL_BUYED";
        EC[EC["XG_ACTIVITY_OPEN_ONLEY"] = 10810] = "XG_ACTIVITY_OPEN_ONLEY";
        EC[EC["XG_ACTIVITY_NOT_REWAED"] = 10811] = "XG_ACTIVITY_NOT_REWAED";
        EC[EC["XG_ACTIVITY_NEXTREWAED_ISSET"] = 10812] = "XG_ACTIVITY_NEXTREWAED_ISSET";
        EC[EC["XG_ACTIVITY_MALL_BUYED_NOT_ENOUGH"] = 10813] = "XG_ACTIVITY_MALL_BUYED_NOT_ENOUGH";
        EC[EC["XG_INTEGRAL_PROCESS_IS_CLOSE"] = 10814] = "XG_INTEGRAL_PROCESS_IS_CLOSE";
        EC[EC["XG_INTEGRAL_PROCESS_INFO_ERROR"] = 10815] = "XG_INTEGRAL_PROCESS_INFO_ERROR";
        EC[EC["XG_INTEGRAL_EXCHANGEID_ERROR"] = 10816] = "XG_INTEGRAL_EXCHANGEID_ERROR";
        EC[EC["XG_INTEGRAL_EXCHANGE_COUNT_MAX"] = 10817] = "XG_INTEGRAL_EXCHANGE_COUNT_MAX";
        EC[EC["XG_INTEGRAL_EXCHANGE_SCORE_LACK"] = 10818] = "XG_INTEGRAL_EXCHANGE_SCORE_LACK";
        EC[EC["XG_INTEGRAL_INDEX_ERROR"] = 10819] = "XG_INTEGRAL_INDEX_ERROR";
        EC[EC["XG_INTEGRAL_ALLSCORE_NOT_ENOUGH"] = 10820] = "XG_INTEGRAL_ALLSCORE_NOT_ENOUGH";
        EC[EC["XG_INTEGRAL_PRIZE_RECEIVE"] = 10821] = "XG_INTEGRAL_PRIZE_RECEIVE";
        EC[EC["XG_ACTIVITY_MONTHCARD_NOT_BUY"] = 10822] = "XG_ACTIVITY_MONTHCARD_NOT_BUY";
        EC[EC["XG_XUYUANWU_PROCESS_IS_CLOSE"] = 10823] = "XG_XUYUANWU_PROCESS_IS_CLOSE";
        EC[EC["XG_XUYUANWU_PROCESS_INFO_ERROR"] = 10824] = "XG_XUYUANWU_PROCESS_INFO_ERROR";
        EC[EC["XG_XUYUANWU_EXCHANGEID_ERROR"] = 10825] = "XG_XUYUANWU_EXCHANGEID_ERROR";
        EC[EC["XG_XUYUANWU_EXCHANGE_COUNT_MAX"] = 10826] = "XG_XUYUANWU_EXCHANGE_COUNT_MAX";
        EC[EC["XG_XUYUANWU_EXCHANGE_SCORE_LACK"] = 10827] = "XG_XUYUANWU_EXCHANGE_SCORE_LACK";
        EC[EC["XG_XUYUANWU_INDEX_ERROR"] = 10828] = "XG_XUYUANWU_INDEX_ERROR";
        EC[EC["XG_XUYUANWU_ALLSCORE_NOT_ENOUGH"] = 10829] = "XG_XUYUANWU_ALLSCORE_NOT_ENOUGH";
        EC[EC["XG_XUYUANWU_PRIZE_RECEIVE"] = 10830] = "XG_XUYUANWU_PRIZE_RECEIVE";
        EC[EC["XG_XUYUANWU_TIME_LACK"] = 10831] = "XG_XUYUANWU_TIME_LACK";
        EC[EC["XG_BATTLE_DATA_PARSER_FAILED"] = 10900] = "XG_BATTLE_DATA_PARSER_FAILED";
        EC[EC["XG_BATTLE_DATA_CHECK_FAILED"] = 10901] = "XG_BATTLE_DATA_CHECK_FAILED";
        EC[EC["XG_BATTLE_MAIN_NUMBER_IS_ERROR"] = 10902] = "XG_BATTLE_MAIN_NUMBER_IS_ERROR";
        EC[EC["XG_BATTLE_RESERVE_NUMBER_IS_ERROR"] = 10903] = "XG_BATTLE_RESERVE_NUMBER_IS_ERROR";
        EC[EC["XG_BATTLE_SUPPORT_NUMBER_IS_ERROR"] = 10904] = "XG_BATTLE_SUPPORT_NUMBER_IS_ERROR";
        EC[EC["XG_WANTED_TIME_NOT_ENOUGH"] = 11101] = "XG_WANTED_TIME_NOT_ENOUGH";
        EC[EC["XG_WANTED_NOT_FIND_MOBS"] = 11102] = "XG_WANTED_NOT_FIND_MOBS";
        EC[EC["XG_WANTED_MOBS_NOT_WIN"] = 11103] = "XG_WANTED_MOBS_NOT_WIN";
        EC[EC["XG_WANTED_MOBS_REWARED"] = 11104] = "XG_WANTED_MOBS_REWARED";
        EC[EC["XG_WANTED_CHALLENGE_START"] = 11105] = "XG_WANTED_CHALLENGE_START";
        EC[EC["XG_WANTED_MOBS_ELITES_NOT_WIN"] = 11106] = "XG_WANTED_MOBS_ELITES_NOT_WIN";
        EC[EC["XG_WANTED_MOBS_WIN"] = 11107] = "XG_WANTED_MOBS_WIN";
        EC[EC["XG_WANTED_DOING"] = 11108] = "XG_WANTED_DOING";
        EC[EC["XG_WANTED_NOT_OPEN"] = 11109] = "XG_WANTED_NOT_OPEN";
        EC[EC["XG_WANTED_NOT_SWEEP"] = 11110] = "XG_WANTED_NOT_SWEEP";
        EC[EC["XG_WANTED_MOBS_KILLED"] = 11111] = "XG_WANTED_MOBS_KILLED";
        EC[EC["XG_LACK_ARRESTCOIN"] = 11112] = "XG_LACK_ARRESTCOIN";
        EC[EC["XG_LACK_HUNTCOIN"] = 11113] = "XG_LACK_HUNTCOIN";
        EC[EC["XG_WANTED_TYPE_ERROR"] = 11114] = "XG_WANTED_TYPE_ERROR";
        EC[EC["XG_WANTED_NOT_THREE_BATTLE_STAR"] = 11115] = "XG_WANTED_NOT_THREE_BATTLE_STAR";
        EC[EC["XG_ENEMY_CAMP_TYPE_ERROR"] = 11116] = "XG_ENEMY_CAMP_TYPE_ERROR";
        EC[EC["XG_GROUPBATTLE_NOT_FIND_MOBS"] = 11117] = "XG_GROUPBATTLE_NOT_FIND_MOBS";
        EC[EC["XG_GROUPBATTLE_BATTLE_TIME_LIMIT"] = 11118] = "XG_GROUPBATTLE_BATTLE_TIME_LIMIT";
        EC[EC["XG_GROUPBATTLE_ASSIST_TIME_LIMIT"] = 11119] = "XG_GROUPBATTLE_ASSIST_TIME_LIMIT";
        EC[EC["XG_GROUPBATTLE_ASSIST_IS_USED"] = 11120] = "XG_GROUPBATTLE_ASSIST_IS_USED";
        EC[EC["XG_LEAGUE_WAR_NOT_OPEN"] = 11201] = "XG_LEAGUE_WAR_NOT_OPEN";
        EC[EC["XG_LEAGUE_WAR_OBJECT_SAME"] = 11202] = "XG_LEAGUE_WAR_OBJECT_SAME";
        EC[EC["XG_LEAGUE_WAR_HONOR_INSPIRE_NOT_ENOUGH"] = 11203] = "XG_LEAGUE_WAR_HONOR_INSPIRE_NOT_ENOUGH";
        EC[EC["XG_LEAGUE_WAR_HONOR_NOT_ENOUGH"] = 11204] = "XG_LEAGUE_WAR_HONOR_NOT_ENOUGH";
        EC[EC["XG_LEAGUE_WAR_OBJECT_NOT_JOIN"] = 11206] = "XG_LEAGUE_WAR_OBJECT_NOT_JOIN";
        EC[EC["XG_LEAGUE_WAR_ENTERY_NOT_TIME"] = 11207] = "XG_LEAGUE_WAR_ENTERY_NOT_TIME";
        EC[EC["XG_LEAGUE_WAR_BUILD_NOT_FIND"] = 11208] = "XG_LEAGUE_WAR_BUILD_NOT_FIND";
        EC[EC["XG_LEAGUE_WAR_BUILD_IS_DEAD"] = 11209] = "XG_LEAGUE_WAR_BUILD_IS_DEAD";
        EC[EC["XG_LEAGUE_WAR_TOWER_NOT_DEAD"] = 11210] = "XG_LEAGUE_WAR_TOWER_NOT_DEAD";
        EC[EC["XG_LEAGUE_WAR_BUILD_OWNER"] = 11211] = "XG_LEAGUE_WAR_BUILD_OWNER";
        EC[EC["XG_LEAGUE_WAR_DOING"] = 11213] = "XG_LEAGUE_WAR_DOING";
        EC[EC["XG_LEAGUE_WAR_NOT_ENROLL"] = 11218] = "XG_LEAGUE_WAR_NOT_ENROLL";
        EC[EC["XG_LEAGUE_WAR_READY"] = 11219] = "XG_LEAGUE_WAR_READY";
        EC[EC["XG_LEAGUE_WAR_NOT_BATTLING"] = 11220] = "XG_LEAGUE_WAR_NOT_BATTLING";
        EC[EC["XG_LEAGUE_WAR_ENROLL_ALREADY"] = 11221] = "XG_LEAGUE_WAR_ENROLL_ALREADY";
        EC[EC["XG_LEAGUE_WAR_TOKEN_INSPIRE_NOT_ENOUGH"] = 11222] = "XG_LEAGUE_WAR_TOKEN_INSPIRE_NOT_ENOUGH";
        EC[EC["XG_LEAGUE_WAR_FINISH"] = 11223] = "XG_LEAGUE_WAR_FINISH";
        EC[EC["XG_LEAGUE_WAR_RANK_IS_EXIST"] = 11224] = "XG_LEAGUE_WAR_RANK_IS_EXIST";
        EC[EC["XG_LEAGUE_WAR_CANNON_MYSELF"] = 11225] = "XG_LEAGUE_WAR_CANNON_MYSELF";
        EC[EC["XG_LEAGUE_WAR_CANNON_SEIZEING"] = 11226] = "XG_LEAGUE_WAR_CANNON_SEIZEING";
        EC[EC["XG_LEAGUE_WAR_MYSELF_COLLECTIONING"] = 11227] = "XG_LEAGUE_WAR_MYSELF_COLLECTIONING";
        EC[EC["XG_LEAGUE_MATCH_IS_OPEN"] = 11250] = "XG_LEAGUE_MATCH_IS_OPEN";
        EC[EC["XG_LEAGUE_MATCH_MEMBER_LIMIT"] = 11251] = "XG_LEAGUE_MATCH_MEMBER_LIMIT";
        EC[EC["XG_LEAGUE_MATCH_DEFENSE_LIMIT"] = 11252] = "XG_LEAGUE_MATCH_DEFENSE_LIMIT";
        EC[EC["XG_LEAGUE_MATCH_FORTRESS_LIMIT"] = 11253] = "XG_LEAGUE_MATCH_FORTRESS_LIMIT";
        EC[EC["XG_LEAGUE_MATCH_NOT_JOIN"] = 11254] = "XG_LEAGUE_MATCH_NOT_JOIN";
        EC[EC["XG_LEAGUE_MATCH_BATTLE_TIME_LIMIT"] = 11255] = "XG_LEAGUE_MATCH_BATTLE_TIME_LIMIT";
        EC[EC["XG_LEAGUE_MATCH_STAR_MAX"] = 11256] = "XG_LEAGUE_MATCH_STAR_MAX";
        EC[EC["XG_LEAGUE_MATCH_IS_BATTLEING"] = 11257] = "XG_LEAGUE_MATCH_IS_BATTLEING";
        EC[EC["XG_LEAGUE_MATCH_NOT_FIND_RESULT"] = 11258] = "XG_LEAGUE_MATCH_NOT_FIND_RESULT";
        EC[EC["XG_SCENE_OTHER_DEAD_PROTECT"] = 11301] = "XG_SCENE_OTHER_DEAD_PROTECT";
        EC[EC["XG_SCENE_OTHER_BATTLE_PROTECT"] = 11302] = "XG_SCENE_OTHER_BATTLE_PROTECT";
        EC[EC["XG_SCENE_OWNER_DEAD_PROTECT"] = 11303] = "XG_SCENE_OWNER_DEAD_PROTECT";
        EC[EC["XG_SCENE_OWNER_BATTLE_PROTECT"] = 11304] = "XG_SCENE_OWNER_BATTLE_PROTECT";
        EC[EC["XG_SCENE_FASTER_DURATION"] = 11305] = "XG_SCENE_FASTER_DURATION";
        EC[EC["XG_SCENE_NOT_JOIN"] = 11306] = "XG_SCENE_NOT_JOIN";
        EC[EC["XG_SCENE_OWNER_NOT_DEAD"] = 11307] = "XG_SCENE_OWNER_NOT_DEAD";
        EC[EC["XG_SCENE_COOLING"] = 11308] = "XG_SCENE_COOLING";
        EC[EC["XG_SCENE_MODIFY_BATTLEMODE"] = 11309] = "XG_SCENE_MODIFY_BATTLEMODE";
        EC[EC["XG_SCENE_EVIL_NOT_ZERO"] = 11310] = "XG_SCENE_EVIL_NOT_ZERO";
        EC[EC["XG_SCENE_DECLARE_RELATION_EXIST"] = 11311] = "XG_SCENE_DECLARE_RELATION_EXIST";
        EC[EC["XG_SCENE_NOT_BATTLE"] = 11312] = "XG_SCENE_NOT_BATTLE";
        EC[EC["XG_SCENE_NOT_CHALLENGE_OBJECT"] = 11313] = "XG_SCENE_NOT_CHALLENGE_OBJECT";
        EC[EC["XG_SCENE_NOT_OPEN"] = 11314] = "XG_SCENE_NOT_OPEN";
        EC[EC["XG_SCENE_CHALLENGE_LIMIT"] = 11315] = "XG_SCENE_CHALLENGE_LIMIT";
        EC[EC["XG_SCENE_DECLARE_MYSELF"] = 11316] = "XG_SCENE_DECLARE_MYSELF";
        EC[EC["XG_SCENE_OTHER_INVINCIBLE_PROTECT"] = 11317] = "XG_SCENE_OTHER_INVINCIBLE_PROTECT";
        EC[EC["XG_SCENE_OWNER_INVINCIBLE_PROTECT"] = 11318] = "XG_SCENE_OWNER_INVINCIBLE_PROTECT";
        EC[EC["XG_SCENE_BLOOD_FULL"] = 11319] = "XG_SCENE_BLOOD_FULL";
        EC[EC["XG_SCENE_PEOPLE_MAX"] = 11320] = "XG_SCENE_PEOPLE_MAX";
        EC[EC["XG_SCENE_OWNER_FROZEN"] = 11321] = "XG_SCENE_OWNER_FROZEN";
        EC[EC["XG_SCENE_BOSS_DEAD"] = 11322] = "XG_SCENE_BOSS_DEAD";
        EC[EC["XG_SCENE_OWNER_ACTTACKING"] = 11323] = "XG_SCENE_OWNER_ACTTACKING";
        EC[EC["XG_RELIC_BATTLETIME_LIMIT"] = 11350] = "XG_RELIC_BATTLETIME_LIMIT";
        EC[EC["XG_RELIC_CHEST_NOT_OWN"] = 11351] = "XG_RELIC_CHEST_NOT_OWN";
        EC[EC["XG_RELIC_CHEST_NOT_OPEN"] = 11352] = "XG_RELIC_CHEST_NOT_OPEN";
        EC[EC["XG_RELIC_COIN_NOT_ENOUGH"] = 11353] = "XG_RELIC_COIN_NOT_ENOUGH";
        EC[EC["XG_RELIC_NOT_BATTLE_TIME"] = 11354] = "XG_RELIC_NOT_BATTLE_TIME";
        EC[EC["XG_RELIC_MALL_REFRESH_LIMIT"] = 11355] = "XG_RELIC_MALL_REFRESH_LIMIT";
        EC[EC["XG_RELIC_TYPE_ERROR"] = 11356] = "XG_RELIC_TYPE_ERROR";
        EC[EC["XG_WONDERLAND_LEVEL_ZONE_ERROR"] = 11401] = "XG_WONDERLAND_LEVEL_ZONE_ERROR";
        EC[EC["XG_WONDERLAND_TREE_NOT_FIND"] = 11402] = "XG_WONDERLAND_TREE_NOT_FIND";
        EC[EC["XG_WONDERLAND_TREE_HAVENOT_FRUIT"] = 11403] = "XG_WONDERLAND_TREE_HAVENOT_FRUIT";
        EC[EC["XG_WONDERLAND_TREE_FRUIT_ENOUGH"] = 11404] = "XG_WONDERLAND_TREE_FRUIT_ENOUGH";
        EC[EC["XG_WONDERLAND_TREE_OTHER_COLLECTIONING"] = 11405] = "XG_WONDERLAND_TREE_OTHER_COLLECTIONING";
        EC[EC["XG_WONDERLAND_TREE_MYSELF_COLLECTIONING"] = 11406] = "XG_WONDERLAND_TREE_MYSELF_COLLECTIONING";
        EC[EC["XG_WONDERLAND_TREE_COLLECTIONING_ENOUGH"] = 11407] = "XG_WONDERLAND_TREE_COLLECTIONING_ENOUGH";
        EC[EC["XG_PVP_SINGELE_ERROR"] = 11501] = "XG_PVP_SINGELE_ERROR";
        EC[EC["XG_PVP_OTHER_NOT_OPEN"] = 11502] = "XG_PVP_OTHER_NOT_OPEN";
        EC[EC["XG_LACK_PROMISE"] = 11503] = "XG_LACK_PROMISE";
        EC[EC["XG_CONTEND_BATTLING"] = 11504] = "XG_CONTEND_BATTLING";
        EC[EC["XG_CONTEND_NOT_LOCK_OBJECT"] = 11505] = "XG_CONTEND_NOT_LOCK_OBJECT";
        EC[EC["XG_CONTEND_NOT_OPEN"] = 11506] = "XG_CONTEND_NOT_OPEN";
        EC[EC["XG_CONTEND_CHALLENGE_TIME"] = 11507] = "XG_CONTEND_CHALLENGE_TIME";
        EC[EC["XG_GIFT_BUYTIME_NOT_ENOUGH"] = 11601] = "XG_GIFT_BUYTIME_NOT_ENOUGH";
        EC[EC["XG_GIFT_NOT_FIND"] = 11602] = "XG_GIFT_NOT_FIND";
        EC[EC["XG_EXCHANGE_MALL_GOODS_NOT_SATISFY"] = 11603] = "XG_EXCHANGE_MALL_GOODS_NOT_SATISFY";
        EC[EC["XG_POTATO_CANNOT_REFRESH"] = 11604] = "XG_POTATO_CANNOT_REFRESH";
        EC[EC["XG_POTATO_IS_REFRESH"] = 11605] = "XG_POTATO_IS_REFRESH";
        EC[EC["XG_POTATO_NOT_REFRESH"] = 11606] = "XG_POTATO_NOT_REFRESH";
        EC[EC["XG_POTATO_LEVEL_LIMIT"] = 11607] = "XG_POTATO_LEVEL_LIMIT";
        EC[EC["XG_POTATO_TYPE_LIMIT"] = 11608] = "XG_POTATO_TYPE_LIMIT";
        EC[EC["XG_WANTED_BUY_LIMIT"] = 11609] = "XG_WANTED_BUY_LIMIT";
        EC[EC["XG_POTATO_IS_LOCK"] = 11610] = "XG_POTATO_IS_LOCK";
        EC[EC["XG_DOUBLE_FRUIT_IS_ERROR"] = 11611] = "XG_DOUBLE_FRUIT_IS_ERROR";
        EC[EC["XG_DOUBLE_FRUIT_TIME_IS_ERROR"] = 11612] = "XG_DOUBLE_FRUIT_TIME_IS_ERROR";
        EC[EC["XG_DOUBLE_FRUIT_RESULT_IS_EXIST"] = 11613] = "XG_DOUBLE_FRUIT_RESULT_IS_EXIST";
        EC[EC["XG_GENERAL_AWAKEN_NUM_ERROR"] = 11614] = "XG_GENERAL_AWAKEN_NUM_ERROR";
        EC[EC["XG_GENERAL_AWAKEN_UPLEVEL_NUM_ERROR"] = 11615] = "XG_GENERAL_AWAKEN_UPLEVEL_NUM_ERROR";
        EC[EC["XG_GENERAL_STAR_NOT_ENOUGH"] = 11616] = "XG_GENERAL_STAR_NOT_ENOUGH";
        EC[EC["XG_GENERAL_UPSTAR_REWARD_ALREADY"] = 11617] = "XG_GENERAL_UPSTAR_REWARD_ALREADY";
        EC[EC["XG_UPLEVEL_NOT_ENOUGH"] = 11618] = "XG_UPLEVEL_NOT_ENOUGH";
        EC[EC["XG_UPLEVEL_REWARD_ALREADY"] = 11619] = "XG_UPLEVEL_REWARD_ALREADY";
        EC[EC["XG_GENERAL_REMAIN_NUM_LESS"] = 11620] = "XG_GENERAL_REMAIN_NUM_LESS";
        EC[EC["XG_GENERAL_STAR_LARGE"] = 11621] = "XG_GENERAL_STAR_LARGE";
        EC[EC["XG_GENERAL_WAREHOUSE_IS_MAX"] = 11622] = "XG_GENERAL_WAREHOUSE_IS_MAX";
        EC[EC["XG_GENERAL_IN_AIM_LIST"] = 11623] = "XG_GENERAL_IN_AIM_LIST";
        EC[EC["XG_GENERAL_MAKE_ID_ERROR"] = 11624] = "XG_GENERAL_MAKE_ID_ERROR";
        EC[EC["XG_GENERAL_MAKE_LEVEL_ERROR"] = 11625] = "XG_GENERAL_MAKE_LEVEL_ERROR";
        EC[EC["XG_GENERAL_MAKE_STAR_ERROR"] = 11626] = "XG_GENERAL_MAKE_STAR_ERROR";
        EC[EC["XG_GENERAL_MAKE_AWAKEN_ERROR"] = 11627] = "XG_GENERAL_MAKE_AWAKEN_ERROR";
        EC[EC["XG_OPENFUNCTION_HIGH_TOWER"] = 11628] = "XG_OPENFUNCTION_HIGH_TOWER";
        EC[EC["XG_GENERAL_PSYCHIC_UNLOCK"] = 11629] = "XG_GENERAL_PSYCHIC_UNLOCK";
        EC[EC["XG_GENERAL_PSYCHIC_AWAKEN"] = 11630] = "XG_GENERAL_PSYCHIC_AWAKEN";
        EC[EC["XG_GENERAL_PSYCHIC_NOT_AWAKEN"] = 11631] = "XG_GENERAL_PSYCHIC_NOT_AWAKEN";
        EC[EC["XG_GENERAL_MAKE_APTITUDE_ERROR"] = 11632] = "XG_GENERAL_MAKE_APTITUDE_ERROR";
        EC[EC["XG_FANSHION_NOT_BUY"] = 11633] = "XG_FANSHION_NOT_BUY";
        EC[EC["XG_GENERAL_LEVEL_OVER_STEP"] = 11634] = "XG_GENERAL_LEVEL_OVER_STEP";
        EC[EC["XG_GENERAL_BREAK_NUM_ERROR"] = 11635] = "XG_GENERAL_BREAK_NUM_ERROR";
        EC[EC["XG_GENERAL_PSYCHIC_NOT_USE"] = 11636] = "XG_GENERAL_PSYCHIC_NOT_USE";
        EC[EC["XG_GENERAL_PSYCHIC_NOT_UNLOCK"] = 11637] = "XG_GENERAL_PSYCHIC_NOT_UNLOCK";
        EC[EC["XG_GENERAL_PSYCHIC_ALREADY_UNLOCK"] = 11638] = "XG_GENERAL_PSYCHIC_ALREADY_UNLOCK";
        EC[EC["XG_OLD_CHARGE_NOT_EMPTY"] = 11639] = "XG_OLD_CHARGE_NOT_EMPTY";
        EC[EC["XG_FIRST_REWARD_NOT_LEFT_TIME"] = 11640] = "XG_FIRST_REWARD_NOT_LEFT_TIME";
        EC[EC["XG_MIX_SEVENGIFT_CANNOT_BUY"] = 11641] = "XG_MIX_SEVENGIFT_CANNOT_BUY";
        EC[EC["XG_MIX_SEVENGIFT_ALREADY_BUY"] = 11642] = "XG_MIX_SEVENGIFT_ALREADY_BUY";
        EC[EC["XG_MIX_SEVENREWARD_CANNOT_BUY"] = 11643] = "XG_MIX_SEVENREWARD_CANNOT_BUY";
        EC[EC["XG_POTATO_BREAKTHROUGH_MAX_LEVEL"] = 11644] = "XG_POTATO_BREAKTHROUGH_MAX_LEVEL";
        EC[EC["XC_POTATO_BREAKTHROUGH_COUNT_NOT_ENOUGH"] = 11645] = "XC_POTATO_BREAKTHROUGH_COUNT_NOT_ENOUGH";
        EC[EC["XG_POTATO_BREAKTHROUGH_GOOD_NOT_MATCH"] = 11646] = "XG_POTATO_BREAKTHROUGH_GOOD_NOT_MATCH";
        EC[EC["XG_POTATO_BREAKTHROUGH_GOOD_NOT_SAME"] = 11647] = "XG_POTATO_BREAKTHROUGH_GOOD_NOT_SAME";
        EC[EC["XG_POTATO_BREAKTHROUGH_LEVEL_NOT_ENOUGH"] = 11648] = "XG_POTATO_BREAKTHROUGH_LEVEL_NOT_ENOUGH";
        EC[EC["XG_PET_NO_EXSIT"] = 11649] = "XG_PET_NO_EXSIT";
        EC[EC["XG_PET_STAR_MAX"] = 11650] = "XG_PET_STAR_MAX";
        EC[EC["XG_PET_STAR_LACK"] = 11651] = "XG_PET_STAR_LACK";
        EC[EC["XG_PET_STEP_MAX"] = 11652] = "XG_PET_STEP_MAX";
        EC[EC["XG_GENERAL_APTITUDE_NOT_ENOUGH"] = 11653] = "XG_GENERAL_APTITUDE_NOT_ENOUGH";
        EC[EC["XG_GENERAL_EQUIP_ALREADY_COMPOSE"] = 11654] = "XG_GENERAL_EQUIP_ALREADY_COMPOSE";
        EC[EC["XG_GENERAL_EQUIP_NOT_COMPOSE"] = 11655] = "XG_GENERAL_EQUIP_NOT_COMPOSE";
        EC[EC["XG_GENERAL_EQUIP_LEVEL_MAX"] = 11656] = "XG_GENERAL_EQUIP_LEVEL_MAX";
        EC[EC["XG_GENERAL_EQUIP_STEP_MAX"] = 11657] = "XG_GENERAL_EQUIP_STEP_MAX";
        EC[EC["XG_GENERAL_EQUIP_COMPOSE_LEVEL_LOW"] = 11658] = "XG_GENERAL_EQUIP_COMPOSE_LEVEL_LOW";
        EC[EC["XG_BIND_PHONE_READY"] = 11659] = "XG_BIND_PHONE_READY";
        EC[EC["XG_VIP_SYSTEM_NOT_OPEN"] = 11660] = "XG_VIP_SYSTEM_NOT_OPEN";
        EC[EC["XG_VIP_PRMISSION_ISNOT_ENOUGH"] = 11661] = "XG_VIP_PRMISSION_ISNOT_ENOUGH";
        EC[EC["XG_RECIEVE_POWER_INDEX_ERROR"] = 11662] = "XG_RECIEVE_POWER_INDEX_ERROR";
        EC[EC["XG_RECIEVE_POWER_INDEX_RECIEVE"] = 11663] = "XG_RECIEVE_POWER_INDEX_RECIEVE";
        EC[EC["XG_DOLL_COIN_NOT_ENOUGH"] = 11664] = "XG_DOLL_COIN_NOT_ENOUGH";
        EC[EC["XG_PSYCHIC_ATTRI_LEVEL_MAX"] = 11665] = "XG_PSYCHIC_ATTRI_LEVEL_MAX";
        EC[EC["XG_PET_HAT_NO_EXSIT"] = 11666] = "XG_PET_HAT_NO_EXSIT";
        EC[EC["XG_PET_HAT_IS_AIM_STATE"] = 11667] = "XG_PET_HAT_IS_AIM_STATE";
        EC[EC["XG_GENERAL_TRANSFER_ERROR"] = 11668] = "XG_GENERAL_TRANSFER_ERROR";
        EC[EC["XG_GENERAL_NOT_TRANSFER"] = 11669] = "XG_GENERAL_NOT_TRANSFER";
        EC[EC["XG_GENERAL_HAVE_TRANSFER"] = 11670] = "XG_GENERAL_HAVE_TRANSFER";
        EC[EC["XG_GENERAL_TRANSFER_SKILL_ERROR"] = 11671] = "XG_GENERAL_TRANSFER_SKILL_ERROR";
        EC[EC["XG_TITLE_IS_OWN"] = 11672] = "XG_TITLE_IS_OWN";
        EC[EC["XG_TITLE_NOT_FIT"] = 11673] = "XG_TITLE_NOT_FIT";
        EC[EC["XG_GENERAL_HAVE_APTITUDE"] = 11674] = "XG_GENERAL_HAVE_APTITUDE";
        EC[EC["XG_LACK_DUST"] = 11675] = "XG_LACK_DUST";
        EC[EC["XG_LACK_CRYSTAL"] = 11676] = "XG_LACK_CRYSTAL";
        EC[EC["XG_PERMIT_LEVEL_LIMIT"] = 11677] = "XG_PERMIT_LEVEL_LIMIT";
        EC[EC["XG_PERMIT_LIMIT_REWARD"] = 11678] = "XG_PERMIT_LIMIT_REWARD";
        EC[EC["XG_GENERAL_NOT_BREAKLEVEL"] = 11679] = "XG_GENERAL_NOT_BREAKLEVEL";
        EC[EC["XG_MOBS_TIMEOUT"] = 11683] = "XG_MOBS_TIMEOUT";
        EC[EC["XG_PROCESS_ERROR"] = 11684] = "XG_PROCESS_ERROR";
        EC[EC["XG_ACTIVITY_GRAB_REDPACKET"] = 11685] = "XG_ACTIVITY_GRAB_REDPACKET";
        EC[EC["XG_SINGLECRAFT_NOT_FIGHTING"] = 11700] = "XG_SINGLECRAFT_NOT_FIGHTING";
        EC[EC["XG_SINGLECRAFT_CHALLENGE_TIME"] = 11701] = "XG_SINGLECRAFT_CHALLENGE_TIME";
        EC[EC["XG_SINGLECRAFT_CHALLENGE_FINISH"] = 11702] = "XG_SINGLECRAFT_CHALLENGE_FINISH";
        EC[EC["XPUBLIC_ERROR"] = 19600] = "XPUBLIC_ERROR";
        EC[EC["XPUBLIC_OPERATE_TIMEOUT"] = 19601] = "XPUBLIC_OPERATE_TIMEOUT";
        EC[EC["XPUBLIC_SERVER_MYSQL_NOT_FIND"] = 19602] = "XPUBLIC_SERVER_MYSQL_NOT_FIND";
        EC[EC["XPUBLIC_SERVER_NOT_FIND"] = 19603] = "XPUBLIC_SERVER_NOT_FIND";
        EC[EC["XPUBLIC_ROLE_NOT_FIND"] = 19604] = "XPUBLIC_ROLE_NOT_FIND";
        EC[EC["XPUBLIC_VERSION_NOT_MATCH"] = 19605] = "XPUBLIC_VERSION_NOT_MATCH";
        EC[EC["XPUBLIC_NOT_JOIN"] = 19606] = "XPUBLIC_NOT_JOIN";
        EC[EC["XPUBLIC_CHALLENGE_WIN"] = 19607] = "XPUBLIC_CHALLENGE_WIN";
        EC[EC["XPUBLIC_BUY_NOT_ENOUGH"] = 19608] = "XPUBLIC_BUY_NOT_ENOUGH";
        EC[EC["XPUBLIC_SERVER_STOP"] = 19609] = "XPUBLIC_SERVER_STOP";
        EC[EC["XCOMMENT_PUBLISH_TIME_LIMIT"] = 19700] = "XCOMMENT_PUBLISH_TIME_LIMIT";
        EC[EC["XCOMMENT_CONTENT_TOO_LONG"] = 19701] = "XCOMMENT_CONTENT_TOO_LONG";
        EC[EC["XCOMMENT_PUBLISH_FAILT"] = 19702] = "XCOMMENT_PUBLISH_FAILT";
        EC[EC["XCOMMENT_IS_NOT_EXISTS"] = 19703] = "XCOMMENT_IS_NOT_EXISTS";
        EC[EC["XCOMMENT_DELETE_FAILT"] = 19704] = "XCOMMENT_DELETE_FAILT";
        EC[EC["XCOMMENT_QUERY_EXISTS_FAILT"] = 19705] = "XCOMMENT_QUERY_EXISTS_FAILT";
        EC[EC["XCOMMENT_QUERY_ID_FAILT"] = 19706] = "XCOMMENT_QUERY_ID_FAILT";
        EC[EC["XCOMMENT_QUERY_LIST_FAILT"] = 19707] = "XCOMMENT_QUERY_LIST_FAILT";
        EC[EC["XCOMMENT_POST_TYPE_ERROR"] = 19708] = "XCOMMENT_POST_TYPE_ERROR";
        EC[EC["XCOMMENT_POST_PUBLISH_TIME_LIMIT"] = 19709] = "XCOMMENT_POST_PUBLISH_TIME_LIMIT";
        EC[EC["XCOMMENT_POST_CONTENT_TOO_LONG"] = 19710] = "XCOMMENT_POST_CONTENT_TOO_LONG";
        EC[EC["XCOMMENT_POST_PUBLISH_FAILT"] = 19711] = "XCOMMENT_POST_PUBLISH_FAILT";
        EC[EC["XCOMMENT_POST_IS_NOT_EXISTS"] = 19712] = "XCOMMENT_POST_IS_NOT_EXISTS";
        EC[EC["XCOMMENT_POST_IS_NOT_POSTER"] = 19713] = "XCOMMENT_POST_IS_NOT_POSTER";
        EC[EC["XCOMMENT_POST_DELETE_FAILT"] = 19714] = "XCOMMENT_POST_DELETE_FAILT";
        EC[EC["XCOMMENT_POST_QUERY_POSTTIMES_FAILT"] = 19715] = "XCOMMENT_POST_QUERY_POSTTIMES_FAILT";
        EC[EC["XCOMMENT_POST_QUERY_POSTEXIST_FAILT"] = 19716] = "XCOMMENT_POST_QUERY_POSTEXIST_FAILT";
        EC[EC["XCOMMENT_POST_QUERY_ISPOSTER_FAILT"] = 19717] = "XCOMMENT_POST_QUERY_ISPOSTER_FAILT";
        EC[EC["XCOMMENT_POST_QUERY_LIST_FAILT"] = 19718] = "XCOMMENT_POST_QUERY_LIST_FAILT";
        EC[EC["XCOMMENT_PRAISE_TIME_LIMIT"] = 19719] = "XCOMMENT_PRAISE_TIME_LIMIT";
        EC[EC["XCOMMENT_PRAISE_QUERY_CLICKTIME_FAILT"] = 19720] = "XCOMMENT_PRAISE_QUERY_CLICKTIME_FAILT";
        EC[EC["XCOMMENT_PRAISE_FAILT"] = 19721] = "XCOMMENT_PRAISE_FAILT";
        EC[EC["XCOMMENT_POST_IS_EMPTY"] = 19722] = "XCOMMENT_POST_IS_EMPTY";
        EC[EC["XCOMMENT_CONTENT_IS_EMPTY"] = 19723] = "XCOMMENT_CONTENT_IS_EMPTY";
        EC[EC["XCOMMENT_STEP_FAILT"] = 19724] = "XCOMMENT_STEP_FAILT";
        EC[EC["XCOMMENT_TOP_FAILT"] = 19725] = "XCOMMENT_TOP_FAILT";
        EC[EC["XCOMMENT_POST_QUERY_TOP_LIST_FAILT"] = 19726] = "XCOMMENT_POST_QUERY_TOP_LIST_FAILT";
        EC[EC["XCOMMENT_CANCEL_TOP_FAILT"] = 19727] = "XCOMMENT_CANCEL_TOP_FAILT";
        EC[EC["XCOMMENT_POST_FORBID"] = 19728] = "XCOMMENT_POST_FORBID";
        EC[EC["XCOMMENT_FORBID"] = 19729] = "XCOMMENT_FORBID";
        EC[EC["XCOMMENT_PUBLISH_INTERVAL_IS_SHORT"] = 19730] = "XCOMMENT_PUBLISH_INTERVAL_IS_SHORT";
        EC[EC["XCOMMENT_GET_POST_COUNT_FAILT"] = 19731] = "XCOMMENT_GET_POST_COUNT_FAILT";
        EC[EC["XCOMMENT_TOP_POWER_ERROR"] = 19732] = "XCOMMENT_TOP_POWER_ERROR";
        EC[EC["XCOMMENT_POST_LIST_NUMBER_LIMIT"] = 19733] = "XCOMMENT_POST_LIST_NUMBER_LIMIT";
        EC[EC["XCOMMENT_POST_QUERY_HOT_LIST_FAILT"] = 19734] = "XCOMMENT_POST_QUERY_HOT_LIST_FAILT";
        EC[EC["XCOMMENT_TOP_NUMBER_MORE_THREE"] = 19735] = "XCOMMENT_TOP_NUMBER_MORE_THREE";
        EC[EC["XCOMMENT_GET_TOP_NUMBER_FAILT"] = 19736] = "XCOMMENT_GET_TOP_NUMBER_FAILT";
        EC[EC["XCOMMENT_QUERY_ROLEINFO_FAILT"] = 19737] = "XCOMMENT_QUERY_ROLEINFO_FAILT";
        EC[EC["XCOMMENT_SERVER_ERROR"] = 19738] = "XCOMMENT_SERVER_ERROR";
        EC[EC["XCOMMENT_GET_ROLEINFO_FAILT"] = 19739] = "XCOMMENT_GET_ROLEINFO_FAILT";
        EC[EC["XCOMMENT_SAVE_ROLEINFO_FAILT"] = 19740] = "XCOMMENT_SAVE_ROLEINFO_FAILT";
        EC[EC["XCOMMENT_QUERY_REFRESH_INTERVAL_FAILT"] = 19741] = "XCOMMENT_QUERY_REFRESH_INTERVAL_FAILT";
        EC[EC["XCOMMENT_SEND_PRIVATE_CHAT_FAILT"] = 19742] = "XCOMMENT_SEND_PRIVATE_CHAT_FAILT";
        EC[EC["XCOMMENT_SEND_BATTLE_MAIL_FAILT"] = 19743] = "XCOMMENT_SEND_BATTLE_MAIL_FAILT";
        EC[EC["XCOMMENT_PUBLISH_TIME_IS_SHORT"] = 19744] = "XCOMMENT_PUBLISH_TIME_IS_SHORT";
        EC[EC["XCOMMENT_GET_COMMETN_LIST_FAILT"] = 19745] = "XCOMMENT_GET_COMMETN_LIST_FAILT";
        EC[EC["XCOMMENT_POST_IS_SYSTEM"] = 19746] = "XCOMMENT_POST_IS_SYSTEM";
        EC[EC["XCOMMENT_SERVER_NOT_FIND"] = 19747] = "XCOMMENT_SERVER_NOT_FIND";
        EC[EC["XCOMMENT_ERROR"] = 19748] = "XCOMMENT_ERROR";
        EC[EC["XCOMMENT_INVALID_ARG"] = 19749] = "XCOMMENT_INVALID_ARG";
        EC[EC["XCOMMENT_ROLE_NOT_EXISTS"] = 19750] = "XCOMMENT_ROLE_NOT_EXISTS";
        EC[EC["XCOMMENT_IS_ROLE_FAILT"] = 19751] = "XCOMMENT_IS_ROLE_FAILT";
        EC[EC["XCOMMENT_GET_POST_DETAIL_FAILT"] = 19752] = "XCOMMENT_GET_POST_DETAIL_FAILT";
        EC[EC["XCOMMENT_GET_ROLE_POST_LIST_FAILT"] = 19753] = "XCOMMENT_GET_ROLE_POST_LIST_FAILT";
        EC[EC["XCOMMENT_QUERY_COMMENT_DETAIL_FAILT"] = 19754] = "XCOMMENT_QUERY_COMMENT_DETAIL_FAILT";
        EC[EC["XCOMMENT_COM_TOP_FAILT"] = 19755] = "XCOMMENT_COM_TOP_FAILT";
        EC[EC["XCOMMENT_COM_TOP_NUMBER_MORE_THREE"] = 19756] = "XCOMMENT_COM_TOP_NUMBER_MORE_THREE";
        EC[EC["XCOMMENT_COM_TOP_CANCEL_FAILT"] = 19757] = "XCOMMENT_COM_TOP_CANCEL_FAILT";
        EC[EC["XCOMMENT_COM_NOT_TOP"] = 19758] = "XCOMMENT_COM_NOT_TOP";
        EC[EC["XCOMMENT_COM_BETTER_FAILT"] = 19759] = "XCOMMENT_COM_BETTER_FAILT";
        EC[EC["XCOMMENT_COM_BETTER_NUM_MORE"] = 19760] = "XCOMMENT_COM_BETTER_NUM_MORE";
        EC[EC["XCOMMENT_COM_BETTER_CANCEL_FAILT"] = 19761] = "XCOMMENT_COM_BETTER_CANCEL_FAILT";
        EC[EC["XCOMMENT_COM_BETTER_NOT_BETTER"] = 19762] = "XCOMMENT_COM_BETTER_NOT_BETTER";
        EC[EC["XCOMMENT_QUERY_MANY_ROLES_FAILT"] = 19763] = "XCOMMENT_QUERY_MANY_ROLES_FAILT";
        EC[EC["XCHAT_ERROR"] = 19800] = "XCHAT_ERROR";
        EC[EC["XCHAT_SERVER_NOT_FIND"] = 19801] = "XCHAT_SERVER_NOT_FIND";
        EC[EC["XCHAT_SERVER_ROLEID_ZERO"] = 19802] = "XCHAT_SERVER_ROLEID_ZERO";
        EC[EC["XACTIVITY_ERROR"] = 19850] = "XACTIVITY_ERROR";
        EC[EC["XACTIVITY_TYPE_NOT_EXISTS"] = 19851] = "XACTIVITY_TYPE_NOT_EXISTS";
        EC[EC["XACTIVITY_QUERY_ACTIVITY_SERVERIDS"] = 19852] = "XACTIVITY_QUERY_ACTIVITY_SERVERIDS";
        EC[EC["XACTIVITY_SET_ACTIVITY_SERVERIDS"] = 19853] = "XACTIVITY_SET_ACTIVITY_SERVERIDS";
        EC[EC["XACTIVITY_REDIS_QUERY_SERVERID_ACTIVITY"] = 19854] = "XACTIVITY_REDIS_QUERY_SERVERID_ACTIVITY";
        EC[EC["XACTIVITY_MYSQL_ACTIVITY_DETAIL_FAILT"] = 19855] = "XACTIVITY_MYSQL_ACTIVITY_DETAIL_FAILT";
        EC[EC["XCRAFT_ERROR"] = 19900] = "XCRAFT_ERROR";
        EC[EC["XCRAFT_OPERATE_TIMEOUT"] = 19901] = "XCRAFT_OPERATE_TIMEOUT";
        EC[EC["XCRAFT_SERVER_MYSQL_NOT_FIND"] = 19902] = "XCRAFT_SERVER_MYSQL_NOT_FIND";
        EC[EC["XCRAFT_SERVER_NOT_FIND"] = 19903] = "XCRAFT_SERVER_NOT_FIND";
        EC[EC["XCRAFT_ROLE_NOT_FIND"] = 19904] = "XCRAFT_ROLE_NOT_FIND";
        EC[EC["XCRAFT_VERSION_NOT_MATCH"] = 19905] = "XCRAFT_VERSION_NOT_MATCH";
        EC[EC["XCRAFT_NOT_JOIN"] = 19906] = "XCRAFT_NOT_JOIN";
        EC[EC["XCRAFT_CHALLENGE_WIN"] = 19907] = "XCRAFT_CHALLENGE_WIN";
        EC[EC["XCRAFT_BUY_NOT_ENOUGH"] = 19908] = "XCRAFT_BUY_NOT_ENOUGH";
        EC[EC["XCRAFT_SERVER_STOP"] = 19909] = "XCRAFT_SERVER_STOP";
        EC[EC["XCRAFT_CONTEND_NOT_JION"] = 19910] = "XCRAFT_CONTEND_NOT_JION";
        EC[EC["XSCENE_NOT_JION"] = 19950] = "XSCENE_NOT_JION";
        EC[EC["XSCENE_NOT_OPEN"] = 19951] = "XSCENE_NOT_OPEN";
        EC[EC["XERROR_LIMIT"] = 29999] = "XERROR_LIMIT"; // 游戏服务最大错误码
    })(EC = message.EC || (message.EC = {}));
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
})(message || (message = {}));
//Date: 2019-8
//File: msg_xx_global.ts
//Auth: generated by auto tool 'lazybone'
//Desc: message define
// 定义一些公司内部使用的全局常量
// APP应用(AppId) ---> 发行渠道(channel) ----> 各平台支付方式(本文档只定义本公司平台支付方式)
//                                       |---> 各平台登陆方式(本文档只定义本公司平台登陆方式)
// 注：本公司平台与第三方平台同等看待，同等管理
var message;
(function (message) {
    // 设备激活监控枚举
    // Device Activation
    var DA;
    (function (DA) {
        DA[DA["STEP_NONO"] = 0] = "STEP_NONO";
        DA[DA["STEP_APP_START"] = 10] = "STEP_APP_START";
        DA[DA["STEP_CHECK_VERSION"] = 20] = "STEP_CHECK_VERSION";
        DA[DA["STEP_UPDATE_START"] = 30] = "STEP_UPDATE_START";
        DA[DA["STEP_UPDATE_FINISH"] = 40] = "STEP_UPDATE_FINISH";
        DA[DA["STEP_SDK_CALL"] = 50] = "STEP_SDK_CALL";
        DA[DA["STEP_SDK_LOGIN"] = 60] = "STEP_SDK_LOGIN";
        DA[DA["STEP_NOTICE_TIPS"] = 70] = "STEP_NOTICE_TIPS";
        DA[DA["STEP_CREATE_ROLE_START"] = 80] = "STEP_CREATE_ROLE_START";
        DA[DA["STEP_CREATE_ROLE_FINISH"] = 90] = "STEP_CREATE_ROLE_FINISH";
        DA[DA["STEP_ENTRY_GAME"] = 100] = "STEP_ENTRY_GAME";
        DA[DA["STEP_END"] = 9999] = "STEP_END"; // 枚举结束
    })(DA = message.DA || (message.DA = {}));
    ////////////////////////////////////////////////////////////////////////////////
    // 终端设备信息
    // struct DeviceInfo
    ////////////////////////////////////////////////////////////////////////////////
    var DeviceInfo = (function () {
        function DeviceInfo() {
            this.device_id = ""; // 设备ID(唯一标识该设备)
            this.locale = ""; // (手机上设置的)国家和地区
            this.language = ""; // (手机上设置的)语言
            this.model = ""; // 设备型号(HTC渴望v5、Iphone5)
            this.os = ""; // 操作系统(IOS5、Android4.2)
            this.imei = ""; // IMEI码(不能获取则置空)
            this.ip = ""; // IP地址(客户端可能获取的为内网地址,服务端需要对该字段更新)
            this.mac = ""; // MAC地址(不能获取则置空)
            this.idfa = ""; // IOS填IDFA，安卓填安卓ID
        }
        DeviceInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // device_id
            if (decoder_.eof())
                return true;
            this.device_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // locale
            if (decoder_.eof())
                return true;
            this.locale = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // language
            if (decoder_.eof())
                return true;
            this.language = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // model
            if (decoder_.eof())
                return true;
            this.model = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // os
            if (decoder_.eof())
                return true;
            this.os = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // imei
            if (decoder_.eof())
                return true;
            this.imei = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // ip
            if (decoder_.eof())
                return true;
            this.ip = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // mac
            if (decoder_.eof())
                return true;
            this.mac = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // idfa
            if (decoder_.eof())
                return true;
            this.idfa = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        DeviceInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // device_id
            encoder.write_string(this.device_id);
            // locale
            encoder.write_string(this.locale);
            // language
            encoder.write_string(this.language);
            // model
            encoder.write_string(this.model);
            // os
            encoder.write_string(this.os);
            // imei
            encoder.write_string(this.imei);
            // ip
            encoder.write_string(this.ip);
            // mac
            encoder.write_string(this.mac);
            // idfa
            encoder.write_string(this.idfa);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return DeviceInfo;
    }());
    message.DeviceInfo = DeviceInfo;
    __reflect(DeviceInfo.prototype, "message.DeviceInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // App应用信息
    // struct AppVersionInfo
    ////////////////////////////////////////////////////////////////////////////////
    var AppVersionInfo = (function () {
        function AppVersionInfo() {
            this.app_id = 0; // 应用ID(向平台申请得到)
            this.app_lang = ""; // 应用语言
            this.channel = ""; // 联运(发行)渠道商(见联运渠道编码表)
            this.major_version = 0; // 客户端主版本号
            this.minor_version = 0; // 客户端子版本号
            this.revision_version = 0; // 客户端修正版本号
            this.ext = ""; // 扩展参数
        }
        AppVersionInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // app_id
            if (decoder_.eof())
                return true;
            this.app_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // app_lang
            if (decoder_.eof())
                return true;
            this.app_lang = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // channel
            if (decoder_.eof())
                return true;
            this.channel = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // major_version
            if (decoder_.eof())
                return true;
            this.major_version = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // minor_version
            if (decoder_.eof())
                return true;
            this.minor_version = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // revision_version
            if (decoder_.eof())
                return true;
            this.revision_version = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // ext
            if (decoder_.eof())
                return true;
            this.ext = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        AppVersionInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // app_id
            encoder.write_fixuint32(this.app_id);
            // app_lang
            encoder.write_string(this.app_lang);
            // channel
            encoder.write_string(this.channel);
            // major_version
            encoder.write_uint8(this.major_version);
            // minor_version
            encoder.write_uint8(this.minor_version);
            // revision_version
            encoder.write_uint8(this.revision_version);
            // ext
            encoder.write_string(this.ext);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return AppVersionInfo;
    }());
    message.AppVersionInfo = AppVersionInfo;
    __reflect(AppVersionInfo.prototype, "message.AppVersionInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 通用键值对
    // struct KVPair
    ////////////////////////////////////////////////////////////////////////////////
    var KVPair = (function () {
        function KVPair() {
            this.key = ""; // 键
            this.value = ""; // 值
        }
        KVPair.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // key
            if (decoder_.eof())
                return true;
            this.key = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // value
            if (decoder_.eof())
                return true;
            this.value = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        KVPair.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // key
            encoder.write_string(this.key);
            // value
            encoder.write_string(this.value);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return KVPair;
    }());
    message.KVPair = KVPair;
    __reflect(KVPair.prototype, "message.KVPair", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 角色简短信息
    // struct RoleShortInfo
    ////////////////////////////////////////////////////////////////////////////////
    var RoleShortInfo = (function () {
        function RoleShortInfo() {
            this.user_id = 0; // 用户ID
            this.role_id = 0; // 角色ID
            this.owner_groupid = 0; // 所属分区ID
            this.last_groupid = 0; // 最后登陆分区ID
            this.last_logintime = ""; // 最后登陆时间
            this.role_createtime = ""; // 角色创建时间
            this.role_type = 0; // 角色类型
            this.role_level = 0; // 角色等级
            this.role_name = ""; // 角色名
            this.role_features = []; // 角色扩展特性列表(kv键值对)
            this.channel = ""; // 联运(发行)渠道商(见联运渠道编码表)
            this.device_id = ""; // 角色最后一次登陆的设备ID
            this.role_vip = 0; // 角色VIP等级
        }
        RoleShortInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_id
            if (decoder_.eof())
                return true;
            this.role_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // owner_groupid
            if (decoder_.eof())
                return true;
            this.owner_groupid = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // last_groupid
            if (decoder_.eof())
                return true;
            this.last_groupid = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // last_logintime
            if (decoder_.eof())
                return true;
            this.last_logintime = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // role_createtime
            if (decoder_.eof())
                return true;
            this.role_createtime = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // role_type
            if (decoder_.eof())
                return true;
            this.role_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_level
            if (decoder_.eof())
                return true;
            this.role_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_name
            if (decoder_.eof())
                return true;
            this.role_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // role_features
            if (decoder_.eof())
                return true;
            var role_features_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < role_features_count; i++) {
                this.role_features.push(new KVPair());
                if (!this.role_features[i].parse_bytes(decoder_))
                    return false;
            }
            // channel
            if (decoder_.eof())
                return true;
            this.channel = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // device_id
            if (decoder_.eof())
                return true;
            this.device_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // role_vip
            if (decoder_.eof())
                return true;
            this.role_vip = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        RoleShortInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // owner_groupid
            encoder.write_fixuint32(this.owner_groupid);
            // last_groupid
            encoder.write_fixuint32(this.last_groupid);
            // last_logintime
            encoder.write_string(this.last_logintime);
            // role_createtime
            encoder.write_string(this.role_createtime);
            // role_type
            encoder.write_fixuint32(this.role_type);
            // role_level
            encoder.write_fixuint32(this.role_level);
            // role_name
            encoder.write_string(this.role_name);
            // role_features
            encoder.write_fixuint32(Object.keys(this.role_features).length);
            for (var k in this.role_features) {
                if (!this.role_features[k].to_bytes(encoder))
                    return false;
            }
            // channel
            encoder.write_string(this.channel);
            // device_id
            encoder.write_string(this.device_id);
            // role_vip
            encoder.write_fixuint32(this.role_vip);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return RoleShortInfo;
    }());
    message.RoleShortInfo = RoleShortInfo;
    __reflect(RoleShortInfo.prototype, "message.RoleShortInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 支付商品信息
    // struct PayProductInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PayProductInfo = (function () {
        function PayProductInfo() {
            this.id = ""; // 商口ID(如：com.aonesoft.sanguo.item1)
            this.name = ""; // 商品名称(如：小袋金币)
            this.describe = ""; // 商品描述信息
            this.currency = ""; // 币种(如人民币:CNY,港币:HKY,美元:USD)
            this.amount = 0; // 币值(人民币单位为元,美元单位为美元)
            this.amount_usd = 0; // 转换为美元后的币值
            this.coin = 0; // 游戏代币数(不同游戏叫法不同,如金币,元宝等)
            this.type = ""; // 商品类型('' or 'normal': 空字符串表示定额普通商品; 'mol_pinpay': MOL pinPay(MOL钱包按normal处理); 'fortumo': fortumo支付)
            this.discount = ""; //折扣
        }
        PayProductInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // describe
            if (decoder_.eof())
                return true;
            this.describe = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // currency
            if (decoder_.eof())
                return true;
            this.currency = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // amount
            if (decoder_.eof())
                return true;
            this.amount = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // amount_usd
            if (decoder_.eof())
                return true;
            this.amount_usd = decoder_.read_float64();
            if (decoder_.has_error())
                return false;
            // coin
            if (decoder_.eof())
                return true;
            this.coin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // type
            if (decoder_.eof())
                return true;
            this.type = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // discount
            if (decoder_.eof())
                return true;
            this.discount = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PayProductInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_string(this.id);
            // name
            encoder.write_string(this.name);
            // describe
            encoder.write_string(this.describe);
            // currency
            encoder.write_string(this.currency);
            // amount
            encoder.write_float64(this.amount);
            // amount_usd
            encoder.write_float64(this.amount_usd);
            // coin
            encoder.write_fixuint32(this.coin);
            // type
            encoder.write_string(this.type);
            // discount
            encoder.write_string(this.discount);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PayProductInfo;
    }());
    message.PayProductInfo = PayProductInfo;
    __reflect(PayProductInfo.prototype, "message.PayProductInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 支付商品扩展信息
    // struct PayProductExtInfo
    ////////////////////////////////////////////////////////////////////////////////
    var PayProductExtInfo = (function () {
        function PayProductExtInfo() {
            this.id = ""; // 商口ID(如：com.aonesoft.sanguo.item1)
            this.cp_product_id = ""; // cp 商品id
            this.history_discount = ""; // 最近历史折扣(如：95|85|75)
        }
        PayProductExtInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // cp_product_id
            if (decoder_.eof())
                return true;
            this.cp_product_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // history_discount
            if (decoder_.eof())
                return true;
            this.history_discount = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        PayProductExtInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_string(this.id);
            // cp_product_id
            encoder.write_string(this.cp_product_id);
            // history_discount
            encoder.write_string(this.history_discount);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return PayProductExtInfo;
    }());
    message.PayProductExtInfo = PayProductExtInfo;
    __reflect(PayProductExtInfo.prototype, "message.PayProductExtInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // Payways 支付渠道方式
    // struct Payways
    ////////////////////////////////////////////////////////////////////////////////
    var Payways = (function () {
        function Payways() {
            this.pay_channel = "";
            this.pay_type = [];
        }
        Payways.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // pay_channel
            if (decoder_.eof())
                return true;
            this.pay_channel = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // pay_type
            if (decoder_.eof())
                return true;
            this.pay_type = decoder_.read_string_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        Payways.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // pay_channel
            encoder.write_string(this.pay_channel);
            // pay_type
            encoder.write_string_vector(this.pay_type);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return Payways;
    }());
    message.Payways = Payways;
    __reflect(Payways.prototype, "message.Payways", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // struct ChannelVersionInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ChannelVersionInfo = (function () {
        function ChannelVersionInfo() {
            this.major_version = 0; // 客户端主版本号
            this.minor_version = 0; // 客户端子版本号
            this.revision_version = 0; // 客户端修正版本号
            this.update_addr = ""; // 强更地址
            this.announce_addr = ""; // 公告地址
            this.announce_begin = ""; // 公告开始时间
            this.announce_end = ""; // 公告结束时间
            this.announce_rate = 0; // 公告显示频率
            this.is_show_announce = false; // 是否显示公告
            this.version_desc = ""; // 版本描述
            this.update_option = 0; // 更新选项 (0:不更新 1:可选更新 2:强更)
            this.is_test = false; // 是否测试
            this.is_whitelist = false; // 是否白名单
        }
        ChannelVersionInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // major_version
            if (decoder_.eof())
                return true;
            this.major_version = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // minor_version
            if (decoder_.eof())
                return true;
            this.minor_version = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // revision_version
            if (decoder_.eof())
                return true;
            this.revision_version = decoder_.read_uint8();
            if (decoder_.has_error())
                return false;
            // update_addr
            if (decoder_.eof())
                return true;
            this.update_addr = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // announce_addr
            if (decoder_.eof())
                return true;
            this.announce_addr = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // announce_begin
            if (decoder_.eof())
                return true;
            this.announce_begin = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // announce_end
            if (decoder_.eof())
                return true;
            this.announce_end = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // announce_rate
            if (decoder_.eof())
                return true;
            this.announce_rate = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_show_announce
            if (decoder_.eof())
                return true;
            this.is_show_announce = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // version_desc
            if (decoder_.eof())
                return true;
            this.version_desc = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // update_option
            if (decoder_.eof())
                return true;
            this.update_option = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_test
            if (decoder_.eof())
                return true;
            this.is_test = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // is_whitelist
            if (decoder_.eof())
                return true;
            this.is_whitelist = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ChannelVersionInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // major_version
            encoder.write_uint8(this.major_version);
            // minor_version
            encoder.write_uint8(this.minor_version);
            // revision_version
            encoder.write_uint8(this.revision_version);
            // update_addr
            encoder.write_string(this.update_addr);
            // announce_addr
            encoder.write_string(this.announce_addr);
            // announce_begin
            encoder.write_string(this.announce_begin);
            // announce_end
            encoder.write_string(this.announce_end);
            // announce_rate
            encoder.write_fixuint32(this.announce_rate);
            // is_show_announce
            encoder.write_bool(this.is_show_announce);
            // version_desc
            encoder.write_string(this.version_desc);
            // update_option
            encoder.write_fixuint32(this.update_option);
            // is_test
            encoder.write_bool(this.is_test);
            // is_whitelist
            encoder.write_bool(this.is_whitelist);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChannelVersionInfo;
    }());
    message.ChannelVersionInfo = ChannelVersionInfo;
    __reflect(ChannelVersionInfo.prototype, "message.ChannelVersionInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 渠道信息
    // struct ChannelInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ChannelInfo = (function () {
        function ChannelInfo() {
            this.id = ""; // 渠道ID   aone_ios
            this.alias = ""; //渠道别名
            this.name = ""; // 渠道名
            this.channel_params = []; // 渠道(SDK)参数配置列表
            this.channel_products = []; // 渠道支付商品列表
            this.mcc_codes = []; //mcc列表 key存code,value存name
            this.bank_payways = []; //银行充值方式
            this.card_payways = []; // 点卡充值方式
            this.channel_products_ext = []; // 渠道支付商品列表扩展
            this.channel_version_info = []; // 渠道版本信息
        }
        ChannelInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // alias
            if (decoder_.eof())
                return true;
            this.alias = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // channel_params
            if (decoder_.eof())
                return true;
            var channel_params_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channel_params_count; i++) {
                this.channel_params.push(new KVPair());
                if (!this.channel_params[i].parse_bytes(decoder_))
                    return false;
            }
            // channel_products
            if (decoder_.eof())
                return true;
            var channel_products_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channel_products_count; i++) {
                this.channel_products.push(new PayProductInfo());
                if (!this.channel_products[i].parse_bytes(decoder_))
                    return false;
            }
            // mcc_codes
            if (decoder_.eof())
                return true;
            var mcc_codes_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < mcc_codes_count; i++) {
                this.mcc_codes.push(new KVPair());
                if (!this.mcc_codes[i].parse_bytes(decoder_))
                    return false;
            }
            // bank_payways
            if (decoder_.eof())
                return true;
            var bank_payways_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < bank_payways_count; i++) {
                this.bank_payways.push(new Payways());
                if (!this.bank_payways[i].parse_bytes(decoder_))
                    return false;
            }
            // card_payways
            if (decoder_.eof())
                return true;
            var card_payways_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < card_payways_count; i++) {
                this.card_payways.push(new Payways());
                if (!this.card_payways[i].parse_bytes(decoder_))
                    return false;
            }
            // channel_products_ext
            if (decoder_.eof())
                return true;
            var channel_products_ext_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channel_products_ext_count; i++) {
                this.channel_products_ext.push(new PayProductExtInfo());
                if (!this.channel_products_ext[i].parse_bytes(decoder_))
                    return false;
            }
            // channel_version_info
            if (decoder_.eof())
                return true;
            var channel_version_info_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channel_version_info_count; i++) {
                this.channel_version_info.push(new ChannelVersionInfo());
                if (!this.channel_version_info[i].parse_bytes(decoder_))
                    return false;
            }
            return true;
        };
        ChannelInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_string(this.id);
            // alias
            encoder.write_string(this.alias);
            // name
            encoder.write_string(this.name);
            // channel_params
            encoder.write_fixuint32(Object.keys(this.channel_params).length);
            for (var k in this.channel_params) {
                if (!this.channel_params[k].to_bytes(encoder))
                    return false;
            }
            // channel_products
            encoder.write_fixuint32(Object.keys(this.channel_products).length);
            for (var k in this.channel_products) {
                if (!this.channel_products[k].to_bytes(encoder))
                    return false;
            }
            // mcc_codes
            encoder.write_fixuint32(Object.keys(this.mcc_codes).length);
            for (var k in this.mcc_codes) {
                if (!this.mcc_codes[k].to_bytes(encoder))
                    return false;
            }
            // bank_payways
            encoder.write_fixuint32(Object.keys(this.bank_payways).length);
            for (var k in this.bank_payways) {
                if (!this.bank_payways[k].to_bytes(encoder))
                    return false;
            }
            // card_payways
            encoder.write_fixuint32(Object.keys(this.card_payways).length);
            for (var k in this.card_payways) {
                if (!this.card_payways[k].to_bytes(encoder))
                    return false;
            }
            // channel_products_ext
            encoder.write_fixuint32(Object.keys(this.channel_products_ext).length);
            for (var k in this.channel_products_ext) {
                if (!this.channel_products_ext[k].to_bytes(encoder))
                    return false;
            }
            // channel_version_info
            encoder.write_fixuint32(Object.keys(this.channel_version_info).length);
            for (var k in this.channel_version_info) {
                if (!this.channel_version_info[k].to_bytes(encoder))
                    return false;
            }
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ChannelInfo;
    }());
    message.ChannelInfo = ChannelInfo;
    __reflect(ChannelInfo.prototype, "message.ChannelInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    //语言信息
    // struct LanguagesInfo
    ////////////////////////////////////////////////////////////////////////////////
    var LanguagesInfo = (function () {
        function LanguagesInfo() {
            this.code = ""; // 语言代码 En-us
            this.name = ""; // 语言名字(直接用所指语言写成的名字例如阿拉伯文) English
            this.describe = ""; //语言表述(汉语的表示) 英文
        }
        LanguagesInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // code
            if (decoder_.eof())
                return true;
            this.code = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // describe
            if (decoder_.eof())
                return true;
            this.describe = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        LanguagesInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // code
            encoder.write_string(this.code);
            // name
            encoder.write_string(this.name);
            // describe
            encoder.write_string(this.describe);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return LanguagesInfo;
    }());
    message.LanguagesInfo = LanguagesInfo;
    __reflect(LanguagesInfo.prototype, "message.LanguagesInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    //分区信息
    // struct GroupInfo
    ////////////////////////////////////////////////////////////////////////////////
    var GroupInfo = (function () {
        function GroupInfo() {
            this.aone_group_id = 0; //aone 发行平台分配的分区ID
            this.cp_group_id = ""; //cp 方游戏自己分配的分区ID
        }
        GroupInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // aone_group_id
            if (decoder_.eof())
                return true;
            this.aone_group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // cp_group_id
            if (decoder_.eof())
                return true;
            this.cp_group_id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        GroupInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // aone_group_id
            encoder.write_fixuint32(this.aone_group_id);
            // cp_group_id
            encoder.write_string(this.cp_group_id);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return GroupInfo;
    }());
    message.GroupInfo = GroupInfo;
    __reflect(GroupInfo.prototype, "message.GroupInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    //禁止登陆信息
    // struct ForbidInfo
    ////////////////////////////////////////////////////////////////////////////////
    var ForbidInfo = (function () {
        function ForbidInfo() {
            this.forbid_ip = []; // 禁止的ip
            this.forbid_device_id = []; // 禁止的设备
            this.forbid_uid = []; // 禁止的uid
        }
        ForbidInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // forbid_ip
            if (decoder_.eof())
                return true;
            this.forbid_ip = decoder_.read_string_vector();
            if (decoder_.has_error())
                return false;
            // forbid_device_id
            if (decoder_.eof())
                return true;
            this.forbid_device_id = decoder_.read_string_vector();
            if (decoder_.has_error())
                return false;
            // forbid_uid
            if (decoder_.eof())
                return true;
            this.forbid_uid = decoder_.read_uint32_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ForbidInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // forbid_ip
            encoder.write_string_vector(this.forbid_ip);
            // forbid_device_id
            encoder.write_string_vector(this.forbid_device_id);
            // forbid_uid
            encoder.write_uint32_vector(this.forbid_uid);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ForbidInfo;
    }());
    message.ForbidInfo = ForbidInfo;
    __reflect(ForbidInfo.prototype, "message.ForbidInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 产品白名单
    // struct ProductWhiteList
    ////////////////////////////////////////////////////////////////////////////////
    var ProductWhiteList = (function () {
        function ProductWhiteList() {
            this.ip = [];
        }
        ProductWhiteList.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // ip
            if (decoder_.eof())
                return true;
            this.ip = decoder_.read_string_vector();
            if (decoder_.has_error())
                return false;
            return true;
        };
        ProductWhiteList.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // ip
            encoder.write_string_vector(this.ip);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return ProductWhiteList;
    }());
    message.ProductWhiteList = ProductWhiteList;
    __reflect(ProductWhiteList.prototype, "message.ProductWhiteList", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 站点产品信息
    // struct WebsiteProductInfo
    ////////////////////////////////////////////////////////////////////////////////
    var WebsiteProductInfo = (function () {
        function WebsiteProductInfo() {
            this.id = 0; // 产品ID
            this.key = ""; //产品密钥（规则自定义）
            this.name = ""; // 产品名称
            this.describe = ""; // 产品描述
            this.product_line_name = ""; //隶属产品线名称
            this.paynotify_url = ""; // 通知cp支付服的地址
            this.payserver = new message.SecurityServerInfo(); // 自有支付服务地址，例如：aonepay.com:8000
            this.bbs_url = ""; // 游戏论坛地址（设计字段默认为"",不显示）
            this.entryservers = []; // 入口服务列表 key存ip value存port 例如:  192.168.7.1:8000 key=192.168.7.1 value=8000（设计字段默认为"",不显示）
            this.languages = []; // 语言列表
            this.groups = [];
            this.channels = []; // 渠道列表
            this.share_url = ""; // 推荐下载地址
            this.redirect_url = ""; // 应用内跳转地址
            this.share_domain = ""; // 分享域名
            this.forbid_info = new ForbidInfo(); // 禁止登陆信息
            this.max_group_id = 0; // (0:表示手动设置group_id)
            this.product_whitelist = new ProductWhiteList(); // 产品白名单
        }
        WebsiteProductInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // key
            if (decoder_.eof())
                return true;
            this.key = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // describe
            if (decoder_.eof())
                return true;
            this.describe = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // product_line_name
            if (decoder_.eof())
                return true;
            this.product_line_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // paynotify_url
            if (decoder_.eof())
                return true;
            this.paynotify_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // payserver
            if (decoder_.eof())
                return true;
            if (!this.payserver.parse_bytes(decoder_))
                return false;
            // bbs_url
            if (decoder_.eof())
                return true;
            this.bbs_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // entryservers
            if (decoder_.eof())
                return true;
            var entryservers_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < entryservers_count; i++) {
                this.entryservers.push(new message.ServerInfo());
                if (!this.entryservers[i].parse_bytes(decoder_))
                    return false;
            }
            // languages
            if (decoder_.eof())
                return true;
            var languages_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < languages_count; i++) {
                this.languages.push(new LanguagesInfo());
                if (!this.languages[i].parse_bytes(decoder_))
                    return false;
            }
            // groups
            if (decoder_.eof())
                return true;
            var groups_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < groups_count; i++) {
                this.groups.push(new GroupInfo());
                if (!this.groups[i].parse_bytes(decoder_))
                    return false;
            }
            // channels
            if (decoder_.eof())
                return true;
            var channels_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < channels_count; i++) {
                this.channels.push(new ChannelInfo());
                if (!this.channels[i].parse_bytes(decoder_))
                    return false;
            }
            // share_url
            if (decoder_.eof())
                return true;
            this.share_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // redirect_url
            if (decoder_.eof())
                return true;
            this.redirect_url = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // share_domain
            if (decoder_.eof())
                return true;
            this.share_domain = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // forbid_info
            if (decoder_.eof())
                return true;
            if (!this.forbid_info.parse_bytes(decoder_))
                return false;
            // max_group_id
            if (decoder_.eof())
                return true;
            this.max_group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // product_whitelist
            if (decoder_.eof())
                return true;
            if (!this.product_whitelist.parse_bytes(decoder_))
                return false;
            return true;
        };
        WebsiteProductInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_fixuint32(this.id);
            // key
            encoder.write_string(this.key);
            // name
            encoder.write_string(this.name);
            // describe
            encoder.write_string(this.describe);
            // product_line_name
            encoder.write_string(this.product_line_name);
            // paynotify_url
            encoder.write_string(this.paynotify_url);
            // payserver
            this.payserver.to_bytes(encoder);
            // bbs_url
            encoder.write_string(this.bbs_url);
            // entryservers
            encoder.write_fixuint32(Object.keys(this.entryservers).length);
            for (var k in this.entryservers) {
                if (!this.entryservers[k].to_bytes(encoder))
                    return false;
            }
            // languages
            encoder.write_fixuint32(Object.keys(this.languages).length);
            for (var k in this.languages) {
                if (!this.languages[k].to_bytes(encoder))
                    return false;
            }
            // groups
            encoder.write_fixuint32(Object.keys(this.groups).length);
            for (var k in this.groups) {
                if (!this.groups[k].to_bytes(encoder))
                    return false;
            }
            // channels
            encoder.write_fixuint32(Object.keys(this.channels).length);
            for (var k in this.channels) {
                if (!this.channels[k].to_bytes(encoder))
                    return false;
            }
            // share_url
            encoder.write_string(this.share_url);
            // redirect_url
            encoder.write_string(this.redirect_url);
            // share_domain
            encoder.write_string(this.share_domain);
            // forbid_info
            this.forbid_info.to_bytes(encoder);
            // max_group_id
            encoder.write_fixuint32(this.max_group_id);
            // product_whitelist
            this.product_whitelist.to_bytes(encoder);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return WebsiteProductInfo;
    }());
    message.WebsiteProductInfo = WebsiteProductInfo;
    __reflect(WebsiteProductInfo.prototype, "message.WebsiteProductInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // H5支付商品信息
    // struct H5ProductInfo
    ////////////////////////////////////////////////////////////////////////////////
    var H5ProductInfo = (function () {
        function H5ProductInfo() {
            this.id = ""; // 商品Id
            this.title = ""; // 商品标题
            this.content = ""; // 商品内容
            this.desc = ""; // 商品描述
            this.limit_count = 0; // 限购次数
            this.pay_index = ""; // cp_ext参数
            this.show_type = 0; // 展示类型(热门等)
            this.is_first = false; // 是否是首冲
            this.give_token = 0; // 额外赠送
        }
        H5ProductInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // id
            if (decoder_.eof())
                return true;
            this.id = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // title
            if (decoder_.eof())
                return true;
            this.title = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // content
            if (decoder_.eof())
                return true;
            this.content = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // desc
            if (decoder_.eof())
                return true;
            this.desc = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // limit_count
            if (decoder_.eof())
                return true;
            this.limit_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // pay_index
            if (decoder_.eof())
                return true;
            this.pay_index = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // show_type
            if (decoder_.eof())
                return true;
            this.show_type = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_first
            if (decoder_.eof())
                return true;
            this.is_first = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // give_token
            if (decoder_.eof())
                return true;
            this.give_token = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        H5ProductInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // id
            encoder.write_string(this.id);
            // title
            encoder.write_string(this.title);
            // content
            encoder.write_string(this.content);
            // desc
            encoder.write_string(this.desc);
            // limit_count
            encoder.write_fixuint32(this.limit_count);
            // pay_index
            encoder.write_string(this.pay_index);
            // show_type
            encoder.write_fixuint32(this.show_type);
            // is_first
            encoder.write_bool(this.is_first);
            // give_token
            encoder.write_fixuint32(this.give_token);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return H5ProductInfo;
    }());
    message.H5ProductInfo = H5ProductInfo;
    __reflect(H5ProductInfo.prototype, "message.H5ProductInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // 可领取奖励信息
    // struct H5ChargeRewardInfo
    ////////////////////////////////////////////////////////////////////////////////
    var H5ChargeRewardInfo = (function () {
        function H5ChargeRewardInfo() {
            this.index = 0; // 累计档位
            this.charge_sum = 0; // 累计额度
            this.is_reward = false; // 是否已经领取
            this.goods = []; // 道具信息(k:道具名字;v:道具数量)
            this.name = ""; // 礼包名字
        }
        H5ChargeRewardInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // index
            if (decoder_.eof())
                return true;
            this.index = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // charge_sum
            if (decoder_.eof())
                return true;
            this.charge_sum = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // is_reward
            if (decoder_.eof())
                return true;
            this.is_reward = decoder_.read_bool();
            if (decoder_.has_error())
                return false;
            // goods
            if (decoder_.eof())
                return true;
            var goods_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < goods_count; i++) {
                this.goods.push(new KVPair());
                if (!this.goods[i].parse_bytes(decoder_))
                    return false;
            }
            // name
            if (decoder_.eof())
                return true;
            this.name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            return true;
        };
        H5ChargeRewardInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // index
            encoder.write_fixuint32(this.index);
            // charge_sum
            encoder.write_fixuint32(this.charge_sum);
            // is_reward
            encoder.write_bool(this.is_reward);
            // goods
            encoder.write_fixuint32(Object.keys(this.goods).length);
            for (var k in this.goods) {
                if (!this.goods[k].to_bytes(encoder))
                    return false;
            }
            // name
            encoder.write_string(this.name);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return H5ChargeRewardInfo;
    }());
    message.H5ChargeRewardInfo = H5ChargeRewardInfo;
    __reflect(H5ChargeRewardInfo.prototype, "message.H5ChargeRewardInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // H5网页支付信息
    // struct H5RolePayInfo
    ////////////////////////////////////////////////////////////////////////////////
    var H5RolePayInfo = (function () {
        function H5RolePayInfo() {
            this.role_id = 0; // 角色Id
            this.user_id = 0; // 账号Id
            this.group_id = 0; // 分区Id
            this.role_name = ""; // 角色名字
            this.role_level = 0; // 角色等级
            this.vip_level = 0; // vip等级
            this.product_items = []; // 商品信息
            this.role_channel = ""; // 角色channel
            this.group_name = ""; // 分区名
            this.charge_sum = 0; // 累计充值额度(包括游戏中充值)
            this.charge_count = 0; // 累计充值次数(包括游戏中充值)
            this.charge_rewards = []; // 累计充值领取道具信息
            this.h5_oversea_coin = 0; // h5海外网页充值代币
        }
        H5RolePayInfo.prototype.parse_bytes = function (decoder) {
            var msglen = decoder.read_fixuint32();
            if (decoder.has_error() || (msglen > decoder.remain + 4))
                return false;
            var decoder_ = decoder.subdecoder(decoder.position, msglen - 4);
            if (!decoder.set_position(decoder.position + msglen - 4))
                return false;
            // role_id
            if (decoder_.eof())
                return true;
            this.role_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // user_id
            if (decoder_.eof())
                return true;
            this.user_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // group_id
            if (decoder_.eof())
                return true;
            this.group_id = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // role_name
            if (decoder_.eof())
                return true;
            this.role_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // role_level
            if (decoder_.eof())
                return true;
            this.role_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // vip_level
            if (decoder_.eof())
                return true;
            this.vip_level = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // product_items
            if (decoder_.eof())
                return true;
            var product_items_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < product_items_count; i++) {
                this.product_items.push(new H5ProductInfo());
                if (!this.product_items[i].parse_bytes(decoder_))
                    return false;
            }
            // role_channel
            if (decoder_.eof())
                return true;
            this.role_channel = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // group_name
            if (decoder_.eof())
                return true;
            this.group_name = decoder_.read_string();
            if (decoder_.has_error())
                return false;
            // charge_sum
            if (decoder_.eof())
                return true;
            this.charge_sum = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // charge_count
            if (decoder_.eof())
                return true;
            this.charge_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            // charge_rewards
            if (decoder_.eof())
                return true;
            var charge_rewards_count = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            for (var i = 0; i < charge_rewards_count; i++) {
                this.charge_rewards.push(new H5ChargeRewardInfo());
                if (!this.charge_rewards[i].parse_bytes(decoder_))
                    return false;
            }
            // h5_oversea_coin
            if (decoder_.eof())
                return true;
            this.h5_oversea_coin = decoder_.read_fixuint32();
            if (decoder_.has_error())
                return false;
            return true;
        };
        H5RolePayInfo.prototype.to_bytes = function (encoder) {
            var length = encoder.length;
            encoder.write_fixuint32(0);
            // role_id
            encoder.write_fixuint32(this.role_id);
            // user_id
            encoder.write_fixuint32(this.user_id);
            // group_id
            encoder.write_fixuint32(this.group_id);
            // role_name
            encoder.write_string(this.role_name);
            // role_level
            encoder.write_fixuint32(this.role_level);
            // vip_level
            encoder.write_fixuint32(this.vip_level);
            // product_items
            encoder.write_fixuint32(Object.keys(this.product_items).length);
            for (var k in this.product_items) {
                if (!this.product_items[k].to_bytes(encoder))
                    return false;
            }
            // role_channel
            encoder.write_string(this.role_channel);
            // group_name
            encoder.write_string(this.group_name);
            // charge_sum
            encoder.write_fixuint32(this.charge_sum);
            // charge_count
            encoder.write_fixuint32(this.charge_count);
            // charge_rewards
            encoder.write_fixuint32(Object.keys(this.charge_rewards).length);
            for (var k in this.charge_rewards) {
                if (!this.charge_rewards[k].to_bytes(encoder))
                    return false;
            }
            // h5_oversea_coin
            encoder.write_fixuint32(this.h5_oversea_coin);
            encoder.write_fixuint32(encoder.length - length, length);
            return true;
        };
        return H5RolePayInfo;
    }());
    message.H5RolePayInfo = H5RolePayInfo;
    __reflect(H5RolePayInfo.prototype, "message.H5RolePayInfo", ["aone.AoneBody"]);
    ////////////////////////////////////////////////////////////////////////////////
    // message register
    ////////////////////////////////////////////////////////////////////////////////
})(message || (message = {}));
